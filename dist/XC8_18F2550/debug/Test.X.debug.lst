

Microchip Technology PIC18 PRO Macro Assembler V1.44 build -154322312 
                                                                                               Sat Oct 21 16:21:44 2017

Microchip Technology Omniscient Code Generator v1.44 (PRO mode) build 201709140600
     1                           	processor	18F2550
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	pm
     5                           	psect	idataBANK0,global,class=CODE,delta=1,noexec
     6                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     9                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    10                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    11                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    12                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1,lowdata,noexec
    13                           	psect	bssBIGRAM,global,class=BIGRAM,space=1,delta=1,lowdata,noexec
    14                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    15                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    16                           	psect	text0,global,reloc=2,class=CODE,delta=1
    17                           	psect	text1,global,reloc=2,class=CODE,delta=1,group=1
    18                           	psect	text2,global,reloc=2,class=CODE,delta=1
    19                           	psect	text3,global,reloc=2,class=CODE,delta=1
    20                           	psect	text4,global,reloc=2,class=CODE,delta=1
    21                           	psect	text5,global,reloc=2,class=CODE,delta=1
    22                           	psect	text6,global,reloc=2,class=CODE,delta=1
    23                           	psect	text7,global,reloc=2,class=CODE,delta=1
    24                           	psect	text8,global,reloc=2,class=CODE,delta=1
    25                           	psect	text9,global,reloc=2,class=CODE,delta=1
    26                           	psect	text10,global,reloc=2,class=CODE,delta=1
    27                           	psect	text11,global,reloc=2,class=CODE,delta=1
    28                           	psect	text12,global,reloc=2,class=CODE,delta=1
    29                           	psect	text13,global,reloc=2,class=CODE,delta=1
    30                           	psect	text14,global,reloc=2,class=CODE,delta=1
    31                           	psect	text15,global,reloc=2,class=CODE,delta=1
    32                           	psect	text16,global,reloc=2,class=CODE,delta=1
    33                           	psect	text17,global,reloc=2,class=CODE,delta=1
    34                           	psect	text18,global,reloc=2,class=CODE,delta=1
    35                           	psect	text19,global,reloc=2,class=CODE,delta=1
    36                           	psect	text20,global,reloc=2,class=CODE,delta=1
    37                           	psect	text21,global,reloc=2,class=CODE,delta=1
    38                           	psect	text22,global,reloc=2,class=CODE,delta=1
    39                           	psect	text23,global,reloc=2,class=CODE,delta=1
    40                           	psect	text24,global,reloc=2,class=CODE,delta=1
    41                           	psect	text25,global,reloc=2,class=CODE,delta=1
    42                           	psect	text26,global,reloc=2,class=CODE,delta=1
    43                           	psect	text27,global,reloc=2,class=CODE,delta=1
    44                           	psect	text28,global,reloc=2,class=CODE,delta=1
    45                           	psect	text29,global,reloc=2,class=CODE,delta=1
    46                           	psect	text30,global,reloc=2,class=CODE,delta=1
    47                           	psect	text31,global,reloc=2,class=CODE,delta=1
    48                           	psect	text32,global,reloc=2,class=CODE,delta=1
    49                           	psect	text33,global,reloc=2,class=CODE,delta=1,group=1
    50                           	psect	text34,global,reloc=2,class=CODE,delta=1
    51                           	psect	text35,global,reloc=2,class=CODE,delta=1
    52                           	psect	text36,global,reloc=2,class=CODE,delta=1,group=1
    53                           	psect	text37,global,reloc=2,class=CODE,delta=1
    54                           	psect	text38,global,reloc=2,class=CODE,delta=1
    55                           	psect	text39,global,reloc=2,class=CODE,delta=1
    56                           	psect	text40,global,reloc=2,class=CODE,delta=1
    57                           	psect	text41,global,reloc=2,class=CODE,delta=1
    58                           	psect	text42,global,reloc=2,class=CODE,delta=1
    59                           	psect	text43,global,reloc=2,class=CODE,delta=1
    60                           	psect	text44,global,reloc=2,class=CODE,delta=1,group=1
    61                           	psect	text45,global,reloc=2,class=CODE,delta=1
    62                           	psect	text46,global,reloc=2,class=CODE,delta=1,group=1
    63                           	psect	text47,global,reloc=2,class=CODE,delta=1,group=1
    64                           	psect	text48,global,reloc=2,class=CODE,delta=1
    65                           	psect	text49,global,reloc=2,class=CODE,delta=1,group=1
    66                           	psect	text50,global,reloc=2,class=CODE,delta=1,group=1
    67                           	psect	text51,global,reloc=2,class=CODE,delta=1,group=1
    68                           	psect	text52,global,reloc=2,class=CODE,delta=1,group=1
    69                           	psect	text53,global,reloc=2,class=CODE,delta=1,group=1
    70                           	psect	text54,global,reloc=2,class=CODE,delta=1,group=1
    71                           	psect	text55,global,reloc=2,class=CODE,delta=1,group=1
    72                           	psect	text56,global,reloc=2,class=CODE,delta=1,group=1
    73                           	psect	text57,global,reloc=2,class=CODE,delta=1,group=1
    74                           	psect	text58,global,reloc=2,class=CODE,delta=1,group=1
    75                           	psect	text59,global,reloc=2,class=CODE,delta=1,group=1
    76                           	psect	text60,global,reloc=2,class=CODE,delta=1,group=1
    77                           	psect	text61,global,reloc=2,class=CODE,delta=1,group=1
    78                           	psect	text62,global,reloc=2,class=CODE,delta=1,group=1
    79                           	psect	text63,global,reloc=2,class=CODE,delta=1,group=1
    80                           	psect	text64,global,reloc=2,class=CODE,delta=1,group=1
    81                           	psect	text65,global,reloc=2,class=CODE,delta=1,group=1
    82                           	psect	text66,global,reloc=2,class=CODE,delta=1,group=1
    83                           	psect	text67,global,reloc=2,class=CODE,delta=1
    84                           	psect	text68,global,reloc=2,class=CODE,delta=1
    85                           	psect	text69,global,reloc=2,class=CODE,delta=1
    86                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    87                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    88                           	psect	text71,global,reloc=2,class=CODE,delta=1
    89                           	psect	text72,global,reloc=2,class=CODE,delta=1
    90                           	psect	text73,global,reloc=2,class=CODE,delta=1
    91                           	psect	text74,global,reloc=2,class=CODE,delta=1
    92                           	psect	text75,global,reloc=2,class=CODE,delta=1
    93                           	psect	text76,global,reloc=2,class=CODE,delta=1
    94                           	psect	text77,global,reloc=2,class=CODE,delta=1
    95                           	psect	text78,global,reloc=2,class=CODE,delta=1
    96                           	psect	text79,global,reloc=2,class=CODE,delta=1
    97                           	psect	text80,global,reloc=2,class=CODE,delta=1
    98                           	psect	text81,global,reloc=2,class=CODE,delta=1
    99                           	psect	text82,global,reloc=2,class=CODE,delta=1
   100                           	psect	text83,global,reloc=2,class=CODE,delta=1
   101                           	psect	text84,global,reloc=2,class=CODE,delta=1
   102                           	psect	text85,global,reloc=2,class=CODE,delta=1
   103                           	psect	text86,global,reloc=2,class=CODE,delta=1
   104                           	psect	text87,global,reloc=2,class=CODE,delta=1
   105                           	psect	text88,global,reloc=2,class=CODE,delta=1
   106                           	psect	text89,global,reloc=2,class=CODE,delta=1
   107                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
   108                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
   109                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
   110  0000                     
   111                           ; Version 1.44
   112                           ; Generated 14/09/2017 GMT
   113                           ; 
   114                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
   115                           ; All rights reserved.
   116                           ; 
   117                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
   118                           ; 
   119                           ; Redistribution and use in source and binary forms, with or without modification, are
   120                           ; permitted provided that the following conditions are met:
   121                           ; 
   122                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
   123                           ;        conditions and the following disclaimer.
   124                           ; 
   125                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
   126                           ;        of conditions and the following disclaimer in the documentation and/or other
   127                           ;        materials provided with the distribution.
   128                           ; 
   129                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   130                           ;        software without specific prior written permission.
   131                           ; 
   132                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   133                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   134                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   135                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   136                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   137                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   138                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   139                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   140                           ; 
   141                           ; 
   142                           ; Code-generator required, PIC18F2550 Definitions
   143                           ; 
   144                           ; SFR Addresses
   145  0000                     
   146                           	psect	idataBANK0
   147  00320C                     __pidataBANK0:
   148                           	opt stack 0
   149                           
   150                           ;initializer for __Digits
   151  00320C  77                 	db	119
   152  00320D  06                 	db	6
   153  00320E  B3                 	db	179
   154  00320F  97                 	db	151
   155  003210  C6                 	db	198
   156  003211  D5                 	db	213
   157  003212  F5                 	db	245
   158  003213  07                 	db	7
   159  003214  F7                 	db	247
   160  003215  D7                 	db	215
   161                           
   162                           	psect	smallconst
   163  000800                     __psmallconst:
   164                           	opt stack 0
   165  000800  00                 	db	0
   166  000801                     exp@coeff:
   167                           	opt stack 0
   168  000801  00                 	db	0
   169  000802  80                 	db	128
   170  000803  3F                 	db	63
   171  000804  72                 	db	114
   172  000805  31                 	db	49
   173  000806  3F                 	db	63
   174  000807  FE                 	db	254
   175  000808  75                 	db	117
   176  000809  3E                 	db	62
   177  00080A  58                 	db	88
   178  00080B  63                 	db	99
   179  00080C  3D                 	db	61
   180  00080D  95                 	db	149
   181  00080E  1D                 	db	29
   182  00080F  3C                 	db	60
   183  000810  C5                 	db	197
   184  000811  AE                 	db	174
   185  000812  3A                 	db	58
   186  000813  79                 	db	121
   187  000814  21                 	db	33
   188  000815  39                 	db	57
   189  000816  94                 	db	148
   190  000817  80                 	db	128
   191  000818  37                 	db	55
   192  000819  93                 	db	147
   193  00081A  A7                 	db	167
   194  00081B  35                 	db	53
   195  00081C  56                 	db	86
   196  00081D  15                 	db	21
   197  00081E  34                 	db	52
   198  00081F                     __end_ofexp@coeff:
   199                           	opt stack 0
   200  00081F                     log@coeff:
   201                           	opt stack 0
   202  00081F  00                 	db	0
   203  000820  00                 	db	0
   204  000821  00                 	db	0
   205  000822  00                 	db	0
   206  000823  80                 	db	128
   207  000824  3F                 	db	63
   208  000825  F0                 	db	240
   209  000826  FF                 	db	255
   210  000827  BE                 	db	190
   211  000828  E2                 	db	226
   212  000829  A9                 	db	169
   213  00082A  3E                 	db	62
   214  00082B  83                 	db	131
   215  00082C  76                 	db	118
   216  00082D  BE                 	db	190
   217  00082E  AE                 	db	174
   218  00082F  2B                 	db	43
   219  000830  3E                 	db	62
   220  000831  3C                 	db	60
   221  000832  C3                 	db	195
   222  000833  BD                 	db	189
   223  000834  D2                 	db	210
   224  000835  13                 	db	19
   225  000836  3D                 	db	61
   226  000837  78                 	db	120
   227  000838  D3                 	db	211
   228  000839  BB                 	db	187
   229  00083A                     __end_oflog@coeff:
   230                           	opt stack 0
   231  0000                     _SSPBUF	set	4041
   232  0000                     _SSPCON2	set	4037
   233  0000                     _SSPADD	set	4040
   234  0000                     _SSPCON1	set	4038
   235  0000                     _SSPSTAT	set	4039
   236  0000                     _PIE1bits	set	3997
   237  0000                     _SPBRG	set	4015
   238  0000                     _TMR1L	set	4046
   239  0000                     _TMR1H	set	4047
   240  0000                     _EECON2	set	4007
   241  0000                     _INTCONbits	set	4082
   242  0000                     _EEDATA	set	4008
   243  0000                     _EECON1bits	set	4006
   244  0000                     _EEADR	set	4009
   245  0000                     _ADCON1	set	4033
   246  0000                     _RCSTAbits	set	4011
   247  0000                     _RCREG	set	4014
   248  0000                     _PIR1bits	set	3998
   249  0000                     _PORTB	set	3969
   250  0000                     _LATC	set	3979
   251  0000                     _LATA	set	3977
   252  0000                     _LATB	set	3978
   253  0000                     _RCEN	set	32299
   254  0000                     _ACKEN	set	32300
   255  0000                     _ACKDT	set	32301
   256  0000                     _PEN	set	32298
   257  0000                     _SEN	set	32296
   258  0000                     _RW	set	32314
   259  0000                     _TRISB1	set	31897
   260  0000                     _TRISB0	set	31896
   261  0000                     _TX9	set	32102
   262  0000                     _TXEN	set	32101
   263  0000                     _RX9	set	32094
   264  0000                     _SPEN	set	32095
   265  0000                     _SYNC	set	32100
   266  0000                     _TRISC6	set	31910
   267  0000                     _TRISC7	set	31911
   268  0000                     _BRGH	set	32098
   269  0000                     _RCIE	set	31981
   270  0000                     _RCIP	set	31997
   271  0000                     _RCIF	set	31989
   272  0000                     _TRISA4	set	31892
   273  0000                     _TRISA3	set	31891
   274  0000                     _TRISA2	set	31890
   275  0000                     _TMR1IE	set	31976
   276  0000                     _TMR1CS	set	32361
   277  0000                     _T1SYNC	set	32362
   278  0000                     _T1OSCEN	set	32363
   279  0000                     _T1CKPS0	set	32364
   280  0000                     _TMR1ON	set	32360
   281  0000                     _TMR0ON	set	32431
   282  0000                     _TMR0IE	set	32661
   283  0000                     _T08BIT	set	32430
   284  0000                     _T0CS	set	32429
   285  0000                     _PSA	set	32427
   286  0000                     _T0PS2	set	32426
   287  0000                     _T0PS1	set	32425
   288  0000                     _T0PS0	set	32424
   289  0000                     _TRISB3	set	31899
   290  0000                     _TRISB2	set	31898
   291  0000                     _TRISB4	set	31900
   292  0000                     _TRISC2	set	31906
   293  0000                     _TRISA5	set	31893
   294  0000                     _GIE	set	32663
   295  0000                     _PEIE	set	32662
   296  0000                     _CREN	set	32092
   297  0000                     _LATB4	set	31828
   298  0000                     _TMR1IF	set	31984
   299  0000                     _TMR0IF	set	32658
   300                           
   301                           ; #config settings
   302  00083A  00                 	db	0	; dummy byte at the end
   303  0000                     
   304                           	psect	cinit
   305  002704                     __pcinit:
   306                           	opt stack 0
   307  002704                     start_initialization:
   308                           	opt stack 0
   309  002704                     __initialization:
   310                           	opt stack 0
   311                           
   312                           ; Initialize objects allocated to BANK0 (10 bytes)
   313                           ; load TBLPTR registers with __pidataBANK0
   314  002704  0E0C               	movlw	low __pidataBANK0
   315  002706  6EF6               	movwf	tblptrl,c
   316  002708  0E32               	movlw	high __pidataBANK0
   317  00270A  6EF7               	movwf	tblptrh,c
   318  00270C  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   319  00270E  6EF8               	movwf	tblptru,c
   320  002710  EE00  F0F2         	lfsr	0,__pdataBANK0
   321  002714  EE10 F00A          	lfsr	1,10
   322  002718                     copy_data0:
   323  002718  0009               	tblrd		*+
   324  00271A  CFF5 FFEE          	movff	tablat,postinc0
   325  00271E  50E5               	movf	postdec1,w,c
   326  002720  50E1               	movf	fsr1l,w,c
   327  002722  E1FA               	bnz	copy_data0
   328                           
   329                           ; Clear objects allocated to BIGRAM (648 bytes)
   330  002724  EE02  F0D9         	lfsr	0,__pbssBIGRAM
   331  002728  EE12 F088          	lfsr	1,648
   332  00272C                     clear_0:
   333  00272C  6AEE               	clrf	postinc0,c
   334  00272E  50E5               	movf	postdec1,w,c
   335  002730  50E1               	movf	fsr1l,w,c
   336  002732  E1FC               	bnz	clear_0
   337  002734  50E2               	movf	fsr1h,w,c
   338  002736  E1FA               	bnz	clear_0
   339                           
   340                           ; Clear objects allocated to BANK2 (217 bytes)
   341  002738  EE02  F000         	lfsr	0,__pbssBANK2
   342  00273C  0ED9               	movlw	217
   343  00273E                     clear_1:
   344  00273E  6AEE               	clrf	postinc0,c
   345  002740  06E8               	decf	wreg,f,c
   346  002742  E1FD               	bnz	clear_1
   347                           
   348                           ; Clear objects allocated to BANK1 (169 bytes)
   349  002744  EE01  F000         	lfsr	0,__pbssBANK1
   350  002748  0EA9               	movlw	169
   351  00274A                     clear_2:
   352  00274A  6AEE               	clrf	postinc0,c
   353  00274C  06E8               	decf	wreg,f,c
   354  00274E  E1FD               	bnz	clear_2
   355                           
   356                           ; Clear objects allocated to BANK0 (19 bytes)
   357  002750  EE00  F0DF         	lfsr	0,__pbssBANK0
   358  002754  0E13               	movlw	19
   359  002756                     clear_3:
   360  002756  6AEE               	clrf	postinc0,c
   361  002758  06E8               	decf	wreg,f,c
   362  00275A  E1FD               	bnz	clear_3
   363                           
   364                           ; Clear objects allocated to COMRAM (6 bytes)
   365  00275C  6A5E               	clrf	(__pbssCOMRAM+5)& (0+255),c
   366  00275E  6A5D               	clrf	(__pbssCOMRAM+4)& (0+255),c
   367  002760  6A5C               	clrf	(__pbssCOMRAM+3)& (0+255),c
   368  002762  6A5B               	clrf	(__pbssCOMRAM+2)& (0+255),c
   369  002764  6A5A               	clrf	(__pbssCOMRAM+1)& (0+255),c
   370  002766  6A59               	clrf	__pbssCOMRAM& (0+255),c
   371  002768                     end_of_initialization:
   372                           	opt stack 0
   373  002768                     __end_of__initialization:
   374                           	opt stack 0
   375  002768  905F               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   376  00276A  925F               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   377  00276C  0E00               	movlw	low (__Lmediumconst shr (0+16))
   378  00276E  6EF8               	movwf	tblptru,c
   379  002770  0100               	movlb	0
   380  002772  EF36  F006         	goto	_main	;jump to C main() function
   381                           tblptru	equ	0xFF8
   382                           tblptrh	equ	0xFF7
   383                           tblptrl	equ	0xFF6
   384                           tablat	equ	0xFF5
   385                           postinc0	equ	0xFEE
   386                           wreg	equ	0xFE8
   387                           postdec1	equ	0xFE5
   388                           fsr1h	equ	0xFE2
   389                           fsr1l	equ	0xFE1
   390                           
   391                           	psect	bssCOMRAM
   392  000059                     __pbssCOMRAM:
   393                           	opt stack 0
   394  000059                     __Timer:
   395                           	opt stack 0
   396  000059                     	ds	6
   397                           tblptru	equ	0xFF8
   398                           tblptrh	equ	0xFF7
   399                           tblptrl	equ	0xFF6
   400                           tablat	equ	0xFF5
   401                           postinc0	equ	0xFEE
   402                           wreg	equ	0xFE8
   403                           postdec1	equ	0xFE5
   404                           fsr1h	equ	0xFE2
   405                           fsr1l	equ	0xFE1
   406                           
   407                           	psect	bssBANK0
   408  0000DF                     __pbssBANK0:
   409                           	opt stack 0
   410  0000DF                     __Saving:
   411                           	opt stack 0
   412  0000DF                     	ds	1
   413  0000E0                     __Modified:
   414                           	opt stack 0
   415  0000E0                     	ds	1
   416  0000E1                     __DigiPot:
   417                           	opt stack 0
   418  0000E1                     	ds	17
   419                           tblptru	equ	0xFF8
   420                           tblptrh	equ	0xFF7
   421                           tblptrl	equ	0xFF6
   422                           tablat	equ	0xFF5
   423                           postinc0	equ	0xFEE
   424                           wreg	equ	0xFE8
   425                           postdec1	equ	0xFE5
   426                           fsr1h	equ	0xFE2
   427                           fsr1l	equ	0xFE1
   428                           
   429                           	psect	dataBANK0
   430  0000F2                     __pdataBANK0:
   431                           	opt stack 0
   432  0000F2                     __Digits:
   433                           	opt stack 0
   434  0000F2                     	ds	10
   435                           tblptru	equ	0xFF8
   436                           tblptrh	equ	0xFF7
   437                           tblptrl	equ	0xFF6
   438                           tablat	equ	0xFF5
   439                           postinc0	equ	0xFEE
   440                           wreg	equ	0xFE8
   441                           postdec1	equ	0xFE5
   442                           fsr1h	equ	0xFE2
   443                           fsr1l	equ	0xFE1
   444                           
   445                           	psect	bssBANK1
   446  000100                     __pbssBANK1:
   447                           	opt stack 0
   448  000100                     __Hub:
   449                           	opt stack 0
   450  000100                     	ds	157
   451  00019D                     __Config:
   452                           	opt stack 0
   453  00019D                     	ds	12
   454                           tblptru	equ	0xFF8
   455                           tblptrh	equ	0xFF7
   456                           tblptrl	equ	0xFF6
   457                           tablat	equ	0xFF5
   458                           postinc0	equ	0xFEE
   459                           wreg	equ	0xFE8
   460                           postdec1	equ	0xFE5
   461                           fsr1h	equ	0xFE2
   462                           fsr1l	equ	0xFE1
   463                           
   464                           	psect	bssBANK2
   465  000200                     __pbssBANK2:
   466                           	opt stack 0
   467  000200                     __Display:
   468                           	opt stack 0
   469  000200                     	ds	217
   470                           tblptru	equ	0xFF8
   471                           tblptrh	equ	0xFF7
   472                           tblptrl	equ	0xFF6
   473                           tablat	equ	0xFF5
   474                           postinc0	equ	0xFEE
   475                           wreg	equ	0xFE8
   476                           postdec1	equ	0xFE5
   477                           fsr1h	equ	0xFE2
   478                           fsr1l	equ	0xFE1
   479                           
   480                           	psect	bssBIGRAM
   481  0002D9                     __pbssBIGRAM:
   482                           	opt stack 0
   483  0002D9                     __MidiOutput:
   484                           	opt stack 0
   485  0002D9                     	ds	324
   486  00041D                     __MidiInput:
   487                           	opt stack 0
   488  00041D                     	ds	324
   489                           tblptru	equ	0xFF8
   490                           tblptrh	equ	0xFF7
   491                           tblptrl	equ	0xFF6
   492                           tablat	equ	0xFF5
   493                           postinc0	equ	0xFEE
   494                           wreg	equ	0xFE8
   495                           postdec1	equ	0xFE5
   496                           fsr1h	equ	0xFE2
   497                           fsr1l	equ	0xFE1
   498                           
   499                           	psect	cstackBANK0
   500  000060                     __pcstackBANK0:
   501                           	opt stack 0
   502  000060                     ??_I2C_Wait:
   503  000060                     ?_memcmp:
   504                           	opt stack 0
   505  000060                     ?___ftpack:
   506                           	opt stack 0
   507  000060                     ?_frexp:
   508                           	opt stack 0
   509  000060                     ?___ftneg:
   510                           	opt stack 0
   511  000060                     ?___lldiv:
   512                           	opt stack 0
   513  000060                     Midi_Read@AData:
   514                           	opt stack 0
   515  000060                     ___lbdiv@divisor:
   516                           	opt stack 0
   517  000060                     Persistant_ReadInternalMemory@AAddress:
   518                           	opt stack 0
   519  000060                     InitPin@APin:
   520                           	opt stack 0
   521  000060                     Midi_ResetBuffer@AMidiBuffer:
   522                           	opt stack 0
   523  000060                     memcmp@s1:
   524                           	opt stack 0
   525  000060                     memcpy@d1:
   526                           	opt stack 0
   527  000060                     ___ftpack@arg:
   528                           	opt stack 0
   529  000060                     ___ftge@ff1:
   530                           	opt stack 0
   531  000060                     ___ftneg@f1:
   532                           	opt stack 0
   533  000060                     frexp@value:
   534                           	opt stack 0
   535  000060                     ___lldiv@dividend:
   536                           	opt stack 0
   537  000060                     LatchOn@AIO:
   538                           	opt stack 0
   539  000060                     LatchOff@AIO:
   540                           	opt stack 0
   541  000060                     ClockUp@AIO:
   542                           	opt stack 0
   543  000060                     ClockDown@AIO:
   544                           	opt stack 0
   545                           
   546                           ; 15 bytes @ 0x0
   547  000060                     	ds	1
   548  000061                     ___lbdiv@dividend:
   549                           	opt stack 0
   550  000061                     Midi_Read@AMidiBuffer:
   551                           	opt stack 0
   552                           
   553                           ; 2 bytes @ 0x1
   554  000061                     	ds	1
   555  000062                     ??_Midi_ResetBuffer:
   556  000062                     ??_InitPin:
   557  000062                     ___lbdiv@counter:
   558                           	opt stack 0
   559  000062                     Persistant_WriteInternalMemory@AAddress:
   560                           	opt stack 0
   561  000062                     I2C_Wait@LTimeOut:
   562                           	opt stack 0
   563  000062                     memcmp@s2:
   564                           	opt stack 0
   565  000062                     memcpy@s1:
   566                           	opt stack 0
   567                           
   568                           ; 2 bytes @ 0x2
   569  000062                     	ds	1
   570  000063                     ___ftpack@exp:
   571                           	opt stack 0
   572  000063                     ___lbdiv@quotient:
   573                           	opt stack 0
   574  000063                     frexp@eptr:
   575                           	opt stack 0
   576  000063                     ___ftge@ff2:
   577                           	opt stack 0
   578                           
   579                           ; 3 bytes @ 0x3
   580  000063                     	ds	1
   581  000064                     ??_frexp:
   582  000064                     Persistant_WriteInternalMemory@AData:
   583                           	opt stack 0
   584  000064                     Midi_ResetBuffer@j:
   585                           	opt stack 0
   586  000064                     I2C_Wait@LResult:
   587                           	opt stack 0
   588  000064                     ___ftpack@sign:
   589                           	opt stack 0
   590  000064                     ___lbmod@divisor:
   591                           	opt stack 0
   592  000064                     InitConnector@AConnector:
   593                           	opt stack 0
   594  000064                     memcmp@n:
   595                           	opt stack 0
   596  000064                     memcpy@n:
   597                           	opt stack 0
   598  000064                     ___lldiv@divisor:
   599                           	opt stack 0
   600                           
   601                           ; 4 bytes @ 0x4
   602  000064                     	ds	1
   603  000065                     ??___ftpack:
   604  000065                     Persistant_WriteInternalMemory@LState:
   605                           	opt stack 0
   606  000065                     Midi_ResetBuffer@i:
   607                           	opt stack 0
   608  000065                     I2C_Ack@AAck:
   609                           	opt stack 0
   610  000065                     I2C_Write@b:
   611                           	opt stack 0
   612  000065                     ___lbmod@dividend:
   613                           	opt stack 0
   614                           
   615                           ; 1 bytes @ 0x5
   616  000065                     	ds	1
   617  000066                     ??_memcmp:
   618  000066                     ??___ftge:
   619  000066                     I2C_Read@LData:
   620                           	opt stack 0
   621  000066                     ___lbmod@counter:
   622                           	opt stack 0
   623  000066                     Persistant_ControlByte@AAddress:
   624                           	opt stack 0
   625  000066                     memcpy@d:
   626                           	opt stack 0
   627                           
   628                           ; 2 bytes @ 0x6
   629  000066                     	ds	1
   630  000067                     ___lbmod@rem:
   631                           	opt stack 0
   632                           
   633                           ; 1 bytes @ 0x7
   634  000067                     	ds	1
   635  000068                     ?___altoft:
   636                           	opt stack 0
   637  000068                     ?___awtoft:
   638                           	opt stack 0
   639  000068                     ?___lbtoft:
   640                           	opt stack 0
   641  000068                     ?___lltoft:
   642                           	opt stack 0
   643  000068                     Persistant_ControlByte@ARead:
   644                           	opt stack 0
   645  000068                     Display_ProcessData@AValues:
   646                           	opt stack 0
   647  000068                     ___awtoft@c:
   648                           	opt stack 0
   649  000068                     memcpy@s:
   650                           	opt stack 0
   651  000068                     ___altoft@c:
   652                           	opt stack 0
   653  000068                     ___lldiv@quotient:
   654                           	opt stack 0
   655  000068                     ___lltoft@c:
   656                           	opt stack 0
   657                           
   658                           ; 4 bytes @ 0x8
   659  000068                     	ds	1
   660  000069                     ??_Persistant_ControlByte:
   661                           
   662                           ; 1 bytes @ 0x9
   663  000069                     	ds	1
   664  00006A                     Display_ProcessData@ALoaded:
   665                           	opt stack 0
   666  00006A                     memcpy@tmp:
   667                           	opt stack 0
   668                           
   669                           ; 1 bytes @ 0xA
   670  00006A                     	ds	1
   671  00006B                     Display_ProcessData@APushed:
   672                           	opt stack 0
   673  00006B                     ___awtoft@sign:
   674                           	opt stack 0
   675  00006B                     ___lbtoft@c:
   676                           	opt stack 0
   677                           
   678                           ; 1 bytes @ 0xB
   679  00006B                     	ds	1
   680  00006C                     ??_Display_ProcessData:
   681  00006C                     ??___altoft:
   682  00006C                     ??___lltoft:
   683  00006C                     ___lldiv@counter:
   684                           	opt stack 0
   685  00006C                     Persistant_Address@AAddress:
   686                           	opt stack 0
   687                           
   688                           ; 2 bytes @ 0xC
   689  00006C                     	ds	1
   690  00006D                     ??_Midi_Init:
   691                           
   692                           ; 1 bytes @ 0xD
   693  00006D                     	ds	1
   694  00006E                     Persistant_Address@ARead:
   695                           	opt stack 0
   696                           
   697                           ; 1 bytes @ 0xE
   698  00006E                     	ds	1
   699  00006F                     Persistant_ReadExternalMemory@AAddress:
   700                           	opt stack 0
   701  00006F                     WriteChar@AIO:
   702                           	opt stack 0
   703  00006F                     ReadBit@AIO:
   704                           	opt stack 0
   705                           
   706                           ; 15 bytes @ 0xF
   707  00006F                     	ds	1
   708  000070                     ___altoft@exp:
   709                           	opt stack 0
   710  000070                     ___lltoft@exp:
   711                           	opt stack 0
   712                           
   713                           ; 1 bytes @ 0x10
   714  000070                     	ds	1
   715  000071                     Persistant_ReadExternalMemory@LResult:
   716                           	opt stack 0
   717  000071                     ___altoft@sign:
   718                           	opt stack 0
   719  000071                     Midi_Init@LBaudRate:
   720                           	opt stack 0
   721                           
   722                           ; 4 bytes @ 0x11
   723  000071                     	ds	1
   724  000072                     ?___ftmul:
   725                           	opt stack 0
   726  000072                     Persistant_WriteExternalMemory@AAddress:
   727                           	opt stack 0
   728  000072                     ___ftmul@f1:
   729                           	opt stack 0
   730                           
   731                           ; 3 bytes @ 0x12
   732  000072                     	ds	1
   733  000073                     Display_ProcessData@ADigitalValue:
   734                           	opt stack 0
   735                           
   736                           ; 1 bytes @ 0x13
   737  000073                     	ds	1
   738  000074                     Display_ProcessData@LData:
   739                           	opt stack 0
   740  000074                     Persistant_WriteExternalMemory@AData:
   741                           	opt stack 0
   742                           
   743                           ; 1 bytes @ 0x14
   744  000074                     	ds	1
   745  000075                     Display_ProcessData@LBit:
   746                           	opt stack 0
   747  000075                     ___ftmul@f2:
   748                           	opt stack 0
   749  000075                     Midi_Init@LPeriod:
   750                           	opt stack 0
   751                           
   752                           ; 4 bytes @ 0x15
   753  000075                     	ds	1
   754  000076                     Display_ProcessData@iDataIndex:
   755                           	opt stack 0
   756                           
   757                           ; 1 bytes @ 0x16
   758  000076                     	ds	1
   759  000077                     Display_ProcessData@k:
   760                           	opt stack 0
   761                           
   762                           ; 2 bytes @ 0x17
   763  000077                     	ds	1
   764  000078                     ??___ftmul:
   765                           
   766                           ; 1 bytes @ 0x18
   767  000078                     	ds	1
   768  000079                     Display_ProcessData@i_648:
   769                           	opt stack 0
   770                           
   771                           ; 2 bytes @ 0x19
   772  000079                     	ds	2
   773  00007B                     ___ftmul@exp:
   774                           	opt stack 0
   775  00007B                     Display_ProcessData@i:
   776                           	opt stack 0
   777                           
   778                           ; 2 bytes @ 0x1B
   779  00007B                     	ds	1
   780  00007C                     ___ftmul@sign:
   781                           	opt stack 0
   782                           
   783                           ; 1 bytes @ 0x1C
   784  00007C                     	ds	1
   785  00007D                     Display_ProcessData@i_646:
   786                           	opt stack 0
   787  00007D                     ___ftmul@f3_as_product:
   788                           	opt stack 0
   789                           
   790                           ; 3 bytes @ 0x1D
   791  00007D                     	ds	1
   792  00007E                     ??_WriteChar:
   793  00007E                     ??_ReadBit:
   794                           
   795                           ; 1 bytes @ 0x1E
   796  00007E                     	ds	1
   797  00007F                     Display_ProcessData@j:
   798                           	opt stack 0
   799                           
   800                           ; 2 bytes @ 0x1F
   801  00007F                     	ds	1
   802  000080                     ?___ftdiv:
   803                           	opt stack 0
   804  000080                     ReadBit@LBit:
   805                           	opt stack 0
   806  000080                     ___ftdiv@f1:
   807                           	opt stack 0
   808                           
   809                           ; 3 bytes @ 0x20
   810  000080                     	ds	1
   811  000081                     WriteChar@AChar:
   812                           	opt stack 0
   813  000081                     ReadBitArray@AData:
   814                           	opt stack 0
   815  000081                     Display_ProcessData@i_652:
   816                           	opt stack 0
   817                           
   818                           ; 2 bytes @ 0x21
   819  000081                     	ds	1
   820  000082                     WriteChar@i:
   821                           	opt stack 0
   822  000082                     ReadBitArray@AIO:
   823                           	opt stack 0
   824                           
   825                           ; 15 bytes @ 0x22
   826  000082                     	ds	1
   827  000083                     ___ftdiv@f2:
   828                           	opt stack 0
   829                           
   830                           ; 3 bytes @ 0x23
   831  000083                     	ds	1
   832  000084                     WriteData@AData:
   833                           	opt stack 0
   834                           
   835                           ; 2 bytes @ 0x24
   836  000084                     	ds	2
   837  000086                     ??___ftdiv:
   838  000086                     WriteData@ASize:
   839                           	opt stack 0
   840                           
   841                           ; 1 bytes @ 0x26
   842  000086                     	ds	1
   843  000087                     WriteData@AIO:
   844                           	opt stack 0
   845                           
   846                           ; 15 bytes @ 0x27
   847  000087                     	ds	2
   848  000089                     ___ftdiv@cntr:
   849                           	opt stack 0
   850                           
   851                           ; 1 bytes @ 0x29
   852  000089                     	ds	1
   853  00008A                     ___ftdiv@f3:
   854                           	opt stack 0
   855                           
   856                           ; 3 bytes @ 0x2A
   857  00008A                     	ds	3
   858  00008D                     ___ftdiv@exp:
   859                           	opt stack 0
   860                           
   861                           ; 1 bytes @ 0x2D
   862  00008D                     	ds	1
   863  00008E                     ___ftdiv@sign:
   864                           	opt stack 0
   865                           
   866                           ; 1 bytes @ 0x2E
   867  00008E                     	ds	1
   868  00008F                     ?___ftadd:
   869                           	opt stack 0
   870  00008F                     ?___fttol:
   871                           	opt stack 0
   872  00008F                     ___ftadd@f1:
   873                           	opt stack 0
   874  00008F                     ___fttol@f1:
   875                           	opt stack 0
   876                           
   877                           ; 3 bytes @ 0x2F
   878  00008F                     	ds	2
   879  000091                     ??_ReadBitArray:
   880                           
   881                           ; 1 bytes @ 0x31
   882  000091                     	ds	1
   883  000092                     ReadBitArray@i:
   884                           	opt stack 0
   885  000092                     ___ftadd@f2:
   886                           	opt stack 0
   887                           
   888                           ; 3 bytes @ 0x32
   889  000092                     	ds	1
   890  000093                     ??___fttol:
   891                           
   892                           ; 1 bytes @ 0x33
   893  000093                     	ds	1
   894  000094                     Hub_ReadSwitch@LBitArray:
   895                           	opt stack 0
   896                           
   897                           ; 24 bytes @ 0x34
   898  000094                     	ds	1
   899  000095                     ??___ftadd:
   900                           
   901                           ; 1 bytes @ 0x35
   902  000095                     	ds	1
   903  000096                     WriteData@i:
   904                           	opt stack 0
   905                           
   906                           ; 2 bytes @ 0x36
   907  000096                     	ds	2
   908  000098                     ___ftadd@sign:
   909                           	opt stack 0
   910  000098                     ___fttol@sign1:
   911                           	opt stack 0
   912                           
   913                           ; 1 bytes @ 0x38
   914  000098                     	ds	1
   915  000099                     ___ftadd@exp2:
   916                           	opt stack 0
   917  000099                     ___fttol@lval:
   918                           	opt stack 0
   919                           
   920                           ; 4 bytes @ 0x39
   921  000099                     	ds	1
   922  00009A                     ___ftadd@exp1:
   923                           	opt stack 0
   924                           
   925                           ; 1 bytes @ 0x3A
   926  00009A                     	ds	1
   927  00009B                     ?___ftsub:
   928                           	opt stack 0
   929  00009B                     ?_eval_poly:
   930                           	opt stack 0
   931  00009B                     ___ftsub@f1:
   932                           	opt stack 0
   933  00009B                     eval_poly@x:
   934                           	opt stack 0
   935                           
   936                           ; 3 bytes @ 0x3B
   937  00009B                     	ds	2
   938  00009D                     ___fttol@exp1:
   939                           	opt stack 0
   940                           
   941                           ; 1 bytes @ 0x3D
   942  00009D                     	ds	1
   943  00009E                     ?_floor:
   944                           	opt stack 0
   945  00009E                     Zip@AZip:
   946                           	opt stack 0
   947  00009E                     UnZip@AZip:
   948                           	opt stack 0
   949  00009E                     eval_poly@d:
   950                           	opt stack 0
   951  00009E                     Sequencer_StartTimer@ATime:
   952                           	opt stack 0
   953  00009E                     ___ftsub@f2:
   954                           	opt stack 0
   955  00009E                     floor@x:
   956                           	opt stack 0
   957  00009E                     I2C_Init@AFrequency:
   958                           	opt stack 0
   959                           
   960                           ; 4 bytes @ 0x3E
   961  00009E                     	ds	1
   962  00009F                     ??_Zip:
   963  00009F                     ??_UnZip:
   964  00009F                     eval_poly@n:
   965                           	opt stack 0
   966                           
   967                           ; 2 bytes @ 0x3F
   968  00009F                     	ds	2
   969  0000A1                     ??_eval_poly:
   970  0000A1                     Sequencer_StartTimer@ALoop:
   971                           	opt stack 0
   972  0000A1                     floor@i:
   973                           	opt stack 0
   974                           
   975                           ; 3 bytes @ 0x41
   976  0000A1                     	ds	1
   977  0000A2                     UnZip@LValue:
   978                           	opt stack 0
   979  0000A2                     I2C_Init@LRatio:
   980                           	opt stack 0
   981  0000A2                     eval_poly@res:
   982                           	opt stack 0
   983                           
   984                           ; 3 bytes @ 0x42
   985  0000A2                     	ds	1
   986  0000A3                     UnZip@LIndex:
   987                           	opt stack 0
   988                           
   989                           ; 1 bytes @ 0x43
   990  0000A3                     	ds	1
   991  0000A4                     Zip@LBytes:
   992                           	opt stack 0
   993  0000A4                     UnZip@i:
   994                           	opt stack 0
   995  0000A4                     floor@expon:
   996                           	opt stack 0
   997                           
   998                           ; 2 bytes @ 0x44
   999  0000A4                     	ds	1
  1000  0000A5                     ?_log:
  1001                           	opt stack 0
  1002  0000A5                     ?_ldexp:
  1003                           	opt stack 0
  1004  0000A5                     Zip@LIndex:
  1005                           	opt stack 0
  1006  0000A5                     ldexp@value:
  1007                           	opt stack 0
  1008  0000A5                     log@x:
  1009                           	opt stack 0
  1010                           
  1011                           ; 3 bytes @ 0x45
  1012  0000A5                     	ds	1
  1013  0000A6                     Zip@i:
  1014                           	opt stack 0
  1015  0000A6                     UnZip@j:
  1016                           	opt stack 0
  1017                           
  1018                           ; 2 bytes @ 0x46
  1019  0000A6                     	ds	2
  1020  0000A8                     Persistant_LoadBuffer@ABuffer:
  1021                           	opt stack 0
  1022  0000A8                     Zip@i_1425:
  1023                           	opt stack 0
  1024  0000A8                     ldexp@newexp:
  1025                           	opt stack 0
  1026  0000A8                     log@exponent:
  1027                           	opt stack 0
  1028                           
  1029                           ; 2 bytes @ 0x48
  1030  0000A8                     	ds	2
  1031  0000AA                     ??_Persistant_LoadBuffer:
  1032  0000AA                     ??_ldexp:
  1033  0000AA                     Zip@j:
  1034                           	opt stack 0
  1035                           
  1036                           ; 2 bytes @ 0x4A
  1037  0000AA                     	ds	2
  1038  0000AC                     ?_exp:
  1039                           	opt stack 0
  1040  0000AC                     Hub_Init@i:
  1041                           	opt stack 0
  1042  0000AC                     exp@x:
  1043                           	opt stack 0
  1044  0000AC                     Persistant_SaveBuffer@ABuffer:
  1045                           	opt stack 0
  1046                           
  1047                           ; 12 bytes @ 0x4C
  1048  0000AC                     	ds	2
  1049  0000AE                     Persistant_LoadBuffer@LZip:
  1050                           	opt stack 0
  1051                           
  1052                           ; 10 bytes @ 0x4E
  1053  0000AE                     	ds	1
  1054  0000AF                     _exp$2168:
  1055                           	opt stack 0
  1056                           
  1057                           ; 3 bytes @ 0x4F
  1058  0000AF                     	ds	3
  1059  0000B2                     exp@exponent:
  1060                           	opt stack 0
  1061                           
  1062                           ; 2 bytes @ 0x52
  1063  0000B2                     	ds	2
  1064  0000B4                     exp@sign:
  1065                           	opt stack 0
  1066                           
  1067                           ; 1 bytes @ 0x54
  1068  0000B4                     	ds	1
  1069  0000B5                     ?_pow:
  1070                           	opt stack 0
  1071  0000B5                     pow@x:
  1072                           	opt stack 0
  1073                           
  1074                           ; 3 bytes @ 0x55
  1075  0000B5                     	ds	3
  1076  0000B8                     ??_Persistant_SaveBuffer:
  1077  0000B8                     Persistant_LoadBuffer@LChannel:
  1078                           	opt stack 0
  1079  0000B8                     pow@y:
  1080                           	opt stack 0
  1081                           
  1082                           ; 3 bytes @ 0x58
  1083  0000B8                     	ds	1
  1084  0000B9                     Persistant_LoadBuffer@i:
  1085                           	opt stack 0
  1086                           
  1087                           ; 1 bytes @ 0x59
  1088  0000B9                     	ds	1
  1089  0000BA                     Load@LBuffer:
  1090                           	opt stack 0
  1091                           
  1092                           ; 12 bytes @ 0x5A
  1093  0000BA                     	ds	1
  1094  0000BB                     Persistant_SaveBuffer@LResult:
  1095                           	opt stack 0
  1096  0000BB                     _pow$2166:
  1097                           	opt stack 0
  1098                           
  1099                           ; 3 bytes @ 0x5B
  1100  0000BB                     	ds	1
  1101  0000BC                     Persistant_SaveBuffer@LZip:
  1102                           	opt stack 0
  1103                           
  1104                           ; 10 bytes @ 0x5C
  1105  0000BC                     	ds	2
  1106  0000BE                     _pow$2167:
  1107                           	opt stack 0
  1108                           
  1109                           ; 3 bytes @ 0x5E
  1110  0000BE                     	ds	3
  1111  0000C1                     pow@sign:
  1112                           	opt stack 0
  1113                           
  1114                           ; 1 bytes @ 0x61
  1115  0000C1                     	ds	1
  1116  0000C2                     pow@yi:
  1117                           	opt stack 0
  1118                           
  1119                           ; 4 bytes @ 0x62
  1120  0000C2                     	ds	4
  1121  0000C6                     Load@AChannel:
  1122                           	opt stack 0
  1123  0000C6                     Persistant_SaveBuffer@i:
  1124                           	opt stack 0
  1125  0000C6                     _Display_Init$2163:
  1126                           	opt stack 0
  1127  0000C6                     InitDigiPot@LTickCount:
  1128                           	opt stack 0
  1129                           
  1130                           ; 4 bytes @ 0x66
  1131  0000C6                     	ds	1
  1132  0000C7                     Load@i:
  1133                           	opt stack 0
  1134                           
  1135                           ; 2 bytes @ 0x67
  1136  0000C7                     	ds	2
  1137  0000C9                     Load@i_420:
  1138                           	opt stack 0
  1139  0000C9                     _Display_Init$2164:
  1140                           	opt stack 0
  1141                           
  1142                           ; 3 bytes @ 0x69
  1143  0000C9                     	ds	1
  1144  0000CA                     InitDigiPot@LPeriod:
  1145                           	opt stack 0
  1146                           
  1147                           ; 3 bytes @ 0x6A
  1148  0000CA                     	ds	2
  1149  0000CC                     Display_Init@i:
  1150                           	opt stack 0
  1151                           
  1152                           ; 2 bytes @ 0x6C
  1153  0000CC                     	ds	1
  1154  0000CD                     _InitDigiPot$2165:
  1155                           	opt stack 0
  1156                           
  1157                           ; 3 bytes @ 0x6D
  1158  0000CD                     	ds	1
  1159  0000CE                     Display_Init@i_638:
  1160                           	opt stack 0
  1161                           
  1162                           ; 2 bytes @ 0x6E
  1163  0000CE                     	ds	2
  1164  0000D0                     InitDigiPot@LPrescaler:
  1165                           	opt stack 0
  1166                           
  1167                           ; 1 bytes @ 0x70
  1168  0000D0                     	ds	1
  1169  0000D1                     InitApp@test:
  1170                           	opt stack 0
  1171                           
  1172                           ; 1 bytes @ 0x71
  1173  0000D1                     	ds	1
  1174  0000D2                     main@LResult:
  1175                           	opt stack 0
  1176                           
  1177                           ; 2 bytes @ 0x72
  1178  0000D2                     	ds	2
  1179  0000D4                     _main$441:
  1180                           	opt stack 0
  1181                           
  1182                           ; 2 bytes @ 0x74
  1183  0000D4                     	ds	2
  1184  0000D6                     main@LChannelSwitchOld:
  1185                           	opt stack 0
  1186                           
  1187                           ; 1 bytes @ 0x76
  1188  0000D6                     	ds	1
  1189  0000D7                     main@LEncSwitchPushed:
  1190                           	opt stack 0
  1191                           
  1192                           ; 1 bytes @ 0x77
  1193  0000D7                     	ds	1
  1194  0000D8                     main@LChannelSwitch:
  1195                           	opt stack 0
  1196                           
  1197                           ; 1 bytes @ 0x78
  1198  0000D8                     	ds	1
  1199  0000D9                     main@LValue:
  1200                           	opt stack 0
  1201                           
  1202                           ; 1 bytes @ 0x79
  1203  0000D9                     	ds	1
  1204  0000DA                     main@LMidiData:
  1205                           	opt stack 0
  1206                           
  1207                           ; 5 bytes @ 0x7A
  1208  0000DA                     	ds	5
  1209                           tblptru	equ	0xFF8
  1210                           tblptrh	equ	0xFF7
  1211                           tblptrl	equ	0xFF6
  1212                           tablat	equ	0xFF5
  1213                           postinc0	equ	0xFEE
  1214                           wreg	equ	0xFE8
  1215                           postdec1	equ	0xFE5
  1216                           fsr1h	equ	0xFE2
  1217                           fsr1l	equ	0xFE1
  1218                           
  1219                           	psect	cstackCOMRAM
  1220  000001                     __pcstackCOMRAM:
  1221                           	opt stack 0
  1222  000001                     Hub_DecodeSwitch@AIndex2:
  1223                           	opt stack 0
  1224  000001                     Display_SwapBuffer@LSwap:
  1225                           	opt stack 0
  1226  000001                     Midi_Write@AMidiBuffer:
  1227                           	opt stack 0
  1228  000001                     i2Midi_ResetBuffer@AMidiBuffer:
  1229                           	opt stack 0
  1230  000001                     i2memcpy@d1:
  1231                           	opt stack 0
  1232  000001                     i2LatchOn@AIO:
  1233                           	opt stack 0
  1234  000001                     i2LatchOff@AIO:
  1235                           	opt stack 0
  1236  000001                     i2ClockUp@AIO:
  1237                           	opt stack 0
  1238  000001                     i2ClockDown@AIO:
  1239                           	opt stack 0
  1240                           
  1241                           ; 15 bytes @ 0x0
  1242  000001                     	ds	1
  1243  000002                     ??_Hub_DecodeSwitch:
  1244                           
  1245                           ; 1 bytes @ 0x1
  1246  000002                     	ds	1
  1247  000003                     ??_Midi_Write:
  1248  000003                     ??i2_Midi_ResetBuffer:
  1249  000003                     i2memcpy@s1:
  1250                           	opt stack 0
  1251                           
  1252                           ; 2 bytes @ 0x2
  1253  000003                     	ds	1
  1254  000004                     Hub_DecodeSwitch@AIndex1:
  1255                           	opt stack 0
  1256                           
  1257                           ; 1 bytes @ 0x3
  1258  000004                     	ds	1
  1259  000005                     i2Midi_ResetBuffer@j:
  1260                           	opt stack 0
  1261  000005                     Hub_SetValue@ASourceValue:
  1262                           	opt stack 0
  1263  000005                     i2memcpy@n:
  1264                           	opt stack 0
  1265                           
  1266                           ; 2 bytes @ 0x4
  1267  000005                     	ds	1
  1268  000006                     i2Midi_ResetBuffer@i:
  1269                           	opt stack 0
  1270                           
  1271                           ; 1 bytes @ 0x5
  1272  000006                     	ds	1
  1273  000007                     Hub_SetValue@AMinValue:
  1274                           	opt stack 0
  1275  000007                     Midi_Write@AData:
  1276                           	opt stack 0
  1277  000007                     i2memcpy@d:
  1278                           	opt stack 0
  1279                           
  1280                           ; 2 bytes @ 0x6
  1281  000007                     	ds	1
  1282  000008                     Hub_SetValue@AMaxValue:
  1283                           	opt stack 0
  1284                           
  1285                           ; 2 bytes @ 0x7
  1286  000008                     	ds	1
  1287  000009                     i2memcpy@s:
  1288                           	opt stack 0
  1289                           
  1290                           ; 2 bytes @ 0x8
  1291  000009                     	ds	1
  1292  00000A                     Hub_SetValue@AIncrement:
  1293                           	opt stack 0
  1294                           
  1295                           ; 1 bytes @ 0x9
  1296  00000A                     	ds	1
  1297  00000B                     ??_Hub_SetValue:
  1298  00000B                     i2memcpy@tmp:
  1299                           	opt stack 0
  1300                           
  1301                           ; 1 bytes @ 0xA
  1302  00000B                     	ds	1
  1303  00000C                     Hub_SetValue@LValue:
  1304                           	opt stack 0
  1305                           
  1306                           ; 2 bytes @ 0xB
  1307  00000C                     	ds	4
  1308  000010                     i2WriteChar@AIO:
  1309                           	opt stack 0
  1310  000010                     i2ReadBit@AIO:
  1311                           	opt stack 0
  1312                           
  1313                           ; 15 bytes @ 0xF
  1314  000010                     	ds	15
  1315  00001F                     ??i2_WriteChar:
  1316  00001F                     ??i2_ReadBit:
  1317                           
  1318                           ; 1 bytes @ 0x1E
  1319  00001F                     	ds	2
  1320  000021                     i2ReadBit@LBit:
  1321                           	opt stack 0
  1322                           
  1323                           ; 1 bytes @ 0x20
  1324  000021                     	ds	1
  1325  000022                     i2WriteChar@AChar:
  1326                           	opt stack 0
  1327  000022                     i2ReadBitArray@AData:
  1328                           	opt stack 0
  1329                           
  1330                           ; 1 bytes @ 0x21
  1331  000022                     	ds	1
  1332  000023                     i2WriteChar@i:
  1333                           	opt stack 0
  1334  000023                     i2ReadBitArray@AIO:
  1335                           	opt stack 0
  1336                           
  1337                           ; 15 bytes @ 0x22
  1338  000023                     	ds	2
  1339  000025                     i2WriteData@AData:
  1340                           	opt stack 0
  1341                           
  1342                           ; 2 bytes @ 0x24
  1343  000025                     	ds	2
  1344  000027                     i2WriteData@ASize:
  1345                           	opt stack 0
  1346                           
  1347                           ; 1 bytes @ 0x26
  1348  000027                     	ds	1
  1349  000028                     i2WriteData@AIO:
  1350                           	opt stack 0
  1351                           
  1352                           ; 15 bytes @ 0x27
  1353  000028                     	ds	10
  1354  000032                     ??i2_ReadBitArray:
  1355                           
  1356                           ; 1 bytes @ 0x31
  1357  000032                     	ds	1
  1358  000033                     i2ReadBitArray@i:
  1359                           	opt stack 0
  1360                           
  1361                           ; 2 bytes @ 0x32
  1362  000033                     	ds	2
  1363  000035                     i2Hub_ReadSwitch@LBitArray:
  1364                           	opt stack 0
  1365                           
  1366                           ; 24 bytes @ 0x34
  1367  000035                     	ds	2
  1368  000037                     i2WriteData@i:
  1369                           	opt stack 0
  1370                           
  1371                           ; 2 bytes @ 0x36
  1372  000037                     	ds	22
  1373  00004D                     Hub_UpdateValues@i:
  1374                           	opt stack 0
  1375                           
  1376                           ; 2 bytes @ 0x4C
  1377  00004D                     	ds	2
  1378  00004F                     ??_Interrupt:
  1379                           
  1380                           ; 1 bytes @ 0x4E
  1381  00004F                     	ds	9
  1382  000058                     Interrupt@LData:
  1383                           	opt stack 0
  1384                           
  1385                           ; 1 bytes @ 0x57
  1386  000058                     	ds	1
  1387                           tblptru	equ	0xFF8
  1388                           tblptrh	equ	0xFF7
  1389                           tblptrl	equ	0xFF6
  1390                           tablat	equ	0xFF5
  1391                           postinc0	equ	0xFEE
  1392                           wreg	equ	0xFE8
  1393                           postdec1	equ	0xFE5
  1394                           fsr1h	equ	0xFE2
  1395                           fsr1l	equ	0xFE1
  1396                           
  1397 ;;
  1398 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  1399 ;;
  1400 ;; *************** function _main *****************
  1401 ;; Defined at:
  1402 ;;		line 150 in file "main.c"
  1403 ;; Parameters:    Size  Location     Type
  1404 ;;		None
  1405 ;; Auto vars:     Size  Location     Type
  1406 ;;  LValue          1  121[BANK0 ] unsigned char 
  1407 ;;  LMidiData       5  122[BANK0 ] struct .
  1408 ;;  LResult         2  114[BANK0 ] int 
  1409 ;;  LChannelSwit    1  120[BANK0 ] unsigned char 
  1410 ;;  LEncSwitchPu    1  119[BANK0 ] unsigned char 
  1411 ;;  LChannelSwit    1  118[BANK0 ] unsigned char 
  1412 ;; Return value:  Size  Location     Type
  1413 ;;                  1    wreg      void 
  1414 ;; Registers used:
  1415 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1416 ;; Tracked objects:
  1417 ;;		On entry : 0/0
  1418 ;;		On exit  : 3F/0
  1419 ;;		Unchanged: 0/0
  1420 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1421 ;;      Params:         0       0       0       0       0       0       0       0       0
  1422 ;;      Locals:         0      13       0       0       0       0       0       0       0
  1423 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1424 ;;      Totals:         0      13       0       0       0       0       0       0       0
  1425 ;;Total ram usage:       13 bytes
  1426 ;; Hardware stack levels required when called:   13
  1427 ;; This function calls:
  1428 ;;		_ConfigureOscillator
  1429 ;;		_Display_ProcessData
  1430 ;;		_InitApp
  1431 ;;		_Load
  1432 ;;		_Midi_Read
  1433 ;;		_PauseHub
  1434 ;;		_Persistant_SaveBuffer
  1435 ;;		_RunHub
  1436 ;;		_Sequencer_StartTimer
  1437 ;;		_Sequencer_StopTimer
  1438 ;;		_WriteData
  1439 ;;		_memcmp
  1440 ;; This function is called by:
  1441 ;;		Startup code after reset
  1442 ;; This function uses a non-reentrant model
  1443 ;;
  1444                           
  1445                           	psect	text0
  1446  000C6C                     __ptext0:
  1447                           	opt stack 0
  1448  000C6C                     _main:
  1449                           	opt stack 18
  1450                           
  1451                           ;main.c: 153: ConfigureOscillator();
  1452                           
  1453                           ;incstack = 0
  1454  000C6C  EC18  F019         	call	_ConfigureOscillator	;wreg free
  1455                           
  1456                           ;main.c: 156: InitApp();
  1457  000C70  ECF3  F013         	call	_InitApp	;wreg free
  1458                           
  1459                           ; BSR set to: 0
  1460                           ;main.c: 160: bool LEncSwitchPushed = 0;
  1461  000C74  6BD7               	clrf	main@LEncSwitchPushed& (0+255),b
  1462                           
  1463                           ; BSR set to: 0
  1464                           ;main.c: 161: bool LChannelSwitch;
  1465                           ;main.c: 162: bool LChannelSwitchOld = _Hub.SecondaryBuffer.ActionButton;
  1466  000C76  C16E  F0D6         	movff	__Hub+110,main@LChannelSwitchOld
  1467  000C7A                     l4744:
  1468                           
  1469                           ; BSR set to: 0
  1470                           ;main.c: 164: {
  1471                           ;main.c: 165: _Hub.ReadyToWrite = 1;
  1472  000C7A  0E01               	movlw	1
  1473  000C7C  0101               	movlb	1	; () banked
  1474  000C7E  6F86               	movwf	(__Hub+134)& (0+255),b
  1475  000C80                     l4746:
  1476                           
  1477                           ; BSR set to: 1
  1478  000C80  5186               	movf	(__Hub+134)& (0+255),w,b
  1479  000C82  E1FE               	bnz	l4746
  1480                           
  1481                           ; BSR set to: 1
  1482                           ;main.c: 168: LChannelSwitch = _Hub.SecondaryBuffer.ActionButton;
  1483  000C84  C16E  F0D8         	movff	__Hub+110,main@LChannelSwitch
  1484                           
  1485                           ; BSR set to: 1
  1486                           ;main.c: 170: if (LChannelSwitch != LChannelSwitchOld)
  1487  000C88  0100               	movlb	0	; () banked
  1488  000C8A  51D6               	movf	main@LChannelSwitchOld& (0+255),w,b
  1489  000C8C  19D8               	xorwf	main@LChannelSwitch& (0+255),w,b
  1490  000C8E  E12F               	bnz	l4782
  1491  000C90  D033               	goto	l4784
  1492  000C92                     l4752:
  1493                           
  1494                           ; BSR set to: 0
  1495                           ;main.c: 175: Sequencer_StopTimer();
  1496  000C92  EC10  F019         	call	_Sequencer_StopTimer	;wreg free
  1497                           
  1498                           ;main.c: 176: if (_Saving)
  1499  000C96  0100               	movlb	0	; () banked
  1500  000C98  51DF               	movf	__Saving& (0+255),w,b
  1501  000C9A  E010               	bz	l4764
  1502                           
  1503                           ; BSR set to: 0
  1504                           ;main.c: 177: {
  1505                           ;main.c: 179: Persistant_SaveBuffer(_Hub.SecondaryBuffer);
  1506  000C9C  EE21  F06E         	lfsr	2,__Hub+110
  1507  000CA0  EE00  F0AC         	lfsr	0,Persistant_SaveBuffer@ABuffer
  1508  000CA4  0E0B               	movlw	11
  1509  000CA6                     u5161:
  1510  000CA6  CFDB FFEB          	movff	plusw2,plusw0
  1511  000CAA  06E8               	decf	wreg,f,c
  1512  000CAC  E2FC               	bc	u5161
  1513  000CAE  EC0C  F013         	call	_Persistant_SaveBuffer	;wreg free
  1514                           
  1515                           ; BSR set to: 0
  1516                           ;main.c: 182: _Modified = 0;
  1517  000CB2  6BE0               	clrf	__Modified& (0+255),b
  1518                           
  1519                           ; BSR set to: 0
  1520                           ;main.c: 183: _Saving = 0;
  1521  000CB4  6BDF               	clrf	__Saving& (0+255),b
  1522                           
  1523                           ; BSR set to: 0
  1524                           ;main.c: 184: _Display.SavingMask = 0xFF;
  1525  000CB6  0102               	movlb	2	; () banked
  1526  000CB8  69C7               	setf	(__Display+199)& (0+255),b
  1527                           
  1528                           ;main.c: 185: }
  1529  000CBA  D033               	goto	l4796
  1530  000CBC                     l4764:
  1531                           
  1532                           ; BSR set to: 0
  1533                           ;main.c: 186: else
  1534                           ;main.c: 187: {
  1535                           ;main.c: 189: LEncSwitchPushed = 1;
  1536  000CBC  0E01               	movlw	1
  1537  000CBE  6FD7               	movwf	main@LEncSwitchPushed& (0+255),b
  1538                           
  1539                           ; BSR set to: 0
  1540                           ;main.c: 190: Sequencer_StartTimer(2.0f, 0);
  1541  000CC0  6B9E               	clrf	Sequencer_StartTimer@ATime& (0+255),b
  1542  000CC2  6B9F               	clrf	(Sequencer_StartTimer@ATime+1)& (0+255),b
  1543  000CC4  0E40               	movlw	64
  1544  000CC6  6FA0               	movwf	(Sequencer_StartTimer@ATime+2)& (0+255),b
  1545  000CC8  6BA1               	clrf	Sequencer_StartTimer@ALoop& (0+255),b
  1546  000CCA  ECF5  F015         	call	_Sequencer_StartTimer	;wreg free
  1547  000CCE  D029               	goto	l4796
  1548  000CD0                     l134:
  1549                           
  1550                           ; BSR set to: 0
  1551                           ;main.c: 194: LEncSwitchPushed = 0;
  1552  000CD0  6BD7               	clrf	main@LEncSwitchPushed& (0+255),b
  1553                           
  1554                           ; BSR set to: 0
  1555                           ;main.c: 195: if (!_Saving && !_Timer.Elapsed)
  1556  000CD2  51DF               	movf	__Saving& (0+255),w,b
  1557  000CD4  E126               	bnz	l4796
  1558                           
  1559                           ; BSR set to: 0
  1560  000CD6  5059               	movf	__Timer,w,c
  1561  000CD8  E124               	bnz	l4796
  1562                           
  1563                           ; BSR set to: 0
  1564                           ;main.c: 196: {
  1565                           ;main.c: 198: Sequencer_StopTimer();
  1566  000CDA  EC10  F019         	call	_Sequencer_StopTimer	;wreg free
  1567                           
  1568                           ;main.c: 199: PauseHub();
  1569  000CDE  EC0B  F019         	call	_PauseHub	;wreg free
  1570                           
  1571                           ; BSR set to: 1
  1572                           ;main.c: 200: Load(_Hub.PrimaryBuffer.Channel);
  1573  000CE2  5164               	movf	(__Hub+100)& (0+255),w,b
  1574  000CE4  EC7E  F011         	call	_Load
  1575                           
  1576                           ; BSR set to: 0
  1577                           ;main.c: 201: RunHub();
  1578  000CE8  ECB0  F018         	call	_RunHub	;wreg free
  1579  000CEC  D01A               	goto	l4796
  1580  000CEE                     l4782:
  1581                           
  1582                           ; BSR set to: 0
  1583  000CEE  51D8               	movf	main@LChannelSwitch& (0+255),w,b
  1584                           
  1585                           ; Switch size 1, requested type "speed"
  1586                           ; Number of cases is 2, Range of values is 0 to 1
  1587                           ; switch strategies available:
  1588                           ; Name         Instructions Cycles
  1589                           ; simple_byte            7     4 (average)
  1590                           ;	Chosen strategy is simple_byte
  1591  000CF0  E0D0               	bz	l4752
  1592  000CF2  0A01               	xorlw	1	; case 1
  1593  000CF4  E0ED               	bz	l134
  1594  000CF6  D015               	goto	l4796
  1595  000CF8                     l4784:
  1596                           
  1597                           ; BSR set to: 0
  1598                           ;main.c: 206: else
  1599                           ;main.c: 207: {
  1600                           ;main.c: 209: if (LEncSwitchPushed && _Timer.Elapsed && !_Saving)
  1601  000CF8  51D7               	movf	main@LEncSwitchPushed& (0+255),w,b
  1602  000CFA  E013               	bz	l4796
  1603                           
  1604                           ; BSR set to: 0
  1605  000CFC  5059               	movf	__Timer,w,c
  1606  000CFE  E011               	bz	l4796
  1607                           
  1608                           ; BSR set to: 0
  1609  000D00  51DF               	movf	__Saving& (0+255),w,b
  1610  000D02  E10F               	bnz	l4796
  1611                           
  1612                           ; BSR set to: 0
  1613                           ;main.c: 210: {
  1614                           ;main.c: 211: Sequencer_StopTimer();
  1615  000D04  EC10  F019         	call	_Sequencer_StopTimer	;wreg free
  1616                           
  1617                           ;main.c: 212: _Saving = 1;
  1618  000D08  0E01               	movlw	1
  1619  000D0A  0100               	movlb	0	; () banked
  1620  000D0C  6FDF               	movwf	__Saving& (0+255),b
  1621                           
  1622                           ; BSR set to: 0
  1623                           ;main.c: 213: Sequencer_StartTimer(0.3f, 1);
  1624  000D0E  0E9A               	movlw	154
  1625  000D10  6F9E               	movwf	Sequencer_StartTimer@ATime& (0+255),b
  1626  000D12  0E99               	movlw	153
  1627  000D14  6F9F               	movwf	(Sequencer_StartTimer@ATime+1)& (0+255),b
  1628  000D16  0E3E               	movlw	62
  1629  000D18  6FA0               	movwf	(Sequencer_StartTimer@ATime+2)& (0+255),b
  1630  000D1A  0E01               	movlw	1
  1631  000D1C  6FA1               	movwf	Sequencer_StartTimer@ALoop& (0+255),b
  1632  000D1E  ECF5  F015         	call	_Sequencer_StartTimer	;wreg free
  1633  000D22                     l4796:
  1634                           
  1635                           ;main.c: 214: }
  1636                           ;main.c: 215: }
  1637                           ;main.c: 217: MidiData LMidiData;
  1638                           ;main.c: 218: if (Midi_Read(&LMidiData, &_MidiInput))
  1639  000D22  0EDA               	movlw	low main@LMidiData
  1640  000D24  0100               	movlb	0	; () banked
  1641  000D26  6F60               	movwf	Midi_Read@AData& (0+255),b
  1642  000D28  0E1D               	movlw	low __MidiInput
  1643  000D2A  6F61               	movwf	Midi_Read@AMidiBuffer& (0+255),b
  1644  000D2C  0E04               	movlw	high __MidiInput
  1645  000D2E  6F62               	movwf	(Midi_Read@AMidiBuffer+1)& (0+255),b
  1646  000D30  ECCE  F012         	call	_Midi_Read	;wreg free
  1647  000D34  0900               	iorlw	0
  1648  000D36  E02E               	bz	l4814
  1649                           
  1650                           ; BSR set to: 0
  1651                           ;main.c: 219: {
  1652                           ;main.c: 220: PauseHub();
  1653  000D38  EC0B  F019         	call	_PauseHub	;wreg free
  1654                           
  1655                           ;main.c: 221: switch(LMidiData.Code)
  1656  000D3C  D023               	goto	l4810
  1657  000D3E                     l4800:
  1658                           
  1659                           ; BSR set to: 0
  1660                           ;main.c: 224: Load(LMidiData.Data[0]);
  1661  000D3E  51DC               	movf	(main@LMidiData+2)& (0+255),w,b
  1662  000D40  EC7E  F011         	call	_Load
  1663                           
  1664                           ;main.c: 225: break;
  1665  000D44  D025               	goto	l4812
  1666  000D46                     l4802:
  1667                           
  1668                           ; BSR set to: 0
  1669                           ;main.c: 227: {
  1670                           ;main.c: 228: unsigned char LValue = LMidiData.Data[1] / 2;
  1671  000D46  90D8               	bcf	status,0,c
  1672  000D48  31DD               	rrcf	(main@LMidiData+3)& (0+255),w,b
  1673  000D4A  6FD9               	movwf	main@LValue& (0+255),b
  1674                           
  1675                           ;main.c: 229: switch(LMidiData.Data[0])
  1676  000D4C  D00F               	goto	l4806
  1677  000D4E                     l144:
  1678                           
  1679                           ; BSR set to: 0
  1680                           ;main.c: 232: _Hub.PrimaryBuffer.Values[4] = LValue;
  1681  000D4E  C0D9  F16A         	movff	main@LValue,__Hub+106
  1682                           
  1683                           ;main.c: 233: break;
  1684  000D52  D01E               	goto	l4812
  1685  000D54                     l146:
  1686                           
  1687                           ; BSR set to: 0
  1688                           ;main.c: 235: _Hub.PrimaryBuffer.Values[0] = LValue;
  1689  000D54  C0D9  F166         	movff	main@LValue,__Hub+102
  1690                           
  1691                           ;main.c: 236: break;
  1692  000D58  D01B               	goto	l4812
  1693  000D5A                     l147:
  1694                           
  1695                           ; BSR set to: 0
  1696                           ;main.c: 238: _Hub.PrimaryBuffer.Values[1] = LValue;
  1697  000D5A  C0D9  F167         	movff	main@LValue,__Hub+103
  1698                           
  1699                           ;main.c: 239: break;
  1700  000D5E  D018               	goto	l4812
  1701  000D60                     l148:
  1702                           
  1703                           ; BSR set to: 0
  1704                           ;main.c: 241: _Hub.PrimaryBuffer.Values[2] = LValue;
  1705  000D60  C0D9  F168         	movff	main@LValue,__Hub+104
  1706                           
  1707                           ;main.c: 242: break;
  1708  000D64  D015               	goto	l4812
  1709  000D66                     l149:
  1710                           
  1711                           ; BSR set to: 0
  1712                           ;main.c: 244: _Hub.PrimaryBuffer.Values[3] = LValue;
  1713  000D66  C0D9  F169         	movff	main@LValue,__Hub+105
  1714                           
  1715                           ;main.c: 245: break;
  1716  000D6A  D012               	goto	l4812
  1717  000D6C                     l4806:
  1718                           
  1719                           ; BSR set to: 0
  1720  000D6C  51DC               	movf	(main@LMidiData+2)& (0+255),w,b
  1721                           
  1722                           ; Switch size 1, requested type "speed"
  1723                           ; Number of cases is 5, Range of values is 7 to 78
  1724                           ; switch strategies available:
  1725                           ; Name         Instructions Cycles
  1726                           ; simple_byte           16     9 (average)
  1727                           ;	Chosen strategy is simple_byte
  1728  000D6E  0A07               	xorlw	7	; case 7
  1729  000D70  E0EE               	bz	l144
  1730  000D72  0A4C               	xorlw	76	; case 75
  1731  000D74  E0EF               	bz	l146
  1732  000D76  0A07               	xorlw	7	; case 76
  1733  000D78  E0F0               	bz	l147
  1734  000D7A  0A01               	xorlw	1	; case 77
  1735  000D7C  E0F1               	bz	l148
  1736  000D7E  0A03               	xorlw	3	; case 78
  1737  000D80  E0F2               	bz	l149
  1738  000D82  D006               	goto	l4812
  1739  000D84                     l4810:
  1740                           
  1741                           ; BSR set to: 1
  1742  000D84  0100               	movlb	0	; () banked
  1743  000D86  51DA               	movf	main@LMidiData& (0+255),w,b
  1744                           
  1745                           ; Switch size 1, requested type "speed"
  1746                           ; Number of cases is 2, Range of values is 176 to 192
  1747                           ; switch strategies available:
  1748                           ; Name         Instructions Cycles
  1749                           ; simple_byte            7     4 (average)
  1750                           ;	Chosen strategy is simple_byte
  1751  000D88  0AB0               	xorlw	176	; case 176
  1752  000D8A  E0DD               	bz	l4802
  1753  000D8C  0A70               	xorlw	112	; case 192
  1754  000D8E  E0D7               	bz	l4800
  1755  000D90                     l4812:
  1756                           
  1757                           ; BSR set to: 0
  1758                           ;main.c: 250: RunHub();
  1759  000D90  ECB0  F018         	call	_RunHub	;wreg free
  1760  000D94                     l4814:
  1761                           
  1762                           ;main.c: 251: }
  1763                           ;main.c: 257: signed int LResult = memcmp(_Hub.SecondaryBuffer.Values, _Hub.BackupBuffer
      +                          .Values, sizeof(_Hub.SecondaryBuffer.Values));
  1764  000D94  0E72               	movlw	low (__Hub+114)
  1765  000D96  0100               	movlb	0	; () banked
  1766  000D98  6F60               	movwf	memcmp@s1& (0+255),b
  1767  000D9A  0E01               	movlw	high (__Hub+114)
  1768  000D9C  6F61               	movwf	(memcmp@s1+1)& (0+255),b
  1769  000D9E  0E7E               	movlw	low (__Hub+126)
  1770  000DA0  6F62               	movwf	memcmp@s2& (0+255),b
  1771  000DA2  0E01               	movlw	high (__Hub+126)
  1772  000DA4  6F63               	movwf	(memcmp@s2+1)& (0+255),b
  1773  000DA6  6B65               	clrf	(memcmp@n+1)& (0+255),b
  1774  000DA8  0E08               	movlw	8
  1775  000DAA  6F64               	movwf	memcmp@n& (0+255),b
  1776  000DAC  EC4F  F015         	call	_memcmp	;wreg free
  1777  000DB0  C060  F0D2         	movff	?_memcmp,main@LResult
  1778  000DB4  C061  F0D3         	movff	?_memcmp+1,main@LResult+1
  1779                           
  1780                           ; BSR set to: 0
  1781                           ;main.c: 259: if (!_Modified && (2 > 1) && ((LResult != 0) || (_Hub.SecondaryBuffer.Push
      +                          edButton != _Hub.BackupBuffer.PushedButton)))
  1782  000DB8  51E0               	movf	__Modified& (0+255),w,b
  1783  000DBA  E11A               	bnz	l4830
  1784                           
  1785                           ; BSR set to: 0
  1786  000DBC  51D2               	movf	main@LResult& (0+255),w,b
  1787  000DBE  11D3               	iorwf	(main@LResult+1)& (0+255),w,b
  1788  000DC0  E104               	bnz	u5250
  1789                           
  1790                           ; BSR set to: 0
  1791  000DC2  0101               	movlb	1	; () banked
  1792  000DC4  517B               	movf	(__Hub+123)& (0+255),w,b
  1793  000DC6  196F               	xorwf	(__Hub+111)& (0+255),w,b
  1794  000DC8  E013               	bz	l4830
  1795  000DCA                     u5250:
  1796                           
  1797                           ;main.c: 260: {
  1798                           ;main.c: 261: Sequencer_StopTimer();
  1799  000DCA  EC10  F019         	call	_Sequencer_StopTimer	;wreg free
  1800                           
  1801                           ;main.c: 262: _Modified = 1;
  1802  000DCE  0E01               	movlw	1
  1803  000DD0  0100               	movlb	0	; () banked
  1804  000DD2  6FE0               	movwf	__Modified& (0+255),b
  1805                           
  1806                           ; BSR set to: 0
  1807                           ;main.c: 263: _Display.PointMask[1] = 0x08;
  1808  000DD4  0E08               	movlw	8
  1809  000DD6  0102               	movlb	2	; () banked
  1810  000DD8  6FC9               	movwf	(__Display+201)& (0+255),b
  1811                           
  1812                           ; BSR set to: 2
  1813                           ;main.c: 264: Sequencer_StartTimer(0.3f, 1);
  1814  000DDA  0E9A               	movlw	154
  1815  000DDC  0100               	movlb	0	; () banked
  1816  000DDE  6F9E               	movwf	Sequencer_StartTimer@ATime& (0+255),b
  1817  000DE0  0E99               	movlw	153
  1818  000DE2  6F9F               	movwf	(Sequencer_StartTimer@ATime+1)& (0+255),b
  1819  000DE4  0E3E               	movlw	62
  1820  000DE6  6FA0               	movwf	(Sequencer_StartTimer@ATime+2)& (0+255),b
  1821  000DE8  0E01               	movlw	1
  1822  000DEA  6FA1               	movwf	Sequencer_StartTimer@ALoop& (0+255),b
  1823  000DEC  ECF5  F015         	call	_Sequencer_StartTimer	;wreg free
  1824  000DF0                     l4830:
  1825                           
  1826                           ;main.c: 265: }
  1827                           ;main.c: 267: Display_ProcessData(_Hub.SecondaryBuffer.PushedButton ? _Hub.SecondaryBuff
      +                          er.Sound : _Hub.SecondaryBuffer.Channel, _Hub.SecondaryBuffer.Values, _Hub.CurrentChanne
      +                          l == _Hub.SecondaryBuffer.Channel, _Hub.SecondaryBuffer.PushedButton);
  1828  000DF0  0101               	movlb	1	; () banked
  1829  000DF2  516F               	movf	(__Hub+111)& (0+255),w,b
  1830  000DF4  E103               	bnz	l154
  1831                           
  1832                           ; BSR set to: 1
  1833  000DF6  C170  F0D4         	movff	__Hub+112,_main$441
  1834  000DFA  D002               	goto	L1
  1835  000DFC                     l154:
  1836                           
  1837                           ; BSR set to: 1
  1838  000DFC  C171  F0D4         	movff	__Hub+113,_main$441
  1839  000E00                     L1:
  1840  000E00  0100               	movlb	0	; () banked
  1841  000E02  6BD5               	clrf	(_main$441+1)& (0+255),b
  1842                           
  1843                           ; BSR set to: 0
  1844  000E04  0E72               	movlw	low (__Hub+114)
  1845  000E06  6F68               	movwf	Display_ProcessData@AValues& (0+255),b
  1846  000E08  0E01               	movlw	high (__Hub+114)
  1847  000E0A  6F69               	movwf	(Display_ProcessData@AValues+1)& (0+255),b
  1848  000E0C  0101               	movlb	1	; () banked
  1849  000E0E  5170               	movf	(__Hub+112)& (0+255),w,b
  1850  000E10  198C               	xorwf	(__Hub+140)& (0+255),w,b
  1851  000E12  0E01               	movlw	1
  1852  000E14  A4D8               	btfss	status,2,c
  1853  000E16  0E00               	movlw	0
  1854  000E18  0100               	movlb	0	; () banked
  1855  000E1A  6F6A               	movwf	Display_ProcessData@ALoaded& (0+255),b
  1856  000E1C  C16F  F06B         	movff	__Hub+111,Display_ProcessData@APushed
  1857  000E20  51D4               	movf	_main$441& (0+255),w,b
  1858  000E22  EC1E  F004         	call	_Display_ProcessData
  1859                           
  1860                           ; BSR set to: 2
  1861                           ;main.c: 269: if (_DigiPot.Counter >= _DigiPot.CounterRef)
  1862  000E26  0100               	movlb	0	; () banked
  1863  000E28  51E1               	movf	__DigiPot& (0+255),w,b
  1864  000E2A  5DE2               	subwf	(__DigiPot+1)& (0+255),w,b
  1865  000E2C  E312               	bnc	l4842
  1866                           
  1867                           ; BSR set to: 0
  1868                           ;main.c: 270: {
  1869                           ;main.c: 271: WriteData(_Hub.SecondaryBuffer.Values, 8, _DigiPot.IO);
  1870  000E2E  0E72               	movlw	low (__Hub+114)
  1871  000E30  6F84               	movwf	WriteData@AData& (0+255),b
  1872  000E32  0E01               	movlw	high (__Hub+114)
  1873  000E34  6F85               	movwf	(WriteData@AData+1)& (0+255),b
  1874  000E36  0E08               	movlw	8
  1875  000E38  6F86               	movwf	WriteData@ASize& (0+255),b
  1876  000E3A  EE20  F0E3         	lfsr	2,__DigiPot+2
  1877  000E3E  EE00  F087         	lfsr	0,WriteData@AIO
  1878  000E42  0E0E               	movlw	14
  1879  000E44                     u5301:
  1880  000E44  CFDB FFEB          	movff	plusw2,plusw0
  1881  000E48  06E8               	decf	wreg,f,c
  1882  000E4A  E2FC               	bc	u5301
  1883  000E4C  EC29  F014         	call	_WriteData	;wreg free
  1884                           
  1885                           ; BSR set to: 0
  1886                           ;main.c: 272: _DigiPot.Counter = 0;
  1887  000E50  6BE2               	clrf	(__DigiPot+1)& (0+255),b
  1888  000E52                     l4842:
  1889                           
  1890                           ; BSR set to: 0
  1891                           ;main.c: 273: }
  1892                           ;main.c: 275: LChannelSwitchOld = LChannelSwitch;
  1893  000E52  C0D8  F0D6         	movff	main@LChannelSwitch,main@LChannelSwitchOld
  1894  000E56  D711               	goto	l4744
  1895  000E58                     __end_of_main:
  1896                           	opt stack 0
  1897                           tblptru	equ	0xFF8
  1898                           tblptrh	equ	0xFF7
  1899                           tblptrl	equ	0xFF6
  1900                           tablat	equ	0xFF5
  1901                           postinc0	equ	0xFEE
  1902                           plusw0	equ	0xFEB
  1903                           wreg	equ	0xFE8
  1904                           postdec1	equ	0xFE5
  1905                           fsr1h	equ	0xFE2
  1906                           fsr1l	equ	0xFE1
  1907                           plusw2	equ	0xFDB
  1908                           status	equ	0xFD8
  1909                           
  1910 ;; *************** function _memcmp *****************
  1911 ;; Defined at:
  1912 ;;		line 3 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\memcmp.c"
  1913 ;; Parameters:    Size  Location     Type
  1914 ;;  s1              2    0[BANK0 ] PTR const void 
  1915 ;;		 -> _Hub.SecondaryBuffer.Values(8), _Hub.SecondaryBuffer(12), 
  1916 ;;  s2              2    2[BANK0 ] PTR const void 
  1917 ;;		 -> _Hub.BackupBuffer.Values(8), _Hub.BackupBuffer(12), 
  1918 ;;  n               2    4[BANK0 ] unsigned int 
  1919 ;; Auto vars:     Size  Location     Type
  1920 ;;		None
  1921 ;; Return value:  Size  Location     Type
  1922 ;;                  2    0[BANK0 ] int 
  1923 ;; Registers used:
  1924 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0
  1925 ;; Tracked objects:
  1926 ;;		On entry : 3F/0
  1927 ;;		On exit  : 3F/0
  1928 ;;		Unchanged: 0/0
  1929 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1930 ;;      Params:         0       6       0       0       0       0       0       0       0
  1931 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1932 ;;      Temps:          0       2       0       0       0       0       0       0       0
  1933 ;;      Totals:         0       8       0       0       0       0       0       0       0
  1934 ;;Total ram usage:        8 bytes
  1935 ;; Hardware stack levels used:    1
  1936 ;; Hardware stack levels required when called:    6
  1937 ;; This function calls:
  1938 ;;		Nothing
  1939 ;; This function is called by:
  1940 ;;		_main
  1941 ;; This function uses a non-reentrant model
  1942 ;;
  1943                           
  1944                           	psect	text1
  1945  002A9E                     __ptext1:
  1946                           	opt stack 0
  1947  002A9E                     _memcmp:
  1948                           	opt stack 24
  1949                           
  1950                           ; BSR set to: 0
  1951                           
  1952                           ; BSR set to: 0
  1953                           ;incstack = 0
  1954  002A9E  D020               	goto	l4626
  1955  002AA0                     l4618:
  1956                           
  1957                           ; BSR set to: 0
  1958  002AA0  C062  FFD9         	movff	memcmp@s2,fsr2l
  1959  002AA4  C063  FFDA         	movff	memcmp@s2+1,fsr2h
  1960  002AA8  C060  FFE1         	movff	memcmp@s1,fsr1l
  1961  002AAC  C061  FFE2         	movff	memcmp@s1+1,fsr1h
  1962  002AB0  50DE               	movf	postinc2,w,c
  1963  002AB2  18E6               	xorwf	postinc1,w,c
  1964  002AB4  E011               	bz	l4624
  1965                           
  1966                           ; BSR set to: 0
  1967  002AB6  C060  FFD9         	movff	memcmp@s1,fsr2l
  1968  002ABA  C061  FFDA         	movff	memcmp@s1+1,fsr2h
  1969  002ABE  50DF               	movf	indf2,w,c
  1970  002AC0  6F66               	movwf	??_memcmp& (0+255),b
  1971  002AC2  C062  FFD9         	movff	memcmp@s2,fsr2l
  1972  002AC6  C063  FFDA         	movff	memcmp@s2+1,fsr2h
  1973  002ACA  50DF               	movf	indf2,w,c
  1974  002ACC  5D66               	subwf	??_memcmp& (0+255),w,b
  1975  002ACE  6F60               	movwf	?_memcmp& (0+255),b
  1976  002AD0  6B61               	clrf	(?_memcmp+1)& (0+255),b
  1977  002AD2  A0D8               	btfss	status,0,c
  1978  002AD4  0761               	decf	(?_memcmp+1)& (0+255),f,b
  1979  002AD6  0012               	return	
  1980  002AD8                     l4624:
  1981                           
  1982                           ; BSR set to: 0
  1983  002AD8  4B60               	infsnz	memcmp@s1& (0+255),f,b
  1984  002ADA  2B61               	incf	(memcmp@s1+1)& (0+255),f,b
  1985  002ADC  4B62               	infsnz	memcmp@s2& (0+255),f,b
  1986  002ADE  2B63               	incf	(memcmp@s2+1)& (0+255),f,b
  1987  002AE0                     l4626:
  1988                           
  1989                           ; BSR set to: 0
  1990  002AE0  0764               	decf	memcmp@n& (0+255),f,b
  1991  002AE2  A0D8               	btfss	status,0,c
  1992  002AE4  0765               	decf	(memcmp@n+1)& (0+255),f,b
  1993  002AE6  2964               	incf	memcmp@n& (0+255),w,b
  1994  002AE8  E1DB               	bnz	l4618
  1995  002AEA  2965               	incf	(memcmp@n+1)& (0+255),w,b
  1996  002AEC  E1D9               	bnz	l4618
  1997                           
  1998                           ; BSR set to: 0
  1999  002AEE  6B60               	clrf	?_memcmp& (0+255),b
  2000  002AF0  6B61               	clrf	(?_memcmp+1)& (0+255),b
  2001                           
  2002                           ; BSR set to: 0
  2003  002AF2  0012               	return		;funcret
  2004  002AF4                     __end_of_memcmp:
  2005                           	opt stack 0
  2006                           tblptru	equ	0xFF8
  2007                           tblptrh	equ	0xFF7
  2008                           tblptrl	equ	0xFF6
  2009                           tablat	equ	0xFF5
  2010                           postinc0	equ	0xFEE
  2011                           plusw0	equ	0xFEB
  2012                           wreg	equ	0xFE8
  2013                           postinc1	equ	0xFE6
  2014                           postdec1	equ	0xFE5
  2015                           fsr1h	equ	0xFE2
  2016                           fsr1l	equ	0xFE1
  2017                           indf2	equ	0xFDF
  2018                           postinc2	equ	0xFDE
  2019                           plusw2	equ	0xFDB
  2020                           fsr2h	equ	0xFDA
  2021                           fsr2l	equ	0xFD9
  2022                           status	equ	0xFD8
  2023                           
  2024 ;; *************** function _WriteData *****************
  2025 ;; Defined at:
  2026 ;;		line 28 in file "harware.c"
  2027 ;; Parameters:    Size  Location     Type
  2028 ;;  AData           2   36[BANK0 ] PTR unsigned char 
  2029 ;;		 -> _Display.Buffer2(90), _Display.Buffer1(90), _Hub.SecondaryBuffer(12), _Hub(157), 
  2030 ;;		 -> _Display(217), 
  2031 ;;  ASize           1   38[BANK0 ] unsigned char 
  2032 ;;  AIO            15   39[BANK0 ] struct .
  2033 ;; Auto vars:     Size  Location     Type
  2034 ;;  i               2   54[BANK0 ] int 
  2035 ;; Return value:  Size  Location     Type
  2036 ;;                  1    wreg      void 
  2037 ;; Registers used:
  2038 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, cstack
  2039 ;; Tracked objects:
  2040 ;;		On entry : 3F/0
  2041 ;;		On exit  : 3F/0
  2042 ;;		Unchanged: 0/0
  2043 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2044 ;;      Params:         0      18       0       0       0       0       0       0       0
  2045 ;;      Locals:         0       2       0       0       0       0       0       0       0
  2046 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2047 ;;      Totals:         0      20       0       0       0       0       0       0       0
  2048 ;;Total ram usage:       20 bytes
  2049 ;; Hardware stack levels used:    1
  2050 ;; Hardware stack levels required when called:    8
  2051 ;; This function calls:
  2052 ;;		_LatchOff
  2053 ;;		_LatchOn
  2054 ;;		_WriteChar
  2055 ;; This function is called by:
  2056 ;;		_main
  2057 ;; This function uses a non-reentrant model
  2058 ;;
  2059                           
  2060                           	psect	text2
  2061  002852                     __ptext2:
  2062                           	opt stack 0
  2063  002852                     _WriteData:
  2064                           	opt stack 22
  2065                           
  2066                           ; BSR set to: 0
  2067                           ;harware.c: 30: LatchOn(AIO);
  2068                           
  2069                           ; BSR set to: 0
  2070                           ;incstack = 0
  2071  002852  EE20  F087         	lfsr	2,WriteData@AIO
  2072  002856  EE00  F060         	lfsr	0,LatchOn@AIO
  2073  00285A  0E0E               	movlw	14
  2074  00285C                     u4711:
  2075  00285C  CFDB FFEB          	movff	plusw2,plusw0
  2076  002860  06E8               	decf	wreg,f,c
  2077  002862  E2FC               	bc	u4711
  2078  002864  ECC0  F018         	call	_LatchOn	;wreg free
  2079                           
  2080                           ; BSR set to: 0
  2081                           ;harware.c: 31: for (int i = ASize - 1; i >= 0; i--)
  2082  002868  0EFF               	movlw	255
  2083  00286A  2586               	addwf	WriteData@ASize& (0+255),w,b
  2084  00286C  6F96               	movwf	WriteData@i& (0+255),b
  2085  00286E  6B97               	clrf	(WriteData@i+1)& (0+255),b
  2086  002870  0EFF               	movlw	255
  2087  002872  2397               	addwfc	(WriteData@i+1)& (0+255),f,b
  2088  002874                     l4392:
  2089                           
  2090                           ; BSR set to: 0
  2091  002874  BF97               	btfsc	(WriteData@i+1)& (0+255),7,b
  2092  002876  D016               	goto	l4402
  2093                           
  2094                           ; BSR set to: 0
  2095                           ;harware.c: 32: WriteChar(AData[i], AIO);
  2096  002878  EE20  F087         	lfsr	2,WriteData@AIO
  2097  00287C  EE00  F06F         	lfsr	0,WriteChar@AIO
  2098  002880  0E0E               	movlw	14
  2099  002882                     u4731:
  2100  002882  CFDB FFEB          	movff	plusw2,plusw0
  2101  002886  06E8               	decf	wreg,f,c
  2102  002888  E2FC               	bc	u4731
  2103  00288A  5196               	movf	WriteData@i& (0+255),w,b
  2104  00288C  2584               	addwf	WriteData@AData& (0+255),w,b
  2105  00288E  6ED9               	movwf	fsr2l,c
  2106  002890  5197               	movf	(WriteData@i+1)& (0+255),w,b
  2107  002892  2185               	addwfc	(WriteData@AData+1)& (0+255),w,b
  2108  002894  6EDA               	movwf	fsr2h,c
  2109  002896  50DF               	movf	indf2,w,c
  2110  002898  EC08  F012         	call	_WriteChar
  2111                           
  2112                           ; BSR set to: 0
  2113  00289C  0796               	decf	WriteData@i& (0+255),f,b
  2114  00289E  A0D8               	btfss	status,0,c
  2115  0028A0  0797               	decf	(WriteData@i+1)& (0+255),f,b
  2116  0028A2  D7E8               	goto	l4392
  2117  0028A4                     l4402:
  2118                           
  2119                           ; BSR set to: 0
  2120                           ;harware.c: 33: LatchOff(AIO);
  2121  0028A4  EE20  F087         	lfsr	2,WriteData@AIO
  2122  0028A8  EE00  F060         	lfsr	0,LatchOff@AIO
  2123  0028AC  0E0E               	movlw	14
  2124  0028AE                     u4741:
  2125  0028AE  CFDB FFEB          	movff	plusw2,plusw0
  2126  0028B2  06E8               	decf	wreg,f,c
  2127  0028B4  E2FC               	bc	u4741
  2128  0028B6  EFC7  F018         	goto	_LatchOff	;wreg free
  2129  0028BA                     __end_of_WriteData:
  2130                           	opt stack 0
  2131                           tblptru	equ	0xFF8
  2132                           tblptrh	equ	0xFF7
  2133                           tblptrl	equ	0xFF6
  2134                           tablat	equ	0xFF5
  2135                           postinc0	equ	0xFEE
  2136                           plusw0	equ	0xFEB
  2137                           wreg	equ	0xFE8
  2138                           postinc1	equ	0xFE6
  2139                           postdec1	equ	0xFE5
  2140                           fsr1h	equ	0xFE2
  2141                           fsr1l	equ	0xFE1
  2142                           indf2	equ	0xFDF
  2143                           postinc2	equ	0xFDE
  2144                           plusw2	equ	0xFDB
  2145                           fsr2h	equ	0xFDA
  2146                           fsr2l	equ	0xFD9
  2147                           status	equ	0xFD8
  2148                           
  2149 ;; *************** function _WriteChar *****************
  2150 ;; Defined at:
  2151 ;;		line 18 in file "harware.c"
  2152 ;; Parameters:    Size  Location     Type
  2153 ;;  AChar           1    wreg     unsigned char 
  2154 ;;  AIO            15   15[BANK0 ] struct .
  2155 ;; Auto vars:     Size  Location     Type
  2156 ;;  AChar           1   33[BANK0 ] unsigned char 
  2157 ;;  i               2   34[BANK0 ] int 
  2158 ;; Return value:  Size  Location     Type
  2159 ;;                  1    wreg      void 
  2160 ;; Registers used:
  2161 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, cstack
  2162 ;; Tracked objects:
  2163 ;;		On entry : 3F/0
  2164 ;;		On exit  : 3F/0
  2165 ;;		Unchanged: 0/0
  2166 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2167 ;;      Params:         0      15       0       0       0       0       0       0       0
  2168 ;;      Locals:         0       3       0       0       0       0       0       0       0
  2169 ;;      Temps:          0       3       0       0       0       0       0       0       0
  2170 ;;      Totals:         0      21       0       0       0       0       0       0       0
  2171 ;;Total ram usage:       21 bytes
  2172 ;; Hardware stack levels used:    1
  2173 ;; Hardware stack levels required when called:    7
  2174 ;; This function calls:
  2175 ;;		_ClockDown
  2176 ;;		_ClockUp
  2177 ;; This function is called by:
  2178 ;;		_WriteData
  2179 ;; This function uses a non-reentrant model
  2180 ;;
  2181                           
  2182                           	psect	text3
  2183  002410                     __ptext3:
  2184                           	opt stack 0
  2185  002410                     _WriteChar:
  2186                           	opt stack 22
  2187                           
  2188                           ; BSR set to: 0
  2189                           ;incstack = 0
  2190                           ;WriteChar@AChar stored from wreg
  2191  002410  6F81               	movwf	WriteChar@AChar& (0+255),b
  2192                           
  2193                           ;harware.c: 20: for (int i = 7; i >= 0; i--)
  2194  002412  0100               	movlb	0	; () banked
  2195  002414  6B83               	clrf	(WriteChar@i+1)& (0+255),b
  2196  002416  0E07               	movlw	7
  2197  002418  6F82               	movwf	WriteChar@i& (0+255),b
  2198  00241A                     l4344:
  2199                           
  2200                           ; BSR set to: 0
  2201                           ;harware.c: 21: {
  2202                           ;harware.c: 22: ClockUp(AIO);
  2203  00241A  EE20  F06F         	lfsr	2,WriteChar@AIO
  2204  00241E  EE00  F060         	lfsr	0,ClockUp@AIO
  2205  002422  0E0E               	movlw	14
  2206  002424                     u4581:
  2207  002424  CFDB FFEB          	movff	plusw2,plusw0
  2208  002428  06E8               	decf	wreg,f,c
  2209  00242A  E2FC               	bc	u4581
  2210  00242C  ECB8  F018         	call	_ClockUp	;wreg free
  2211                           
  2212                           ; BSR set to: 0
  2213                           ;harware.c: 23: *AIO.DataPin.Port = *AIO.DataPin.Port & AIO.DataPin.Mask | ((AChar >> i)
      +                           & 0x01) << AIO.DataPin.PinNumber;
  2214  002430  C076  F07E         	movff	WriteChar@AIO+7,??_WriteChar
  2215  002434  C082  F07F         	movff	WriteChar@i,??_WriteChar+1
  2216  002438  C081  F080         	movff	WriteChar@AChar,??_WriteChar+2
  2217  00243C  2B7F               	incf	(??_WriteChar+1)& (0+255),f,b
  2218  00243E  D002               	goto	u4594
  2219  002440                     u4595:
  2220  002440  90D8               	bcf	status,0,c
  2221  002442  3380               	rrcf	(??_WriteChar+2)& (0+255),f,b
  2222  002444                     u4594:
  2223  002444  2F7F               	decfsz	(??_WriteChar+1)& (0+255),f,b
  2224  002446  D7FC               	goto	u4595
  2225  002448  0E01               	movlw	1
  2226  00244A  0100               	movlb	0	; () banked
  2227  00244C  1780               	andwf	(??_WriteChar+2)& (0+255),f,b
  2228  00244E  2B7E               	incf	??_WriteChar& (0+255),f,b
  2229  002450  D002               	goto	u4604
  2230  002452                     u4605:
  2231  002452  90D8               	bcf	status,0,c
  2232  002454  3780               	rlcf	(??_WriteChar+2)& (0+255),f,b
  2233  002456                     u4604:
  2234  002456  2F7E               	decfsz	??_WriteChar& (0+255),f,b
  2235  002458  D7FC               	goto	u4605
  2236  00245A  C074  FFD9         	movff	WriteChar@AIO+5,fsr2l
  2237  00245E  C075  FFDA         	movff	WriteChar@AIO+6,fsr2h
  2238  002462  50DF               	movf	indf2,w,c
  2239  002464  0100               	movlb	0	; () banked
  2240  002466  1577               	andwf	(WriteChar@AIO+8)& (0+255),w,b
  2241  002468  1180               	iorwf	(??_WriteChar+2)& (0+255),w,b
  2242  00246A  C074  FFD9         	movff	WriteChar@AIO+5,fsr2l
  2243  00246E  C075  FFDA         	movff	WriteChar@AIO+6,fsr2h
  2244  002472  6EDF               	movwf	indf2,c
  2245                           
  2246                           ; BSR set to: 0
  2247                           ;harware.c: 24: ClockDown(AIO);
  2248  002474  EE20  F06F         	lfsr	2,WriteChar@AIO
  2249  002478  EE00  F060         	lfsr	0,ClockDown@AIO
  2250  00247C  0E0E               	movlw	14
  2251  00247E                     u4611:
  2252  00247E  CFDB FFEB          	movff	plusw2,plusw0
  2253  002482  06E8               	decf	wreg,f,c
  2254  002484  E2FC               	bc	u4611
  2255  002486  ECE3  F018         	call	_ClockDown	;wreg free
  2256                           
  2257                           ; BSR set to: 0
  2258  00248A  0782               	decf	WriteChar@i& (0+255),f,b
  2259  00248C  A0D8               	btfss	status,0,c
  2260  00248E  0783               	decf	(WriteChar@i+1)& (0+255),f,b
  2261                           
  2262                           ; BSR set to: 0
  2263  002490  BF83               	btfsc	(WriteChar@i+1)& (0+255),7,b
  2264                           
  2265                           ; BSR set to: 0
  2266  002492  0012               	return		;funcret
  2267  002494  D7C2               	goto	l4344
  2268  002496                     __end_of_WriteChar:
  2269                           	opt stack 0
  2270                           tblptru	equ	0xFF8
  2271                           tblptrh	equ	0xFF7
  2272                           tblptrl	equ	0xFF6
  2273                           tablat	equ	0xFF5
  2274                           postinc0	equ	0xFEE
  2275                           plusw0	equ	0xFEB
  2276                           wreg	equ	0xFE8
  2277                           postinc1	equ	0xFE6
  2278                           postdec1	equ	0xFE5
  2279                           fsr1h	equ	0xFE2
  2280                           fsr1l	equ	0xFE1
  2281                           indf2	equ	0xFDF
  2282                           postinc2	equ	0xFDE
  2283                           plusw2	equ	0xFDB
  2284                           fsr2h	equ	0xFDA
  2285                           fsr2l	equ	0xFD9
  2286                           status	equ	0xFD8
  2287                           
  2288 ;; *************** function _LatchOn *****************
  2289 ;; Defined at:
  2290 ;;		line 70 in file "harware.c"
  2291 ;; Parameters:    Size  Location     Type
  2292 ;;  AIO            15    0[BANK0 ] struct .
  2293 ;; Auto vars:     Size  Location     Type
  2294 ;;		None
  2295 ;; Return value:  Size  Location     Type
  2296 ;;                  1    wreg      void 
  2297 ;; Registers used:
  2298 ;;		wreg, fsr2l, fsr2h
  2299 ;; Tracked objects:
  2300 ;;		On entry : 3F/0
  2301 ;;		On exit  : 3F/0
  2302 ;;		Unchanged: 0/0
  2303 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2304 ;;      Params:         0      15       0       0       0       0       0       0       0
  2305 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2306 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2307 ;;      Totals:         0      15       0       0       0       0       0       0       0
  2308 ;;Total ram usage:       15 bytes
  2309 ;; Hardware stack levels used:    1
  2310 ;; Hardware stack levels required when called:    6
  2311 ;; This function calls:
  2312 ;;		Nothing
  2313 ;; This function is called by:
  2314 ;;		_WriteData
  2315 ;; This function uses a non-reentrant model
  2316 ;;
  2317                           
  2318                           	psect	text4
  2319  003180                     __ptext4:
  2320                           	opt stack 0
  2321  003180                     _LatchOn:
  2322                           	opt stack 23
  2323                           
  2324                           ; BSR set to: 0
  2325                           ;harware.c: 72: *AIO.LatchPin.Port &= AIO.LatchPin.Mask;
  2326                           
  2327                           ; BSR set to: 0
  2328                           ;incstack = 0
  2329  003180  C06A  FFD9         	movff	LatchOn@AIO+10,fsr2l
  2330  003184  C06B  FFDA         	movff	LatchOn@AIO+11,fsr2h
  2331  003188  516D               	movf	(LatchOn@AIO+13)& (0+255),w,b
  2332  00318A  16DF               	andwf	indf2,f,c
  2333                           
  2334                           ; BSR set to: 0
  2335  00318C  0012               	return		;funcret
  2336  00318E                     __end_of_LatchOn:
  2337                           	opt stack 0
  2338                           tblptru	equ	0xFF8
  2339                           tblptrh	equ	0xFF7
  2340                           tblptrl	equ	0xFF6
  2341                           tablat	equ	0xFF5
  2342                           postinc0	equ	0xFEE
  2343                           plusw0	equ	0xFEB
  2344                           wreg	equ	0xFE8
  2345                           postinc1	equ	0xFE6
  2346                           postdec1	equ	0xFE5
  2347                           fsr1h	equ	0xFE2
  2348                           fsr1l	equ	0xFE1
  2349                           indf2	equ	0xFDF
  2350                           postinc2	equ	0xFDE
  2351                           plusw2	equ	0xFDB
  2352                           fsr2h	equ	0xFDA
  2353                           fsr2l	equ	0xFD9
  2354                           status	equ	0xFD8
  2355                           
  2356 ;; *************** function _LatchOff *****************
  2357 ;; Defined at:
  2358 ;;		line 75 in file "harware.c"
  2359 ;; Parameters:    Size  Location     Type
  2360 ;;  AIO            15    0[BANK0 ] struct .
  2361 ;; Auto vars:     Size  Location     Type
  2362 ;;		None
  2363 ;; Return value:  Size  Location     Type
  2364 ;;                  1    wreg      void 
  2365 ;; Registers used:
  2366 ;;		wreg, fsr2l, fsr2h
  2367 ;; Tracked objects:
  2368 ;;		On entry : 3F/0
  2369 ;;		On exit  : 3F/0
  2370 ;;		Unchanged: 0/0
  2371 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2372 ;;      Params:         0      15       0       0       0       0       0       0       0
  2373 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2374 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2375 ;;      Totals:         0      15       0       0       0       0       0       0       0
  2376 ;;Total ram usage:       15 bytes
  2377 ;; Hardware stack levels used:    1
  2378 ;; Hardware stack levels required when called:    6
  2379 ;; This function calls:
  2380 ;;		Nothing
  2381 ;; This function is called by:
  2382 ;;		_WriteData
  2383 ;; This function uses a non-reentrant model
  2384 ;;
  2385                           
  2386                           	psect	text5
  2387  00318E                     __ptext5:
  2388                           	opt stack 0
  2389  00318E                     _LatchOff:
  2390                           	opt stack 23
  2391                           
  2392                           ; BSR set to: 0
  2393                           ;harware.c: 77: *AIO.LatchPin.Port |= AIO.LatchPin.NegativeMask;
  2394                           
  2395                           ; BSR set to: 0
  2396                           ;incstack = 0
  2397  00318E  C06A  FFD9         	movff	LatchOff@AIO+10,fsr2l
  2398  003192  C06B  FFDA         	movff	LatchOff@AIO+11,fsr2h
  2399  003196  516E               	movf	(LatchOff@AIO+14)& (0+255),w,b
  2400  003198  12DF               	iorwf	indf2,f,c
  2401                           
  2402                           ; BSR set to: 0
  2403  00319A  0012               	return		;funcret
  2404  00319C                     __end_of_LatchOff:
  2405                           	opt stack 0
  2406                           tblptru	equ	0xFF8
  2407                           tblptrh	equ	0xFF7
  2408                           tblptrl	equ	0xFF6
  2409                           tablat	equ	0xFF5
  2410                           postinc0	equ	0xFEE
  2411                           plusw0	equ	0xFEB
  2412                           wreg	equ	0xFE8
  2413                           postinc1	equ	0xFE6
  2414                           postdec1	equ	0xFE5
  2415                           fsr1h	equ	0xFE2
  2416                           fsr1l	equ	0xFE1
  2417                           indf2	equ	0xFDF
  2418                           postinc2	equ	0xFDE
  2419                           plusw2	equ	0xFDB
  2420                           fsr2h	equ	0xFDA
  2421                           fsr2l	equ	0xFD9
  2422                           status	equ	0xFD8
  2423                           
  2424 ;; *************** function _Sequencer_StopTimer *****************
  2425 ;; Defined at:
  2426 ;;		line 21 in file "sequencer.c"
  2427 ;; Parameters:    Size  Location     Type
  2428 ;;		None
  2429 ;; Auto vars:     Size  Location     Type
  2430 ;;		None
  2431 ;; Return value:  Size  Location     Type
  2432 ;;                  1    wreg      void 
  2433 ;; Registers used:
  2434 ;;		None
  2435 ;; Tracked objects:
  2436 ;;		On entry : 0/0
  2437 ;;		On exit  : 0/0
  2438 ;;		Unchanged: 0/0
  2439 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2440 ;;      Params:         0       0       0       0       0       0       0       0       0
  2441 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2442 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2443 ;;      Totals:         0       0       0       0       0       0       0       0       0
  2444 ;;Total ram usage:        0 bytes
  2445 ;; Hardware stack levels used:    1
  2446 ;; Hardware stack levels required when called:    6
  2447 ;; This function calls:
  2448 ;;		Nothing
  2449 ;; This function is called by:
  2450 ;;		_main
  2451 ;; This function uses a non-reentrant model
  2452 ;;
  2453                           
  2454                           	psect	text6
  2455  003220                     __ptext6:
  2456                           	opt stack 0
  2457  003220                     _Sequencer_StopTimer:
  2458                           	opt stack 24
  2459                           
  2460                           ;sequencer.c: 23: TMR1ON = 0;
  2461                           
  2462                           ; BSR set to: 0
  2463                           ;incstack = 0
  2464  003220  90CD               	bcf	4045,0,c	;volatile
  2465                           
  2466                           ;sequencer.c: 24: _Timer.Counter = 0;
  2467  003222  6A5D               	clrf	__Timer+4,c
  2468  003224  6A5E               	clrf	__Timer+5,c
  2469  003226  0012               	return		;funcret
  2470  003228                     __end_of_Sequencer_StopTimer:
  2471                           	opt stack 0
  2472                           tblptru	equ	0xFF8
  2473                           tblptrh	equ	0xFF7
  2474                           tblptrl	equ	0xFF6
  2475                           tablat	equ	0xFF5
  2476                           postinc0	equ	0xFEE
  2477                           plusw0	equ	0xFEB
  2478                           wreg	equ	0xFE8
  2479                           postinc1	equ	0xFE6
  2480                           postdec1	equ	0xFE5
  2481                           fsr1h	equ	0xFE2
  2482                           fsr1l	equ	0xFE1
  2483                           indf2	equ	0xFDF
  2484                           postinc2	equ	0xFDE
  2485                           plusw2	equ	0xFDB
  2486                           fsr2h	equ	0xFDA
  2487                           fsr2l	equ	0xFD9
  2488                           status	equ	0xFD8
  2489                           
  2490 ;; *************** function _Sequencer_StartTimer *****************
  2491 ;; Defined at:
  2492 ;;		line 27 in file "sequencer.c"
  2493 ;; Parameters:    Size  Location     Type
  2494 ;;  ATime           3   62[BANK0 ] float 
  2495 ;;  ALoop           1   65[BANK0 ] unsigned char 
  2496 ;; Auto vars:     Size  Location     Type
  2497 ;;		None
  2498 ;; Return value:  Size  Location     Type
  2499 ;;                  1    wreg      void 
  2500 ;; Registers used:
  2501 ;;		wreg, status,2, status,0, cstack
  2502 ;; Tracked objects:
  2503 ;;		On entry : 3F/0
  2504 ;;		On exit  : 3F/0
  2505 ;;		Unchanged: 0/0
  2506 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2507 ;;      Params:         0       4       0       0       0       0       0       0       0
  2508 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2509 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2510 ;;      Totals:         0       4       0       0       0       0       0       0       0
  2511 ;;Total ram usage:        4 bytes
  2512 ;; Hardware stack levels used:    1
  2513 ;; Hardware stack levels required when called:    8
  2514 ;; This function calls:
  2515 ;;		___ftdiv
  2516 ;;		___fttol
  2517 ;; This function is called by:
  2518 ;;		_main
  2519 ;; This function uses a non-reentrant model
  2520 ;;
  2521                           
  2522                           	psect	text7
  2523  002BEA                     __ptext7:
  2524                           	opt stack 0
  2525  002BEA                     _Sequencer_StartTimer:
  2526                           	opt stack 22
  2527                           
  2528                           ; BSR set to: 0
  2529                           ;sequencer.c: 29: _Timer.Loop = ALoop;
  2530                           
  2531                           ;incstack = 0
  2532  002BEA  C0A1  F05A         	movff	Sequencer_StartTimer@ALoop,__Timer+1
  2533                           
  2534                           ; BSR set to: 0
  2535                           ;sequencer.c: 30: _Timer.Ticks = ATime / ((4.0f / 48000000L) * 1 * 65535);
  2536  002BEE  0EF4               	movlw	244
  2537  002BF0  6F83               	movwf	___ftdiv@f2& (0+255),b
  2538  002BF2  0EB2               	movlw	178
  2539  002BF4  6F84               	movwf	(___ftdiv@f2+1)& (0+255),b
  2540  002BF6  0E3B               	movlw	59
  2541  002BF8  6F85               	movwf	(___ftdiv@f2+2)& (0+255),b
  2542  002BFA  C09E  F080         	movff	Sequencer_StartTimer@ATime,___ftdiv@f1
  2543  002BFE  C09F  F081         	movff	Sequencer_StartTimer@ATime+1,___ftdiv@f1+1
  2544  002C02  C0A0  F082         	movff	Sequencer_StartTimer@ATime+2,___ftdiv@f1+2
  2545  002C06  EC48  F00F         	call	___ftdiv	;wreg free
  2546  002C0A  C080  F08F         	movff	?___ftdiv,___fttol@f1
  2547  002C0E  C081  F090         	movff	?___ftdiv+1,___fttol@f1+1
  2548  002C12  C082  F091         	movff	?___ftdiv+2,___fttol@f1+2
  2549  002C16  ECEB  F00E         	call	___fttol	;wreg free
  2550  002C1A  C08F  F05B         	movff	?___fttol,__Timer+2
  2551  002C1E  C090  F05C         	movff	?___fttol+1,__Timer+3
  2552                           
  2553                           ; BSR set to: 0
  2554                           ;sequencer.c: 32: T1CKPS0 = 0;
  2555  002C22  98CD               	bcf	4045,4,c	;volatile
  2556                           
  2557                           ; BSR set to: 0
  2558                           ;sequencer.c: 33: T1CKPS0 = 0;
  2559  002C24  98CD               	bcf	4045,4,c	;volatile
  2560                           
  2561                           ; BSR set to: 0
  2562                           ;sequencer.c: 34: T1OSCEN = 1;
  2563  002C26  86CD               	bsf	4045,3,c	;volatile
  2564                           
  2565                           ; BSR set to: 0
  2566                           ;sequencer.c: 35: T1SYNC = 1;
  2567  002C28  84CD               	bsf	4045,2,c	;volatile
  2568                           
  2569                           ; BSR set to: 0
  2570                           ;sequencer.c: 36: TMR1CS = 0;
  2571  002C2A  92CD               	bcf	4045,1,c	;volatile
  2572                           
  2573                           ; BSR set to: 0
  2574                           ;sequencer.c: 37: TMR1H = 0;
  2575  002C2C  6ACF               	clrf	4047,c	;volatile
  2576                           
  2577                           ; BSR set to: 0
  2578                           ;sequencer.c: 38: TMR1L = 0;
  2579  002C2E  6ACE               	clrf	4046,c	;volatile
  2580                           
  2581                           ; BSR set to: 0
  2582                           ;sequencer.c: 41: TMR1IE = 1;
  2583  002C30  809D               	bsf	3997,0,c	;volatile
  2584                           
  2585                           ; BSR set to: 0
  2586                           ;sequencer.c: 42: TMR1IF = 0;
  2587  002C32  909E               	bcf	3998,0,c	;volatile
  2588                           
  2589                           ; BSR set to: 0
  2590                           ;sequencer.c: 43: TMR1ON = 1;
  2591  002C34  80CD               	bsf	4045,0,c	;volatile
  2592                           
  2593                           ; BSR set to: 0
  2594  002C36  0012               	return		;funcret
  2595  002C38                     __end_of_Sequencer_StartTimer:
  2596                           	opt stack 0
  2597                           tblptru	equ	0xFF8
  2598                           tblptrh	equ	0xFF7
  2599                           tblptrl	equ	0xFF6
  2600                           tablat	equ	0xFF5
  2601                           postinc0	equ	0xFEE
  2602                           plusw0	equ	0xFEB
  2603                           wreg	equ	0xFE8
  2604                           postinc1	equ	0xFE6
  2605                           postdec1	equ	0xFE5
  2606                           fsr1h	equ	0xFE2
  2607                           fsr1l	equ	0xFE1
  2608                           indf2	equ	0xFDF
  2609                           postinc2	equ	0xFDE
  2610                           plusw2	equ	0xFDB
  2611                           fsr2h	equ	0xFDA
  2612                           fsr2l	equ	0xFD9
  2613                           status	equ	0xFD8
  2614                           
  2615 ;; *************** function _RunHub *****************
  2616 ;; Defined at:
  2617 ;;		line 142 in file "main.c"
  2618 ;; Parameters:    Size  Location     Type
  2619 ;;		None
  2620 ;; Auto vars:     Size  Location     Type
  2621 ;;		None
  2622 ;; Return value:  Size  Location     Type
  2623 ;;                  1    wreg      void 
  2624 ;; Registers used:
  2625 ;;		wreg, status,2
  2626 ;; Tracked objects:
  2627 ;;		On entry : 0/0
  2628 ;;		On exit  : 3F/1
  2629 ;;		Unchanged: 0/0
  2630 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2631 ;;      Params:         0       0       0       0       0       0       0       0       0
  2632 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2633 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2634 ;;      Totals:         0       0       0       0       0       0       0       0       0
  2635 ;;Total ram usage:        0 bytes
  2636 ;; Hardware stack levels used:    1
  2637 ;; Hardware stack levels required when called:    6
  2638 ;; This function calls:
  2639 ;;		Nothing
  2640 ;; This function is called by:
  2641 ;;		_main
  2642 ;; This function uses a non-reentrant model
  2643 ;;
  2644                           
  2645                           	psect	text8
  2646  003160                     __ptext8:
  2647                           	opt stack 0
  2648  003160                     _RunHub:
  2649                           	opt stack 24
  2650                           
  2651                           ;main.c: 145: _Hub.ReadyToWrite = 1;
  2652                           
  2653                           ; BSR set to: 0
  2654                           ;incstack = 0
  2655  003160  0E01               	movlw	1
  2656  003162  0101               	movlb	1	; () banked
  2657  003164  6F86               	movwf	(__Hub+134)& (0+255),b
  2658  003166                     l4514:
  2659                           
  2660                           ; BSR set to: 1
  2661  003166  5186               	movf	(__Hub+134)& (0+255),w,b
  2662  003168  E1FE               	bnz	l4514
  2663                           
  2664                           ; BSR set to: 1
  2665                           ;main.c: 147: _Hub.ReadyToRead = 1;
  2666  00316A  0E01               	movlw	1
  2667  00316C  6F87               	movwf	(__Hub+135)& (0+255),b
  2668                           
  2669                           ; BSR set to: 1
  2670  00316E  0C01               	retlw	1	;funcret
  2671  003170                     __end_of_RunHub:
  2672                           	opt stack 0
  2673                           tblptru	equ	0xFF8
  2674                           tblptrh	equ	0xFF7
  2675                           tblptrl	equ	0xFF6
  2676                           tablat	equ	0xFF5
  2677                           postinc0	equ	0xFEE
  2678                           plusw0	equ	0xFEB
  2679                           wreg	equ	0xFE8
  2680                           postinc1	equ	0xFE6
  2681                           postdec1	equ	0xFE5
  2682                           fsr1h	equ	0xFE2
  2683                           fsr1l	equ	0xFE1
  2684                           indf2	equ	0xFDF
  2685                           postinc2	equ	0xFDE
  2686                           plusw2	equ	0xFDB
  2687                           fsr2h	equ	0xFDA
  2688                           fsr2l	equ	0xFD9
  2689                           status	equ	0xFD8
  2690                           
  2691 ;; *************** function _Persistant_SaveBuffer *****************
  2692 ;; Defined at:
  2693 ;;		line 100 in file "persistant.c"
  2694 ;; Parameters:    Size  Location     Type
  2695 ;;  ABuffer        12   76[BANK0 ] struct .
  2696 ;; Auto vars:     Size  Location     Type
  2697 ;;  i               1  102[BANK0 ] unsigned char 
  2698 ;;  LZip           10   92[BANK0 ] struct .
  2699 ;;  LResult         1   91[BANK0 ] unsigned char 
  2700 ;; Return value:  Size  Location     Type
  2701 ;;                  1    wreg      unsigned char 
  2702 ;; Registers used:
  2703 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2704 ;; Tracked objects:
  2705 ;;		On entry : 3F/0
  2706 ;;		On exit  : 3F/0
  2707 ;;		Unchanged: 0/0
  2708 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2709 ;;      Params:         0      12       0       0       0       0       0       0       0
  2710 ;;      Locals:         0      12       0       0       0       0       0       0       0
  2711 ;;      Temps:          0       3       0       0       0       0       0       0       0
  2712 ;;      Totals:         0      27       0       0       0       0       0       0       0
  2713 ;;Total ram usage:       27 bytes
  2714 ;; Hardware stack levels used:    1
  2715 ;; Hardware stack levels required when called:   12
  2716 ;; This function calls:
  2717 ;;		_Persistant_WriteExternalMemory
  2718 ;;		_Zip
  2719 ;;		_memcpy
  2720 ;; This function is called by:
  2721 ;;		_main
  2722 ;; This function uses a non-reentrant model
  2723 ;;
  2724                           
  2725                           	psect	text9
  2726  002618                     __ptext9:
  2727                           	opt stack 0
  2728  002618                     _Persistant_SaveBuffer:
  2729                           	opt stack 18
  2730                           
  2731                           ; BSR set to: 0
  2732                           ;persistant.c: 102: bool LResult = 1;
  2733                           
  2734                           ; BSR set to: 1
  2735                           ;incstack = 0
  2736  002618  0E01               	movlw	1
  2737  00261A  6FBB               	movwf	Persistant_SaveBuffer@LResult& (0+255),b
  2738                           
  2739                           ; BSR set to: 0
  2740                           ;persistant.c: 103: ZipContainer LZip;
  2741                           ;persistant.c: 104: LZip.Buffer = &ABuffer;
  2742  00261C  0EAC               	movlw	low Persistant_SaveBuffer@ABuffer
  2743  00261E  6FBC               	movwf	Persistant_SaveBuffer@LZip& (0+255),b
  2744  002620  6BBD               	clrf	(Persistant_SaveBuffer@LZip+1)& (0+255),b
  2745                           
  2746                           ; BSR set to: 0
  2747                           ;persistant.c: 105: Zip(&LZip);
  2748  002622  0EBC               	movlw	low Persistant_SaveBuffer@LZip
  2749  002624  6F9E               	movwf	Zip@AZip& (0+255),b
  2750  002626  ECD8  F00C         	call	_Zip	;wreg free
  2751                           
  2752                           ; BSR set to: 0
  2753                           ;persistant.c: 106: for (char i = 0; i < sizeof(LZip.Bytes); i++)
  2754  00262A  6BC6               	clrf	Persistant_SaveBuffer@i& (0+255),b
  2755  00262C                     l4560:
  2756                           
  2757                           ; BSR set to: 0
  2758                           ;persistant.c: 107: LResult &= Persistant_WriteExternalMemory((ABuffer.Channel / 2 ) * s
      +                          izeof(LZip.Bytes) + i, LZip.Bytes[i]);
  2759  00262C  90D8               	bcf	status,0,c
  2760  00262E  31AE               	rrcf	(Persistant_SaveBuffer@ABuffer+2)& (0+255),w,b
  2761  002630  6FB8               	movwf	??_Persistant_SaveBuffer& (0+255),b
  2762  002632  6BB9               	clrf	(??_Persistant_SaveBuffer+1)& (0+255),b
  2763  002634  90D8               	bcf	status,0,c
  2764  002636  37B8               	rlcf	??_Persistant_SaveBuffer& (0+255),f,b
  2765  002638  37B9               	rlcf	(??_Persistant_SaveBuffer+1)& (0+255),f,b
  2766  00263A  90D8               	bcf	status,0,c
  2767  00263C  37B8               	rlcf	??_Persistant_SaveBuffer& (0+255),f,b
  2768  00263E  37B9               	rlcf	(??_Persistant_SaveBuffer+1)& (0+255),f,b
  2769  002640  90D8               	bcf	status,0,c
  2770  002642  37B8               	rlcf	??_Persistant_SaveBuffer& (0+255),f,b
  2771  002644  37B9               	rlcf	(??_Persistant_SaveBuffer+1)& (0+255),f,b
  2772  002646  51C6               	movf	Persistant_SaveBuffer@i& (0+255),w,b
  2773  002648  25B8               	addwf	??_Persistant_SaveBuffer& (0+255),w,b
  2774  00264A  6F72               	movwf	Persistant_WriteExternalMemory@AAddress& (0+255),b
  2775  00264C  0E00               	movlw	0
  2776  00264E  21B9               	addwfc	(??_Persistant_SaveBuffer+1)& (0+255),w,b
  2777  002650  6F73               	movwf	(Persistant_WriteExternalMemory@AAddress+1)& (0+255),b
  2778  002652  C0C6  F0BA         	movff	Persistant_SaveBuffer@i,??_Persistant_SaveBuffer+2
  2779  002656  0E02               	movlw	2
  2780  002658  27BA               	addwf	(??_Persistant_SaveBuffer+2)& (0+255),f,b
  2781  00265A  51BA               	movf	(??_Persistant_SaveBuffer+2)& (0+255),w,b
  2782  00265C  0FBC               	addlw	low Persistant_SaveBuffer@LZip
  2783  00265E  6ED9               	movwf	fsr2l,c
  2784  002660  6ADA               	clrf	fsr2h,c
  2785  002662  50DF               	movf	indf2,w,c
  2786  002664  6F74               	movwf	Persistant_WriteExternalMemory@AData& (0+255),b
  2787  002666  EC69  F016         	call	_Persistant_WriteExternalMemory	;wreg free
  2788  00266A  0100               	movlb	0	; () banked
  2789  00266C  17BB               	andwf	Persistant_SaveBuffer@LResult& (0+255),f,b
  2790                           
  2791                           ; BSR set to: 0
  2792  00266E  2BC6               	incf	Persistant_SaveBuffer@i& (0+255),f,b
  2793                           
  2794                           ; BSR set to: 0
  2795  002670  0E07               	movlw	7
  2796  002672  65C6               	cpfsgt	Persistant_SaveBuffer@i& (0+255),b
  2797  002674  D7DB               	goto	l4560
  2798                           
  2799                           ; BSR set to: 0
  2800                           ;persistant.c: 108: memcpy(&_Hub.BackupBuffer, &ABuffer, sizeof(DataBuffer));
  2801  002676  0E7A               	movlw	low (__Hub+122)
  2802  002678  6F60               	movwf	memcpy@d1& (0+255),b
  2803  00267A  0E01               	movlw	high (__Hub+122)
  2804  00267C  6F61               	movwf	(memcpy@d1+1)& (0+255),b
  2805  00267E  0EAC               	movlw	low Persistant_SaveBuffer@ABuffer
  2806  002680  6F62               	movwf	memcpy@s1& (0+255),b
  2807  002682  6B63               	clrf	(memcpy@s1+1)& (0+255),b
  2808  002684  6B65               	clrf	(memcpy@n+1)& (0+255),b
  2809  002686  0E0C               	movlw	12
  2810  002688  6F64               	movwf	memcpy@n& (0+255),b
  2811  00268A  EFAE  F016         	goto	_memcpy	;wreg free
  2812  00268E                     __end_of_Persistant_SaveBuffer:
  2813                           	opt stack 0
  2814                           tblptru	equ	0xFF8
  2815                           tblptrh	equ	0xFF7
  2816                           tblptrl	equ	0xFF6
  2817                           tablat	equ	0xFF5
  2818                           postinc0	equ	0xFEE
  2819                           plusw0	equ	0xFEB
  2820                           wreg	equ	0xFE8
  2821                           postinc1	equ	0xFE6
  2822                           postdec1	equ	0xFE5
  2823                           fsr1h	equ	0xFE2
  2824                           fsr1l	equ	0xFE1
  2825                           indf2	equ	0xFDF
  2826                           postinc2	equ	0xFDE
  2827                           plusw2	equ	0xFDB
  2828                           fsr2h	equ	0xFDA
  2829                           fsr2l	equ	0xFD9
  2830                           status	equ	0xFD8
  2831                           
  2832 ;; *************** function _Zip *****************
  2833 ;; Defined at:
  2834 ;;		line 8 in file "zip.c"
  2835 ;; Parameters:    Size  Location     Type
  2836 ;;  AZip            1   62[BANK0 ] PTR struct .
  2837 ;;		 -> Persistant_SaveBuffer@LZip(10), 
  2838 ;; Auto vars:     Size  Location     Type
  2839 ;;  j               2   74[BANK0 ] int 
  2840 ;;  i               2   72[BANK0 ] int 
  2841 ;;  i               2   70[BANK0 ] int 
  2842 ;;  LIndex          1   69[BANK0 ] unsigned char 
  2843 ;;  LBytes          1   68[BANK0 ] PTR unsigned char 
  2844 ;;		 -> LZip.Bytes(8), Persistant_SaveBuffer@LZip(10), 
  2845 ;; Return value:  Size  Location     Type
  2846 ;;                  1    wreg      unsigned char 
  2847 ;; Registers used:
  2848 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2849 ;; Tracked objects:
  2850 ;;		On entry : 3F/0
  2851 ;;		On exit  : 3F/0
  2852 ;;		Unchanged: 0/0
  2853 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2854 ;;      Params:         0       1       0       0       0       0       0       0       0
  2855 ;;      Locals:         0       8       0       0       0       0       0       0       0
  2856 ;;      Temps:          0       5       0       0       0       0       0       0       0
  2857 ;;      Totals:         0      14       0       0       0       0       0       0       0
  2858 ;;Total ram usage:       14 bytes
  2859 ;; Hardware stack levels used:    1
  2860 ;; Hardware stack levels required when called:    8
  2861 ;; This function calls:
  2862 ;;		___ftdiv
  2863 ;;		___fttol
  2864 ;;		___lbtoft
  2865 ;; This function is called by:
  2866 ;;		_Persistant_SaveBuffer
  2867 ;; This function uses a non-reentrant model
  2868 ;;
  2869                           
  2870                           	psect	text10
  2871  0019B0                     __ptext10:
  2872                           	opt stack 0
  2873  0019B0                     _Zip:
  2874                           	opt stack 21
  2875                           
  2876                           ; BSR set to: 0
  2877                           ;zip.c: 10: unsigned char *LBytes = AZip->Bytes;
  2878                           
  2879                           ; BSR set to: 0
  2880                           ;incstack = 0
  2881  0019B0  519E               	movf	Zip@AZip& (0+255),w,b
  2882  0019B2  0F02               	addlw	2
  2883  0019B4  6FA4               	movwf	Zip@LBytes& (0+255),b
  2884                           
  2885                           ; BSR set to: 0
  2886                           ;zip.c: 11: for(int i = 0; i < sizeof(AZip->Bytes); i++)
  2887  0019B6  6BA6               	clrf	Zip@i& (0+255),b
  2888  0019B8  6BA7               	clrf	(Zip@i+1)& (0+255),b
  2889  0019BA                     l4312:
  2890                           
  2891                           ; BSR set to: 0
  2892                           ;zip.c: 12: LBytes[i] = 0x00;
  2893  0019BA  51A4               	movf	Zip@LBytes& (0+255),w,b
  2894  0019BC  25A6               	addwf	Zip@i& (0+255),w,b
  2895  0019BE  6ED9               	movwf	fsr2l,c
  2896  0019C0  6ADA               	clrf	fsr2h,c
  2897  0019C2  0E00               	movlw	0
  2898  0019C4  6EDF               	movwf	indf2,c
  2899                           
  2900                           ; BSR set to: 0
  2901  0019C6  4BA6               	infsnz	Zip@i& (0+255),f,b
  2902  0019C8  2BA7               	incf	(Zip@i+1)& (0+255),f,b
  2903                           
  2904                           ; BSR set to: 0
  2905  0019CA  51A7               	movf	(Zip@i+1)& (0+255),w,b
  2906  0019CC  E103               	bnz	u4530
  2907  0019CE  0E08               	movlw	8
  2908  0019D0  5DA6               	subwf	Zip@i& (0+255),w,b
  2909  0019D2  E3F3               	bnc	l4312
  2910  0019D4                     u4530:
  2911                           
  2912                           ; BSR set to: 0
  2913                           ;zip.c: 15: for(int i = 0; i < sizeof(AZip->Buffer->Values); i++)
  2914  0019D4  6BA8               	clrf	Zip@i_1425& (0+255),b
  2915  0019D6  6BA9               	clrf	(Zip@i_1425+1)& (0+255),b
  2916  0019D8                     l617:
  2917                           
  2918                           ; BSR set to: 0
  2919                           ;zip.c: 16: {
  2920                           ;zip.c: 17: for(int j = 0; j < 6; j++)
  2921  0019D8  6BAA               	clrf	Zip@j& (0+255),b
  2922  0019DA  6BAB               	clrf	(Zip@j+1)& (0+255),b
  2923  0019DC                     l4326:
  2924                           
  2925                           ; BSR set to: 0
  2926                           ;zip.c: 18: {
  2927                           ;zip.c: 19: LIndex = i * 6 + j;
  2928  0019DC  51A8               	movf	Zip@i_1425& (0+255),w,b
  2929  0019DE  0D06               	mullw	6
  2930  0019E0  50F3               	movf	prodl,w,c
  2931  0019E2  25AA               	addwf	Zip@j& (0+255),w,b
  2932  0019E4  6FA5               	movwf	Zip@LIndex& (0+255),b
  2933                           
  2934                           ; BSR set to: 0
  2935                           ;zip.c: 20: LBytes[(char)(LIndex / 8.0f)] |= ((AZip->Buffer->Values[i] >> j) & 0x01) << 
      +                          (LIndex % 8);
  2936  0019E6  C0A5  F09F         	movff	Zip@LIndex,??_Zip
  2937  0019EA  0E07               	movlw	7
  2938  0019EC  179F               	andwf	??_Zip& (0+255),f,b
  2939  0019EE  C0AA  F0A0         	movff	Zip@j,??_Zip+1
  2940  0019F2  519E               	movf	Zip@AZip& (0+255),w,b
  2941  0019F4  6ED9               	movwf	fsr2l,c
  2942  0019F6  6ADA               	clrf	fsr2h,c
  2943  0019F8  CFDE F0A1          	movff	postinc2,??_Zip+2
  2944  0019FC  CFDD F0A2          	movff	postdec2,??_Zip+3
  2945  001A00  51A8               	movf	Zip@i_1425& (0+255),w,b
  2946  001A02  27A1               	addwf	(??_Zip+2)& (0+255),f,b
  2947  001A04  51A9               	movf	(Zip@i_1425+1)& (0+255),w,b
  2948  001A06  23A2               	addwfc	(??_Zip+3)& (0+255),f,b
  2949  001A08  0E04               	movlw	4
  2950  001A0A  25A1               	addwf	(??_Zip+2)& (0+255),w,b
  2951  001A0C  6ED9               	movwf	fsr2l,c
  2952  001A0E  0E00               	movlw	0
  2953  001A10  21A2               	addwfc	(??_Zip+3)& (0+255),w,b
  2954  001A12  6EDA               	movwf	fsr2h,c
  2955  001A14  50DF               	movf	indf2,w,c
  2956  001A16  6FA3               	movwf	(??_Zip+4)& (0+255),b
  2957  001A18  2BA0               	incf	(??_Zip+1)& (0+255),f,b
  2958  001A1A  D002               	goto	u4544
  2959  001A1C                     u4545:
  2960  001A1C  90D8               	bcf	status,0,c
  2961  001A1E  33A3               	rrcf	(??_Zip+4)& (0+255),f,b
  2962  001A20                     u4544:
  2963  001A20  2FA0               	decfsz	(??_Zip+1)& (0+255),f,b
  2964  001A22  D7FC               	goto	u4545
  2965  001A24  0E01               	movlw	1
  2966  001A26  0100               	movlb	0	; () banked
  2967  001A28  17A3               	andwf	(??_Zip+4)& (0+255),f,b
  2968  001A2A  2B9F               	incf	??_Zip& (0+255),f,b
  2969  001A2C  D002               	goto	u4554
  2970  001A2E                     u4555:
  2971  001A2E  90D8               	bcf	status,0,c
  2972  001A30  37A3               	rlcf	(??_Zip+4)& (0+255),f,b
  2973  001A32                     u4554:
  2974  001A32  2F9F               	decfsz	??_Zip& (0+255),f,b
  2975  001A34  D7FC               	goto	u4555
  2976  001A36  0100               	movlb	0	; () banked
  2977  001A38  6B83               	clrf	___ftdiv@f2& (0+255),b
  2978  001A3A  6B84               	clrf	(___ftdiv@f2+1)& (0+255),b
  2979  001A3C  0E41               	movlw	65
  2980  001A3E  6F85               	movwf	(___ftdiv@f2+2)& (0+255),b
  2981  001A40  51A5               	movf	Zip@LIndex& (0+255),w,b
  2982  001A42  EC2C  F018         	call	___lbtoft
  2983  001A46  C068  F080         	movff	?___lbtoft,___ftdiv@f1
  2984  001A4A  C069  F081         	movff	?___lbtoft+1,___ftdiv@f1+1
  2985  001A4E  C06A  F082         	movff	?___lbtoft+2,___ftdiv@f1+2
  2986  001A52  EC48  F00F         	call	___ftdiv	;wreg free
  2987  001A56  C080  F08F         	movff	?___ftdiv,___fttol@f1
  2988  001A5A  C081  F090         	movff	?___ftdiv+1,___fttol@f1+1
  2989  001A5E  C082  F091         	movff	?___ftdiv+2,___fttol@f1+2
  2990  001A62  ECEB  F00E         	call	___fttol	;wreg free
  2991  001A66  51A4               	movf	Zip@LBytes& (0+255),w,b
  2992  001A68  258F               	addwf	?___fttol& (0+255),w,b
  2993  001A6A  6ED9               	movwf	fsr2l,c
  2994  001A6C  6ADA               	clrf	fsr2h,c
  2995  001A6E  51A3               	movf	(??_Zip+4)& (0+255),w,b
  2996  001A70  12DF               	iorwf	indf2,f,c
  2997                           
  2998                           ; BSR set to: 0
  2999  001A72  4BAA               	infsnz	Zip@j& (0+255),f,b
  3000  001A74  2BAB               	incf	(Zip@j+1)& (0+255),f,b
  3001                           
  3002                           ; BSR set to: 0
  3003  001A76  BFAB               	btfsc	(Zip@j+1)& (0+255),7,b
  3004  001A78  D7B1               	goto	l4326
  3005  001A7A  51AB               	movf	(Zip@j+1)& (0+255),w,b
  3006  001A7C  E103               	bnz	u4560
  3007  001A7E  0E06               	movlw	6
  3008  001A80  5DAA               	subwf	Zip@j& (0+255),w,b
  3009  001A82  E3AC               	bnc	l4326
  3010  001A84                     u4560:
  3011                           
  3012                           ; BSR set to: 0
  3013  001A84  4BA8               	infsnz	Zip@i_1425& (0+255),f,b
  3014  001A86  2BA9               	incf	(Zip@i_1425+1)& (0+255),f,b
  3015                           
  3016                           ; BSR set to: 0
  3017  001A88  51A9               	movf	(Zip@i_1425+1)& (0+255),w,b
  3018  001A8A  E105               	bnz	u4570
  3019  001A8C  0E08               	movlw	8
  3020  001A8E  5DA8               	subwf	Zip@i_1425& (0+255),w,b
  3021  001A90  B0D8               	btfsc	status,0,c
  3022  001A92  0012               	return	
  3023  001A94  D7A1               	goto	l617
  3024  001A96                     u4570:
  3025                           
  3026                           ; BSR set to: 0
  3027  001A96  0012               	return		;funcret
  3028  001A98                     __end_of_Zip:
  3029                           	opt stack 0
  3030                           tblptru	equ	0xFF8
  3031                           tblptrh	equ	0xFF7
  3032                           tblptrl	equ	0xFF6
  3033                           tablat	equ	0xFF5
  3034                           prodl	equ	0xFF3
  3035                           postinc0	equ	0xFEE
  3036                           plusw0	equ	0xFEB
  3037                           wreg	equ	0xFE8
  3038                           postinc1	equ	0xFE6
  3039                           postdec1	equ	0xFE5
  3040                           fsr1h	equ	0xFE2
  3041                           fsr1l	equ	0xFE1
  3042                           indf2	equ	0xFDF
  3043                           postinc2	equ	0xFDE
  3044                           postdec2	equ	0xFDD
  3045                           plusw2	equ	0xFDB
  3046                           fsr2h	equ	0xFDA
  3047                           fsr2l	equ	0xFD9
  3048                           status	equ	0xFD8
  3049                           
  3050 ;; *************** function _PauseHub *****************
  3051 ;; Defined at:
  3052 ;;		line 135 in file "main.c"
  3053 ;; Parameters:    Size  Location     Type
  3054 ;;		None
  3055 ;; Auto vars:     Size  Location     Type
  3056 ;;		None
  3057 ;; Return value:  Size  Location     Type
  3058 ;;                  1    wreg      void 
  3059 ;; Registers used:
  3060 ;;		wreg, status,2
  3061 ;; Tracked objects:
  3062 ;;		On entry : 0/0
  3063 ;;		On exit  : 3F/1
  3064 ;;		Unchanged: 0/0
  3065 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3066 ;;      Params:         0       0       0       0       0       0       0       0       0
  3067 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3068 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3069 ;;      Totals:         0       0       0       0       0       0       0       0       0
  3070 ;;Total ram usage:        0 bytes
  3071 ;; Hardware stack levels used:    1
  3072 ;; Hardware stack levels required when called:    6
  3073 ;; This function calls:
  3074 ;;		Nothing
  3075 ;; This function is called by:
  3076 ;;		_main
  3077 ;; This function uses a non-reentrant model
  3078 ;;
  3079                           
  3080                           	psect	text11
  3081  003216                     __ptext11:
  3082                           	opt stack 0
  3083  003216                     _PauseHub:
  3084                           	opt stack 24
  3085                           
  3086                           ;main.c: 138: _Hub.ReadyToRead = 0;
  3087                           
  3088                           ; BSR set to: 0
  3089                           ;incstack = 0
  3090  003216  0101               	movlb	1	; () banked
  3091  003218  6B87               	clrf	(__Hub+135)& (0+255),b
  3092  00321A                     l4510:
  3093                           
  3094                           ; BSR set to: 1
  3095  00321A  5188               	movf	(__Hub+136)& (0+255),w,b
  3096  00321C  E0FE               	bz	l4510
  3097                           
  3098                           ; BSR set to: 1
  3099  00321E  0012               	return		;funcret
  3100  003220                     __end_of_PauseHub:
  3101                           	opt stack 0
  3102                           tblptru	equ	0xFF8
  3103                           tblptrh	equ	0xFF7
  3104                           tblptrl	equ	0xFF6
  3105                           tablat	equ	0xFF5
  3106                           prodl	equ	0xFF3
  3107                           postinc0	equ	0xFEE
  3108                           plusw0	equ	0xFEB
  3109                           wreg	equ	0xFE8
  3110                           postinc1	equ	0xFE6
  3111                           postdec1	equ	0xFE5
  3112                           fsr1h	equ	0xFE2
  3113                           fsr1l	equ	0xFE1
  3114                           indf2	equ	0xFDF
  3115                           postinc2	equ	0xFDE
  3116                           postdec2	equ	0xFDD
  3117                           plusw2	equ	0xFDB
  3118                           fsr2h	equ	0xFDA
  3119                           fsr2l	equ	0xFD9
  3120                           status	equ	0xFD8
  3121                           
  3122 ;; *************** function _Midi_Read *****************
  3123 ;; Defined at:
  3124 ;;		line 94 in file "midi.c"
  3125 ;; Parameters:    Size  Location     Type
  3126 ;;  AData           1    0[BANK0 ] PTR struct .
  3127 ;;		 -> main@LMidiData(5), 
  3128 ;;  AMidiBuffer     2    1[BANK0 ] PTR struct .
  3129 ;;		 -> _MidiInput(324), 
  3130 ;; Auto vars:     Size  Location     Type
  3131 ;;		None
  3132 ;; Return value:  Size  Location     Type
  3133 ;;                  1    wreg      unsigned char 
  3134 ;; Registers used:
  3135 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  3136 ;; Tracked objects:
  3137 ;;		On entry : 3F/0
  3138 ;;		On exit  : 3F/0
  3139 ;;		Unchanged: 0/0
  3140 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3141 ;;      Params:         0       3       0       0       0       0       0       0       0
  3142 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3143 ;;      Temps:          0       1       0       0       0       0       0       0       0
  3144 ;;      Totals:         0       4       0       0       0       0       0       0       0
  3145 ;;Total ram usage:        4 bytes
  3146 ;; Hardware stack levels used:    1
  3147 ;; Hardware stack levels required when called:    6
  3148 ;; This function calls:
  3149 ;;		Nothing
  3150 ;; This function is called by:
  3151 ;;		_main
  3152 ;; This function uses a non-reentrant model
  3153 ;;
  3154                           
  3155                           	psect	text12
  3156  00259C                     __ptext12:
  3157                           	opt stack 0
  3158  00259C                     _Midi_Read:
  3159                           	opt stack 24
  3160                           
  3161                           ; BSR set to: 0
  3162                           ;midi.c: 96: if (AMidiBuffer->Size > 0)
  3163                           
  3164                           ; BSR set to: 1
  3165                           ;incstack = 0
  3166  00259C  EE21 F043          	lfsr	2,323
  3167  0025A0  5161               	movf	Midi_Read@AMidiBuffer& (0+255),w,b
  3168  0025A2  26D9               	addwf	fsr2l,f,c
  3169  0025A4  5162               	movf	(Midi_Read@AMidiBuffer+1)& (0+255),w,b
  3170  0025A6  22DA               	addwfc	fsr2h,f,c
  3171  0025A8  50DF               	movf	indf2,w,c
  3172  0025AA  E035               	bz	l4612
  3173                           
  3174                           ; BSR set to: 0
  3175                           ;midi.c: 97: {
  3176                           ;midi.c: 98: *AData = AMidiBuffer->Buffer[AMidiBuffer->iBufferRead];
  3177  0025AC  EE21 F040          	lfsr	2,320
  3178  0025B0  5161               	movf	Midi_Read@AMidiBuffer& (0+255),w,b
  3179  0025B2  26D9               	addwf	fsr2l,f,c
  3180  0025B4  5162               	movf	(Midi_Read@AMidiBuffer+1)& (0+255),w,b
  3181  0025B6  22DA               	addwfc	fsr2h,f,c
  3182  0025B8  50DF               	movf	indf2,w,c
  3183  0025BA  0D05               	mullw	5
  3184  0025BC  50F3               	movf	prodl,w,c
  3185  0025BE  2561               	addwf	Midi_Read@AMidiBuffer& (0+255),w,b
  3186  0025C0  6ED9               	movwf	fsr2l,c
  3187  0025C2  50F4               	movf	prodh,w,c
  3188  0025C4  2162               	addwfc	(Midi_Read@AMidiBuffer+1)& (0+255),w,b
  3189  0025C6  6EDA               	movwf	fsr2h,c
  3190  0025C8  5160               	movf	Midi_Read@AData& (0+255),w,b
  3191  0025CA  6EE1               	movwf	fsr1l,c
  3192  0025CC  6AE2               	clrf	fsr1h,c
  3193  0025CE  0E04               	movlw	4
  3194  0025D0                     u4901:
  3195  0025D0  CFDB FFE3          	movff	plusw2,plusw1
  3196  0025D4  06E8               	decf	wreg,f,c
  3197  0025D6  E2FC               	bc	u4901
  3198                           
  3199                           ; BSR set to: 0
  3200                           ;midi.c: 99: AMidiBuffer->Size--;
  3201  0025D8  EE21 F043          	lfsr	2,323
  3202  0025DC  5161               	movf	Midi_Read@AMidiBuffer& (0+255),w,b
  3203  0025DE  26D9               	addwf	fsr2l,f,c
  3204  0025E0  5162               	movf	(Midi_Read@AMidiBuffer+1)& (0+255),w,b
  3205  0025E2  22DA               	addwfc	fsr2h,f,c
  3206  0025E4  06DF               	decf	indf2,f,c
  3207                           
  3208                           ; BSR set to: 0
  3209                           ;midi.c: 100: AMidiBuffer->iBufferRead++;
  3210  0025E6  EE21 F040          	lfsr	2,320
  3211  0025EA  5161               	movf	Midi_Read@AMidiBuffer& (0+255),w,b
  3212  0025EC  26D9               	addwf	fsr2l,f,c
  3213  0025EE  5162               	movf	(Midi_Read@AMidiBuffer+1)& (0+255),w,b
  3214  0025F0  22DA               	addwfc	fsr2h,f,c
  3215  0025F2  2ADF               	incf	indf2,f,c
  3216                           
  3217                           ; BSR set to: 0
  3218                           ;midi.c: 101: if (AMidiBuffer->iBufferRead >= 64)
  3219  0025F4  EE21 F040          	lfsr	2,320
  3220  0025F8  5161               	movf	Midi_Read@AMidiBuffer& (0+255),w,b
  3221  0025FA  26D9               	addwf	fsr2l,f,c
  3222  0025FC  5162               	movf	(Midi_Read@AMidiBuffer+1)& (0+255),w,b
  3223  0025FE  22DA               	addwfc	fsr2h,f,c
  3224  002600  0E3F               	movlw	63
  3225  002602  64DF               	cpfsgt	indf2,c
  3226  002604  0C01               	retlw	1
  3227                           
  3228                           ; BSR set to: 0
  3229                           ;midi.c: 102: AMidiBuffer->iBufferRead = 0;
  3230  002606  EE21 F040          	lfsr	2,320
  3231  00260A  5161               	movf	Midi_Read@AMidiBuffer& (0+255),w,b
  3232  00260C  26D9               	addwf	fsr2l,f,c
  3233  00260E  5162               	movf	(Midi_Read@AMidiBuffer+1)& (0+255),w,b
  3234  002610  22DA               	addwfc	fsr2h,f,c
  3235  002612  6ADF               	clrf	indf2,c
  3236                           
  3237                           ; BSR set to: 0
  3238                           ;midi.c: 103: return 1;
  3239  002614  0C01               	retlw	1
  3240  002616                     l4612:
  3241                           
  3242                           ; BSR set to: 0
  3243                           
  3244                           ; BSR set to: 0
  3245                           ;midi.c: 105: else
  3246                           ;midi.c: 106: return 0;
  3247  002616  0C00               	retlw	0	;funcret
  3248  002618                     __end_of_Midi_Read:
  3249                           	opt stack 0
  3250                           tblptru	equ	0xFF8
  3251                           tblptrh	equ	0xFF7
  3252                           tblptrl	equ	0xFF6
  3253                           tablat	equ	0xFF5
  3254                           prodh	equ	0xFF4
  3255                           prodl	equ	0xFF3
  3256                           postinc0	equ	0xFEE
  3257                           plusw0	equ	0xFEB
  3258                           wreg	equ	0xFE8
  3259                           postinc1	equ	0xFE6
  3260                           postdec1	equ	0xFE5
  3261                           plusw1	equ	0xFE3
  3262                           fsr1h	equ	0xFE2
  3263                           fsr1l	equ	0xFE1
  3264                           indf2	equ	0xFDF
  3265                           postinc2	equ	0xFDE
  3266                           postdec2	equ	0xFDD
  3267                           plusw2	equ	0xFDB
  3268                           fsr2h	equ	0xFDA
  3269                           fsr2l	equ	0xFD9
  3270                           status	equ	0xFD8
  3271                           
  3272 ;; *************** function _Load *****************
  3273 ;; Defined at:
  3274 ;;		line 117 in file "main.c"
  3275 ;; Parameters:    Size  Location     Type
  3276 ;;  AChannel        1    wreg     unsigned char 
  3277 ;; Auto vars:     Size  Location     Type
  3278 ;;  AChannel        1  102[BANK0 ] unsigned char 
  3279 ;;  i               2  105[BANK0 ] int 
  3280 ;;  i               2  103[BANK0 ] int 
  3281 ;;  LBuffer        12   90[BANK0 ] unsigned char [12]
  3282 ;; Return value:  Size  Location     Type
  3283 ;;                  1    wreg      void 
  3284 ;; Registers used:
  3285 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3286 ;; Tracked objects:
  3287 ;;		On entry : 3E/1
  3288 ;;		On exit  : 3F/0
  3289 ;;		Unchanged: 0/0
  3290 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3291 ;;      Params:         0       0       0       0       0       0       0       0       0
  3292 ;;      Locals:         0      17       0       0       0       0       0       0       0
  3293 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3294 ;;      Totals:         0      17       0       0       0       0       0       0       0
  3295 ;;Total ram usage:       17 bytes
  3296 ;; Hardware stack levels used:    1
  3297 ;; Hardware stack levels required when called:   12
  3298 ;; This function calls:
  3299 ;;		_Hub_CopyBuffer
  3300 ;;		_Persistant_LoadBuffer
  3301 ;;		_Persistant_WriteInternalMemory
  3302 ;;		_memcpy
  3303 ;; This function is called by:
  3304 ;;		_main
  3305 ;; This function uses a non-reentrant model
  3306 ;;
  3307                           
  3308                           	psect	text13
  3309  0022FC                     __ptext13:
  3310                           	opt stack 0
  3311  0022FC                     _Load:
  3312                           	opt stack 18
  3313                           
  3314                           ; BSR set to: 0
  3315                           ;incstack = 0
  3316                           ;Load@AChannel stored from wreg
  3317  0022FC  0100               	movlb	0	; () banked
  3318  0022FE  6FC6               	movwf	Load@AChannel& (0+255),b
  3319                           
  3320                           ;main.c: 119: _Hub.PrimaryBuffer.Channel = AChannel;
  3321  002300  C0C6  F164         	movff	Load@AChannel,__Hub+100
  3322                           
  3323                           ;main.c: 122: Persistant_LoadBuffer(&_Hub.PrimaryBuffer);
  3324  002304  0E62               	movlw	low (__Hub+98)
  3325  002306  6FA8               	movwf	Persistant_LoadBuffer@ABuffer& (0+255),b
  3326  002308  0E01               	movlw	high (__Hub+98)
  3327  00230A  6FA9               	movwf	(Persistant_LoadBuffer@ABuffer+1)& (0+255),b
  3328  00230C  ECA0  F010         	call	_Persistant_LoadBuffer	;wreg free
  3329                           
  3330                           ; BSR set to: 0
  3331                           ;main.c: 123: Hub_CopyBuffer();
  3332  002310  EC3F  F018         	call	_Hub_CopyBuffer	;wreg free
  3333                           
  3334                           ; BSR set to: 1
  3335                           ;main.c: 124: _Config.Channel = AChannel / 2;
  3336  002314  0100               	movlb	0	; () banked
  3337  002316  90D8               	bcf	status,0,c
  3338  002318  31C6               	rrcf	Load@AChannel& (0+255),w,b
  3339  00231A  0101               	movlb	1	; () banked
  3340  00231C  6F9D               	movwf	__Config& (0+255),b
  3341                           
  3342                           ; BSR set to: 1
  3343                           ;main.c: 125: unsigned char LBuffer[sizeof(_Config)];
  3344                           ;main.c: 126: memcpy(LBuffer, &_Config, sizeof(_Config));
  3345  00231E  0EBA               	movlw	low Load@LBuffer
  3346  002320  0100               	movlb	0	; () banked
  3347  002322  6F60               	movwf	memcpy@d1& (0+255),b
  3348  002324  6B61               	clrf	(memcpy@d1+1)& (0+255),b
  3349  002326  0E9D               	movlw	low __Config
  3350  002328  6F62               	movwf	memcpy@s1& (0+255),b
  3351  00232A  0E01               	movlw	high __Config
  3352  00232C  6F63               	movwf	(memcpy@s1+1)& (0+255),b
  3353  00232E  6B65               	clrf	(memcpy@n+1)& (0+255),b
  3354  002330  0E0C               	movlw	12
  3355  002332  6F64               	movwf	memcpy@n& (0+255),b
  3356  002334  ECAE  F016         	call	_memcpy	;wreg free
  3357                           
  3358                           ; BSR set to: 0
  3359                           ;main.c: 127: for(int i = 0; i < sizeof(_Config); i++)
  3360  002338  6BC7               	clrf	Load@i& (0+255),b
  3361  00233A  6BC8               	clrf	(Load@i+1)& (0+255),b
  3362  00233C                     l4492:
  3363                           
  3364                           ; BSR set to: 0
  3365                           ;main.c: 128: Persistant_WriteInternalMemory(i, LBuffer);
  3366  00233C  C0C7  F062         	movff	Load@i,Persistant_WriteInternalMemory@AAddress
  3367  002340  C0C8  F063         	movff	Load@i+1,Persistant_WriteInternalMemory@AAddress+1
  3368  002344  0EBA               	movlw	low Load@LBuffer
  3369  002346  6F64               	movwf	Persistant_WriteInternalMemory@AData& (0+255),b
  3370  002348  EC30  F017         	call	_Persistant_WriteInternalMemory	;wreg free
  3371  00234C  0100               	movlb	0	; () banked
  3372  00234E  4BC7               	infsnz	Load@i& (0+255),f,b
  3373  002350  2BC8               	incf	(Load@i+1)& (0+255),f,b
  3374                           
  3375                           ; BSR set to: 0
  3376  002352  51C8               	movf	(Load@i+1)& (0+255),w,b
  3377  002354  E103               	bnz	u4840
  3378  002356  0E0C               	movlw	12
  3379  002358  5DC7               	subwf	Load@i& (0+255),w,b
  3380  00235A  E3F0               	bnc	l4492
  3381  00235C                     u4840:
  3382                           
  3383                           ; BSR set to: 0
  3384                           ;main.c: 130: for (int i = 0; i < 2; i++)
  3385  00235C  6BC9               	clrf	Load@i_420& (0+255),b
  3386  00235E  6BCA               	clrf	(Load@i_420+1)& (0+255),b
  3387  002360                     l4502:
  3388                           
  3389                           ; BSR set to: 0
  3390                           ;main.c: 131: _Display.PointMask[i] = 0x08;
  3391  002360  0EC8               	movlw	low (__Display+200)
  3392  002362  25C9               	addwf	Load@i_420& (0+255),w,b
  3393  002364  6ED9               	movwf	fsr2l,c
  3394  002366  0E02               	movlw	high (__Display+200)
  3395  002368  21CA               	addwfc	(Load@i_420+1)& (0+255),w,b
  3396  00236A  6EDA               	movwf	fsr2h,c
  3397  00236C  0E08               	movlw	8
  3398  00236E  6EDF               	movwf	indf2,c
  3399                           
  3400                           ; BSR set to: 0
  3401  002370  4BC9               	infsnz	Load@i_420& (0+255),f,b
  3402  002372  2BCA               	incf	(Load@i_420+1)& (0+255),f,b
  3403                           
  3404                           ; BSR set to: 0
  3405  002374  BFCA               	btfsc	(Load@i_420+1)& (0+255),7,b
  3406  002376  D7F4               	goto	l4502
  3407  002378  51CA               	movf	(Load@i_420+1)& (0+255),w,b
  3408  00237A  E103               	bnz	u4850
  3409  00237C  0E02               	movlw	2
  3410  00237E  5DC9               	subwf	Load@i_420& (0+255),w,b
  3411  002380  E3EF               	bnc	l4502
  3412  002382                     u4850:
  3413                           
  3414                           ; BSR set to: 0
  3415                           ;main.c: 132: _Modified = 0;
  3416  002382  6BE0               	clrf	__Modified& (0+255),b
  3417                           
  3418                           ; BSR set to: 0
  3419  002384  0012               	return		;funcret
  3420  002386                     __end_of_Load:
  3421                           	opt stack 0
  3422                           tblptru	equ	0xFF8
  3423                           tblptrh	equ	0xFF7
  3424                           tblptrl	equ	0xFF6
  3425                           tablat	equ	0xFF5
  3426                           prodh	equ	0xFF4
  3427                           prodl	equ	0xFF3
  3428                           postinc0	equ	0xFEE
  3429                           plusw0	equ	0xFEB
  3430                           wreg	equ	0xFE8
  3431                           postinc1	equ	0xFE6
  3432                           postdec1	equ	0xFE5
  3433                           plusw1	equ	0xFE3
  3434                           fsr1h	equ	0xFE2
  3435                           fsr1l	equ	0xFE1
  3436                           indf2	equ	0xFDF
  3437                           postinc2	equ	0xFDE
  3438                           postdec2	equ	0xFDD
  3439                           plusw2	equ	0xFDB
  3440                           fsr2h	equ	0xFDA
  3441                           fsr2l	equ	0xFD9
  3442                           status	equ	0xFD8
  3443                           
  3444 ;; *************** function _Persistant_WriteInternalMemory *****************
  3445 ;; Defined at:
  3446 ;;		line 78 in file "persistant.c"
  3447 ;; Parameters:    Size  Location     Type
  3448 ;;  AAddress        2    2[BANK0 ] int 
  3449 ;;  AData           1    4[BANK0 ] unsigned char 
  3450 ;; Auto vars:     Size  Location     Type
  3451 ;;  LState          1    5[BANK0 ] unsigned char 
  3452 ;; Return value:  Size  Location     Type
  3453 ;;                  1    wreg      unsigned char 
  3454 ;; Registers used:
  3455 ;;		wreg, status,2, cstack
  3456 ;; Tracked objects:
  3457 ;;		On entry : 3F/0
  3458 ;;		On exit  : 0/0
  3459 ;;		Unchanged: 0/0
  3460 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3461 ;;      Params:         0       3       0       0       0       0       0       0       0
  3462 ;;      Locals:         0       1       0       0       0       0       0       0       0
  3463 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3464 ;;      Totals:         0       4       0       0       0       0       0       0       0
  3465 ;;Total ram usage:        4 bytes
  3466 ;; Hardware stack levels used:    1
  3467 ;; Hardware stack levels required when called:    7
  3468 ;; This function calls:
  3469 ;;		_Persistant_ReadInternalMemory
  3470 ;; This function is called by:
  3471 ;;		_Load
  3472 ;; This function uses a non-reentrant model
  3473 ;;
  3474                           
  3475                           	psect	text14
  3476  002E60                     __ptext14:
  3477                           	opt stack 0
  3478  002E60                     _Persistant_WriteInternalMemory:
  3479                           	opt stack 22
  3480                           
  3481                           ; BSR set to: 0
  3482                           ;persistant.c: 80: EECON1bits.WREN = 1;
  3483                           
  3484                           ; BSR set to: 0
  3485                           ;incstack = 0
  3486  002E60  84A6               	bsf	4006,2,c	;volsfr
  3487                           
  3488                           ;persistant.c: 81: EEADR = AAddress;
  3489  002E62  C062  FFA9         	movff	Persistant_WriteInternalMemory@AAddress,4009	;volatile
  3490                           
  3491                           ;persistant.c: 82: EEDATA = AData;
  3492  002E66  C064  FFA8         	movff	Persistant_WriteInternalMemory@AData,4008	;volatile
  3493                           
  3494                           ;persistant.c: 83: EECON1bits.EEPGD = 0;
  3495  002E6A  9EA6               	bcf	4006,7,c	;volsfr
  3496                           
  3497                           ;persistant.c: 84: EECON1bits.CFGS = 0;
  3498  002E6C  9CA6               	bcf	4006,6,c	;volsfr
  3499                           
  3500                           ; BSR set to: 0
  3501                           ;persistant.c: 85: unsigned char LState = INTCONbits.GIE;
  3502  002E6E  0E00               	movlw	0
  3503  002E70  BEF2               	btfsc	intcon,7,c	;volatile
  3504  002E72  0E01               	movlw	1
  3505  002E74  6F65               	movwf	Persistant_WriteInternalMemory@LState& (0+255),b
  3506                           
  3507                           ; BSR set to: 0
  3508                           ;persistant.c: 86: INTCONbits.GIE = 0;
  3509  002E76  9EF2               	bcf	intcon,7,c	;volatile
  3510                           
  3511                           ; BSR set to: 0
  3512                           ;persistant.c: 88: EECON2 = 0x55;
  3513  002E78  0E55               	movlw	85
  3514  002E7A  6EA7               	movwf	4007,c	;volsfr
  3515                           
  3516                           ; BSR set to: 0
  3517                           ;persistant.c: 89: EECON2 = 0xAA;
  3518  002E7C  0EAA               	movlw	170
  3519  002E7E  6EA7               	movwf	4007,c	;volsfr
  3520                           
  3521                           ; BSR set to: 0
  3522                           ;persistant.c: 90: EECON1bits.WR = 1;
  3523  002E80  82A6               	bsf	4006,1,c	;volsfr
  3524                           
  3525                           ; BSR set to: 0
  3526                           ;persistant.c: 92: INTCONbits.GIE = LState;
  3527  002E82  B165               	btfsc	Persistant_WriteInternalMemory@LState& (0+255),0,b
  3528  002E84  D002               	bra	u4025
  3529  002E86  9EF2               	bcf	intcon,7,c	;volatile
  3530  002E88  D001               	bra	u4026
  3531  002E8A                     u4025:
  3532  002E8A  8EF2               	bsf	intcon,7,c	;volatile
  3533  002E8C                     u4026:
  3534                           
  3535                           ;persistant.c: 93: while (EECON1bits.WR == 1);
  3536  002E8C  B2A6               	btfsc	4006,1,c	;volsfr
  3537  002E8E  D7FE               	goto	u4026
  3538                           
  3539                           ;persistant.c: 94: EECON1bits.WREN = 0;
  3540  002E90  94A6               	bcf	4006,2,c	;volsfr
  3541                           
  3542                           ;persistant.c: 97: return (bool)(Persistant_ReadInternalMemory(AAddress) == AData);
  3543                           ;	Return value of _Persistant_WriteInternalMemory is never used
  3544  002E92  C062  F060         	movff	Persistant_WriteInternalMemory@AAddress,Persistant_ReadInternalMemory@AAddress
  3545  002E96  C063  F061         	movff	Persistant_WriteInternalMemory@AAddress+1,Persistant_ReadInternalMemory@AAddress+
      +                          1
  3546  002E9A  EFCE  F018         	goto	_Persistant_ReadInternalMemory	;wreg free
  3547  002E9E                     __end_of_Persistant_WriteInternalMemory:
  3548                           	opt stack 0
  3549                           tblptru	equ	0xFF8
  3550                           tblptrh	equ	0xFF7
  3551                           tblptrl	equ	0xFF6
  3552                           tablat	equ	0xFF5
  3553                           prodh	equ	0xFF4
  3554                           prodl	equ	0xFF3
  3555                           intcon	equ	0xFF2
  3556                           postinc0	equ	0xFEE
  3557                           plusw0	equ	0xFEB
  3558                           wreg	equ	0xFE8
  3559                           postinc1	equ	0xFE6
  3560                           postdec1	equ	0xFE5
  3561                           plusw1	equ	0xFE3
  3562                           fsr1h	equ	0xFE2
  3563                           fsr1l	equ	0xFE1
  3564                           indf2	equ	0xFDF
  3565                           postinc2	equ	0xFDE
  3566                           postdec2	equ	0xFDD
  3567                           plusw2	equ	0xFDB
  3568                           fsr2h	equ	0xFDA
  3569                           fsr2l	equ	0xFD9
  3570                           status	equ	0xFD8
  3571                           
  3572 ;; *************** function _Persistant_ReadInternalMemory *****************
  3573 ;; Defined at:
  3574 ;;		line 68 in file "persistant.c"
  3575 ;; Parameters:    Size  Location     Type
  3576 ;;  AAddress        2    0[BANK0 ] int 
  3577 ;; Auto vars:     Size  Location     Type
  3578 ;;		None
  3579 ;; Return value:  Size  Location     Type
  3580 ;;                  1    wreg      unsigned char 
  3581 ;; Registers used:
  3582 ;;		wreg, status,2
  3583 ;; Tracked objects:
  3584 ;;		On entry : 0/0
  3585 ;;		On exit  : 0/0
  3586 ;;		Unchanged: 0/0
  3587 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3588 ;;      Params:         0       2       0       0       0       0       0       0       0
  3589 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3590 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3591 ;;      Totals:         0       2       0       0       0       0       0       0       0
  3592 ;;Total ram usage:        2 bytes
  3593 ;; Hardware stack levels used:    1
  3594 ;; Hardware stack levels required when called:    6
  3595 ;; This function calls:
  3596 ;;		Nothing
  3597 ;; This function is called by:
  3598 ;;		_Persistant_WriteInternalMemory
  3599 ;; This function uses a non-reentrant model
  3600 ;;
  3601                           
  3602                           	psect	text15
  3603  00319C                     __ptext15:
  3604                           	opt stack 0
  3605  00319C                     _Persistant_ReadInternalMemory:
  3606                           	opt stack 22
  3607                           
  3608                           ;persistant.c: 70: EEADR = AAddress;
  3609                           
  3610                           ;incstack = 0
  3611  00319C  C060  FFA9         	movff	Persistant_ReadInternalMemory@AAddress,4009	;volatile
  3612                           
  3613                           ;persistant.c: 71: EECON1bits.EEPGD = 0;
  3614  0031A0  9EA6               	bcf	4006,7,c	;volsfr
  3615                           
  3616                           ;persistant.c: 72: EECON1bits.CFGS = 0;
  3617  0031A2  9CA6               	bcf	4006,6,c	;volsfr
  3618                           
  3619                           ;persistant.c: 73: EECON1bits.RD = 1;
  3620  0031A4  80A6               	bsf	4006,0,c	;volsfr
  3621                           
  3622                           ;persistant.c: 74: return EEDATA;
  3623  0031A6  50A8               	movf	4008,w,c	;volatile
  3624  0031A8  0012               	return		;funcret
  3625  0031AA                     __end_of_Persistant_ReadInternalMemory:
  3626                           	opt stack 0
  3627                           tblptru	equ	0xFF8
  3628                           tblptrh	equ	0xFF7
  3629                           tblptrl	equ	0xFF6
  3630                           tablat	equ	0xFF5
  3631                           prodh	equ	0xFF4
  3632                           prodl	equ	0xFF3
  3633                           intcon	equ	0xFF2
  3634                           postinc0	equ	0xFEE
  3635                           plusw0	equ	0xFEB
  3636                           wreg	equ	0xFE8
  3637                           postinc1	equ	0xFE6
  3638                           postdec1	equ	0xFE5
  3639                           plusw1	equ	0xFE3
  3640                           fsr1h	equ	0xFE2
  3641                           fsr1l	equ	0xFE1
  3642                           indf2	equ	0xFDF
  3643                           postinc2	equ	0xFDE
  3644                           postdec2	equ	0xFDD
  3645                           plusw2	equ	0xFDB
  3646                           fsr2h	equ	0xFDA
  3647                           fsr2l	equ	0xFD9
  3648                           status	equ	0xFD8
  3649                           
  3650 ;; *************** function _InitApp *****************
  3651 ;; Defined at:
  3652 ;;		line 22 in file "user.c"
  3653 ;; Parameters:    Size  Location     Type
  3654 ;;		None
  3655 ;; Auto vars:     Size  Location     Type
  3656 ;;  test            1  113[BANK0 ] unsigned char 
  3657 ;;  LResult         1    0        unsigned char 
  3658 ;; Return value:  Size  Location     Type
  3659 ;;                  1    wreg      void 
  3660 ;; Registers used:
  3661 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3662 ;; Tracked objects:
  3663 ;;		On entry : 0/0
  3664 ;;		On exit  : 3F/0
  3665 ;;		Unchanged: 0/0
  3666 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3667 ;;      Params:         0       0       0       0       0       0       0       0       0
  3668 ;;      Locals:         0       1       0       0       0       0       0       0       0
  3669 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3670 ;;      Totals:         0       1       0       0       0       0       0       0       0
  3671 ;;Total ram usage:        1 bytes
  3672 ;; Hardware stack levels used:    1
  3673 ;; Hardware stack levels required when called:   12
  3674 ;; This function calls:
  3675 ;;		_Display_Init
  3676 ;;		_Display_ProcessData
  3677 ;;		_Hub_CopyBuffer
  3678 ;;		_Hub_Init
  3679 ;;		_InitDigiPot
  3680 ;;		_Midi_Init
  3681 ;;		_Persistant_Init
  3682 ;;		_Persistant_LoadBuffer
  3683 ;;		_Persistant_ReadExternalMemory
  3684 ;;		_Persistant_WriteExternalMemory
  3685 ;;		_Sequencer_Start
  3686 ;; This function is called by:
  3687 ;;		_main
  3688 ;; This function uses a non-reentrant model
  3689 ;;
  3690                           
  3691                           	psect	text16
  3692  0027E6                     __ptext16:
  3693                           	opt stack 0
  3694  0027E6                     _InitApp:
  3695                           	opt stack 18
  3696                           
  3697                           ;user.c: 24: ADCON1 = 0x0F;
  3698                           
  3699                           ;incstack = 0
  3700  0027E6  0E0F               	movlw	15
  3701  0027E8  6EC1               	movwf	4033,c	;volatile
  3702                           
  3703                           ;user.c: 33: PEIE = 1;
  3704  0027EA  8CF2               	bsf	intcon,6,c	;volatile
  3705                           
  3706                           ;user.c: 34: GIE = 1;
  3707  0027EC  8EF2               	bsf	intcon,7,c	;volatile
  3708                           
  3709                           ;user.c: 36: Persistant_Init();
  3710  0027EE  EC94  F018         	call	_Persistant_Init	;wreg free
  3711                           
  3712                           ; BSR set to: 0
  3713                           ;user.c: 37: Hub_Init();
  3714  0027F2  EC4B  F012         	call	_Hub_Init	;wreg free
  3715                           
  3716                           ; BSR set to: 1
  3717                           ;user.c: 38: Display_Init();
  3718  0027F6  ECB8  F00A         	call	_Display_Init	;wreg free
  3719                           
  3720                           ; BSR set to: 0
  3721                           ;user.c: 40: bool LResult = Persistant_WriteExternalMemory(0x01, 0x0F);
  3722  0027FA  6B73               	clrf	(Persistant_WriteExternalMemory@AAddress+1)& (0+255),b
  3723  0027FC  0E01               	movlw	1
  3724  0027FE  6F72               	movwf	Persistant_WriteExternalMemory@AAddress& (0+255),b
  3725  002800  0E0F               	movlw	15
  3726  002802  6F74               	movwf	Persistant_WriteExternalMemory@AData& (0+255),b
  3727  002804  EC69  F016         	call	_Persistant_WriteExternalMemory	;wreg free
  3728                           
  3729                           ;user.c: 41: unsigned char test = Persistant_ReadExternalMemory(0x01);
  3730  002808  0100               	movlb	0	; () banked
  3731  00280A  6B70               	clrf	(Persistant_ReadExternalMemory@AAddress+1)& (0+255),b
  3732  00280C  0E01               	movlw	1
  3733  00280E  6F6F               	movwf	Persistant_ReadExternalMemory@AAddress& (0+255),b
  3734  002810  EC1C  F016         	call	_Persistant_ReadExternalMemory	;wreg free
  3735  002814  0100               	movlb	0	; () banked
  3736  002816  6FD1               	movwf	InitApp@test& (0+255),b
  3737                           
  3738                           ; BSR set to: 0
  3739                           ;user.c: 60: _Hub.PrimaryBuffer.Channel = test;
  3740  002818  C0D1  F164         	movff	InitApp@test,__Hub+100
  3741                           
  3742                           ; BSR set to: 0
  3743                           ;user.c: 62: Persistant_LoadBuffer(&_Hub.PrimaryBuffer);
  3744  00281C  0E62               	movlw	low (__Hub+98)
  3745  00281E  6FA8               	movwf	Persistant_LoadBuffer@ABuffer& (0+255),b
  3746  002820  0E01               	movlw	high (__Hub+98)
  3747  002822  6FA9               	movwf	(Persistant_LoadBuffer@ABuffer+1)& (0+255),b
  3748  002824  ECA0  F010         	call	_Persistant_LoadBuffer	;wreg free
  3749                           
  3750                           ; BSR set to: 0
  3751                           ;user.c: 63: Hub_CopyBuffer();
  3752  002828  EC3F  F018         	call	_Hub_CopyBuffer	;wreg free
  3753                           
  3754                           ; BSR set to: 1
  3755                           ;user.c: 65: Display_ProcessData(_Hub.PrimaryBuffer.Channel, _Hub.PrimaryBuffer.Values, 
      +                          1, _Hub.PrimaryBuffer.PushedButton);
  3756  00282C  0E66               	movlw	low (__Hub+102)
  3757  00282E  0100               	movlb	0	; () banked
  3758  002830  6F68               	movwf	Display_ProcessData@AValues& (0+255),b
  3759  002832  0E01               	movlw	high (__Hub+102)
  3760  002834  6F69               	movwf	(Display_ProcessData@AValues+1)& (0+255),b
  3761  002836  0E01               	movlw	1
  3762  002838  6F6A               	movwf	Display_ProcessData@ALoaded& (0+255),b
  3763  00283A  C163  F06B         	movff	__Hub+99,Display_ProcessData@APushed
  3764  00283E  0101               	movlb	1	; () banked
  3765  002840  5164               	movf	(__Hub+100)& (0+255),w,b
  3766  002842  EC1E  F004         	call	_Display_ProcessData
  3767                           
  3768                           ; BSR set to: 2
  3769                           ;user.c: 66: Sequencer_Start();
  3770  002846  EC9E  F018         	call	_Sequencer_Start	;wreg free
  3771                           
  3772                           ; BSR set to: 2
  3773                           ;user.c: 67: InitDigiPot();
  3774  00284A  EC21  F00A         	call	_InitDigiPot	;wreg free
  3775                           
  3776                           ; BSR set to: 0
  3777                           ;user.c: 68: Midi_Init();
  3778  00284E  EF48  F00B         	goto	_Midi_Init	;wreg free
  3779  002852                     __end_of_InitApp:
  3780                           	opt stack 0
  3781                           tblptru	equ	0xFF8
  3782                           tblptrh	equ	0xFF7
  3783                           tblptrl	equ	0xFF6
  3784                           tablat	equ	0xFF5
  3785                           prodh	equ	0xFF4
  3786                           prodl	equ	0xFF3
  3787                           intcon	equ	0xFF2
  3788                           postinc0	equ	0xFEE
  3789                           plusw0	equ	0xFEB
  3790                           wreg	equ	0xFE8
  3791                           postinc1	equ	0xFE6
  3792                           postdec1	equ	0xFE5
  3793                           plusw1	equ	0xFE3
  3794                           fsr1h	equ	0xFE2
  3795                           fsr1l	equ	0xFE1
  3796                           indf2	equ	0xFDF
  3797                           postinc2	equ	0xFDE
  3798                           postdec2	equ	0xFDD
  3799                           plusw2	equ	0xFDB
  3800                           fsr2h	equ	0xFDA
  3801                           fsr2l	equ	0xFD9
  3802                           status	equ	0xFD8
  3803                           
  3804 ;; *************** function _Sequencer_Start *****************
  3805 ;; Defined at:
  3806 ;;		line 6 in file "sequencer.c"
  3807 ;; Parameters:    Size  Location     Type
  3808 ;;		None
  3809 ;; Auto vars:     Size  Location     Type
  3810 ;;		None
  3811 ;; Return value:  Size  Location     Type
  3812 ;;                  1    wreg      void 
  3813 ;; Registers used:
  3814 ;;		None
  3815 ;; Tracked objects:
  3816 ;;		On entry : 3F/2
  3817 ;;		On exit  : 3F/2
  3818 ;;		Unchanged: 3F/0
  3819 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3820 ;;      Params:         0       0       0       0       0       0       0       0       0
  3821 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3822 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3823 ;;      Totals:         0       0       0       0       0       0       0       0       0
  3824 ;;Total ram usage:        0 bytes
  3825 ;; Hardware stack levels used:    1
  3826 ;; Hardware stack levels required when called:    6
  3827 ;; This function calls:
  3828 ;;		Nothing
  3829 ;; This function is called by:
  3830 ;;		_InitApp
  3831 ;; This function uses a non-reentrant model
  3832 ;;
  3833                           
  3834                           	psect	text17
  3835  00313C                     __ptext17:
  3836                           	opt stack 0
  3837  00313C                     _Sequencer_Start:
  3838                           	opt stack 23
  3839                           
  3840                           ; BSR set to: 2
  3841                           ;sequencer.c: 9: T0PS0 = 0;
  3842                           
  3843                           ; BSR set to: 0
  3844                           ;incstack = 0
  3845  00313C  90D5               	bcf	4053,0,c	;volatile
  3846                           
  3847                           ;sequencer.c: 10: T0PS1 = 1;
  3848  00313E  82D5               	bsf	4053,1,c	;volatile
  3849                           
  3850                           ;sequencer.c: 11: T0PS2 = 1;
  3851  003140  84D5               	bsf	4053,2,c	;volatile
  3852                           
  3853                           ;sequencer.c: 13: PSA = 0;
  3854  003142  96D5               	bcf	4053,3,c	;volatile
  3855                           
  3856                           ;sequencer.c: 14: T0CS = 0;
  3857  003144  9AD5               	bcf	4053,5,c	;volatile
  3858                           
  3859                           ;sequencer.c: 15: T08BIT = 1;
  3860  003146  8CD5               	bsf	4053,6,c	;volatile
  3861                           
  3862                           ;sequencer.c: 17: TMR0IE = 1;
  3863  003148  8AF2               	bsf	intcon,5,c	;volatile
  3864                           
  3865                           ;sequencer.c: 18: TMR0ON = 1;
  3866  00314A  8ED5               	bsf	4053,7,c	;volatile
  3867                           
  3868                           ; BSR set to: 2
  3869  00314C  0012               	return		;funcret
  3870  00314E                     __end_of_Sequencer_Start:
  3871                           	opt stack 0
  3872                           tblptru	equ	0xFF8
  3873                           tblptrh	equ	0xFF7
  3874                           tblptrl	equ	0xFF6
  3875                           tablat	equ	0xFF5
  3876                           prodh	equ	0xFF4
  3877                           prodl	equ	0xFF3
  3878                           intcon	equ	0xFF2
  3879                           postinc0	equ	0xFEE
  3880                           plusw0	equ	0xFEB
  3881                           wreg	equ	0xFE8
  3882                           postinc1	equ	0xFE6
  3883                           postdec1	equ	0xFE5
  3884                           plusw1	equ	0xFE3
  3885                           fsr1h	equ	0xFE2
  3886                           fsr1l	equ	0xFE1
  3887                           indf2	equ	0xFDF
  3888                           postinc2	equ	0xFDE
  3889                           postdec2	equ	0xFDD
  3890                           plusw2	equ	0xFDB
  3891                           fsr2h	equ	0xFDA
  3892                           fsr2l	equ	0xFD9
  3893                           status	equ	0xFD8
  3894                           
  3895 ;; *************** function _Persistant_WriteExternalMemory *****************
  3896 ;; Defined at:
  3897 ;;		line 51 in file "persistant.c"
  3898 ;; Parameters:    Size  Location     Type
  3899 ;;  AAddress        2   18[BANK0 ] int 
  3900 ;;  AData           1   20[BANK0 ] unsigned char 
  3901 ;; Auto vars:     Size  Location     Type
  3902 ;;		None
  3903 ;; Return value:  Size  Location     Type
  3904 ;;                  1    wreg      unsigned char 
  3905 ;; Registers used:
  3906 ;;		wreg, status,2, status,0, cstack
  3907 ;; Tracked objects:
  3908 ;;		On entry : 3F/0
  3909 ;;		On exit  : 0/0
  3910 ;;		Unchanged: 0/0
  3911 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3912 ;;      Params:         0       3       0       0       0       0       0       0       0
  3913 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3914 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3915 ;;      Totals:         0       3       0       0       0       0       0       0       0
  3916 ;;Total ram usage:        3 bytes
  3917 ;; Hardware stack levels used:    1
  3918 ;; Hardware stack levels required when called:   11
  3919 ;; This function calls:
  3920 ;;		_I2C_Ack
  3921 ;;		_I2C_Stop
  3922 ;;		_I2C_Write
  3923 ;;		_Persistant_Address
  3924 ;;		_Persistant_ReadExternalMemory
  3925 ;; This function is called by:
  3926 ;;		_InitApp
  3927 ;;		_Persistant_SaveBuffer
  3928 ;; This function uses a non-reentrant model
  3929 ;;
  3930                           
  3931                           	psect	text18
  3932  002CD2                     __ptext18:
  3933                           	opt stack 0
  3934  002CD2                     _Persistant_WriteExternalMemory:
  3935                           	opt stack 18
  3936                           
  3937                           ; BSR set to: 0
  3938                           ;persistant.c: 53: if (Persistant_Address(AAddress, 0))
  3939                           
  3940                           ; BSR set to: 2
  3941                           ;incstack = 0
  3942  002CD2  C072  F06C         	movff	Persistant_WriteExternalMemory@AAddress,Persistant_Address@AAddress
  3943  002CD6  C073  F06D         	movff	Persistant_WriteExternalMemory@AAddress+1,Persistant_Address@AAddress+1
  3944  002CDA  6B6E               	clrf	Persistant_Address@ARead& (0+255),b
  3945  002CDC  ECBF  F017         	call	_Persistant_Address	;wreg free
  3946  002CE0  0900               	iorlw	0
  3947  002CE2  E01A               	bz	l396
  3948                           
  3949                           ;persistant.c: 54: {
  3950                           ;persistant.c: 55: if (I2C_Write(AData))
  3951  002CE4  0100               	movlb	0	; () banked
  3952  002CE6  5174               	movf	Persistant_WriteExternalMemory@AData& (0+255),w,b
  3953  002CE8  ECA7  F018         	call	_I2C_Write
  3954  002CEC  0900               	iorlw	0
  3955  002CEE  E014               	bz	l396
  3956                           
  3957                           ; BSR set to: 0
  3958                           ;persistant.c: 56: {
  3959                           ;persistant.c: 57: if (I2C_Ack(1))
  3960  002CF0  0E01               	movlw	1
  3961  002CF2  EC6E  F018         	call	_I2C_Ack
  3962  002CF6  0900               	iorlw	0
  3963  002CF8  E00F               	bz	l396
  3964                           
  3965                           ;persistant.c: 58: {
  3966                           ;persistant.c: 59: if (I2C_Stop())
  3967  002CFA  ECDC  F018         	call	_I2C_Stop	;wreg free
  3968  002CFE  0900               	iorlw	0
  3969  002D00  E00B               	bz	l396
  3970                           
  3971                           ; BSR set to: 0
  3972                           ;persistant.c: 60: return Persistant_ReadExternalMemory(AAddress) == AData;
  3973  002D02  C072  F06F         	movff	Persistant_WriteExternalMemory@AAddress,Persistant_ReadExternalMemory@AAddress
  3974  002D06  C073  F070         	movff	Persistant_WriteExternalMemory@AAddress+1,Persistant_ReadExternalMemory@AAddress+
      +                          1
  3975  002D0A  EC1C  F016         	call	_Persistant_ReadExternalMemory	;wreg free
  3976  002D0E  0100               	movlb	0	; () banked
  3977  002D10  1974               	xorwf	Persistant_WriteExternalMemory@AData& (0+255),w,b
  3978  002D12  B4D8               	btfsc	status,2,c
  3979  002D14  0C01               	retlw	1
  3980  002D16  0C00               	retlw	0
  3981  002D18                     l396:
  3982                           
  3983                           ;persistant.c: 61: }
  3984                           ;persistant.c: 62: }
  3985                           ;persistant.c: 63: }
  3986                           ;persistant.c: 64: return 0;
  3987                           
  3988                           ; BSR set to: 0
  3989  002D18  0C00               	retlw	0	;funcret
  3990  002D1A                     __end_of_Persistant_WriteExternalMemory:
  3991                           	opt stack 0
  3992                           tblptru	equ	0xFF8
  3993                           tblptrh	equ	0xFF7
  3994                           tblptrl	equ	0xFF6
  3995                           tablat	equ	0xFF5
  3996                           prodh	equ	0xFF4
  3997                           prodl	equ	0xFF3
  3998                           intcon	equ	0xFF2
  3999                           postinc0	equ	0xFEE
  4000                           plusw0	equ	0xFEB
  4001                           wreg	equ	0xFE8
  4002                           postinc1	equ	0xFE6
  4003                           postdec1	equ	0xFE5
  4004                           plusw1	equ	0xFE3
  4005                           fsr1h	equ	0xFE2
  4006                           fsr1l	equ	0xFE1
  4007                           indf2	equ	0xFDF
  4008                           postinc2	equ	0xFDE
  4009                           postdec2	equ	0xFDD
  4010                           plusw2	equ	0xFDB
  4011                           fsr2h	equ	0xFDA
  4012                           fsr2l	equ	0xFD9
  4013                           status	equ	0xFD8
  4014                           
  4015 ;; *************** function _Persistant_LoadBuffer *****************
  4016 ;; Defined at:
  4017 ;;		line 112 in file "persistant.c"
  4018 ;; Parameters:    Size  Location     Type
  4019 ;;  ABuffer         2   72[BANK0 ] PTR struct .
  4020 ;;		 -> _Hub(157), 
  4021 ;; Auto vars:     Size  Location     Type
  4022 ;;  i               1   89[BANK0 ] unsigned char 
  4023 ;;  LZip           10   78[BANK0 ] struct .
  4024 ;;  LChannel        1   88[BANK0 ] unsigned char 
  4025 ;;  LResult         1    0        unsigned char 
  4026 ;; Return value:  Size  Location     Type
  4027 ;;                  1    wreg      unsigned char 
  4028 ;; Registers used:
  4029 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4030 ;; Tracked objects:
  4031 ;;		On entry : 3F/0
  4032 ;;		On exit  : 3F/0
  4033 ;;		Unchanged: 0/0
  4034 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4035 ;;      Params:         0       2       0       0       0       0       0       0       0
  4036 ;;      Locals:         0      13       0       0       0       0       0       0       0
  4037 ;;      Temps:          0       3       0       0       0       0       0       0       0
  4038 ;;      Totals:         0      18       0       0       0       0       0       0       0
  4039 ;;Total ram usage:       18 bytes
  4040 ;; Hardware stack levels used:    1
  4041 ;; Hardware stack levels required when called:   11
  4042 ;; This function calls:
  4043 ;;		_Persistant_ReadExternalMemory
  4044 ;;		_UnZip
  4045 ;;		_memcpy
  4046 ;; This function is called by:
  4047 ;;		_Load
  4048 ;;		_InitApp
  4049 ;; This function uses a non-reentrant model
  4050 ;;
  4051                           
  4052                           	psect	text19
  4053  002140                     __ptext19:
  4054                           	opt stack 0
  4055  002140                     _Persistant_LoadBuffer:
  4056                           	opt stack 18
  4057                           
  4058                           ; BSR set to: 0
  4059                           ;persistant.c: 115: unsigned char LChannel = ABuffer->Channel;
  4060                           
  4061                           ; BSR set to: 0
  4062                           
  4063                           ;incstack = 0
  4064  002140  EE20 F002          	lfsr	2,2
  4065  002144  51A8               	movf	Persistant_LoadBuffer@ABuffer& (0+255),w,b
  4066  002146  26D9               	addwf	fsr2l,f,c
  4067  002148  51A9               	movf	(Persistant_LoadBuffer@ABuffer+1)& (0+255),w,b
  4068  00214A  22DA               	addwfc	fsr2h,f,c
  4069  00214C  50DF               	movf	indf2,w,c
  4070  00214E  6FB8               	movwf	Persistant_LoadBuffer@LChannel& (0+255),b
  4071                           
  4072                           ; BSR set to: 0
  4073                           ;persistant.c: 116: ZipContainer LZip;
  4074                           ;persistant.c: 117: LZip.Buffer = ABuffer;
  4075  002150  C0A8  F0AE         	movff	Persistant_LoadBuffer@ABuffer,Persistant_LoadBuffer@LZip
  4076  002154  C0A9  F0AF         	movff	Persistant_LoadBuffer@ABuffer+1,Persistant_LoadBuffer@LZip+1
  4077                           
  4078                           ; BSR set to: 0
  4079                           ;persistant.c: 118: for (char i = 0; i < sizeof(LZip.Bytes); i++)
  4080  002158  6BB9               	clrf	Persistant_LoadBuffer@i& (0+255),b
  4081  00215A                     l3954:
  4082                           
  4083                           ; BSR set to: 0
  4084                           ;persistant.c: 119: LZip.Bytes[i] = Persistant_ReadExternalMemory((LChannel / 2 ) * size
      +                          of(LZip.Bytes) + i);
  4085  00215A  C0B9  F0AA         	movff	Persistant_LoadBuffer@i,??_Persistant_LoadBuffer
  4086  00215E  0E02               	movlw	2
  4087  002160  27AA               	addwf	??_Persistant_LoadBuffer& (0+255),f,b
  4088  002162  51AA               	movf	??_Persistant_LoadBuffer& (0+255),w,b
  4089  002164  0FAE               	addlw	low Persistant_LoadBuffer@LZip
  4090  002166  6ED9               	movwf	fsr2l,c
  4091  002168  6ADA               	clrf	fsr2h,c
  4092  00216A  90D8               	bcf	status,0,c
  4093  00216C  31B8               	rrcf	Persistant_LoadBuffer@LChannel& (0+255),w,b
  4094  00216E  6FAB               	movwf	(??_Persistant_LoadBuffer+1)& (0+255),b
  4095  002170  6BAC               	clrf	(??_Persistant_LoadBuffer+2)& (0+255),b
  4096  002172  90D8               	bcf	status,0,c
  4097  002174  37AB               	rlcf	(??_Persistant_LoadBuffer+1)& (0+255),f,b
  4098  002176  37AC               	rlcf	(??_Persistant_LoadBuffer+2)& (0+255),f,b
  4099  002178  90D8               	bcf	status,0,c
  4100  00217A  37AB               	rlcf	(??_Persistant_LoadBuffer+1)& (0+255),f,b
  4101  00217C  37AC               	rlcf	(??_Persistant_LoadBuffer+2)& (0+255),f,b
  4102  00217E  90D8               	bcf	status,0,c
  4103  002180  37AB               	rlcf	(??_Persistant_LoadBuffer+1)& (0+255),f,b
  4104  002182  37AC               	rlcf	(??_Persistant_LoadBuffer+2)& (0+255),f,b
  4105  002184  51B9               	movf	Persistant_LoadBuffer@i& (0+255),w,b
  4106  002186  25AB               	addwf	(??_Persistant_LoadBuffer+1)& (0+255),w,b
  4107  002188  6F6F               	movwf	Persistant_ReadExternalMemory@AAddress& (0+255),b
  4108  00218A  0E00               	movlw	0
  4109  00218C  21AC               	addwfc	(??_Persistant_LoadBuffer+2)& (0+255),w,b
  4110  00218E  6F70               	movwf	(Persistant_ReadExternalMemory@AAddress+1)& (0+255),b
  4111  002190  EC1C  F016         	call	_Persistant_ReadExternalMemory	;wreg free
  4112  002194  6EDF               	movwf	indf2,c
  4113  002196  0100               	movlb	0	; () banked
  4114  002198  2BB9               	incf	Persistant_LoadBuffer@i& (0+255),f,b
  4115                           
  4116                           ; BSR set to: 0
  4117  00219A  0E07               	movlw	7
  4118  00219C  65B9               	cpfsgt	Persistant_LoadBuffer@i& (0+255),b
  4119  00219E  D7DD               	goto	l3954
  4120                           
  4121                           ; BSR set to: 0
  4122                           ;persistant.c: 120: UnZip(&LZip);
  4123  0021A0  0EAE               	movlw	low Persistant_LoadBuffer@LZip
  4124  0021A2  6F9E               	movwf	UnZip@AZip& (0+255),b
  4125  0021A4  ECB7  F00D         	call	_UnZip	;wreg free
  4126                           
  4127                           ; BSR set to: 0
  4128                           ;persistant.c: 122: ABuffer->Channel = LChannel;
  4129  0021A8  EE20 F002          	lfsr	2,2
  4130  0021AC  51A8               	movf	Persistant_LoadBuffer@ABuffer& (0+255),w,b
  4131  0021AE  26D9               	addwf	fsr2l,f,c
  4132  0021B0  51A9               	movf	(Persistant_LoadBuffer@ABuffer+1)& (0+255),w,b
  4133  0021B2  22DA               	addwfc	fsr2h,f,c
  4134  0021B4  C0B8  FFDF         	movff	Persistant_LoadBuffer@LChannel,indf2
  4135                           
  4136                           ; BSR set to: 0
  4137                           ;persistant.c: 123: _Hub.CurrentChannel = LChannel;
  4138  0021B8  C0B8  F18C         	movff	Persistant_LoadBuffer@LChannel,__Hub+140
  4139                           
  4140                           ; BSR set to: 0
  4141                           ;persistant.c: 124: memcpy(&_Hub.BackupBuffer, ABuffer, sizeof(DataBuffer));
  4142  0021BC  0E7A               	movlw	low (__Hub+122)
  4143  0021BE  6F60               	movwf	memcpy@d1& (0+255),b
  4144  0021C0  0E01               	movlw	high (__Hub+122)
  4145  0021C2  6F61               	movwf	(memcpy@d1+1)& (0+255),b
  4146  0021C4  C0A8  F062         	movff	Persistant_LoadBuffer@ABuffer,memcpy@s1
  4147  0021C8  C0A9  F063         	movff	Persistant_LoadBuffer@ABuffer+1,memcpy@s1+1
  4148  0021CC  6B65               	clrf	(memcpy@n+1)& (0+255),b
  4149  0021CE  0E0C               	movlw	12
  4150  0021D0  6F64               	movwf	memcpy@n& (0+255),b
  4151  0021D2  EFAE  F016         	goto	_memcpy	;wreg free
  4152  0021D6                     __end_of_Persistant_LoadBuffer:
  4153                           	opt stack 0
  4154                           tblptru	equ	0xFF8
  4155                           tblptrh	equ	0xFF7
  4156                           tblptrl	equ	0xFF6
  4157                           tablat	equ	0xFF5
  4158                           prodh	equ	0xFF4
  4159                           prodl	equ	0xFF3
  4160                           intcon	equ	0xFF2
  4161                           postinc0	equ	0xFEE
  4162                           plusw0	equ	0xFEB
  4163                           wreg	equ	0xFE8
  4164                           postinc1	equ	0xFE6
  4165                           postdec1	equ	0xFE5
  4166                           plusw1	equ	0xFE3
  4167                           fsr1h	equ	0xFE2
  4168                           fsr1l	equ	0xFE1
  4169                           indf2	equ	0xFDF
  4170                           postinc2	equ	0xFDE
  4171                           postdec2	equ	0xFDD
  4172                           plusw2	equ	0xFDB
  4173                           fsr2h	equ	0xFDA
  4174                           fsr2l	equ	0xFD9
  4175                           status	equ	0xFD8
  4176                           
  4177 ;; *************** function _UnZip *****************
  4178 ;; Defined at:
  4179 ;;		line 25 in file "zip.c"
  4180 ;; Parameters:    Size  Location     Type
  4181 ;;  AZip            1   62[BANK0 ] PTR struct .
  4182 ;;		 -> Persistant_LoadBuffer@LZip(10), 
  4183 ;; Auto vars:     Size  Location     Type
  4184 ;;  LIndex          1   67[BANK0 ] unsigned char 
  4185 ;;  j               2   70[BANK0 ] int 
  4186 ;;  LValue          1   66[BANK0 ] unsigned char 
  4187 ;;  i               2   68[BANK0 ] int 
  4188 ;; Return value:  Size  Location     Type
  4189 ;;                  1    wreg      unsigned char 
  4190 ;; Registers used:
  4191 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4192 ;; Tracked objects:
  4193 ;;		On entry : 3F/0
  4194 ;;		On exit  : 3F/0
  4195 ;;		Unchanged: 0/0
  4196 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4197 ;;      Params:         0       1       0       0       0       0       0       0       0
  4198 ;;      Locals:         0       6       0       0       0       0       0       0       0
  4199 ;;      Temps:          0       3       0       0       0       0       0       0       0
  4200 ;;      Totals:         0      10       0       0       0       0       0       0       0
  4201 ;;Total ram usage:       10 bytes
  4202 ;; Hardware stack levels used:    1
  4203 ;; Hardware stack levels required when called:    8
  4204 ;; This function calls:
  4205 ;;		___ftdiv
  4206 ;;		___fttol
  4207 ;;		___lbtoft
  4208 ;; This function is called by:
  4209 ;;		_Persistant_LoadBuffer
  4210 ;; This function uses a non-reentrant model
  4211 ;;
  4212                           
  4213                           	psect	text20
  4214  001B6E                     __ptext20:
  4215                           	opt stack 0
  4216  001B6E                     _UnZip:
  4217                           	opt stack 20
  4218                           
  4219                           ; BSR set to: 0
  4220                           ;zip.c: 27: for(int i = 0; i < 8; i++)
  4221                           
  4222                           ; BSR set to: 0
  4223                           ;incstack = 0
  4224  001B6E  6BA4               	clrf	UnZip@i& (0+255),b
  4225  001B70  6BA5               	clrf	(UnZip@i+1)& (0+255),b
  4226  001B72                     l624:
  4227                           
  4228                           ; BSR set to: 0
  4229                           ;zip.c: 28: {
  4230                           ;zip.c: 29: char LValue = 0x00;
  4231  001B72  6BA2               	clrf	UnZip@LValue& (0+255),b
  4232                           
  4233                           ;zip.c: 30: for(int j = 0; j < 6; j++)
  4234  001B74  6BA6               	clrf	UnZip@j& (0+255),b
  4235  001B76  6BA7               	clrf	(UnZip@j+1)& (0+255),b
  4236  001B78                     l3834:
  4237                           
  4238                           ; BSR set to: 0
  4239                           ;zip.c: 31: {
  4240                           ;zip.c: 32: char LIndex = i * 6 + j;
  4241  001B78  51A4               	movf	UnZip@i& (0+255),w,b
  4242  001B7A  0D06               	mullw	6
  4243  001B7C  50F3               	movf	prodl,w,c
  4244  001B7E  25A6               	addwf	UnZip@j& (0+255),w,b
  4245  001B80  6FA3               	movwf	UnZip@LIndex& (0+255),b
  4246                           
  4247                           ; BSR set to: 0
  4248                           ;zip.c: 33: LValue |= ((AZip->Bytes[(char)(LIndex / 8.0f)] >> (LIndex % 8)) & 0x01) << j
      +                          ;
  4249  001B82  C0A6  F09F         	movff	UnZip@j,??_UnZip
  4250  001B86  C0A3  F0A0         	movff	UnZip@LIndex,??_UnZip+1
  4251  001B8A  0E07               	movlw	7
  4252  001B8C  17A0               	andwf	(??_UnZip+1)& (0+255),f,b
  4253  001B8E  6B83               	clrf	___ftdiv@f2& (0+255),b
  4254  001B90  6B84               	clrf	(___ftdiv@f2+1)& (0+255),b
  4255  001B92  0E41               	movlw	65
  4256  001B94  6F85               	movwf	(___ftdiv@f2+2)& (0+255),b
  4257  001B96  51A3               	movf	UnZip@LIndex& (0+255),w,b
  4258  001B98  EC2C  F018         	call	___lbtoft
  4259  001B9C  C068  F080         	movff	?___lbtoft,___ftdiv@f1
  4260  001BA0  C069  F081         	movff	?___lbtoft+1,___ftdiv@f1+1
  4261  001BA4  C06A  F082         	movff	?___lbtoft+2,___ftdiv@f1+2
  4262  001BA8  EC48  F00F         	call	___ftdiv	;wreg free
  4263  001BAC  C080  F08F         	movff	?___ftdiv,___fttol@f1
  4264  001BB0  C081  F090         	movff	?___ftdiv+1,___fttol@f1+1
  4265  001BB4  C082  F091         	movff	?___ftdiv+2,___fttol@f1+2
  4266  001BB8  ECEB  F00E         	call	___fttol	;wreg free
  4267  001BBC  519E               	movf	UnZip@AZip& (0+255),w,b
  4268  001BBE  258F               	addwf	?___fttol& (0+255),w,b
  4269  001BC0  6ED9               	movwf	fsr2l,c
  4270  001BC2  6ADA               	clrf	fsr2h,c
  4271  001BC4  0E02               	movlw	2
  4272  001BC6  26D9               	addwf	fsr2l,f,c
  4273  001BC8  50DF               	movf	indf2,w,c
  4274  001BCA  6FA1               	movwf	(??_UnZip+2)& (0+255),b
  4275  001BCC  2BA0               	incf	(??_UnZip+1)& (0+255),f,b
  4276  001BCE  D002               	goto	u3874
  4277  001BD0                     u3875:
  4278  001BD0  90D8               	bcf	status,0,c
  4279  001BD2  33A1               	rrcf	(??_UnZip+2)& (0+255),f,b
  4280  001BD4                     u3874:
  4281  001BD4  2FA0               	decfsz	(??_UnZip+1)& (0+255),f,b
  4282  001BD6  D7FC               	goto	u3875
  4283  001BD8  0E01               	movlw	1
  4284  001BDA  0100               	movlb	0	; () banked
  4285  001BDC  17A1               	andwf	(??_UnZip+2)& (0+255),f,b
  4286  001BDE  2B9F               	incf	??_UnZip& (0+255),f,b
  4287  001BE0  D002               	goto	u3884
  4288  001BE2                     u3885:
  4289  001BE2  90D8               	bcf	status,0,c
  4290  001BE4  37A1               	rlcf	(??_UnZip+2)& (0+255),f,b
  4291  001BE6                     u3884:
  4292  001BE6  2F9F               	decfsz	??_UnZip& (0+255),f,b
  4293  001BE8  D7FC               	goto	u3885
  4294  001BEA  0100               	movlb	0	; () banked
  4295  001BEC  51A1               	movf	(??_UnZip+2)& (0+255),w,b
  4296  001BEE  13A2               	iorwf	UnZip@LValue& (0+255),f,b
  4297                           
  4298                           ; BSR set to: 0
  4299  001BF0  4BA6               	infsnz	UnZip@j& (0+255),f,b
  4300  001BF2  2BA7               	incf	(UnZip@j+1)& (0+255),f,b
  4301                           
  4302                           ; BSR set to: 0
  4303  001BF4  BFA7               	btfsc	(UnZip@j+1)& (0+255),7,b
  4304  001BF6  D7C0               	goto	l3834
  4305  001BF8  51A7               	movf	(UnZip@j+1)& (0+255),w,b
  4306  001BFA  E103               	bnz	u3890
  4307  001BFC  0E06               	movlw	6
  4308  001BFE  5DA6               	subwf	UnZip@j& (0+255),w,b
  4309  001C00  E3BB               	bnc	l3834
  4310  001C02                     u3890:
  4311                           
  4312                           ; BSR set to: 0
  4313                           ;zip.c: 34: }
  4314                           ;zip.c: 35: AZip->Buffer->Values[i] = LValue;
  4315  001C02  519E               	movf	UnZip@AZip& (0+255),w,b
  4316  001C04  6ED9               	movwf	fsr2l,c
  4317  001C06  6ADA               	clrf	fsr2h,c
  4318  001C08  CFDE F09F          	movff	postinc2,??_UnZip
  4319  001C0C  CFDD F0A0          	movff	postdec2,??_UnZip+1
  4320  001C10  51A4               	movf	UnZip@i& (0+255),w,b
  4321  001C12  279F               	addwf	??_UnZip& (0+255),f,b
  4322  001C14  51A5               	movf	(UnZip@i+1)& (0+255),w,b
  4323  001C16  23A0               	addwfc	(??_UnZip+1)& (0+255),f,b
  4324  001C18  0E04               	movlw	4
  4325  001C1A  259F               	addwf	??_UnZip& (0+255),w,b
  4326  001C1C  6ED9               	movwf	fsr2l,c
  4327  001C1E  0E00               	movlw	0
  4328  001C20  21A0               	addwfc	(??_UnZip+1)& (0+255),w,b
  4329  001C22  6EDA               	movwf	fsr2h,c
  4330  001C24  C0A2  FFDF         	movff	UnZip@LValue,indf2
  4331                           
  4332                           ; BSR set to: 0
  4333  001C28  4BA4               	infsnz	UnZip@i& (0+255),f,b
  4334  001C2A  2BA5               	incf	(UnZip@i+1)& (0+255),f,b
  4335                           
  4336                           ; BSR set to: 0
  4337  001C2C  BFA5               	btfsc	(UnZip@i+1)& (0+255),7,b
  4338  001C2E  D7A1               	goto	l624
  4339  001C30  51A5               	movf	(UnZip@i+1)& (0+255),w,b
  4340  001C32  E105               	bnz	u3900
  4341  001C34  0E08               	movlw	8
  4342  001C36  5DA4               	subwf	UnZip@i& (0+255),w,b
  4343  001C38  B0D8               	btfsc	status,0,c
  4344  001C3A  0012               	return	
  4345  001C3C  D79A               	goto	l624
  4346  001C3E                     u3900:
  4347                           
  4348                           ; BSR set to: 0
  4349  001C3E  0012               	return		;funcret
  4350  001C40                     __end_of_UnZip:
  4351                           	opt stack 0
  4352                           tblptru	equ	0xFF8
  4353                           tblptrh	equ	0xFF7
  4354                           tblptrl	equ	0xFF6
  4355                           tablat	equ	0xFF5
  4356                           prodh	equ	0xFF4
  4357                           prodl	equ	0xFF3
  4358                           intcon	equ	0xFF2
  4359                           postinc0	equ	0xFEE
  4360                           plusw0	equ	0xFEB
  4361                           wreg	equ	0xFE8
  4362                           postinc1	equ	0xFE6
  4363                           postdec1	equ	0xFE5
  4364                           plusw1	equ	0xFE3
  4365                           fsr1h	equ	0xFE2
  4366                           fsr1l	equ	0xFE1
  4367                           indf2	equ	0xFDF
  4368                           postinc2	equ	0xFDE
  4369                           postdec2	equ	0xFDD
  4370                           plusw2	equ	0xFDB
  4371                           fsr2h	equ	0xFDA
  4372                           fsr2l	equ	0xFD9
  4373                           status	equ	0xFD8
  4374                           
  4375 ;; *************** function _Persistant_ReadExternalMemory *****************
  4376 ;; Defined at:
  4377 ;;		line 31 in file "persistant.c"
  4378 ;; Parameters:    Size  Location     Type
  4379 ;;  AAddress        2   15[BANK0 ] int 
  4380 ;; Auto vars:     Size  Location     Type
  4381 ;;  LResult         1   17[BANK0 ] unsigned char 
  4382 ;; Return value:  Size  Location     Type
  4383 ;;                  1    wreg      unsigned char 
  4384 ;; Registers used:
  4385 ;;		wreg, status,2, status,0, cstack
  4386 ;; Tracked objects:
  4387 ;;		On entry : 3F/0
  4388 ;;		On exit  : 0/0
  4389 ;;		Unchanged: 0/0
  4390 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4391 ;;      Params:         0       2       0       0       0       0       0       0       0
  4392 ;;      Locals:         0       1       0       0       0       0       0       0       0
  4393 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4394 ;;      Totals:         0       3       0       0       0       0       0       0       0
  4395 ;;Total ram usage:        3 bytes
  4396 ;; Hardware stack levels used:    1
  4397 ;; Hardware stack levels required when called:   10
  4398 ;; This function calls:
  4399 ;;		_I2C_Ack
  4400 ;;		_I2C_Read
  4401 ;;		_I2C_Start
  4402 ;;		_I2C_Stop
  4403 ;;		_Persistant_Address
  4404 ;;		_Persistant_ControlByte
  4405 ;; This function is called by:
  4406 ;;		_InitApp
  4407 ;;		_Persistant_WriteExternalMemory
  4408 ;;		_Persistant_LoadBuffer
  4409 ;; This function uses a non-reentrant model
  4410 ;;
  4411                           
  4412                           	psect	text21
  4413  002C38                     __ptext21:
  4414                           	opt stack 0
  4415  002C38                     _Persistant_ReadExternalMemory:
  4416                           	opt stack 18
  4417                           
  4418                           ; BSR set to: 0
  4419                           ;persistant.c: 33: if (Persistant_Address(AAddress, 0))
  4420                           
  4421                           ; BSR set to: 0
  4422                           ;incstack = 0
  4423  002C38  C06F  F06C         	movff	Persistant_ReadExternalMemory@AAddress,Persistant_Address@AAddress
  4424  002C3C  C070  F06D         	movff	Persistant_ReadExternalMemory@AAddress+1,Persistant_Address@AAddress+1
  4425  002C40  6B6E               	clrf	Persistant_Address@ARead& (0+255),b
  4426  002C42  ECBF  F017         	call	_Persistant_Address	;wreg free
  4427  002C46  0900               	iorlw	0
  4428  002C48  E01D               	bz	l388
  4429                           
  4430                           ;persistant.c: 34: {
  4431                           ;persistant.c: 35: if (I2C_Start())
  4432  002C4A  ECD5  F018         	call	_I2C_Start	;wreg free
  4433  002C4E  0900               	iorlw	0
  4434  002C50  E019               	bz	l388
  4435                           
  4436                           ; BSR set to: 0
  4437                           ;persistant.c: 36: {
  4438                           ;persistant.c: 37: if (Persistant_ControlByte(AAddress, 1))
  4439  002C52  C06F  F066         	movff	Persistant_ReadExternalMemory@AAddress,Persistant_ControlByte@AAddress
  4440  002C56  C070  F067         	movff	Persistant_ReadExternalMemory@AAddress+1,Persistant_ControlByte@AAddress+1
  4441  002C5A  0E01               	movlw	1
  4442  002C5C  6F68               	movwf	Persistant_ControlByte@ARead& (0+255),b
  4443  002C5E  ECD7  F017         	call	_Persistant_ControlByte	;wreg free
  4444  002C62  0900               	iorlw	0
  4445  002C64  E00F               	bz	l388
  4446                           
  4447                           ;persistant.c: 38: {
  4448                           ;persistant.c: 39: unsigned char LResult = I2C_Read();
  4449  002C66  EC04  F018         	call	_I2C_Read	;wreg free
  4450  002C6A  0100               	movlb	0	; () banked
  4451  002C6C  6F71               	movwf	Persistant_ReadExternalMemory@LResult& (0+255),b
  4452                           
  4453                           ;persistant.c: 40: if (I2C_Ack(0))
  4454  002C6E  0E00               	movlw	0
  4455  002C70  EC6E  F018         	call	_I2C_Ack
  4456  002C74  0900               	iorlw	0
  4457  002C76  E006               	bz	l388
  4458                           
  4459                           ;persistant.c: 41: {
  4460                           ;persistant.c: 42: if (I2C_Stop())
  4461  002C78  ECDC  F018         	call	_I2C_Stop	;wreg free
  4462  002C7C  0900               	iorlw	0
  4463  002C7E  E002               	bz	l388
  4464                           
  4465                           ; BSR set to: 0
  4466                           ;persistant.c: 43: return LResult;
  4467  002C80  5171               	movf	Persistant_ReadExternalMemory@LResult& (0+255),w,b
  4468  002C82  0012               	return	
  4469  002C84                     l388:
  4470                           
  4471                           ;persistant.c: 44: }
  4472                           ;persistant.c: 45: }
  4473                           ;persistant.c: 46: }
  4474                           ;persistant.c: 47: }
  4475                           ;persistant.c: 48: return 0x00;
  4476                           
  4477                           ; BSR set to: 0
  4478  002C84  0C00               	retlw	0	;funcret
  4479  002C86                     __end_of_Persistant_ReadExternalMemory:
  4480                           	opt stack 0
  4481                           tblptru	equ	0xFF8
  4482                           tblptrh	equ	0xFF7
  4483                           tblptrl	equ	0xFF6
  4484                           tablat	equ	0xFF5
  4485                           prodh	equ	0xFF4
  4486                           prodl	equ	0xFF3
  4487                           intcon	equ	0xFF2
  4488                           postinc0	equ	0xFEE
  4489                           plusw0	equ	0xFEB
  4490                           wreg	equ	0xFE8
  4491                           postinc1	equ	0xFE6
  4492                           postdec1	equ	0xFE5
  4493                           plusw1	equ	0xFE3
  4494                           fsr1h	equ	0xFE2
  4495                           fsr1l	equ	0xFE1
  4496                           indf2	equ	0xFDF
  4497                           postinc2	equ	0xFDE
  4498                           postdec2	equ	0xFDD
  4499                           plusw2	equ	0xFDB
  4500                           fsr2h	equ	0xFDA
  4501                           fsr2l	equ	0xFD9
  4502                           status	equ	0xFD8
  4503                           
  4504 ;; *************** function _Persistant_Address *****************
  4505 ;; Defined at:
  4506 ;;		line 18 in file "persistant.c"
  4507 ;; Parameters:    Size  Location     Type
  4508 ;;  AAddress        2   12[BANK0 ] int 
  4509 ;;  ARead           1   14[BANK0 ] unsigned char 
  4510 ;; Auto vars:     Size  Location     Type
  4511 ;;		None
  4512 ;; Return value:  Size  Location     Type
  4513 ;;                  1    wreg      unsigned char 
  4514 ;; Registers used:
  4515 ;;		wreg, status,2, status,0, cstack
  4516 ;; Tracked objects:
  4517 ;;		On entry : 3F/0
  4518 ;;		On exit  : 0/0
  4519 ;;		Unchanged: 0/0
  4520 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4521 ;;      Params:         0       3       0       0       0       0       0       0       0
  4522 ;;      Locals:         0       0       0       0       0       0       0       0       0
  4523 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4524 ;;      Totals:         0       3       0       0       0       0       0       0       0
  4525 ;;Total ram usage:        3 bytes
  4526 ;; Hardware stack levels used:    1
  4527 ;; Hardware stack levels required when called:    9
  4528 ;; This function calls:
  4529 ;;		_I2C_Ack
  4530 ;;		_I2C_Start
  4531 ;;		_I2C_Write
  4532 ;;		_Persistant_ControlByte
  4533 ;; This function is called by:
  4534 ;;		_Persistant_ReadExternalMemory
  4535 ;;		_Persistant_WriteExternalMemory
  4536 ;; This function uses a non-reentrant model
  4537 ;;
  4538                           
  4539                           	psect	text22
  4540  002F7E                     __ptext22:
  4541                           	opt stack 0
  4542  002F7E                     _Persistant_Address:
  4543                           	opt stack 18
  4544                           
  4545                           ; BSR set to: 0
  4546                           ;persistant.c: 20: if (I2C_Start())
  4547                           
  4548                           ;incstack = 0
  4549  002F7E  ECD5  F018         	call	_I2C_Start	;wreg free
  4550  002F82  0900               	iorlw	0
  4551  002F84  E013               	bz	l3602
  4552                           
  4553                           ; BSR set to: 0
  4554                           ;persistant.c: 21: {
  4555                           ;persistant.c: 22: if (Persistant_ControlByte(AAddress, ARead))
  4556  002F86  C06C  F066         	movff	Persistant_Address@AAddress,Persistant_ControlByte@AAddress
  4557  002F8A  C06D  F067         	movff	Persistant_Address@AAddress+1,Persistant_ControlByte@AAddress+1
  4558  002F8E  C06E  F068         	movff	Persistant_Address@ARead,Persistant_ControlByte@ARead
  4559  002F92  ECD7  F017         	call	_Persistant_ControlByte	;wreg free
  4560  002F96  0900               	iorlw	0
  4561  002F98  E009               	bz	l3602
  4562                           
  4563                           ;persistant.c: 23: {
  4564                           ;persistant.c: 24: if (I2C_Write(AAddress & 0xFF))
  4565  002F9A  0100               	movlb	0	; () banked
  4566  002F9C  516C               	movf	Persistant_Address@AAddress& (0+255),w,b
  4567  002F9E  ECA7  F018         	call	_I2C_Write
  4568  002FA2  0900               	iorlw	0
  4569  002FA4  E003               	bz	l3602
  4570                           
  4571                           ; BSR set to: 0
  4572                           ;persistant.c: 25: return I2C_Ack(1);
  4573  002FA6  0E01               	movlw	1
  4574  002FA8  EF6E  F018         	goto	_I2C_Ack
  4575  002FAC                     l3602:
  4576                           
  4577                           ;persistant.c: 26: }
  4578                           ;persistant.c: 27: }
  4579                           ;persistant.c: 28: return 0;
  4580  002FAC  0C00               	retlw	0	;funcret
  4581  002FAE                     __end_of_Persistant_Address:
  4582                           	opt stack 0
  4583                           tblptru	equ	0xFF8
  4584                           tblptrh	equ	0xFF7
  4585                           tblptrl	equ	0xFF6
  4586                           tablat	equ	0xFF5
  4587                           prodh	equ	0xFF4
  4588                           prodl	equ	0xFF3
  4589                           intcon	equ	0xFF2
  4590                           postinc0	equ	0xFEE
  4591                           plusw0	equ	0xFEB
  4592                           wreg	equ	0xFE8
  4593                           postinc1	equ	0xFE6
  4594                           postdec1	equ	0xFE5
  4595                           plusw1	equ	0xFE3
  4596                           fsr1h	equ	0xFE2
  4597                           fsr1l	equ	0xFE1
  4598                           indf2	equ	0xFDF
  4599                           postinc2	equ	0xFDE
  4600                           postdec2	equ	0xFDD
  4601                           plusw2	equ	0xFDB
  4602                           fsr2h	equ	0xFDA
  4603                           fsr2l	equ	0xFD9
  4604                           status	equ	0xFD8
  4605                           
  4606 ;; *************** function _Persistant_ControlByte *****************
  4607 ;; Defined at:
  4608 ;;		line 11 in file "persistant.c"
  4609 ;; Parameters:    Size  Location     Type
  4610 ;;  AAddress        2    6[BANK0 ] int 
  4611 ;;  ARead           1    8[BANK0 ] unsigned char 
  4612 ;; Auto vars:     Size  Location     Type
  4613 ;;		None
  4614 ;; Return value:  Size  Location     Type
  4615 ;;                  1    wreg      unsigned char 
  4616 ;; Registers used:
  4617 ;;		wreg, status,2, status,0, cstack
  4618 ;; Tracked objects:
  4619 ;;		On entry : 3F/0
  4620 ;;		On exit  : 0/0
  4621 ;;		Unchanged: 0/0
  4622 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4623 ;;      Params:         0       3       0       0       0       0       0       0       0
  4624 ;;      Locals:         0       0       0       0       0       0       0       0       0
  4625 ;;      Temps:          0       3       0       0       0       0       0       0       0
  4626 ;;      Totals:         0       6       0       0       0       0       0       0       0
  4627 ;;Total ram usage:        6 bytes
  4628 ;; Hardware stack levels used:    1
  4629 ;; Hardware stack levels required when called:    8
  4630 ;; This function calls:
  4631 ;;		_I2C_Ack
  4632 ;;		_I2C_Write
  4633 ;; This function is called by:
  4634 ;;		_Persistant_Address
  4635 ;;		_Persistant_ReadExternalMemory
  4636 ;; This function uses a non-reentrant model
  4637 ;;
  4638                           
  4639                           	psect	text23
  4640  002FAE                     __ptext23:
  4641                           	opt stack 0
  4642  002FAE                     _Persistant_ControlByte:
  4643                           	opt stack 19
  4644                           
  4645                           ; BSR set to: 0
  4646                           ;persistant.c: 13: if (I2C_Write(0xA0 | 0x06 & (AAddress >> 7) | ARead))
  4647                           
  4648                           ;incstack = 0
  4649  002FAE  C066  F069         	movff	Persistant_ControlByte@AAddress,??_Persistant_ControlByte
  4650  002FB2  C067  F06A         	movff	Persistant_ControlByte@AAddress+1,??_Persistant_ControlByte+1
  4651  002FB6  0E07               	movlw	7
  4652  002FB8  6F6B               	movwf	(??_Persistant_ControlByte+2)& (0+255),b
  4653  002FBA                     u3255:
  4654  002FBA  356A               	rlcf	(??_Persistant_ControlByte+1)& (0+255),w,b
  4655  002FBC  336A               	rrcf	(??_Persistant_ControlByte+1)& (0+255),f,b
  4656  002FBE  3369               	rrcf	??_Persistant_ControlByte& (0+255),f,b
  4657  002FC0  2F6B               	decfsz	(??_Persistant_ControlByte+2)& (0+255),f,b
  4658  002FC2  D7FB               	goto	u3255
  4659  002FC4  5169               	movf	??_Persistant_ControlByte& (0+255),w,b
  4660  002FC6  0B06               	andlw	6
  4661  002FC8  1168               	iorwf	Persistant_ControlByte@ARead& (0+255),w,b
  4662  002FCA  09A0               	iorlw	160
  4663  002FCC  ECA7  F018         	call	_I2C_Write
  4664  002FD0  0900               	iorlw	0
  4665  002FD2  E003               	bz	l3422
  4666                           
  4667                           ; BSR set to: 0
  4668                           ;persistant.c: 14: return I2C_Ack(1);
  4669  002FD4  0E01               	movlw	1
  4670  002FD6  EF6E  F018         	goto	_I2C_Ack
  4671  002FDA                     l3422:
  4672                           
  4673                           ; BSR set to: 0
  4674                           ;persistant.c: 15: return 0;
  4675  002FDA  0C00               	retlw	0	;funcret
  4676  002FDC                     __end_of_Persistant_ControlByte:
  4677                           	opt stack 0
  4678                           tblptru	equ	0xFF8
  4679                           tblptrh	equ	0xFF7
  4680                           tblptrl	equ	0xFF6
  4681                           tablat	equ	0xFF5
  4682                           prodh	equ	0xFF4
  4683                           prodl	equ	0xFF3
  4684                           intcon	equ	0xFF2
  4685                           postinc0	equ	0xFEE
  4686                           plusw0	equ	0xFEB
  4687                           wreg	equ	0xFE8
  4688                           postinc1	equ	0xFE6
  4689                           postdec1	equ	0xFE5
  4690                           plusw1	equ	0xFE3
  4691                           fsr1h	equ	0xFE2
  4692                           fsr1l	equ	0xFE1
  4693                           indf2	equ	0xFDF
  4694                           postinc2	equ	0xFDE
  4695                           postdec2	equ	0xFDD
  4696                           plusw2	equ	0xFDB
  4697                           fsr2h	equ	0xFDA
  4698                           fsr2l	equ	0xFD9
  4699                           status	equ	0xFD8
  4700                           
  4701 ;; *************** function _I2C_Write *****************
  4702 ;; Defined at:
  4703 ;;		line 90 in file "I2C.c"
  4704 ;; Parameters:    Size  Location     Type
  4705 ;;  b               1    wreg     unsigned char 
  4706 ;; Auto vars:     Size  Location     Type
  4707 ;;  b               1    5[BANK0 ] unsigned char 
  4708 ;; Return value:  Size  Location     Type
  4709 ;;                  1    wreg      unsigned char 
  4710 ;; Registers used:
  4711 ;;		wreg, status,2, status,0, cstack
  4712 ;; Tracked objects:
  4713 ;;		On entry : 3F/0
  4714 ;;		On exit  : 3F/0
  4715 ;;		Unchanged: 0/0
  4716 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4717 ;;      Params:         0       0       0       0       0       0       0       0       0
  4718 ;;      Locals:         0       1       0       0       0       0       0       0       0
  4719 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4720 ;;      Totals:         0       1       0       0       0       0       0       0       0
  4721 ;;Total ram usage:        1 bytes
  4722 ;; Hardware stack levels used:    1
  4723 ;; Hardware stack levels required when called:    7
  4724 ;; This function calls:
  4725 ;;		_I2C_Wait
  4726 ;; This function is called by:
  4727 ;;		_Persistant_ControlByte
  4728 ;;		_Persistant_Address
  4729 ;;		_Persistant_WriteExternalMemory
  4730 ;; This function uses a non-reentrant model
  4731 ;;
  4732                           
  4733                           	psect	text24
  4734  00314E                     __ptext24:
  4735                           	opt stack 0
  4736  00314E                     _I2C_Write:
  4737                           	opt stack 19
  4738                           
  4739                           ;incstack = 0
  4740                           ;I2C_Write@b stored from wreg
  4741  00314E  6F65               	movwf	I2C_Write@b& (0+255),b
  4742                           
  4743                           ;I2C.c: 92: if (I2C_Wait())
  4744  003150  ECF4  F014         	call	_I2C_Wait	;wreg free
  4745  003154  0900               	iorlw	0
  4746  003156  E003               	bz	l3198
  4747                           
  4748                           ; BSR set to: 0
  4749                           ;I2C.c: 96: _I2CCount++;
  4750  003158  C065  FFC9         	movff	I2C_Write@b,4041	;volatile
  4751                           
  4752                           ; BSR set to: 0
  4753                           ;I2C.c: 97: return 1;
  4754  00315C  0C01               	retlw	1
  4755  00315E                     l3198:
  4756                           
  4757                           ; BSR set to: 0
  4758                           
  4759                           ; BSR set to: 0
  4760                           ;I2C.c: 100: return 0;
  4761  00315E  0C00               	retlw	0	;funcret
  4762  003160                     __end_of_I2C_Write:
  4763                           	opt stack 0
  4764                           tblptru	equ	0xFF8
  4765                           tblptrh	equ	0xFF7
  4766                           tblptrl	equ	0xFF6
  4767                           tablat	equ	0xFF5
  4768                           prodh	equ	0xFF4
  4769                           prodl	equ	0xFF3
  4770                           intcon	equ	0xFF2
  4771                           postinc0	equ	0xFEE
  4772                           plusw0	equ	0xFEB
  4773                           wreg	equ	0xFE8
  4774                           postinc1	equ	0xFE6
  4775                           postdec1	equ	0xFE5
  4776                           plusw1	equ	0xFE3
  4777                           fsr1h	equ	0xFE2
  4778                           fsr1l	equ	0xFE1
  4779                           indf2	equ	0xFDF
  4780                           postinc2	equ	0xFDE
  4781                           postdec2	equ	0xFDD
  4782                           plusw2	equ	0xFDB
  4783                           fsr2h	equ	0xFDA
  4784                           fsr2l	equ	0xFD9
  4785                           status	equ	0xFD8
  4786                           
  4787 ;; *************** function _I2C_Start *****************
  4788 ;; Defined at:
  4789 ;;		line 31 in file "I2C.c"
  4790 ;; Parameters:    Size  Location     Type
  4791 ;;		None
  4792 ;; Auto vars:     Size  Location     Type
  4793 ;;		None
  4794 ;; Return value:  Size  Location     Type
  4795 ;;                  1    wreg      unsigned char 
  4796 ;; Registers used:
  4797 ;;		wreg, status,2, status,0, cstack
  4798 ;; Tracked objects:
  4799 ;;		On entry : 0/0
  4800 ;;		On exit  : 3F/0
  4801 ;;		Unchanged: 0/0
  4802 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4803 ;;      Params:         0       0       0       0       0       0       0       0       0
  4804 ;;      Locals:         0       0       0       0       0       0       0       0       0
  4805 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4806 ;;      Totals:         0       0       0       0       0       0       0       0       0
  4807 ;;Total ram usage:        0 bytes
  4808 ;; Hardware stack levels used:    1
  4809 ;; Hardware stack levels required when called:    7
  4810 ;; This function calls:
  4811 ;;		_I2C_Wait
  4812 ;; This function is called by:
  4813 ;;		_Persistant_Address
  4814 ;;		_Persistant_ReadExternalMemory
  4815 ;; This function uses a non-reentrant model
  4816 ;;
  4817                           
  4818                           	psect	text25
  4819  0031AA                     __ptext25:
  4820                           	opt stack 0
  4821  0031AA                     _I2C_Start:
  4822                           	opt stack 19
  4823                           
  4824                           ;I2C.c: 33: if (I2C_Wait())
  4825                           
  4826                           ; BSR set to: 0
  4827                           ;incstack = 0
  4828  0031AA  ECF4  F014         	call	_I2C_Wait	;wreg free
  4829  0031AE  0900               	iorlw	0
  4830  0031B0  E002               	bz	l3434
  4831                           
  4832                           ; BSR set to: 0
  4833                           ;I2C.c: 37: _I2CCount++;
  4834  0031B2  80C5               	bsf	4037,0,c	;volatile
  4835                           
  4836                           ; BSR set to: 0
  4837                           ;I2C.c: 38: return 1;
  4838  0031B4  0C01               	retlw	1
  4839  0031B6                     l3434:
  4840                           
  4841                           ; BSR set to: 0
  4842                           
  4843                           ; BSR set to: 0
  4844                           ;I2C.c: 41: return 0;
  4845  0031B6  0C00               	retlw	0	;funcret
  4846  0031B8                     __end_of_I2C_Start:
  4847                           	opt stack 0
  4848                           tblptru	equ	0xFF8
  4849                           tblptrh	equ	0xFF7
  4850                           tblptrl	equ	0xFF6
  4851                           tablat	equ	0xFF5
  4852                           prodh	equ	0xFF4
  4853                           prodl	equ	0xFF3
  4854                           intcon	equ	0xFF2
  4855                           postinc0	equ	0xFEE
  4856                           plusw0	equ	0xFEB
  4857                           wreg	equ	0xFE8
  4858                           postinc1	equ	0xFE6
  4859                           postdec1	equ	0xFE5
  4860                           plusw1	equ	0xFE3
  4861                           fsr1h	equ	0xFE2
  4862                           fsr1l	equ	0xFE1
  4863                           indf2	equ	0xFDF
  4864                           postinc2	equ	0xFDE
  4865                           postdec2	equ	0xFDD
  4866                           plusw2	equ	0xFDB
  4867                           fsr2h	equ	0xFDA
  4868                           fsr2l	equ	0xFD9
  4869                           status	equ	0xFD8
  4870                           
  4871 ;; *************** function _I2C_Stop *****************
  4872 ;; Defined at:
  4873 ;;		line 61 in file "I2C.c"
  4874 ;; Parameters:    Size  Location     Type
  4875 ;;		None
  4876 ;; Auto vars:     Size  Location     Type
  4877 ;;		None
  4878 ;; Return value:  Size  Location     Type
  4879 ;;                  1    wreg      unsigned char 
  4880 ;; Registers used:
  4881 ;;		wreg, status,2, status,0, cstack
  4882 ;; Tracked objects:
  4883 ;;		On entry : 0/0
  4884 ;;		On exit  : 3F/0
  4885 ;;		Unchanged: 0/0
  4886 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4887 ;;      Params:         0       0       0       0       0       0       0       0       0
  4888 ;;      Locals:         0       0       0       0       0       0       0       0       0
  4889 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4890 ;;      Totals:         0       0       0       0       0       0       0       0       0
  4891 ;;Total ram usage:        0 bytes
  4892 ;; Hardware stack levels used:    1
  4893 ;; Hardware stack levels required when called:    7
  4894 ;; This function calls:
  4895 ;;		_I2C_Wait
  4896 ;; This function is called by:
  4897 ;;		_Persistant_ReadExternalMemory
  4898 ;;		_Persistant_WriteExternalMemory
  4899 ;; This function uses a non-reentrant model
  4900 ;;
  4901                           
  4902                           	psect	text26
  4903  0031B8                     __ptext26:
  4904                           	opt stack 0
  4905  0031B8                     _I2C_Stop:
  4906                           	opt stack 20
  4907                           
  4908                           ;I2C.c: 63: if (I2C_Wait())
  4909                           
  4910                           ; BSR set to: 0
  4911                           ;incstack = 0
  4912  0031B8  ECF4  F014         	call	_I2C_Wait	;wreg free
  4913  0031BC  0900               	iorlw	0
  4914  0031BE  E002               	bz	l3632
  4915                           
  4916                           ; BSR set to: 0
  4917                           ;I2C.c: 67: _I2CCount++;
  4918  0031C0  84C5               	bsf	4037,2,c	;volatile
  4919                           
  4920                           ; BSR set to: 0
  4921                           ;I2C.c: 68: return 1;
  4922  0031C2  0C01               	retlw	1
  4923  0031C4                     l3632:
  4924                           
  4925                           ; BSR set to: 0
  4926                           
  4927                           ; BSR set to: 0
  4928                           ;I2C.c: 71: return 0;
  4929  0031C4  0C00               	retlw	0	;funcret
  4930  0031C6                     __end_of_I2C_Stop:
  4931                           	opt stack 0
  4932                           tblptru	equ	0xFF8
  4933                           tblptrh	equ	0xFF7
  4934                           tblptrl	equ	0xFF6
  4935                           tablat	equ	0xFF5
  4936                           prodh	equ	0xFF4
  4937                           prodl	equ	0xFF3
  4938                           intcon	equ	0xFF2
  4939                           postinc0	equ	0xFEE
  4940                           plusw0	equ	0xFEB
  4941                           wreg	equ	0xFE8
  4942                           postinc1	equ	0xFE6
  4943                           postdec1	equ	0xFE5
  4944                           plusw1	equ	0xFE3
  4945                           fsr1h	equ	0xFE2
  4946                           fsr1l	equ	0xFE1
  4947                           indf2	equ	0xFDF
  4948                           postinc2	equ	0xFDE
  4949                           postdec2	equ	0xFDD
  4950                           plusw2	equ	0xFDB
  4951                           fsr2h	equ	0xFDA
  4952                           fsr2l	equ	0xFD9
  4953                           status	equ	0xFD8
  4954                           
  4955 ;; *************** function _I2C_Read *****************
  4956 ;; Defined at:
  4957 ;;		line 105 in file "I2C.c"
  4958 ;; Parameters:    Size  Location     Type
  4959 ;;		None
  4960 ;; Auto vars:     Size  Location     Type
  4961 ;;  LData           1    6[BANK0 ] unsigned char 
  4962 ;; Return value:  Size  Location     Type
  4963 ;;                  1    wreg      unsigned char 
  4964 ;; Registers used:
  4965 ;;		wreg, status,2, status,0, cstack
  4966 ;; Tracked objects:
  4967 ;;		On entry : 0/0
  4968 ;;		On exit  : 0/0
  4969 ;;		Unchanged: 0/0
  4970 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4971 ;;      Params:         0       0       0       0       0       0       0       0       0
  4972 ;;      Locals:         0       1       0       0       0       0       0       0       0
  4973 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4974 ;;      Totals:         0       1       0       0       0       0       0       0       0
  4975 ;;Total ram usage:        1 bytes
  4976 ;; Hardware stack levels used:    1
  4977 ;; Hardware stack levels required when called:    8
  4978 ;; This function calls:
  4979 ;;		_I2C_Ack
  4980 ;;		_I2C_Wait
  4981 ;; This function is called by:
  4982 ;;		_Persistant_ReadExternalMemory
  4983 ;; This function uses a non-reentrant model
  4984 ;;
  4985                           
  4986                           	psect	text27
  4987  003008                     __ptext27:
  4988                           	opt stack 0
  4989  003008                     _I2C_Read:
  4990                           	opt stack 19
  4991                           
  4992                           ;I2C.c: 107: if (I2C_Wait())
  4993                           
  4994                           ; BSR set to: 0
  4995                           ;incstack = 0
  4996  003008  ECF4  F014         	call	_I2C_Wait	;wreg free
  4997  00300C  0900               	iorlw	0
  4998  00300E  E00F               	bz	l3620
  4999                           
  5000                           ; BSR set to: 0
  5001                           ;I2C.c: 108: {
  5002                           ;I2C.c: 109: RCEN = 1;
  5003  003010  86C5               	bsf	4037,3,c	;volatile
  5004                           
  5005                           ; BSR set to: 0
  5006                           ;I2C.c: 110: if (I2C_Wait())
  5007  003012  ECF4  F014         	call	_I2C_Wait	;wreg free
  5008  003016  0900               	iorlw	0
  5009  003018  E00A               	bz	l3620
  5010                           
  5011                           ; BSR set to: 0
  5012                           ;I2C.c: 111: {
  5013                           ;I2C.c: 112: unsigned char LData = SSPBUF;
  5014  00301A  CFC9 F066          	movff	4041,I2C_Read@LData	;volatile
  5015                           
  5016                           ; BSR set to: 0
  5017                           ;I2C.c: 116: _I2CCount++;
  5018  00301E  0E01               	movlw	1
  5019  003020  EC6E  F018         	call	_I2C_Ack
  5020  003024  0900               	iorlw	0
  5021  003026  E003               	bz	l3620
  5022                           
  5023                           ;I2C.c: 117: return LData;
  5024  003028  0100               	movlb	0	; () banked
  5025  00302A  5166               	movf	I2C_Read@LData& (0+255),w,b
  5026  00302C  0012               	return	
  5027  00302E                     l3620:
  5028                           
  5029                           ;I2C.c: 122: return 0x00;
  5030  00302E  0C00               	retlw	0	;funcret
  5031  003030                     __end_of_I2C_Read:
  5032                           	opt stack 0
  5033                           tblptru	equ	0xFF8
  5034                           tblptrh	equ	0xFF7
  5035                           tblptrl	equ	0xFF6
  5036                           tablat	equ	0xFF5
  5037                           prodh	equ	0xFF4
  5038                           prodl	equ	0xFF3
  5039                           intcon	equ	0xFF2
  5040                           postinc0	equ	0xFEE
  5041                           plusw0	equ	0xFEB
  5042                           wreg	equ	0xFE8
  5043                           postinc1	equ	0xFE6
  5044                           postdec1	equ	0xFE5
  5045                           plusw1	equ	0xFE3
  5046                           fsr1h	equ	0xFE2
  5047                           fsr1l	equ	0xFE1
  5048                           indf2	equ	0xFDF
  5049                           postinc2	equ	0xFDE
  5050                           postdec2	equ	0xFDD
  5051                           plusw2	equ	0xFDB
  5052                           fsr2h	equ	0xFDA
  5053                           fsr2l	equ	0xFD9
  5054                           status	equ	0xFD8
  5055                           
  5056 ;; *************** function _I2C_Ack *****************
  5057 ;; Defined at:
  5058 ;;		line 76 in file "I2C.c"
  5059 ;; Parameters:    Size  Location     Type
  5060 ;;  AAck            1    wreg     unsigned char 
  5061 ;; Auto vars:     Size  Location     Type
  5062 ;;  AAck            1    5[BANK0 ] unsigned char 
  5063 ;; Return value:  Size  Location     Type
  5064 ;;                  1    wreg      unsigned char 
  5065 ;; Registers used:
  5066 ;;		wreg, status,2, status,0, cstack
  5067 ;; Tracked objects:
  5068 ;;		On entry : 3F/0
  5069 ;;		On exit  : 0/0
  5070 ;;		Unchanged: 0/0
  5071 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5072 ;;      Params:         0       0       0       0       0       0       0       0       0
  5073 ;;      Locals:         0       1       0       0       0       0       0       0       0
  5074 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5075 ;;      Totals:         0       1       0       0       0       0       0       0       0
  5076 ;;Total ram usage:        1 bytes
  5077 ;; Hardware stack levels used:    1
  5078 ;; Hardware stack levels required when called:    7
  5079 ;; This function calls:
  5080 ;;		_I2C_Wait
  5081 ;; This function is called by:
  5082 ;;		_Persistant_ControlByte
  5083 ;;		_Persistant_Address
  5084 ;;		_Persistant_ReadExternalMemory
  5085 ;;		_Persistant_WriteExternalMemory
  5086 ;;		_I2C_Read
  5087 ;; This function uses a non-reentrant model
  5088 ;;
  5089                           
  5090                           	psect	text28
  5091  0030DC                     __ptext28:
  5092                           	opt stack 0
  5093  0030DC                     _I2C_Ack:
  5094                           	opt stack 19
  5095                           
  5096                           ;incstack = 0
  5097                           ;I2C_Ack@AAck stored from wreg
  5098  0030DC  6F65               	movwf	I2C_Ack@AAck& (0+255),b
  5099                           
  5100                           ;I2C.c: 78: if (I2C_Wait())
  5101  0030DE  ECF4  F014         	call	_I2C_Wait	;wreg free
  5102  0030E2  0900               	iorlw	0
  5103  0030E4  E007               	bz	l3210
  5104                           
  5105                           ; BSR set to: 0
  5106                           ;I2C.c: 79: {
  5107                           ;I2C.c: 80: ACKDT = AAck;
  5108  0030E6  A165               	btfss	I2C_Ack@AAck& (0+255),0,b
  5109  0030E8  D002               	goto	u2820
  5110  0030EA  8AC5               	bsf	4037,5,c	;volatile
  5111  0030EC  D001               	goto	u2835
  5112  0030EE                     u2820:
  5113  0030EE  9AC5               	bcf	4037,5,c	;volatile
  5114  0030F0                     u2835:
  5115                           
  5116                           ;I2C.c: 83: _I2CCount++;
  5117  0030F0  88C5               	bsf	4037,4,c	;volatile
  5118                           
  5119                           ;I2C.c: 84: return 1;
  5120  0030F2  0C01               	retlw	1
  5121  0030F4                     l3210:
  5122                           
  5123                           ; BSR set to: 0
  5124                           ;I2C.c: 87: return 0;
  5125  0030F4  0C00               	retlw	0	;funcret
  5126  0030F6                     __end_of_I2C_Ack:
  5127                           	opt stack 0
  5128                           tblptru	equ	0xFF8
  5129                           tblptrh	equ	0xFF7
  5130                           tblptrl	equ	0xFF6
  5131                           tablat	equ	0xFF5
  5132                           prodh	equ	0xFF4
  5133                           prodl	equ	0xFF3
  5134                           intcon	equ	0xFF2
  5135                           postinc0	equ	0xFEE
  5136                           plusw0	equ	0xFEB
  5137                           wreg	equ	0xFE8
  5138                           postinc1	equ	0xFE6
  5139                           postdec1	equ	0xFE5
  5140                           plusw1	equ	0xFE3
  5141                           fsr1h	equ	0xFE2
  5142                           fsr1l	equ	0xFE1
  5143                           indf2	equ	0xFDF
  5144                           postinc2	equ	0xFDE
  5145                           postdec2	equ	0xFDD
  5146                           plusw2	equ	0xFDB
  5147                           fsr2h	equ	0xFDA
  5148                           fsr2l	equ	0xFD9
  5149                           status	equ	0xFD8
  5150                           
  5151 ;; *************** function _I2C_Wait *****************
  5152 ;; Defined at:
  5153 ;;		line 16 in file "I2C.c"
  5154 ;; Parameters:    Size  Location     Type
  5155 ;;		None
  5156 ;; Auto vars:     Size  Location     Type
  5157 ;;  LTimeOut        2    2[BANK0 ] int 
  5158 ;;  LResult         1    4[BANK0 ] unsigned char 
  5159 ;; Return value:  Size  Location     Type
  5160 ;;                  1    wreg      unsigned char 
  5161 ;; Registers used:
  5162 ;;		wreg, status,2, status,0
  5163 ;; Tracked objects:
  5164 ;;		On entry : 0/0
  5165 ;;		On exit  : 3F/0
  5166 ;;		Unchanged: 0/0
  5167 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5168 ;;      Params:         0       0       0       0       0       0       0       0       0
  5169 ;;      Locals:         0       3       0       0       0       0       0       0       0
  5170 ;;      Temps:          0       2       0       0       0       0       0       0       0
  5171 ;;      Totals:         0       5       0       0       0       0       0       0       0
  5172 ;;Total ram usage:        5 bytes
  5173 ;; Hardware stack levels used:    1
  5174 ;; Hardware stack levels required when called:    6
  5175 ;; This function calls:
  5176 ;;		Nothing
  5177 ;; This function is called by:
  5178 ;;		_I2C_Start
  5179 ;;		_I2C_Stop
  5180 ;;		_I2C_Ack
  5181 ;;		_I2C_Write
  5182 ;;		_I2C_Read
  5183 ;; This function uses a non-reentrant model
  5184 ;;
  5185                           
  5186                           	psect	text29
  5187  0029E8                     __ptext29:
  5188                           	opt stack 0
  5189  0029E8                     _I2C_Wait:
  5190                           	opt stack 19
  5191                           
  5192                           ;I2C.c: 18: int LTimeOut = 10000;
  5193                           
  5194                           ;incstack = 0
  5195  0029E8  0E27               	movlw	39
  5196  0029EA  0100               	movlb	0	; () banked
  5197  0029EC  6F63               	movwf	(I2C_Wait@LTimeOut+1)& (0+255),b
  5198  0029EE  0E10               	movlw	16
  5199  0029F0  6F62               	movwf	I2C_Wait@LTimeOut& (0+255),b
  5200                           
  5201                           ;I2C.c: 19: while (((SSPCON2 & 0x1F ) | RW ) && LTimeOut > 0)
  5202  0029F2  D00C               	goto	l668
  5203  0029F4                     l3138:
  5204                           
  5205                           ; BSR set to: 0
  5206                           ;I2C.c: 20: {
  5207                           ;I2C.c: 21: _delay((unsigned long)((1)*(20000000/4000.0)));
  5208  0029F4  0E07               	movlw	7
  5209  0029F6  0100               	movlb	0	; () banked
  5210  0029F8  6F60               	movwf	??_I2C_Wait& (0+255),b
  5211  0029FA  0E7D               	movlw	125
  5212  0029FC                     u5317:
  5213  0029FC  2EE8               	decfsz	wreg,f,c
  5214  0029FE  D7FE               	bra	u5317
  5215  002A00  2F60               	decfsz	??_I2C_Wait& (0+255),f,b
  5216  002A02  D7FC               	bra	u5317
  5217                           
  5218                           ;I2C.c: 22: LTimeOut--;
  5219  002A04  0100               	movlb	0	; () banked
  5220  002A06  0762               	decf	I2C_Wait@LTimeOut& (0+255),f,b
  5221  002A08  A0D8               	btfss	status,0,c
  5222  002A0A  0763               	decf	(I2C_Wait@LTimeOut+1)& (0+255),f,b
  5223  002A0C                     l668:
  5224                           
  5225                           ; BSR set to: 0
  5226  002A0C  50C5               	movf	4037,w,c	;volatile
  5227  002A0E  0B1F               	andlw	31
  5228  002A10  6F60               	movwf	??_I2C_Wait& (0+255),b
  5229  002A12  6B61               	clrf	(??_I2C_Wait+1)& (0+255),b
  5230  002A14  0E01               	movlw	1
  5231  002A16  A4C7               	btfss	4039,2,c	;volatile
  5232  002A18  0E00               	movlw	0
  5233  002A1A  1360               	iorwf	??_I2C_Wait& (0+255),f,b
  5234  002A1C  5160               	movf	??_I2C_Wait& (0+255),w,b
  5235  002A1E  1161               	iorwf	(??_I2C_Wait+1)& (0+255),w,b
  5236  002A20  E006               	bz	u2690
  5237                           
  5238                           ; BSR set to: 0
  5239  002A22  BF63               	btfsc	(I2C_Wait@LTimeOut+1)& (0+255),7,b
  5240  002A24  D004               	goto	u2690
  5241  002A26  5163               	movf	(I2C_Wait@LTimeOut+1)& (0+255),w,b
  5242  002A28  E1E5               	bnz	l3138
  5243  002A2A  0562               	decf	I2C_Wait@LTimeOut& (0+255),w,b
  5244  002A2C  E2E3               	bc	l3138
  5245  002A2E                     u2690:
  5246                           
  5247                           ; BSR set to: 0
  5248                           ;I2C.c: 23: };
  5249                           ;I2C.c: 24: bool LResult = LTimeOut > 0;
  5250  002A2E  BF63               	btfsc	(I2C_Wait@LTimeOut+1)& (0+255),7,b
  5251  002A30  D006               	goto	u2700
  5252  002A32  5163               	movf	(I2C_Wait@LTimeOut+1)& (0+255),w,b
  5253  002A34  E102               	bnz	u2701
  5254  002A36  0562               	decf	I2C_Wait@LTimeOut& (0+255),w,b
  5255  002A38  E302               	bnc	u2700
  5256  002A3A                     u2701:
  5257  002A3A  0E01               	movlw	1
  5258  002A3C  D001               	goto	u2710
  5259  002A3E                     u2700:
  5260  002A3E  0E00               	movlw	0
  5261  002A40                     u2710:
  5262  002A40  6F64               	movwf	I2C_Wait@LResult& (0+255),b
  5263                           
  5264                           ; BSR set to: 0
  5265                           ;I2C.c: 28: return LResult;
  5266  002A42  5164               	movf	I2C_Wait@LResult& (0+255),w,b
  5267                           
  5268                           ; BSR set to: 0
  5269  002A44  0012               	return		;funcret
  5270  002A46                     __end_of_I2C_Wait:
  5271                           	opt stack 0
  5272                           tblptru	equ	0xFF8
  5273                           tblptrh	equ	0xFF7
  5274                           tblptrl	equ	0xFF6
  5275                           tablat	equ	0xFF5
  5276                           prodh	equ	0xFF4
  5277                           prodl	equ	0xFF3
  5278                           intcon	equ	0xFF2
  5279                           postinc0	equ	0xFEE
  5280                           plusw0	equ	0xFEB
  5281                           wreg	equ	0xFE8
  5282                           postinc1	equ	0xFE6
  5283                           postdec1	equ	0xFE5
  5284                           plusw1	equ	0xFE3
  5285                           fsr1h	equ	0xFE2
  5286                           fsr1l	equ	0xFE1
  5287                           indf2	equ	0xFDF
  5288                           postinc2	equ	0xFDE
  5289                           postdec2	equ	0xFDD
  5290                           plusw2	equ	0xFDB
  5291                           fsr2h	equ	0xFDA
  5292                           fsr2l	equ	0xFD9
  5293                           status	equ	0xFD8
  5294                           
  5295 ;; *************** function _Persistant_Init *****************
  5296 ;; Defined at:
  5297 ;;		line 6 in file "persistant.c"
  5298 ;; Parameters:    Size  Location     Type
  5299 ;;		None
  5300 ;; Auto vars:     Size  Location     Type
  5301 ;;		None
  5302 ;; Return value:  Size  Location     Type
  5303 ;;                  1    wreg      void 
  5304 ;; Registers used:
  5305 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  5306 ;; Tracked objects:
  5307 ;;		On entry : 0/0
  5308 ;;		On exit  : 3F/0
  5309 ;;		Unchanged: 0/0
  5310 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5311 ;;      Params:         0       0       0       0       0       0       0       0       0
  5312 ;;      Locals:         0       0       0       0       0       0       0       0       0
  5313 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5314 ;;      Totals:         0       0       0       0       0       0       0       0       0
  5315 ;;Total ram usage:        0 bytes
  5316 ;; Hardware stack levels used:    1
  5317 ;; Hardware stack levels required when called:    9
  5318 ;; This function calls:
  5319 ;;		_I2C_Init
  5320 ;; This function is called by:
  5321 ;;		_InitApp
  5322 ;; This function uses a non-reentrant model
  5323 ;;
  5324                           
  5325                           	psect	text30
  5326  003128                     __ptext30:
  5327                           	opt stack 0
  5328  003128                     _Persistant_Init:
  5329                           	opt stack 20
  5330                           
  5331                           ;persistant.c: 8: I2C_Init(400000);
  5332                           
  5333                           ; BSR set to: 0
  5334                           ;incstack = 0
  5335  003128  0E80               	movlw	128
  5336  00312A  0100               	movlb	0	; () banked
  5337  00312C  6F9E               	movwf	I2C_Init@AFrequency& (0+255),b
  5338  00312E  0E1A               	movlw	26
  5339  003130  6F9F               	movwf	(I2C_Init@AFrequency+1)& (0+255),b
  5340  003132  0E06               	movlw	6
  5341  003134  6FA0               	movwf	(I2C_Init@AFrequency+2)& (0+255),b
  5342  003136  6BA1               	clrf	(I2C_Init@AFrequency+3)& (0+255),b
  5343  003138  EF35  F011         	goto	_I2C_Init	;wreg free
  5344  00313C                     __end_of_Persistant_Init:
  5345                           	opt stack 0
  5346                           tblptru	equ	0xFF8
  5347                           tblptrh	equ	0xFF7
  5348                           tblptrl	equ	0xFF6
  5349                           tablat	equ	0xFF5
  5350                           prodh	equ	0xFF4
  5351                           prodl	equ	0xFF3
  5352                           intcon	equ	0xFF2
  5353                           postinc0	equ	0xFEE
  5354                           plusw0	equ	0xFEB
  5355                           wreg	equ	0xFE8
  5356                           postinc1	equ	0xFE6
  5357                           postdec1	equ	0xFE5
  5358                           plusw1	equ	0xFE3
  5359                           fsr1h	equ	0xFE2
  5360                           fsr1l	equ	0xFE1
  5361                           indf2	equ	0xFDF
  5362                           postinc2	equ	0xFDE
  5363                           postdec2	equ	0xFDD
  5364                           plusw2	equ	0xFDB
  5365                           fsr2h	equ	0xFDA
  5366                           fsr2l	equ	0xFD9
  5367                           status	equ	0xFD8
  5368                           
  5369 ;; *************** function _I2C_Init *****************
  5370 ;; Defined at:
  5371 ;;		line 5 in file "I2C.c"
  5372 ;; Parameters:    Size  Location     Type
  5373 ;;  AFrequency      4   62[BANK0 ] long 
  5374 ;; Auto vars:     Size  Location     Type
  5375 ;;  LRatio          3   66[BANK0 ] float 
  5376 ;; Return value:  Size  Location     Type
  5377 ;;                  1    wreg      void 
  5378 ;; Registers used:
  5379 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  5380 ;; Tracked objects:
  5381 ;;		On entry : 3F/0
  5382 ;;		On exit  : 3F/0
  5383 ;;		Unchanged: 0/0
  5384 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5385 ;;      Params:         0       4       0       0       0       0       0       0       0
  5386 ;;      Locals:         0       3       0       0       0       0       0       0       0
  5387 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5388 ;;      Totals:         0       7       0       0       0       0       0       0       0
  5389 ;;Total ram usage:        7 bytes
  5390 ;; Hardware stack levels used:    1
  5391 ;; Hardware stack levels required when called:    8
  5392 ;; This function calls:
  5393 ;;		___altoft
  5394 ;;		___ftadd
  5395 ;;		___ftdiv
  5396 ;;		___ftmul
  5397 ;;		___fttol
  5398 ;; This function is called by:
  5399 ;;		_Persistant_Init
  5400 ;; This function uses a non-reentrant model
  5401 ;;
  5402                           
  5403                           	psect	text31
  5404  00226A                     __ptext31:
  5405                           	opt stack 0
  5406  00226A                     _I2C_Init:
  5407                           	opt stack 20
  5408                           
  5409                           ; BSR set to: 0
  5410                           ;I2C.c: 7: TRISB0 = 1;
  5411                           
  5412                           ; BSR set to: 0
  5413                           ;incstack = 0
  5414  00226A  8093               	bsf	3987,0,c	;volatile
  5415                           
  5416                           ;I2C.c: 8: TRISB1 = 1;
  5417  00226C  8293               	bsf	3987,1,c	;volatile
  5418                           
  5419                           ;I2C.c: 9: SSPSTAT = 0x00;
  5420  00226E  6AC7               	clrf	4039,c	;volatile
  5421                           
  5422                           ; BSR set to: 0
  5423                           ;I2C.c: 10: SSPCON1 = 0x28;
  5424  002270  0E28               	movlw	40
  5425  002272  6EC6               	movwf	4038,c	;volatile
  5426                           
  5427                           ; BSR set to: 0
  5428                           ;I2C.c: 11: float LRatio = (20000000 / (4.0f * AFrequency)) - 1;
  5429  002274  6B75               	clrf	___ftmul@f2& (0+255),b
  5430  002276  0E80               	movlw	128
  5431  002278  6F76               	movwf	(___ftmul@f2+1)& (0+255),b
  5432  00227A  0E40               	movlw	64
  5433  00227C  6F77               	movwf	(___ftmul@f2+2)& (0+255),b
  5434  00227E  C09E  F068         	movff	I2C_Init@AFrequency,___altoft@c
  5435  002282  C09F  F069         	movff	I2C_Init@AFrequency+1,___altoft@c+1
  5436  002286  C0A0  F06A         	movff	I2C_Init@AFrequency+2,___altoft@c+2
  5437  00228A  C0A1  F06B         	movff	I2C_Init@AFrequency+3,___altoft@c+3
  5438  00228E  EC91  F014         	call	___altoft	;wreg free
  5439  002292  C068  F072         	movff	?___altoft,___ftmul@f1
  5440  002296  C069  F073         	movff	?___altoft+1,___ftmul@f1+1
  5441  00229A  C06A  F074         	movff	?___altoft+2,___ftmul@f1+2
  5442  00229E  EC4C  F00D         	call	___ftmul	;wreg free
  5443  0022A2  C072  F083         	movff	?___ftmul,___ftdiv@f2
  5444  0022A6  C073  F084         	movff	?___ftmul+1,___ftdiv@f2+1
  5445  0022AA  C074  F085         	movff	?___ftmul+2,___ftdiv@f2+2
  5446  0022AE  0E97               	movlw	151
  5447  0022B0  6F80               	movwf	___ftdiv@f1& (0+255),b
  5448  0022B2  0E98               	movlw	152
  5449  0022B4  6F81               	movwf	(___ftdiv@f1+1)& (0+255),b
  5450  0022B6  0E4B               	movlw	75
  5451  0022B8  6F82               	movwf	(___ftdiv@f1+2)& (0+255),b
  5452  0022BA  EC48  F00F         	call	___ftdiv	;wreg free
  5453  0022BE  C080  F08F         	movff	?___ftdiv,___ftadd@f1
  5454  0022C2  C081  F090         	movff	?___ftdiv+1,___ftadd@f1+1
  5455  0022C6  C082  F091         	movff	?___ftdiv+2,___ftadd@f1+2
  5456  0022CA  6B92               	clrf	___ftadd@f2& (0+255),b
  5457  0022CC  0E80               	movlw	128
  5458  0022CE  6F93               	movwf	(___ftadd@f2+1)& (0+255),b
  5459  0022D0  0EBF               	movlw	191
  5460  0022D2  6F94               	movwf	(___ftadd@f2+2)& (0+255),b
  5461  0022D4  ECD3  F008         	call	___ftadd	;wreg free
  5462  0022D8  C08F  F0A2         	movff	?___ftadd,I2C_Init@LRatio
  5463  0022DC  C090  F0A3         	movff	?___ftadd+1,I2C_Init@LRatio+1
  5464  0022E0  C091  F0A4         	movff	?___ftadd+2,I2C_Init@LRatio+2
  5465                           
  5466                           ; BSR set to: 0
  5467                           ;I2C.c: 12: SSPADD = LRatio;
  5468  0022E4  C0A2  F08F         	movff	I2C_Init@LRatio,___fttol@f1
  5469  0022E8  C0A3  F090         	movff	I2C_Init@LRatio+1,___fttol@f1+1
  5470  0022EC  C0A4  F091         	movff	I2C_Init@LRatio+2,___fttol@f1+2
  5471  0022F0  ECEB  F00E         	call	___fttol	;wreg free
  5472  0022F4  518F               	movf	?___fttol& (0+255),w,b
  5473  0022F6  6EC8               	movwf	4040,c	;volatile
  5474                           
  5475                           ; BSR set to: 0
  5476                           ;I2C.c: 13: SSPCON2 = 0x00;
  5477  0022F8  6AC5               	clrf	4037,c	;volatile
  5478                           
  5479                           ; BSR set to: 0
  5480  0022FA  0012               	return		;funcret
  5481  0022FC                     __end_of_I2C_Init:
  5482                           	opt stack 0
  5483                           tblptru	equ	0xFF8
  5484                           tblptrh	equ	0xFF7
  5485                           tblptrl	equ	0xFF6
  5486                           tablat	equ	0xFF5
  5487                           prodh	equ	0xFF4
  5488                           prodl	equ	0xFF3
  5489                           intcon	equ	0xFF2
  5490                           postinc0	equ	0xFEE
  5491                           plusw0	equ	0xFEB
  5492                           wreg	equ	0xFE8
  5493                           postinc1	equ	0xFE6
  5494                           postdec1	equ	0xFE5
  5495                           plusw1	equ	0xFE3
  5496                           fsr1h	equ	0xFE2
  5497                           fsr1l	equ	0xFE1
  5498                           indf2	equ	0xFDF
  5499                           postinc2	equ	0xFDE
  5500                           postdec2	equ	0xFDD
  5501                           plusw2	equ	0xFDB
  5502                           fsr2h	equ	0xFDA
  5503                           fsr2l	equ	0xFD9
  5504                           status	equ	0xFD8
  5505                           
  5506 ;; *************** function _Midi_Init *****************
  5507 ;; Defined at:
  5508 ;;		line 6 in file "midi.c"
  5509 ;; Parameters:    Size  Location     Type
  5510 ;;		None
  5511 ;; Auto vars:     Size  Location     Type
  5512 ;;  LPeriod         4   21[BANK0 ] long 
  5513 ;;  LBaudRate       4   17[BANK0 ] const unsigned long 
  5514 ;; Return value:  Size  Location     Type
  5515 ;;                  1    wreg      void 
  5516 ;; Registers used:
  5517 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5518 ;; Tracked objects:
  5519 ;;		On entry : 3F/0
  5520 ;;		On exit  : 3F/0
  5521 ;;		Unchanged: 0/0
  5522 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5523 ;;      Params:         0       0       0       0       0       0       0       0       0
  5524 ;;      Locals:         0       8       0       0       0       0       0       0       0
  5525 ;;      Temps:          0       4       0       0       0       0       0       0       0
  5526 ;;      Totals:         0      12       0       0       0       0       0       0       0
  5527 ;;Total ram usage:       12 bytes
  5528 ;; Hardware stack levels used:    1
  5529 ;; Hardware stack levels required when called:    7
  5530 ;; This function calls:
  5531 ;;		_Midi_ResetBuffer
  5532 ;;		___lldiv
  5533 ;; This function is called by:
  5534 ;;		_InitApp
  5535 ;; This function uses a non-reentrant model
  5536 ;;
  5537                           
  5538                           	psect	text32
  5539  001690                     __ptext32:
  5540                           	opt stack 0
  5541  001690                     _Midi_Init:
  5542                           	opt stack 22
  5543                           
  5544                           ; BSR set to: 0
  5545                           ;midi.c: 8: Midi_ResetBuffer(&_MidiInput);
  5546                           
  5547                           ; BSR set to: 0
  5548                           ;incstack = 0
  5549  001690  0E1D               	movlw	low __MidiInput
  5550  001692  6F60               	movwf	Midi_ResetBuffer@AMidiBuffer& (0+255),b
  5551  001694  0E04               	movlw	high __MidiInput
  5552  001696  6F61               	movwf	(Midi_ResetBuffer@AMidiBuffer+1)& (0+255),b
  5553  001698  ECFD  F00F         	call	_Midi_ResetBuffer	;wreg free
  5554                           
  5555                           ;midi.c: 9: Midi_ResetBuffer(&_MidiOutput);
  5556  00169C  0ED9               	movlw	low __MidiOutput
  5557  00169E  6F60               	movwf	Midi_ResetBuffer@AMidiBuffer& (0+255),b
  5558  0016A0  0E02               	movlw	high __MidiOutput
  5559  0016A2  6F61               	movwf	(Midi_ResetBuffer@AMidiBuffer+1)& (0+255),b
  5560  0016A4  ECFD  F00F         	call	_Midi_ResetBuffer	;wreg free
  5561                           
  5562                           ; BSR set to: 0
  5563                           ;midi.c: 11: RCIF = 0;
  5564  0016A8  9A9E               	bcf	3998,5,c	;volatile
  5565                           
  5566                           ; BSR set to: 0
  5567                           ;midi.c: 12: RCIP = 0;
  5568  0016AA  9A9F               	bcf	3999,5,c	;volatile
  5569                           
  5570                           ; BSR set to: 0
  5571                           ;midi.c: 13: RCIE = 1;
  5572  0016AC  8A9D               	bsf	3997,5,c	;volatile
  5573                           
  5574                           ; BSR set to: 0
  5575                           ;midi.c: 14: PEIE = 1;
  5576  0016AE  8CF2               	bsf	intcon,6,c	;volatile
  5577                           
  5578                           ; BSR set to: 0
  5579                           ;midi.c: 16: const unsigned long LBaudRate = 31250;
  5580  0016B0  0E12               	movlw	18
  5581  0016B2  6F71               	movwf	Midi_Init@LBaudRate& (0+255),b
  5582  0016B4  0E7A               	movlw	122
  5583  0016B6  6F72               	movwf	(Midi_Init@LBaudRate+1)& (0+255),b
  5584  0016B8  6B73               	clrf	(Midi_Init@LBaudRate+2)& (0+255),b
  5585  0016BA  6B74               	clrf	(Midi_Init@LBaudRate+3)& (0+255),b
  5586                           
  5587                           ; BSR set to: 0
  5588                           ;midi.c: 17: long LPeriod;
  5589                           ;midi.c: 18: LPeriod = 48000000L/(LBaudRate*64) - 1;
  5590  0016BC  6B60               	clrf	___lldiv@dividend& (0+255),b
  5591  0016BE  0E6C               	movlw	108
  5592  0016C0  6F61               	movwf	(___lldiv@dividend+1)& (0+255),b
  5593  0016C2  0EDC               	movlw	220
  5594  0016C4  6F62               	movwf	(___lldiv@dividend+2)& (0+255),b
  5595  0016C6  0E02               	movlw	2
  5596  0016C8  6F63               	movwf	(___lldiv@dividend+3)& (0+255),b
  5597  0016CA  C071  F06D         	movff	Midi_Init@LBaudRate,??_Midi_Init
  5598  0016CE  C072  F06E         	movff	Midi_Init@LBaudRate+1,??_Midi_Init+1
  5599  0016D2  C073  F06F         	movff	Midi_Init@LBaudRate+2,??_Midi_Init+2
  5600  0016D6  C074  F070         	movff	Midi_Init@LBaudRate+3,??_Midi_Init+3
  5601  0016DA  0E06               	movlw	6
  5602  0016DC                     u4275:
  5603  0016DC  90D8               	bcf	status,0,c
  5604  0016DE  376D               	rlcf	??_Midi_Init& (0+255),f,b
  5605  0016E0  376E               	rlcf	(??_Midi_Init+1)& (0+255),f,b
  5606  0016E2  376F               	rlcf	(??_Midi_Init+2)& (0+255),f,b
  5607  0016E4  3770               	rlcf	(??_Midi_Init+3)& (0+255),f,b
  5608  0016E6  2EE8               	decfsz	wreg,f,c
  5609  0016E8  D7F9               	goto	u4275
  5610  0016EA  C06D  F064         	movff	??_Midi_Init,___lldiv@divisor
  5611  0016EE  C06E  F065         	movff	??_Midi_Init+1,___lldiv@divisor+1
  5612  0016F2  C06F  F066         	movff	??_Midi_Init+2,___lldiv@divisor+2
  5613  0016F6  C070  F067         	movff	??_Midi_Init+3,___lldiv@divisor+3
  5614  0016FA  EC47  F013         	call	___lldiv	;wreg free
  5615  0016FE  0EFF               	movlw	255
  5616  001700  2560               	addwf	?___lldiv& (0+255),w,b
  5617  001702  6F75               	movwf	Midi_Init@LPeriod& (0+255),b
  5618  001704  0EFF               	movlw	255
  5619  001706  2161               	addwfc	(?___lldiv+1)& (0+255),w,b
  5620  001708  6F76               	movwf	(Midi_Init@LPeriod+1)& (0+255),b
  5621  00170A  0EFF               	movlw	255
  5622  00170C  2162               	addwfc	(?___lldiv+2)& (0+255),w,b
  5623  00170E  6F77               	movwf	(Midi_Init@LPeriod+2)& (0+255),b
  5624  001710  0EFF               	movlw	255
  5625  001712  2163               	addwfc	(?___lldiv+3)& (0+255),w,b
  5626  001714  6F78               	movwf	(Midi_Init@LPeriod+3)& (0+255),b
  5627                           
  5628                           ; BSR set to: 0
  5629                           ;midi.c: 19: if(LPeriod > 255)
  5630  001716  BF78               	btfsc	(Midi_Init@LPeriod+3)& (0+255),7,b
  5631  001718  D033               	goto	l4248
  5632  00171A  5178               	movf	(Midi_Init@LPeriod+3)& (0+255),w,b
  5633  00171C  1177               	iorwf	(Midi_Init@LPeriod+2)& (0+255),w,b
  5634  00171E  E102               	bnz	u4280
  5635  001720  0576               	decf	(Midi_Init@LPeriod+1)& (0+255),w,b
  5636  001722  E32E               	bnc	l4248
  5637  001724                     u4280:
  5638                           
  5639                           ; BSR set to: 0
  5640                           ;midi.c: 20: {
  5641                           ;midi.c: 21: LPeriod = 48000000L/(LBaudRate*16) - 1;
  5642  001724  6B60               	clrf	___lldiv@dividend& (0+255),b
  5643  001726  0E6C               	movlw	108
  5644  001728  6F61               	movwf	(___lldiv@dividend+1)& (0+255),b
  5645  00172A  0EDC               	movlw	220
  5646  00172C  6F62               	movwf	(___lldiv@dividend+2)& (0+255),b
  5647  00172E  0E02               	movlw	2
  5648  001730  6F63               	movwf	(___lldiv@dividend+3)& (0+255),b
  5649  001732  C071  F06D         	movff	Midi_Init@LBaudRate,??_Midi_Init
  5650  001736  C072  F06E         	movff	Midi_Init@LBaudRate+1,??_Midi_Init+1
  5651  00173A  C073  F06F         	movff	Midi_Init@LBaudRate+2,??_Midi_Init+2
  5652  00173E  C074  F070         	movff	Midi_Init@LBaudRate+3,??_Midi_Init+3
  5653  001742  0E04               	movlw	4
  5654  001744                     u4295:
  5655  001744  90D8               	bcf	status,0,c
  5656  001746  376D               	rlcf	??_Midi_Init& (0+255),f,b
  5657  001748  376E               	rlcf	(??_Midi_Init+1)& (0+255),f,b
  5658  00174A  376F               	rlcf	(??_Midi_Init+2)& (0+255),f,b
  5659  00174C  3770               	rlcf	(??_Midi_Init+3)& (0+255),f,b
  5660  00174E  2EE8               	decfsz	wreg,f,c
  5661  001750  D7F9               	goto	u4295
  5662  001752  C06D  F064         	movff	??_Midi_Init,___lldiv@divisor
  5663  001756  C06E  F065         	movff	??_Midi_Init+1,___lldiv@divisor+1
  5664  00175A  C06F  F066         	movff	??_Midi_Init+2,___lldiv@divisor+2
  5665  00175E  C070  F067         	movff	??_Midi_Init+3,___lldiv@divisor+3
  5666  001762  EC47  F013         	call	___lldiv	;wreg free
  5667  001766  0EFF               	movlw	255
  5668  001768  2560               	addwf	?___lldiv& (0+255),w,b
  5669  00176A  6F75               	movwf	Midi_Init@LPeriod& (0+255),b
  5670  00176C  0EFF               	movlw	255
  5671  00176E  2161               	addwfc	(?___lldiv+1)& (0+255),w,b
  5672  001770  6F76               	movwf	(Midi_Init@LPeriod+1)& (0+255),b
  5673  001772  0EFF               	movlw	255
  5674  001774  2162               	addwfc	(?___lldiv+2)& (0+255),w,b
  5675  001776  6F77               	movwf	(Midi_Init@LPeriod+2)& (0+255),b
  5676  001778  0EFF               	movlw	255
  5677  00177A  2163               	addwfc	(?___lldiv+3)& (0+255),w,b
  5678  00177C  6F78               	movwf	(Midi_Init@LPeriod+3)& (0+255),b
  5679                           
  5680                           ; BSR set to: 0
  5681                           ;midi.c: 22: BRGH = 1;
  5682  00177E  84AC               	bsf	4012,2,c	;volatile
  5683  001780                     l4248:
  5684                           
  5685                           ; BSR set to: 0
  5686                           ;midi.c: 23: }
  5687                           ;midi.c: 24: if(LPeriod < 255)
  5688  001780  BF78               	btfsc	(Midi_Init@LPeriod+3)& (0+255),7,b
  5689  001782  D007               	goto	u4300
  5690  001784  5178               	movf	(Midi_Init@LPeriod+3)& (0+255),w,b
  5691  001786  1177               	iorwf	(Midi_Init@LPeriod+2)& (0+255),w,b
  5692  001788  1176               	iorwf	(Midi_Init@LPeriod+1)& (0+255),w,b
  5693  00178A  E10E               	bnz	l583
  5694  00178C  2975               	incf	Midi_Init@LPeriod& (0+255),w,b
  5695  00178E  B0D8               	btfsc	status,0,c
  5696  001790  0012               	return	
  5697  001792                     u4300:
  5698                           
  5699                           ; BSR set to: 0
  5700                           ;midi.c: 25: {
  5701                           ;midi.c: 26: SPBRG = LPeriod;
  5702  001792  C075  FFAF         	movff	Midi_Init@LPeriod,4015	;volatile
  5703                           
  5704                           ;midi.c: 27: TRISC7 = 1;
  5705  001796  8E94               	bsf	3988,7,c	;volatile
  5706                           
  5707                           ;midi.c: 28: TRISC6 = 1;
  5708  001798  8C94               	bsf	3988,6,c	;volatile
  5709                           
  5710                           ;midi.c: 29: SYNC = 0;
  5711  00179A  98AC               	bcf	4012,4,c	;volatile
  5712                           
  5713                           ;midi.c: 30: PIE1bits.RCIE = 1;
  5714  00179C  8A9D               	bsf	3997,5,c	;volatile
  5715                           
  5716                           ;midi.c: 32: SPEN = 1;
  5717  00179E  8EAB               	bsf	4011,7,c	;volatile
  5718                           
  5719                           ;midi.c: 33: CREN = 1;
  5720  0017A0  88AB               	bsf	4011,4,c	;volatile
  5721                           
  5722                           ;midi.c: 34: RX9 = 0;
  5723  0017A2  9CAB               	bcf	4011,6,c	;volatile
  5724                           
  5725                           ;midi.c: 36: TXEN = 1;
  5726  0017A4  8AAC               	bsf	4012,5,c	;volatile
  5727                           
  5728                           ;midi.c: 37: TX9 = 0;
  5729  0017A6  9CAC               	bcf	4012,6,c	;volatile
  5730  0017A8                     l583:
  5731                           
  5732                           ; BSR set to: 0
  5733  0017A8  0012               	return		;funcret
  5734  0017AA                     __end_of_Midi_Init:
  5735                           	opt stack 0
  5736                           tblptru	equ	0xFF8
  5737                           tblptrh	equ	0xFF7
  5738                           tblptrl	equ	0xFF6
  5739                           tablat	equ	0xFF5
  5740                           prodh	equ	0xFF4
  5741                           prodl	equ	0xFF3
  5742                           intcon	equ	0xFF2
  5743                           postinc0	equ	0xFEE
  5744                           plusw0	equ	0xFEB
  5745                           wreg	equ	0xFE8
  5746                           postinc1	equ	0xFE6
  5747                           postdec1	equ	0xFE5
  5748                           plusw1	equ	0xFE3
  5749                           fsr1h	equ	0xFE2
  5750                           fsr1l	equ	0xFE1
  5751                           indf2	equ	0xFDF
  5752                           postinc2	equ	0xFDE
  5753                           postdec2	equ	0xFDD
  5754                           plusw2	equ	0xFDB
  5755                           fsr2h	equ	0xFDA
  5756                           fsr2l	equ	0xFD9
  5757                           status	equ	0xFD8
  5758                           
  5759 ;; *************** function ___lldiv *****************
  5760 ;; Defined at:
  5761 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\lldiv.c"
  5762 ;; Parameters:    Size  Location     Type
  5763 ;;  dividend        4    0[BANK0 ] unsigned long 
  5764 ;;  divisor         4    4[BANK0 ] unsigned long 
  5765 ;; Auto vars:     Size  Location     Type
  5766 ;;  quotient        4    8[BANK0 ] unsigned long 
  5767 ;;  counter         1   12[BANK0 ] unsigned char 
  5768 ;; Return value:  Size  Location     Type
  5769 ;;                  4    0[BANK0 ] unsigned long 
  5770 ;; Registers used:
  5771 ;;		wreg, status,2, status,0
  5772 ;; Tracked objects:
  5773 ;;		On entry : 3F/0
  5774 ;;		On exit  : 3F/0
  5775 ;;		Unchanged: 0/0
  5776 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5777 ;;      Params:         0       8       0       0       0       0       0       0       0
  5778 ;;      Locals:         0       5       0       0       0       0       0       0       0
  5779 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5780 ;;      Totals:         0      13       0       0       0       0       0       0       0
  5781 ;;Total ram usage:       13 bytes
  5782 ;; Hardware stack levels used:    1
  5783 ;; Hardware stack levels required when called:    6
  5784 ;; This function calls:
  5785 ;;		Nothing
  5786 ;; This function is called by:
  5787 ;;		_Midi_Init
  5788 ;; This function uses a non-reentrant model
  5789 ;;
  5790                           
  5791                           	psect	text33
  5792  00268E                     __ptext33:
  5793                           	opt stack 0
  5794  00268E                     ___lldiv:
  5795                           	opt stack 22
  5796                           
  5797                           ; BSR set to: 0
  5798                           
  5799                           ; BSR set to: 0
  5800                           ;incstack = 0
  5801  00268E  6B68               	clrf	___lldiv@quotient& (0+255),b
  5802  002690  6B69               	clrf	(___lldiv@quotient+1)& (0+255),b
  5803  002692  6B6A               	clrf	(___lldiv@quotient+2)& (0+255),b
  5804  002694  6B6B               	clrf	(___lldiv@quotient+3)& (0+255),b
  5805                           
  5806                           ; BSR set to: 0
  5807  002696  5164               	movf	___lldiv@divisor& (0+255),w,b
  5808  002698  1165               	iorwf	(___lldiv@divisor+1)& (0+255),w,b
  5809  00269A  1166               	iorwf	(___lldiv@divisor+2)& (0+255),w,b
  5810  00269C  1167               	iorwf	(___lldiv@divisor+3)& (0+255),w,b
  5811  00269E  E029               	bz	l1048
  5812                           
  5813                           ; BSR set to: 0
  5814  0026A0  0E01               	movlw	1
  5815  0026A2  6F6C               	movwf	___lldiv@counter& (0+255),b
  5816  0026A4  D006               	goto	l3900
  5817  0026A6                     l3898:
  5818                           
  5819                           ; BSR set to: 0
  5820  0026A6  90D8               	bcf	status,0,c
  5821  0026A8  3764               	rlcf	___lldiv@divisor& (0+255),f,b
  5822  0026AA  3765               	rlcf	(___lldiv@divisor+1)& (0+255),f,b
  5823  0026AC  3766               	rlcf	(___lldiv@divisor+2)& (0+255),f,b
  5824  0026AE  3767               	rlcf	(___lldiv@divisor+3)& (0+255),f,b
  5825  0026B0  2B6C               	incf	___lldiv@counter& (0+255),f,b
  5826  0026B2                     l3900:
  5827                           
  5828                           ; BSR set to: 0
  5829  0026B2  AF67               	btfss	(___lldiv@divisor+3)& (0+255),7,b
  5830  0026B4  D7F8               	goto	l3898
  5831  0026B6                     u3960:
  5832                           
  5833                           ; BSR set to: 0
  5834  0026B6  90D8               	bcf	status,0,c
  5835  0026B8  3768               	rlcf	___lldiv@quotient& (0+255),f,b
  5836  0026BA  3769               	rlcf	(___lldiv@quotient+1)& (0+255),f,b
  5837  0026BC  376A               	rlcf	(___lldiv@quotient+2)& (0+255),f,b
  5838  0026BE  376B               	rlcf	(___lldiv@quotient+3)& (0+255),f,b
  5839                           
  5840                           ; BSR set to: 0
  5841  0026C0  5164               	movf	___lldiv@divisor& (0+255),w,b
  5842  0026C2  5D60               	subwf	___lldiv@dividend& (0+255),w,b
  5843  0026C4  5165               	movf	(___lldiv@divisor+1)& (0+255),w,b
  5844  0026C6  5961               	subwfb	(___lldiv@dividend+1)& (0+255),w,b
  5845  0026C8  5166               	movf	(___lldiv@divisor+2)& (0+255),w,b
  5846  0026CA  5962               	subwfb	(___lldiv@dividend+2)& (0+255),w,b
  5847  0026CC  5167               	movf	(___lldiv@divisor+3)& (0+255),w,b
  5848  0026CE  5963               	subwfb	(___lldiv@dividend+3)& (0+255),w,b
  5849  0026D0  E309               	bnc	l3910
  5850                           
  5851                           ; BSR set to: 0
  5852  0026D2  5164               	movf	___lldiv@divisor& (0+255),w,b
  5853  0026D4  5F60               	subwf	___lldiv@dividend& (0+255),f,b
  5854  0026D6  5165               	movf	(___lldiv@divisor+1)& (0+255),w,b
  5855  0026D8  5B61               	subwfb	(___lldiv@dividend+1)& (0+255),f,b
  5856  0026DA  5166               	movf	(___lldiv@divisor+2)& (0+255),w,b
  5857  0026DC  5B62               	subwfb	(___lldiv@dividend+2)& (0+255),f,b
  5858  0026DE  5167               	movf	(___lldiv@divisor+3)& (0+255),w,b
  5859  0026E0  5B63               	subwfb	(___lldiv@dividend+3)& (0+255),f,b
  5860                           
  5861                           ; BSR set to: 0
  5862  0026E2  8168               	bsf	___lldiv@quotient& (0+255),0,b
  5863  0026E4                     l3910:
  5864                           
  5865                           ; BSR set to: 0
  5866  0026E4  90D8               	bcf	status,0,c
  5867  0026E6  3367               	rrcf	(___lldiv@divisor+3)& (0+255),f,b
  5868  0026E8  3366               	rrcf	(___lldiv@divisor+2)& (0+255),f,b
  5869  0026EA  3365               	rrcf	(___lldiv@divisor+1)& (0+255),f,b
  5870  0026EC  3364               	rrcf	___lldiv@divisor& (0+255),f,b
  5871                           
  5872                           ; BSR set to: 0
  5873  0026EE  2F6C               	decfsz	___lldiv@counter& (0+255),f,b
  5874  0026F0  D7E2               	goto	u3960
  5875  0026F2                     l1048:
  5876                           
  5877                           ; BSR set to: 0
  5878  0026F2  C068  F060         	movff	___lldiv@quotient,?___lldiv
  5879  0026F6  C069  F061         	movff	___lldiv@quotient+1,?___lldiv+1
  5880  0026FA  C06A  F062         	movff	___lldiv@quotient+2,?___lldiv+2
  5881  0026FE  C06B  F063         	movff	___lldiv@quotient+3,?___lldiv+3
  5882                           
  5883                           ; BSR set to: 0
  5884  002702  0012               	return		;funcret
  5885  002704                     __end_of___lldiv:
  5886                           	opt stack 0
  5887                           tblptru	equ	0xFF8
  5888                           tblptrh	equ	0xFF7
  5889                           tblptrl	equ	0xFF6
  5890                           tablat	equ	0xFF5
  5891                           prodh	equ	0xFF4
  5892                           prodl	equ	0xFF3
  5893                           intcon	equ	0xFF2
  5894                           postinc0	equ	0xFEE
  5895                           plusw0	equ	0xFEB
  5896                           wreg	equ	0xFE8
  5897                           postinc1	equ	0xFE6
  5898                           postdec1	equ	0xFE5
  5899                           plusw1	equ	0xFE3
  5900                           fsr1h	equ	0xFE2
  5901                           fsr1l	equ	0xFE1
  5902                           indf2	equ	0xFDF
  5903                           postinc2	equ	0xFDE
  5904                           postdec2	equ	0xFDD
  5905                           plusw2	equ	0xFDB
  5906                           fsr2h	equ	0xFDA
  5907                           fsr2l	equ	0xFD9
  5908                           status	equ	0xFD8
  5909                           
  5910 ;; *************** function _Midi_ResetBuffer *****************
  5911 ;; Defined at:
  5912 ;;		line 41 in file "midi.c"
  5913 ;; Parameters:    Size  Location     Type
  5914 ;;  AMidiBuffer     2    0[BANK0 ] PTR struct .
  5915 ;;		 -> _MidiOutput(324), _MidiInput(324), 
  5916 ;; Auto vars:     Size  Location     Type
  5917 ;;  j               1    4[BANK0 ] unsigned char 
  5918 ;;  i               1    5[BANK0 ] unsigned char 
  5919 ;; Return value:  Size  Location     Type
  5920 ;;                  1    wreg      void 
  5921 ;; Registers used:
  5922 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  5923 ;; Tracked objects:
  5924 ;;		On entry : 3F/0
  5925 ;;		On exit  : 3F/0
  5926 ;;		Unchanged: 0/0
  5927 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5928 ;;      Params:         0       2       0       0       0       0       0       0       0
  5929 ;;      Locals:         0       2       0       0       0       0       0       0       0
  5930 ;;      Temps:          0       2       0       0       0       0       0       0       0
  5931 ;;      Totals:         0       6       0       0       0       0       0       0       0
  5932 ;;Total ram usage:        6 bytes
  5933 ;; Hardware stack levels used:    1
  5934 ;; Hardware stack levels required when called:    6
  5935 ;; This function calls:
  5936 ;;		Nothing
  5937 ;; This function is called by:
  5938 ;;		_Midi_Init
  5939 ;; This function uses a non-reentrant model
  5940 ;;
  5941                           
  5942                           	psect	text34
  5943  001FFA                     __ptext34:
  5944                           	opt stack 0
  5945  001FFA                     _Midi_ResetBuffer:
  5946                           	opt stack 22
  5947                           
  5948                           ; BSR set to: 0
  5949                           ;midi.c: 43: AMidiBuffer->iBufferRead = 0;
  5950                           
  5951                           ; BSR set to: 0
  5952                           ;incstack = 0
  5953  001FFA  EE21 F040          	lfsr	2,320
  5954  001FFE  5160               	movf	Midi_ResetBuffer@AMidiBuffer& (0+255),w,b
  5955  002000  26D9               	addwf	fsr2l,f,c
  5956  002002  5161               	movf	(Midi_ResetBuffer@AMidiBuffer+1)& (0+255),w,b
  5957  002004  22DA               	addwfc	fsr2h,f,c
  5958  002006  6ADF               	clrf	indf2,c
  5959                           
  5960                           ;midi.c: 44: AMidiBuffer->iBufferWrite = 0;
  5961  002008  EE21 F041          	lfsr	2,321
  5962  00200C  5160               	movf	Midi_ResetBuffer@AMidiBuffer& (0+255),w,b
  5963  00200E  26D9               	addwf	fsr2l,f,c
  5964  002010  5161               	movf	(Midi_ResetBuffer@AMidiBuffer+1)& (0+255),w,b
  5965  002012  22DA               	addwfc	fsr2h,f,c
  5966  002014  6ADF               	clrf	indf2,c
  5967                           
  5968                           ;midi.c: 45: AMidiBuffer->iData = 0;
  5969  002016  EE21 F042          	lfsr	2,322
  5970  00201A  5160               	movf	Midi_ResetBuffer@AMidiBuffer& (0+255),w,b
  5971  00201C  26D9               	addwf	fsr2l,f,c
  5972  00201E  5161               	movf	(Midi_ResetBuffer@AMidiBuffer+1)& (0+255),w,b
  5973  002020  22DA               	addwfc	fsr2h,f,c
  5974  002022  6ADF               	clrf	indf2,c
  5975                           
  5976                           ;midi.c: 46: AMidiBuffer->Size = 0;
  5977  002024  EE21 F043          	lfsr	2,323
  5978  002028  5160               	movf	Midi_ResetBuffer@AMidiBuffer& (0+255),w,b
  5979  00202A  26D9               	addwf	fsr2l,f,c
  5980  00202C  5161               	movf	(Midi_ResetBuffer@AMidiBuffer+1)& (0+255),w,b
  5981  00202E  22DA               	addwfc	fsr2h,f,c
  5982  002030  6ADF               	clrf	indf2,c
  5983                           
  5984                           ; BSR set to: 0
  5985                           ;midi.c: 47: for (char i = 0; i < 64; i++)
  5986  002032  6B65               	clrf	Midi_ResetBuffer@i& (0+255),b
  5987  002034                     l3730:
  5988                           
  5989                           ; BSR set to: 0
  5990                           ;midi.c: 48: {
  5991                           ;midi.c: 49: AMidiBuffer->Buffer[i].Code = 0x00;
  5992  002034  5165               	movf	Midi_ResetBuffer@i& (0+255),w,b
  5993  002036  0D05               	mullw	5
  5994  002038  50F3               	movf	prodl,w,c
  5995  00203A  2560               	addwf	Midi_ResetBuffer@AMidiBuffer& (0+255),w,b
  5996  00203C  6ED9               	movwf	fsr2l,c
  5997  00203E  50F4               	movf	prodh,w,c
  5998  002040  2161               	addwfc	(Midi_ResetBuffer@AMidiBuffer+1)& (0+255),w,b
  5999  002042  6EDA               	movwf	fsr2h,c
  6000  002044  6ADF               	clrf	indf2,c
  6001                           
  6002                           ;midi.c: 50: AMidiBuffer->Buffer[i].Channel = 0x00;
  6003  002046  5165               	movf	Midi_ResetBuffer@i& (0+255),w,b
  6004  002048  0D05               	mullw	5
  6005  00204A  C060  F062         	movff	Midi_ResetBuffer@AMidiBuffer,??_Midi_ResetBuffer
  6006  00204E  C061  F063         	movff	Midi_ResetBuffer@AMidiBuffer+1,??_Midi_ResetBuffer+1
  6007  002052  50F3               	movf	prodl,w,c
  6008  002054  2762               	addwf	??_Midi_ResetBuffer& (0+255),f,b
  6009  002056  50F4               	movf	prodh,w,c
  6010  002058  2363               	addwfc	(??_Midi_ResetBuffer+1)& (0+255),f,b
  6011  00205A  2962               	incf	??_Midi_ResetBuffer& (0+255),w,b
  6012  00205C  6ED9               	movwf	fsr2l,c
  6013  00205E  0E00               	movlw	0
  6014  002060  2163               	addwfc	(??_Midi_ResetBuffer+1)& (0+255),w,b
  6015  002062  6EDA               	movwf	fsr2h,c
  6016  002064  6ADF               	clrf	indf2,c
  6017                           
  6018                           ; BSR set to: 0
  6019                           ;midi.c: 51: for (char j = 0; j < sizeof(AMidiBuffer->Buffer[i].Data); j++)
  6020  002066  6B64               	clrf	Midi_ResetBuffer@j& (0+255),b
  6021  002068                     l3738:
  6022                           
  6023                           ; BSR set to: 0
  6024                           ;midi.c: 52: AMidiBuffer->Buffer[i].Data[j] = 0x00;
  6025  002068  5165               	movf	Midi_ResetBuffer@i& (0+255),w,b
  6026  00206A  0D05               	mullw	5
  6027  00206C  C060  F062         	movff	Midi_ResetBuffer@AMidiBuffer,??_Midi_ResetBuffer
  6028  002070  C061  F063         	movff	Midi_ResetBuffer@AMidiBuffer+1,??_Midi_ResetBuffer+1
  6029  002074  50F3               	movf	prodl,w,c
  6030  002076  2762               	addwf	??_Midi_ResetBuffer& (0+255),f,b
  6031  002078  50F4               	movf	prodh,w,c
  6032  00207A  2363               	addwfc	(??_Midi_ResetBuffer+1)& (0+255),f,b
  6033  00207C  5164               	movf	Midi_ResetBuffer@j& (0+255),w,b
  6034  00207E  2762               	addwf	??_Midi_ResetBuffer& (0+255),f,b
  6035  002080  0E00               	movlw	0
  6036  002082  2363               	addwfc	(??_Midi_ResetBuffer+1)& (0+255),f,b
  6037  002084  0E02               	movlw	2
  6038  002086  2562               	addwf	??_Midi_ResetBuffer& (0+255),w,b
  6039  002088  6ED9               	movwf	fsr2l,c
  6040  00208A  0E00               	movlw	0
  6041  00208C  2163               	addwfc	(??_Midi_ResetBuffer+1)& (0+255),w,b
  6042  00208E  6EDA               	movwf	fsr2h,c
  6043  002090  6ADF               	clrf	indf2,c
  6044                           
  6045                           ; BSR set to: 0
  6046  002092  2B64               	incf	Midi_ResetBuffer@j& (0+255),f,b
  6047                           
  6048                           ; BSR set to: 0
  6049  002094  0E01               	movlw	1
  6050  002096  6564               	cpfsgt	Midi_ResetBuffer@j& (0+255),b
  6051  002098  D7E7               	goto	l3738
  6052                           
  6053                           ; BSR set to: 0
  6054  00209A  2B65               	incf	Midi_ResetBuffer@i& (0+255),f,b
  6055                           
  6056                           ; BSR set to: 0
  6057  00209C  0E3F               	movlw	63
  6058  00209E  6565               	cpfsgt	Midi_ResetBuffer@i& (0+255),b
  6059  0020A0  D7C9               	goto	l3730
  6060  0020A2  0C3F               	retlw	63
  6061  0020A4                     __end_of_Midi_ResetBuffer:
  6062                           	opt stack 0
  6063                           tblptru	equ	0xFF8
  6064                           tblptrh	equ	0xFF7
  6065                           tblptrl	equ	0xFF6
  6066                           tablat	equ	0xFF5
  6067                           prodh	equ	0xFF4
  6068                           prodl	equ	0xFF3
  6069                           intcon	equ	0xFF2
  6070                           postinc0	equ	0xFEE
  6071                           plusw0	equ	0xFEB
  6072                           wreg	equ	0xFE8
  6073                           postinc1	equ	0xFE6
  6074                           postdec1	equ	0xFE5
  6075                           plusw1	equ	0xFE3
  6076                           fsr1h	equ	0xFE2
  6077                           fsr1l	equ	0xFE1
  6078                           indf2	equ	0xFDF
  6079                           postinc2	equ	0xFDE
  6080                           postdec2	equ	0xFDD
  6081                           plusw2	equ	0xFDB
  6082                           fsr2h	equ	0xFDA
  6083                           fsr2l	equ	0xFD9
  6084                           status	equ	0xFD8
  6085                           
  6086 ;; *************** function _InitDigiPot *****************
  6087 ;; Defined at:
  6088 ;;		line 7 in file "digipot.c"
  6089 ;; Parameters:    Size  Location     Type
  6090 ;;		None
  6091 ;; Auto vars:     Size  Location     Type
  6092 ;;  LTickCount      4  102[BANK0 ] long 
  6093 ;;  LPeriod         3  106[BANK0 ] float 
  6094 ;;  LPrescaler      1  112[BANK0 ] unsigned char 
  6095 ;; Return value:  Size  Location     Type
  6096 ;;                  1    wreg      void 
  6097 ;; Registers used:
  6098 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6099 ;; Tracked objects:
  6100 ;;		On entry : 3F/2
  6101 ;;		On exit  : 3F/0
  6102 ;;		Unchanged: 0/0
  6103 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6104 ;;      Params:         0       0       0       0       0       0       0       0       0
  6105 ;;      Locals:         0      11       0       0       0       0       0       0       0
  6106 ;;      Temps:          0       0       0       0       0       0       0       0       0
  6107 ;;      Totals:         0      11       0       0       0       0       0       0       0
  6108 ;;Total ram usage:       11 bytes
  6109 ;; Hardware stack levels used:    1
  6110 ;; Hardware stack levels required when called:   11
  6111 ;; This function calls:
  6112 ;;		_InitConnector
  6113 ;;		___altoft
  6114 ;;		___ftdiv
  6115 ;;		___ftmul
  6116 ;;		___fttol
  6117 ;;		___lbtoft
  6118 ;;		_pow
  6119 ;; This function is called by:
  6120 ;;		_InitApp
  6121 ;; This function uses a non-reentrant model
  6122 ;;
  6123                           
  6124                           	psect	text35
  6125  001442                     __ptext35:
  6126                           	opt stack 0
  6127  001442                     _InitDigiPot:
  6128                           	opt stack 18
  6129                           
  6130                           ; BSR set to: 2
  6131                           ;digipot.c: 9: unsigned char LPrescaler = T0PS0 | (T0PS1 << 1) | (T0PS2 << 2);
  6132                           
  6133                           ; BSR set to: 0
  6134                           ;incstack = 0
  6135  001442  0E00               	movlw	0
  6136  001444  B0D5               	btfsc	4053,0,c	;volatile
  6137  001446  0E01               	movlw	1
  6138  001448  B2D5               	btfsc	4053,1,c	;volatile
  6139  00144A  0902               	iorlw	2
  6140  00144C  B4D5               	btfsc	4053,2,c	;volatile
  6141  00144E  0904               	iorlw	4
  6142  001450  0100               	movlb	0	; () banked
  6143  001452  6FD0               	movwf	InitDigiPot@LPrescaler& (0+255),b
  6144                           
  6145                           ; BSR set to: 0
  6146                           ;digipot.c: 10: long LTickCount = pow(2, LPrescaler) * 4096;
  6147  001454  51D0               	movf	InitDigiPot@LPrescaler& (0+255),w,b
  6148  001456  EC2C  F018         	call	___lbtoft
  6149  00145A  C068  F0B8         	movff	?___lbtoft,pow@y
  6150  00145E  C069  F0B9         	movff	?___lbtoft+1,pow@y+1
  6151  001462  C06A  F0BA         	movff	?___lbtoft+2,pow@y+2
  6152  001466  6BB5               	clrf	pow@x& (0+255),b
  6153  001468  6BB6               	clrf	(pow@x+1)& (0+255),b
  6154  00146A  0E40               	movlw	64
  6155  00146C  6FB7               	movwf	(pow@x+2)& (0+255),b
  6156  00146E  EC81  F009         	call	_pow	;wreg free
  6157  001472  C0B5  F0CD         	movff	?_pow,_InitDigiPot$2165
  6158  001476  C0B6  F0CE         	movff	?_pow+1,_InitDigiPot$2165+1
  6159  00147A  C0B7  F0CF         	movff	?_pow+2,_InitDigiPot$2165+2
  6160                           
  6161                           ; BSR set to: 0
  6162                           ;digipot.c: 10: long LTickCount = pow(2, LPrescaler) * 4096;
  6163  00147E  6B75               	clrf	___ftmul@f2& (0+255),b
  6164  001480  0E80               	movlw	128
  6165  001482  6F76               	movwf	(___ftmul@f2+1)& (0+255),b
  6166  001484  0E45               	movlw	69
  6167  001486  6F77               	movwf	(___ftmul@f2+2)& (0+255),b
  6168  001488  C0CD  F072         	movff	_InitDigiPot$2165,___ftmul@f1
  6169  00148C  C0CE  F073         	movff	_InitDigiPot$2165+1,___ftmul@f1+1
  6170  001490  C0CF  F074         	movff	_InitDigiPot$2165+2,___ftmul@f1+2
  6171  001494  EC4C  F00D         	call	___ftmul	;wreg free
  6172  001498  C072  F08F         	movff	?___ftmul,___fttol@f1
  6173  00149C  C073  F090         	movff	?___ftmul+1,___fttol@f1+1
  6174  0014A0  C074  F091         	movff	?___ftmul+2,___fttol@f1+2
  6175  0014A4  ECEB  F00E         	call	___fttol	;wreg free
  6176  0014A8  C08F  F0C6         	movff	?___fttol,InitDigiPot@LTickCount
  6177  0014AC  C090  F0C7         	movff	?___fttol+1,InitDigiPot@LTickCount+1
  6178  0014B0  C091  F0C8         	movff	?___fttol+2,InitDigiPot@LTickCount+2
  6179  0014B4  C092  F0C9         	movff	?___fttol+3,InitDigiPot@LTickCount+3
  6180                           
  6181                           ; BSR set to: 0
  6182                           ;digipot.c: 11: float LPeriod = (1.0f * LTickCount / 20000000);
  6183  0014B8  6B75               	clrf	___ftmul@f2& (0+255),b
  6184  0014BA  0E80               	movlw	128
  6185  0014BC  6F76               	movwf	(___ftmul@f2+1)& (0+255),b
  6186  0014BE  0E3F               	movlw	63
  6187  0014C0  6F77               	movwf	(___ftmul@f2+2)& (0+255),b
  6188  0014C2  C0C6  F068         	movff	InitDigiPot@LTickCount,___altoft@c
  6189  0014C6  C0C7  F069         	movff	InitDigiPot@LTickCount+1,___altoft@c+1
  6190  0014CA  C0C8  F06A         	movff	InitDigiPot@LTickCount+2,___altoft@c+2
  6191  0014CE  C0C9  F06B         	movff	InitDigiPot@LTickCount+3,___altoft@c+3
  6192  0014D2  EC91  F014         	call	___altoft	;wreg free
  6193  0014D6  C068  F072         	movff	?___altoft,___ftmul@f1
  6194  0014DA  C069  F073         	movff	?___altoft+1,___ftmul@f1+1
  6195  0014DE  C06A  F074         	movff	?___altoft+2,___ftmul@f1+2
  6196  0014E2  EC4C  F00D         	call	___ftmul	;wreg free
  6197  0014E6  C072  F080         	movff	?___ftmul,___ftdiv@f1
  6198  0014EA  C073  F081         	movff	?___ftmul+1,___ftdiv@f1+1
  6199  0014EE  C074  F082         	movff	?___ftmul+2,___ftdiv@f1+2
  6200  0014F2  0E97               	movlw	151
  6201  0014F4  6F83               	movwf	___ftdiv@f2& (0+255),b
  6202  0014F6  0E98               	movlw	152
  6203  0014F8  6F84               	movwf	(___ftdiv@f2+1)& (0+255),b
  6204  0014FA  0E4B               	movlw	75
  6205  0014FC  6F85               	movwf	(___ftdiv@f2+2)& (0+255),b
  6206  0014FE  EC48  F00F         	call	___ftdiv	;wreg free
  6207  001502  C080  F0CA         	movff	?___ftdiv,InitDigiPot@LPeriod
  6208  001506  C081  F0CB         	movff	?___ftdiv+1,InitDigiPot@LPeriod+1
  6209  00150A  C082  F0CC         	movff	?___ftdiv+2,InitDigiPot@LPeriod+2
  6210                           
  6211                           ; BSR set to: 0
  6212                           ;digipot.c: 13: TRISA2 = 0;
  6213  00150E  9492               	bcf	3986,2,c	;volatile
  6214                           
  6215                           ; BSR set to: 0
  6216                           ;digipot.c: 14: TRISA3 = 0;
  6217  001510  9692               	bcf	3986,3,c	;volatile
  6218                           
  6219                           ; BSR set to: 0
  6220                           ;digipot.c: 15: TRISA4 = 0;
  6221  001512  9892               	bcf	3986,4,c	;volatile
  6222                           
  6223                           ; BSR set to: 0
  6224                           ;digipot.c: 17: _DigiPot.CounterRef = 0.125f / LPeriod;
  6225  001514  C0CA  F083         	movff	InitDigiPot@LPeriod,___ftdiv@f2
  6226  001518  C0CB  F084         	movff	InitDigiPot@LPeriod+1,___ftdiv@f2+1
  6227  00151C  C0CC  F085         	movff	InitDigiPot@LPeriod+2,___ftdiv@f2+2
  6228  001520  6B80               	clrf	___ftdiv@f1& (0+255),b
  6229  001522  6B81               	clrf	(___ftdiv@f1+1)& (0+255),b
  6230  001524  0E3E               	movlw	62
  6231  001526  6F82               	movwf	(___ftdiv@f1+2)& (0+255),b
  6232  001528  EC48  F00F         	call	___ftdiv	;wreg free
  6233  00152C  C080  F08F         	movff	?___ftdiv,___fttol@f1
  6234  001530  C081  F090         	movff	?___ftdiv+1,___fttol@f1+1
  6235  001534  C082  F091         	movff	?___ftdiv+2,___fttol@f1+2
  6236  001538  ECEB  F00E         	call	___fttol	;wreg free
  6237  00153C  518F               	movf	?___fttol& (0+255),w,b
  6238  00153E  6FE1               	movwf	__DigiPot& (0+255),b
  6239                           
  6240                           ; BSR set to: 0
  6241                           ;digipot.c: 18: _DigiPot.Counter = 0;
  6242  001540  6BE2               	clrf	(__DigiPot+1)& (0+255),b
  6243                           
  6244                           ; BSR set to: 0
  6245                           ;digipot.c: 19: _DigiPot.IO.ClockPin.Port = &LATA;
  6246  001542  0E89               	movlw	137
  6247  001544  6FE3               	movwf	(__DigiPot+2)& (0+255),b
  6248  001546  0E0F               	movlw	15
  6249  001548  6FE4               	movwf	(__DigiPot+3)& (0+255),b
  6250                           
  6251                           ; BSR set to: 0
  6252                           ;digipot.c: 20: _DigiPot.IO.ClockPin.PinNumber = 4;
  6253  00154A  0E04               	movlw	4
  6254  00154C  6FE5               	movwf	(__DigiPot+4)& (0+255),b
  6255                           
  6256                           ; BSR set to: 0
  6257                           ;digipot.c: 21: _DigiPot.IO.DataPin.Port = &LATA;
  6258  00154E  0E89               	movlw	137
  6259  001550  6FE8               	movwf	(__DigiPot+7)& (0+255),b
  6260  001552  0E0F               	movlw	15
  6261  001554  6FE9               	movwf	(__DigiPot+8)& (0+255),b
  6262                           
  6263                           ; BSR set to: 0
  6264                           ;digipot.c: 22: _DigiPot.IO.DataPin.PinNumber = 2;
  6265  001556  0E02               	movlw	2
  6266  001558  6FEA               	movwf	(__DigiPot+9)& (0+255),b
  6267                           
  6268                           ; BSR set to: 0
  6269                           ;digipot.c: 23: _DigiPot.IO.LatchPin.Port = &LATA;
  6270  00155A  0E89               	movlw	137
  6271  00155C  6FED               	movwf	(__DigiPot+12)& (0+255),b
  6272  00155E  0E0F               	movlw	15
  6273  001560  6FEE               	movwf	(__DigiPot+13)& (0+255),b
  6274                           
  6275                           ; BSR set to: 0
  6276                           ;digipot.c: 24: _DigiPot.IO.LatchPin.PinNumber = 3;
  6277  001562  0E03               	movlw	3
  6278  001564  6FEF               	movwf	(__DigiPot+14)& (0+255),b
  6279                           
  6280                           ; BSR set to: 0
  6281                           ;digipot.c: 25: InitConnector(&_DigiPot.IO);
  6282  001566  0EE3               	movlw	low (__DigiPot+2)
  6283  001568  6F64               	movwf	InitConnector@AConnector& (0+255),b
  6284  00156A  6B65               	clrf	(InitConnector@AConnector+1)& (0+255),b
  6285  00156C  EFEE  F017         	goto	_InitConnector	;wreg free
  6286  001570                     __end_of_InitDigiPot:
  6287                           	opt stack 0
  6288                           tblptru	equ	0xFF8
  6289                           tblptrh	equ	0xFF7
  6290                           tblptrl	equ	0xFF6
  6291                           tablat	equ	0xFF5
  6292                           prodh	equ	0xFF4
  6293                           prodl	equ	0xFF3
  6294                           intcon	equ	0xFF2
  6295                           postinc0	equ	0xFEE
  6296                           plusw0	equ	0xFEB
  6297                           wreg	equ	0xFE8
  6298                           postinc1	equ	0xFE6
  6299                           postdec1	equ	0xFE5
  6300                           plusw1	equ	0xFE3
  6301                           fsr1h	equ	0xFE2
  6302                           fsr1l	equ	0xFE1
  6303                           indf2	equ	0xFDF
  6304                           postinc2	equ	0xFDE
  6305                           postdec2	equ	0xFDD
  6306                           plusw2	equ	0xFDB
  6307                           fsr2h	equ	0xFDA
  6308                           fsr2l	equ	0xFD9
  6309                           status	equ	0xFD8
  6310                           
  6311 ;; *************** function ___lbtoft *****************
  6312 ;; Defined at:
  6313 ;;		line 27 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\lbtoft.c"
  6314 ;; Parameters:    Size  Location     Type
  6315 ;;  c               1    wreg     unsigned char 
  6316 ;; Auto vars:     Size  Location     Type
  6317 ;;  c               1   11[BANK0 ] unsigned char 
  6318 ;; Return value:  Size  Location     Type
  6319 ;;                  3    8[BANK0 ] float 
  6320 ;; Registers used:
  6321 ;;		wreg, status,2, status,0, cstack
  6322 ;; Tracked objects:
  6323 ;;		On entry : 3F/0
  6324 ;;		On exit  : 3F/0
  6325 ;;		Unchanged: 0/0
  6326 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6327 ;;      Params:         0       3       0       0       0       0       0       0       0
  6328 ;;      Locals:         0       1       0       0       0       0       0       0       0
  6329 ;;      Temps:          0       0       0       0       0       0       0       0       0
  6330 ;;      Totals:         0       4       0       0       0       0       0       0       0
  6331 ;;Total ram usage:        4 bytes
  6332 ;; Hardware stack levels used:    1
  6333 ;; Hardware stack levels required when called:    7
  6334 ;; This function calls:
  6335 ;;		___ftpack
  6336 ;; This function is called by:
  6337 ;;		_InitDigiPot
  6338 ;;		_Zip
  6339 ;;		_UnZip
  6340 ;; This function uses a non-reentrant model
  6341 ;;
  6342                           
  6343                           	psect	text36
  6344  003058                     __ptext36:
  6345                           	opt stack 0
  6346  003058                     ___lbtoft:
  6347                           	opt stack 21
  6348                           
  6349                           ; BSR set to: 0
  6350                           ;incstack = 0
  6351                           ;___lbtoft@c stored from wreg
  6352  003058  6F6B               	movwf	___lbtoft@c& (0+255),b
  6353  00305A  0100               	movlb	0	; () banked
  6354  00305C  516B               	movf	___lbtoft@c& (0+255),w,b
  6355  00305E  6F60               	movwf	___ftpack@arg& (0+255),b
  6356  003060  6B61               	clrf	(___ftpack@arg+1)& (0+255),b
  6357  003062  6B62               	clrf	(___ftpack@arg+2)& (0+255),b
  6358  003064  0E8E               	movlw	142
  6359  003066  6F63               	movwf	___ftpack@exp& (0+255),b
  6360  003068  0E00               	movlw	0
  6361  00306A  6F64               	movwf	___ftpack@sign& (0+255),b
  6362  00306C  ECC3  F011         	call	___ftpack	;wreg free
  6363  003070  C060  F068         	movff	?___ftpack,?___lbtoft
  6364  003074  C061  F069         	movff	?___ftpack+1,?___lbtoft+1
  6365  003078  C062  F06A         	movff	?___ftpack+2,?___lbtoft+2
  6366                           
  6367                           ; BSR set to: 0
  6368  00307C  0012               	return		;funcret
  6369  00307E                     __end_of___lbtoft:
  6370                           	opt stack 0
  6371                           tblptru	equ	0xFF8
  6372                           tblptrh	equ	0xFF7
  6373                           tblptrl	equ	0xFF6
  6374                           tablat	equ	0xFF5
  6375                           prodh	equ	0xFF4
  6376                           prodl	equ	0xFF3
  6377                           intcon	equ	0xFF2
  6378                           postinc0	equ	0xFEE
  6379                           plusw0	equ	0xFEB
  6380                           wreg	equ	0xFE8
  6381                           postinc1	equ	0xFE6
  6382                           postdec1	equ	0xFE5
  6383                           plusw1	equ	0xFE3
  6384                           fsr1h	equ	0xFE2
  6385                           fsr1l	equ	0xFE1
  6386                           indf2	equ	0xFDF
  6387                           postinc2	equ	0xFDE
  6388                           postdec2	equ	0xFDD
  6389                           plusw2	equ	0xFDB
  6390                           fsr2h	equ	0xFDA
  6391                           fsr2l	equ	0xFD9
  6392                           status	equ	0xFD8
  6393                           
  6394 ;; *************** function _Hub_Init *****************
  6395 ;; Defined at:
  6396 ;;		line 9 in file "hub.c"
  6397 ;; Parameters:    Size  Location     Type
  6398 ;;		None
  6399 ;; Auto vars:     Size  Location     Type
  6400 ;;  i               2   76[BANK0 ] int 
  6401 ;; Return value:  Size  Location     Type
  6402 ;;                  1    wreg      void 
  6403 ;; Registers used:
  6404 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  6405 ;; Tracked objects:
  6406 ;;		On entry : 3F/0
  6407 ;;		On exit  : 3F/1
  6408 ;;		Unchanged: 0/0
  6409 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6410 ;;      Params:         0       0       0       0       0       0       0       0       0
  6411 ;;      Locals:         0       2       0       0       0       0       0       0       0
  6412 ;;      Temps:          0       0       0       0       0       0       0       0       0
  6413 ;;      Totals:         0       2       0       0       0       0       0       0       0
  6414 ;;Total ram usage:        2 bytes
  6415 ;; Hardware stack levels used:    1
  6416 ;; Hardware stack levels required when called:   10
  6417 ;; This function calls:
  6418 ;;		_Hub_ReadSwitch
  6419 ;;		_InitConnector
  6420 ;; This function is called by:
  6421 ;;		_InitApp
  6422 ;; This function uses a non-reentrant model
  6423 ;;
  6424                           
  6425                           	psect	text37
  6426  002496                     __ptext37:
  6427                           	opt stack 0
  6428  002496                     _Hub_Init:
  6429                           	opt stack 19
  6430                           
  6431                           ; BSR set to: 0
  6432                           ;hub.c: 11: _Hub.ReadyToWrite = 0;
  6433                           
  6434                           ; BSR set to: 0
  6435                           ;incstack = 0
  6436  002496  0101               	movlb	1	; () banked
  6437  002498  6B86               	clrf	(__Hub+134)& (0+255),b
  6438                           
  6439                           ; BSR set to: 1
  6440                           ;hub.c: 12: _Hub.ReadyToRead = 1;
  6441  00249A  0E01               	movlw	1
  6442  00249C  6F87               	movwf	(__Hub+135)& (0+255),b
  6443                           
  6444                           ; BSR set to: 1
  6445                           ;hub.c: 13: _Hub.Paused = 0;
  6446  00249E  6B88               	clrf	(__Hub+136)& (0+255),b
  6447                           
  6448                           ; BSR set to: 1
  6449                           ;hub.c: 14: _Hub.iRead = 0;
  6450  0024A0  6B61               	clrf	(__Hub+97)& (0+255),b
  6451                           
  6452                           ; BSR set to: 1
  6453                           ;hub.c: 15: _Hub.ReadComplete = 0;
  6454  0024A2  6B60               	clrf	(__Hub+96)& (0+255),b
  6455                           
  6456                           ; BSR set to: 1
  6457                           ;hub.c: 17: _Hub.PrimaryBuffer.ActionButton = 0;
  6458  0024A4  6B62               	clrf	(__Hub+98)& (0+255),b
  6459                           
  6460                           ; BSR set to: 1
  6461                           ;hub.c: 18: _Hub.PrimaryBuffer.PushedButton = 0;
  6462  0024A6  6B63               	clrf	(__Hub+99)& (0+255),b
  6463                           
  6464                           ; BSR set to: 1
  6465                           ;hub.c: 19: _Hub.PrimaryBuffer.Channel = 0x00;
  6466  0024A8  6B64               	clrf	(__Hub+100)& (0+255),b
  6467                           
  6468                           ; BSR set to: 1
  6469                           ;hub.c: 20: _Hub.PrimaryBuffer.Sound = 0x00;
  6470  0024AA  6B65               	clrf	(__Hub+101)& (0+255),b
  6471                           
  6472                           ; BSR set to: 1
  6473                           ;hub.c: 21: _Hub.CurrentChannel = _Hub.PrimaryBuffer.Channel;
  6474  0024AC  C164  F18C         	movff	__Hub+100,__Hub+140
  6475                           
  6476                           ;hub.c: 23: _Hub.MaxChannel = (char)((1024.0f / (char)((8 * 6 * 1.0f + 2.0f*8.0f) / 8.0f
      +                          )) * 2.0f);
  6477  0024B0  0E01               	movlw	1
  6478  0024B2  6F8A               	movwf	(__Hub+138)& (0+255),b
  6479  0024B4  6B89               	clrf	(__Hub+137)& (0+255),b
  6480                           
  6481                           ;hub.c: 24: _Hub.MaxSound = 128;
  6482  0024B6  0E80               	movlw	128
  6483  0024B8  6F8B               	movwf	(__Hub+139)& (0+255),b
  6484                           
  6485                           ; BSR set to: 1
  6486                           ;hub.c: 26: TRISB2 = 1;
  6487  0024BA  8493               	bsf	3987,2,c	;volatile
  6488                           
  6489                           ; BSR set to: 1
  6490                           ;hub.c: 27: TRISB3 = 0;
  6491  0024BC  9693               	bcf	3987,3,c	;volatile
  6492                           
  6493                           ; BSR set to: 1
  6494                           ;hub.c: 28: TRISB4 = 0;
  6495  0024BE  9893               	bcf	3987,4,c	;volatile
  6496                           
  6497                           ; BSR set to: 1
  6498                           ;hub.c: 30: _Hub.IO.ClockPin.Port = &LATB;
  6499  0024C0  0E8A               	movlw	138
  6500  0024C2  6F8E               	movwf	(__Hub+142)& (0+255),b
  6501  0024C4  0E0F               	movlw	15
  6502  0024C6  6F8F               	movwf	(__Hub+143)& (0+255),b
  6503                           
  6504                           ; BSR set to: 1
  6505                           ;hub.c: 31: _Hub.IO.ClockPin.PinNumber = 4;
  6506  0024C8  0E04               	movlw	4
  6507  0024CA  6F90               	movwf	(__Hub+144)& (0+255),b
  6508                           
  6509                           ;hub.c: 32: _Hub.IO.DataPin.Port = &PORTB;
  6510  0024CC  0E81               	movlw	129
  6511  0024CE  6F93               	movwf	(__Hub+147)& (0+255),b
  6512  0024D0  0E0F               	movlw	15
  6513  0024D2  6F94               	movwf	(__Hub+148)& (0+255),b
  6514                           
  6515                           ; BSR set to: 1
  6516                           ;hub.c: 33: _Hub.IO.DataPin.PinNumber = 2;
  6517  0024D4  0E02               	movlw	2
  6518  0024D6  6F95               	movwf	(__Hub+149)& (0+255),b
  6519                           
  6520                           ; BSR set to: 1
  6521                           ;hub.c: 34: _Hub.IO.LatchPin.Port = &LATB;
  6522  0024D8  0E8A               	movlw	138
  6523  0024DA  6F98               	movwf	(__Hub+152)& (0+255),b
  6524  0024DC  0E0F               	movlw	15
  6525  0024DE  6F99               	movwf	(__Hub+153)& (0+255),b
  6526                           
  6527                           ;hub.c: 35: _Hub.IO.LatchPin.PinNumber = 3;
  6528  0024E0  0E03               	movlw	3
  6529  0024E2  6F9A               	movwf	(__Hub+154)& (0+255),b
  6530                           
  6531                           ; BSR set to: 1
  6532                           ;hub.c: 36: InitConnector(&_Hub.IO);
  6533  0024E4  0E8E               	movlw	low (__Hub+142)
  6534  0024E6  0100               	movlb	0	; () banked
  6535  0024E8  6F64               	movwf	InitConnector@AConnector& (0+255),b
  6536  0024EA  0E01               	movlw	high (__Hub+142)
  6537  0024EC  6F65               	movwf	(InitConnector@AConnector+1)& (0+255),b
  6538  0024EE  ECEE  F017         	call	_InitConnector	;wreg free
  6539                           
  6540                           ; BSR set to: 0
  6541                           ;hub.c: 39: for (int i = 0; i < sizeof(_Hub.PrimaryBuffer.Values); i++)
  6542  0024F2  6BAC               	clrf	Hub_Init@i& (0+255),b
  6543  0024F4  6BAD               	clrf	(Hub_Init@i+1)& (0+255),b
  6544  0024F6                     l4118:
  6545                           
  6546                           ; BSR set to: 0
  6547                           ;hub.c: 40: _Hub.PrimaryBuffer.Values[i] = 0;
  6548  0024F6  0E66               	movlw	low (__Hub+102)
  6549  0024F8  25AC               	addwf	Hub_Init@i& (0+255),w,b
  6550  0024FA  6ED9               	movwf	fsr2l,c
  6551  0024FC  0E01               	movlw	high (__Hub+102)
  6552  0024FE  21AD               	addwfc	(Hub_Init@i+1)& (0+255),w,b
  6553  002500  6EDA               	movwf	fsr2h,c
  6554  002502  0E00               	movlw	0
  6555  002504  6EDF               	movwf	indf2,c
  6556                           
  6557                           ; BSR set to: 0
  6558  002506  4BAC               	infsnz	Hub_Init@i& (0+255),f,b
  6559  002508  2BAD               	incf	(Hub_Init@i+1)& (0+255),f,b
  6560                           
  6561                           ; BSR set to: 0
  6562  00250A  51AD               	movf	(Hub_Init@i+1)& (0+255),w,b
  6563  00250C  E002 EF8D  F016    	bnz	_Hub_ReadSwitch
  6564  002512  0E08               	movlw	8
  6565  002514  5DAC               	subwf	Hub_Init@i& (0+255),w,b
  6566  002516  E3EF               	bnc	l4118
  6567                           
  6568                           ; BSR set to: 0
  6569                           ;hub.c: 41: Hub_ReadSwitch();
  6570  002518  EF8D  F016         	goto	_Hub_ReadSwitch	;wreg free
  6571  00251C                     __end_of_Hub_Init:
  6572                           	opt stack 0
  6573                           tblptru	equ	0xFF8
  6574                           tblptrh	equ	0xFF7
  6575                           tblptrl	equ	0xFF6
  6576                           tablat	equ	0xFF5
  6577                           prodh	equ	0xFF4
  6578                           prodl	equ	0xFF3
  6579                           intcon	equ	0xFF2
  6580                           postinc0	equ	0xFEE
  6581                           plusw0	equ	0xFEB
  6582                           wreg	equ	0xFE8
  6583                           postinc1	equ	0xFE6
  6584                           postdec1	equ	0xFE5
  6585                           plusw1	equ	0xFE3
  6586                           fsr1h	equ	0xFE2
  6587                           fsr1l	equ	0xFE1
  6588                           indf2	equ	0xFDF
  6589                           postinc2	equ	0xFDE
  6590                           postdec2	equ	0xFDD
  6591                           plusw2	equ	0xFDB
  6592                           fsr2h	equ	0xFDA
  6593                           fsr2l	equ	0xFD9
  6594                           status	equ	0xFD8
  6595                           
  6596 ;; *************** function _Hub_ReadSwitch *****************
  6597 ;; Defined at:
  6598 ;;		line 44 in file "hub.c"
  6599 ;; Parameters:    Size  Location     Type
  6600 ;;		None
  6601 ;; Auto vars:     Size  Location     Type
  6602 ;;  LBitArray      24   52[BANK0 ] unsigned char [24]
  6603 ;; Return value:  Size  Location     Type
  6604 ;;                  1    wreg      void 
  6605 ;; Registers used:
  6606 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, cstack
  6607 ;; Tracked objects:
  6608 ;;		On entry : 3F/0
  6609 ;;		On exit  : 3F/1
  6610 ;;		Unchanged: 0/0
  6611 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6612 ;;      Params:         0       0       0       0       0       0       0       0       0
  6613 ;;      Locals:         0      24       0       0       0       0       0       0       0
  6614 ;;      Temps:          0       0       0       0       0       0       0       0       0
  6615 ;;      Totals:         0      24       0       0       0       0       0       0       0
  6616 ;;Total ram usage:       24 bytes
  6617 ;; Hardware stack levels used:    1
  6618 ;; Hardware stack levels required when called:    9
  6619 ;; This function calls:
  6620 ;;		_ReadBitArray
  6621 ;;		_memcpy
  6622 ;; This function is called by:
  6623 ;;		_Hub_Init
  6624 ;; This function uses a non-reentrant model
  6625 ;;
  6626                           
  6627                           	psect	text38
  6628  002D1A                     __ptext38:
  6629                           	opt stack 0
  6630  002D1A                     _Hub_ReadSwitch:
  6631                           	opt stack 19
  6632                           
  6633                           ; BSR set to: 0
  6634                           ;hub.c: 46: bool LBitArray[24];
  6635                           ;hub.c: 47: ReadBitArray(LBitArray, _Hub.IO);
  6636                           
  6637                           ; BSR set to: 1
  6638                           ;incstack = 0
  6639  002D1A  0E94               	movlw	low Hub_ReadSwitch@LBitArray
  6640  002D1C  6F81               	movwf	ReadBitArray@AData& (0+255),b
  6641  002D1E  EE21  F08E         	lfsr	2,__Hub+142
  6642  002D22  EE00  F082         	lfsr	0,ReadBitArray@AIO
  6643  002D26  0E0E               	movlw	14
  6644  002D28                     u3861:
  6645  002D28  CFDB FFEB          	movff	plusw2,plusw0
  6646  002D2C  06E8               	decf	wreg,f,c
  6647  002D2E  E2FC               	bc	u3861
  6648  002D30  ECF0  F016         	call	_ReadBitArray	;wreg free
  6649                           
  6650                           ; BSR set to: 0
  6651                           ;hub.c: 48: memcpy(_Hub.Switch + _Hub.iRead, LBitArray, sizeof(LBitArray));
  6652  002D34  0E00               	movlw	low __Hub
  6653  002D36  0101               	movlb	1	; () banked
  6654  002D38  2561               	addwf	(__Hub+97)& (0+255),w,b
  6655  002D3A  0100               	movlb	0	; () banked
  6656  002D3C  6F60               	movwf	memcpy@d1& (0+255),b
  6657  002D3E  6B61               	clrf	(memcpy@d1+1)& (0+255),b
  6658  002D40  0E01               	movlw	high __Hub
  6659  002D42  2361               	addwfc	(memcpy@d1+1)& (0+255),f,b
  6660  002D44  0E94               	movlw	low Hub_ReadSwitch@LBitArray
  6661  002D46  6F62               	movwf	memcpy@s1& (0+255),b
  6662  002D48  6B63               	clrf	(memcpy@s1+1)& (0+255),b
  6663  002D4A  6B65               	clrf	(memcpy@n+1)& (0+255),b
  6664  002D4C  0E18               	movlw	24
  6665  002D4E  6F64               	movwf	memcpy@n& (0+255),b
  6666  002D50  ECAE  F016         	call	_memcpy	;wreg free
  6667                           
  6668                           ; BSR set to: 0
  6669                           ;hub.c: 49: _Hub.iRead += 24;
  6670  002D54  0E18               	movlw	24
  6671  002D56  0101               	movlb	1	; () banked
  6672  002D58  2761               	addwf	(__Hub+97)& (0+255),f,b
  6673                           
  6674                           ; BSR set to: 1
  6675  002D5A  0C18               	retlw	24	;funcret
  6676  002D5C                     __end_of_Hub_ReadSwitch:
  6677                           	opt stack 0
  6678                           tblptru	equ	0xFF8
  6679                           tblptrh	equ	0xFF7
  6680                           tblptrl	equ	0xFF6
  6681                           tablat	equ	0xFF5
  6682                           prodh	equ	0xFF4
  6683                           prodl	equ	0xFF3
  6684                           intcon	equ	0xFF2
  6685                           postinc0	equ	0xFEE
  6686                           plusw0	equ	0xFEB
  6687                           wreg	equ	0xFE8
  6688                           postinc1	equ	0xFE6
  6689                           postdec1	equ	0xFE5
  6690                           plusw1	equ	0xFE3
  6691                           fsr1h	equ	0xFE2
  6692                           fsr1l	equ	0xFE1
  6693                           indf2	equ	0xFDF
  6694                           postinc2	equ	0xFDE
  6695                           postdec2	equ	0xFDD
  6696                           plusw2	equ	0xFDB
  6697                           fsr2h	equ	0xFDA
  6698                           fsr2l	equ	0xFD9
  6699                           status	equ	0xFD8
  6700                           
  6701 ;; *************** function _ReadBitArray *****************
  6702 ;; Defined at:
  6703 ;;		line 62 in file "harware.c"
  6704 ;; Parameters:    Size  Location     Type
  6705 ;;  AData           1   33[BANK0 ] PTR unsigned char 
  6706 ;;		 -> Hub_ReadSwitch@LBitArray(24), 
  6707 ;;  AIO            15   34[BANK0 ] struct .
  6708 ;; Auto vars:     Size  Location     Type
  6709 ;;  i               2   50[BANK0 ] int 
  6710 ;; Return value:  Size  Location     Type
  6711 ;;                  1    wreg      void 
  6712 ;; Registers used:
  6713 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, cstack
  6714 ;; Tracked objects:
  6715 ;;		On entry : 3F/0
  6716 ;;		On exit  : 3F/0
  6717 ;;		Unchanged: 0/0
  6718 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6719 ;;      Params:         0      16       0       0       0       0       0       0       0
  6720 ;;      Locals:         0       2       0       0       0       0       0       0       0
  6721 ;;      Temps:          0       1       0       0       0       0       0       0       0
  6722 ;;      Totals:         0      19       0       0       0       0       0       0       0
  6723 ;;Total ram usage:       19 bytes
  6724 ;; Hardware stack levels used:    1
  6725 ;; Hardware stack levels required when called:    8
  6726 ;; This function calls:
  6727 ;;		_ReadBit
  6728 ;; This function is called by:
  6729 ;;		_Hub_ReadSwitch
  6730 ;; This function uses a non-reentrant model
  6731 ;;
  6732                           
  6733                           	psect	text39
  6734  002DE0                     __ptext39:
  6735                           	opt stack 0
  6736  002DE0                     _ReadBitArray:
  6737                           	opt stack 19
  6738                           
  6739                           ; BSR set to: 0
  6740                           ;harware.c: 66: for (int i = 0; i < 24; i++)
  6741                           
  6742                           ; BSR set to: 1
  6743                           ;incstack = 0
  6744  002DE0  6B92               	clrf	ReadBitArray@i& (0+255),b
  6745  002DE2  6B93               	clrf	(ReadBitArray@i+1)& (0+255),b
  6746  002DE4                     l3586:
  6747                           
  6748                           ; BSR set to: 0
  6749                           ;harware.c: 67: AData[i] = ReadBit(AIO);
  6750  002DE4  EE20  F082         	lfsr	2,ReadBitArray@AIO
  6751  002DE8  EE00  F06F         	lfsr	0,ReadBit@AIO
  6752  002DEC  0E0E               	movlw	14
  6753  002DEE                     u3501:
  6754  002DEE  CFDB FFEB          	movff	plusw2,plusw0
  6755  002DF2  06E8               	decf	wreg,f,c
  6756  002DF4  E2FC               	bc	u3501
  6757  002DF6  EC7A  F015         	call	_ReadBit	;wreg free
  6758  002DFA  6F91               	movwf	??_ReadBitArray& (0+255),b
  6759  002DFC  5181               	movf	ReadBitArray@AData& (0+255),w,b
  6760  002DFE  2592               	addwf	ReadBitArray@i& (0+255),w,b
  6761  002E00  6ED9               	movwf	fsr2l,c
  6762  002E02  6ADA               	clrf	fsr2h,c
  6763  002E04  C091  FFDF         	movff	??_ReadBitArray,indf2
  6764                           
  6765                           ; BSR set to: 0
  6766  002E08  4B92               	infsnz	ReadBitArray@i& (0+255),f,b
  6767  002E0A  2B93               	incf	(ReadBitArray@i+1)& (0+255),f,b
  6768                           
  6769                           ; BSR set to: 0
  6770  002E0C  BF93               	btfsc	(ReadBitArray@i+1)& (0+255),7,b
  6771  002E0E  D7EA               	goto	l3586
  6772  002E10  5193               	movf	(ReadBitArray@i+1)& (0+255),w,b
  6773  002E12  E105               	bnz	u3510
  6774  002E14  0E18               	movlw	24
  6775  002E16  5D92               	subwf	ReadBitArray@i& (0+255),w,b
  6776  002E18  B0D8               	btfsc	status,0,c
  6777  002E1A  0012               	return	
  6778  002E1C  D7E3               	goto	l3586
  6779  002E1E                     u3510:
  6780                           
  6781                           ; BSR set to: 0
  6782  002E1E  0012               	return		;funcret
  6783  002E20                     __end_of_ReadBitArray:
  6784                           	opt stack 0
  6785                           tblptru	equ	0xFF8
  6786                           tblptrh	equ	0xFF7
  6787                           tblptrl	equ	0xFF6
  6788                           tablat	equ	0xFF5
  6789                           prodh	equ	0xFF4
  6790                           prodl	equ	0xFF3
  6791                           intcon	equ	0xFF2
  6792                           postinc0	equ	0xFEE
  6793                           plusw0	equ	0xFEB
  6794                           wreg	equ	0xFE8
  6795                           postinc1	equ	0xFE6
  6796                           postdec1	equ	0xFE5
  6797                           plusw1	equ	0xFE3
  6798                           fsr1h	equ	0xFE2
  6799                           fsr1l	equ	0xFE1
  6800                           indf2	equ	0xFDF
  6801                           postinc2	equ	0xFDE
  6802                           postdec2	equ	0xFDD
  6803                           plusw2	equ	0xFDB
  6804                           fsr2h	equ	0xFDA
  6805                           fsr2l	equ	0xFD9
  6806                           status	equ	0xFD8
  6807                           
  6808 ;; *************** function _ReadBit *****************
  6809 ;; Defined at:
  6810 ;;		line 36 in file "harware.c"
  6811 ;; Parameters:    Size  Location     Type
  6812 ;;  AIO            15   15[BANK0 ] struct .
  6813 ;; Auto vars:     Size  Location     Type
  6814 ;;  LBit            1   32[BANK0 ] unsigned char 
  6815 ;; Return value:  Size  Location     Type
  6816 ;;                  1    wreg      unsigned char 
  6817 ;; Registers used:
  6818 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, cstack
  6819 ;; Tracked objects:
  6820 ;;		On entry : 3F/0
  6821 ;;		On exit  : 3F/0
  6822 ;;		Unchanged: 0/0
  6823 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6824 ;;      Params:         0      15       0       0       0       0       0       0       0
  6825 ;;      Locals:         0       1       0       0       0       0       0       0       0
  6826 ;;      Temps:          0       2       0       0       0       0       0       0       0
  6827 ;;      Totals:         0      18       0       0       0       0       0       0       0
  6828 ;;Total ram usage:       18 bytes
  6829 ;; Hardware stack levels used:    1
  6830 ;; Hardware stack levels required when called:    7
  6831 ;; This function calls:
  6832 ;;		_ClockDown
  6833 ;;		_ClockUp
  6834 ;; This function is called by:
  6835 ;;		_ReadBitArray
  6836 ;; This function uses a non-reentrant model
  6837 ;;
  6838                           
  6839                           	psect	text40
  6840  002AF4                     __ptext40:
  6841                           	opt stack 0
  6842  002AF4                     _ReadBit:
  6843                           	opt stack 19
  6844                           
  6845                           ; BSR set to: 0
  6846                           ;harware.c: 38: bool LBit = (*AIO.DataPin.Port >> AIO.DataPin.PinNumber) & 0x01;
  6847                           
  6848                           ; BSR set to: 0
  6849                           ;incstack = 0
  6850  002AF4  C076  F07E         	movff	ReadBit@AIO+7,??_ReadBit
  6851  002AF8  C074  FFD9         	movff	ReadBit@AIO+5,fsr2l
  6852  002AFC  C075  FFDA         	movff	ReadBit@AIO+6,fsr2h
  6853  002B00  50DF               	movf	indf2,w,c
  6854  002B02  6F7F               	movwf	(??_ReadBit+1)& (0+255),b
  6855  002B04  2B7E               	incf	??_ReadBit& (0+255),f,b
  6856  002B06  D002               	goto	u3284
  6857  002B08                     u3285:
  6858  002B08  90D8               	bcf	status,0,c
  6859  002B0A  337F               	rrcf	(??_ReadBit+1)& (0+255),f,b
  6860  002B0C                     u3284:
  6861  002B0C  2F7E               	decfsz	??_ReadBit& (0+255),f,b
  6862  002B0E  D7FC               	goto	u3285
  6863  002B10  0100               	movlb	0	; () banked
  6864  002B12  517F               	movf	(??_ReadBit+1)& (0+255),w,b
  6865  002B14  0B01               	andlw	1
  6866  002B16  6F80               	movwf	ReadBit@LBit& (0+255),b
  6867                           
  6868                           ; BSR set to: 0
  6869                           ;harware.c: 39: ClockUp(AIO);
  6870  002B18  EE20  F06F         	lfsr	2,ReadBit@AIO
  6871  002B1C  EE00  F060         	lfsr	0,ClockUp@AIO
  6872  002B20  0E0E               	movlw	14
  6873  002B22                     u3291:
  6874  002B22  CFDB FFEB          	movff	plusw2,plusw0
  6875  002B26  06E8               	decf	wreg,f,c
  6876  002B28  E2FC               	bc	u3291
  6877  002B2A  ECB8  F018         	call	_ClockUp	;wreg free
  6878                           
  6879                           ; BSR set to: 0
  6880                           ;harware.c: 40: ClockDown(AIO);
  6881  002B2E  EE20  F06F         	lfsr	2,ReadBit@AIO
  6882  002B32  EE00  F060         	lfsr	0,ClockDown@AIO
  6883  002B36  0E0E               	movlw	14
  6884  002B38                     u3301:
  6885  002B38  CFDB FFEB          	movff	plusw2,plusw0
  6886  002B3C  06E8               	decf	wreg,f,c
  6887  002B3E  E2FC               	bc	u3301
  6888  002B40  ECE3  F018         	call	_ClockDown	;wreg free
  6889                           
  6890                           ; BSR set to: 0
  6891                           ;harware.c: 41: return LBit;
  6892  002B44  5180               	movf	ReadBit@LBit& (0+255),w,b
  6893                           
  6894                           ; BSR set to: 0
  6895  002B46  0012               	return		;funcret
  6896  002B48                     __end_of_ReadBit:
  6897                           	opt stack 0
  6898                           tblptru	equ	0xFF8
  6899                           tblptrh	equ	0xFF7
  6900                           tblptrl	equ	0xFF6
  6901                           tablat	equ	0xFF5
  6902                           prodh	equ	0xFF4
  6903                           prodl	equ	0xFF3
  6904                           intcon	equ	0xFF2
  6905                           postinc0	equ	0xFEE
  6906                           plusw0	equ	0xFEB
  6907                           wreg	equ	0xFE8
  6908                           postinc1	equ	0xFE6
  6909                           postdec1	equ	0xFE5
  6910                           plusw1	equ	0xFE3
  6911                           fsr1h	equ	0xFE2
  6912                           fsr1l	equ	0xFE1
  6913                           indf2	equ	0xFDF
  6914                           postinc2	equ	0xFDE
  6915                           postdec2	equ	0xFDD
  6916                           plusw2	equ	0xFDB
  6917                           fsr2h	equ	0xFDA
  6918                           fsr2l	equ	0xFD9
  6919                           status	equ	0xFD8
  6920                           
  6921 ;; *************** function _ClockUp *****************
  6922 ;; Defined at:
  6923 ;;		line 80 in file "harware.c"
  6924 ;; Parameters:    Size  Location     Type
  6925 ;;  AIO            15    0[BANK0 ] struct .
  6926 ;; Auto vars:     Size  Location     Type
  6927 ;;		None
  6928 ;; Return value:  Size  Location     Type
  6929 ;;                  1    wreg      void 
  6930 ;; Registers used:
  6931 ;;		wreg, fsr2l, fsr2h
  6932 ;; Tracked objects:
  6933 ;;		On entry : 0/0
  6934 ;;		On exit  : 3F/0
  6935 ;;		Unchanged: 0/0
  6936 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6937 ;;      Params:         0      15       0       0       0       0       0       0       0
  6938 ;;      Locals:         0       0       0       0       0       0       0       0       0
  6939 ;;      Temps:          0       0       0       0       0       0       0       0       0
  6940 ;;      Totals:         0      15       0       0       0       0       0       0       0
  6941 ;;Total ram usage:       15 bytes
  6942 ;; Hardware stack levels used:    1
  6943 ;; Hardware stack levels required when called:    6
  6944 ;; This function calls:
  6945 ;;		Nothing
  6946 ;; This function is called by:
  6947 ;;		_WriteChar
  6948 ;;		_ReadBit
  6949 ;; This function uses a non-reentrant model
  6950 ;;
  6951                           
  6952                           	psect	text41
  6953  003170                     __ptext41:
  6954                           	opt stack 0
  6955  003170                     _ClockUp:
  6956                           	opt stack 22
  6957                           
  6958                           ;harware.c: 82: *AIO.ClockPin.Port &= AIO.ClockPin.Mask;
  6959                           
  6960                           ; BSR set to: 0
  6961                           ;incstack = 0
  6962  003170  C060  FFD9         	movff	ClockUp@AIO,fsr2l
  6963  003174  C061  FFDA         	movff	ClockUp@AIO+1,fsr2h
  6964  003178  0100               	movlb	0	; () banked
  6965  00317A  5163               	movf	(ClockUp@AIO+3)& (0+255),w,b
  6966  00317C  16DF               	andwf	indf2,f,c
  6967                           
  6968                           ; BSR set to: 0
  6969  00317E  0012               	return		;funcret
  6970  003180                     __end_of_ClockUp:
  6971                           	opt stack 0
  6972                           tblptru	equ	0xFF8
  6973                           tblptrh	equ	0xFF7
  6974                           tblptrl	equ	0xFF6
  6975                           tablat	equ	0xFF5
  6976                           prodh	equ	0xFF4
  6977                           prodl	equ	0xFF3
  6978                           intcon	equ	0xFF2
  6979                           postinc0	equ	0xFEE
  6980                           plusw0	equ	0xFEB
  6981                           wreg	equ	0xFE8
  6982                           postinc1	equ	0xFE6
  6983                           postdec1	equ	0xFE5
  6984                           plusw1	equ	0xFE3
  6985                           fsr1h	equ	0xFE2
  6986                           fsr1l	equ	0xFE1
  6987                           indf2	equ	0xFDF
  6988                           postinc2	equ	0xFDE
  6989                           postdec2	equ	0xFDD
  6990                           plusw2	equ	0xFDB
  6991                           fsr2h	equ	0xFDA
  6992                           fsr2l	equ	0xFD9
  6993                           status	equ	0xFD8
  6994                           
  6995 ;; *************** function _ClockDown *****************
  6996 ;; Defined at:
  6997 ;;		line 85 in file "harware.c"
  6998 ;; Parameters:    Size  Location     Type
  6999 ;;  AIO            15    0[BANK0 ] struct .
  7000 ;; Auto vars:     Size  Location     Type
  7001 ;;		None
  7002 ;; Return value:  Size  Location     Type
  7003 ;;                  1    wreg      void 
  7004 ;; Registers used:
  7005 ;;		wreg, fsr2l, fsr2h
  7006 ;; Tracked objects:
  7007 ;;		On entry : 3F/0
  7008 ;;		On exit  : 3F/0
  7009 ;;		Unchanged: 0/0
  7010 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7011 ;;      Params:         0      15       0       0       0       0       0       0       0
  7012 ;;      Locals:         0       0       0       0       0       0       0       0       0
  7013 ;;      Temps:          0       0       0       0       0       0       0       0       0
  7014 ;;      Totals:         0      15       0       0       0       0       0       0       0
  7015 ;;Total ram usage:       15 bytes
  7016 ;; Hardware stack levels used:    1
  7017 ;; Hardware stack levels required when called:    6
  7018 ;; This function calls:
  7019 ;;		Nothing
  7020 ;; This function is called by:
  7021 ;;		_WriteChar
  7022 ;;		_ReadBit
  7023 ;; This function uses a non-reentrant model
  7024 ;;
  7025                           
  7026                           	psect	text42
  7027  0031C6                     __ptext42:
  7028                           	opt stack 0
  7029  0031C6                     _ClockDown:
  7030                           	opt stack 22
  7031                           
  7032                           ; BSR set to: 0
  7033                           ;harware.c: 87: *AIO.ClockPin.Port |= AIO.ClockPin.NegativeMask;
  7034                           
  7035                           ; BSR set to: 0
  7036                           ;incstack = 0
  7037  0031C6  C060  FFD9         	movff	ClockDown@AIO,fsr2l
  7038  0031CA  C061  FFDA         	movff	ClockDown@AIO+1,fsr2h
  7039  0031CE  5164               	movf	(ClockDown@AIO+4)& (0+255),w,b
  7040  0031D0  12DF               	iorwf	indf2,f,c
  7041                           
  7042                           ; BSR set to: 0
  7043  0031D2  0012               	return		;funcret
  7044  0031D4                     __end_of_ClockDown:
  7045                           	opt stack 0
  7046                           tblptru	equ	0xFF8
  7047                           tblptrh	equ	0xFF7
  7048                           tblptrl	equ	0xFF6
  7049                           tablat	equ	0xFF5
  7050                           prodh	equ	0xFF4
  7051                           prodl	equ	0xFF3
  7052                           intcon	equ	0xFF2
  7053                           postinc0	equ	0xFEE
  7054                           plusw0	equ	0xFEB
  7055                           wreg	equ	0xFE8
  7056                           postinc1	equ	0xFE6
  7057                           postdec1	equ	0xFE5
  7058                           plusw1	equ	0xFE3
  7059                           fsr1h	equ	0xFE2
  7060                           fsr1l	equ	0xFE1
  7061                           indf2	equ	0xFDF
  7062                           postinc2	equ	0xFDE
  7063                           postdec2	equ	0xFDD
  7064                           plusw2	equ	0xFDB
  7065                           fsr2h	equ	0xFDA
  7066                           fsr2l	equ	0xFD9
  7067                           status	equ	0xFD8
  7068                           
  7069 ;; *************** function _Hub_CopyBuffer *****************
  7070 ;; Defined at:
  7071 ;;		line 113 in file "hub.c"
  7072 ;; Parameters:    Size  Location     Type
  7073 ;;		None
  7074 ;; Auto vars:     Size  Location     Type
  7075 ;;		None
  7076 ;; Return value:  Size  Location     Type
  7077 ;;                  1    wreg      void 
  7078 ;; Registers used:
  7079 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  7080 ;; Tracked objects:
  7081 ;;		On entry : 3F/0
  7082 ;;		On exit  : 3F/1
  7083 ;;		Unchanged: 0/0
  7084 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7085 ;;      Params:         0       0       0       0       0       0       0       0       0
  7086 ;;      Locals:         0       0       0       0       0       0       0       0       0
  7087 ;;      Temps:          0       0       0       0       0       0       0       0       0
  7088 ;;      Totals:         0       0       0       0       0       0       0       0       0
  7089 ;;Total ram usage:        0 bytes
  7090 ;; Hardware stack levels used:    1
  7091 ;; Hardware stack levels required when called:    7
  7092 ;; This function calls:
  7093 ;;		_memcpy
  7094 ;; This function is called by:
  7095 ;;		_Load
  7096 ;;		_InitApp
  7097 ;; This function uses a non-reentrant model
  7098 ;;
  7099                           
  7100                           	psect	text43
  7101  00307E                     __ptext43:
  7102                           	opt stack 0
  7103  00307E                     _Hub_CopyBuffer:
  7104                           	opt stack 22
  7105                           
  7106                           ; BSR set to: 0
  7107                           ;hub.c: 115: memcpy(&_Hub.SecondaryBuffer, &_Hub.PrimaryBuffer, sizeof(DataBuffer));
  7108                           
  7109                           ; BSR set to: 0
  7110                           ;incstack = 0
  7111  00307E  0E6E               	movlw	low (__Hub+110)
  7112  003080  6F60               	movwf	memcpy@d1& (0+255),b
  7113  003082  0E01               	movlw	high (__Hub+110)
  7114  003084  6F61               	movwf	(memcpy@d1+1)& (0+255),b
  7115  003086  0E62               	movlw	low (__Hub+98)
  7116  003088  6F62               	movwf	memcpy@s1& (0+255),b
  7117  00308A  0E01               	movlw	high (__Hub+98)
  7118  00308C  6F63               	movwf	(memcpy@s1+1)& (0+255),b
  7119  00308E  6B65               	clrf	(memcpy@n+1)& (0+255),b
  7120  003090  0E0C               	movlw	12
  7121  003092  6F64               	movwf	memcpy@n& (0+255),b
  7122  003094  ECAE  F016         	call	_memcpy	;wreg free
  7123                           
  7124                           ; BSR set to: 0
  7125                           ;hub.c: 117: _Hub.ReadyToWrite = 0;
  7126  003098  0101               	movlb	1	; () banked
  7127  00309A  6B86               	clrf	(__Hub+134)& (0+255),b
  7128                           
  7129                           ; BSR set to: 1
  7130  00309C  0012               	return		;funcret
  7131  00309E                     __end_of_Hub_CopyBuffer:
  7132                           	opt stack 0
  7133                           tblptru	equ	0xFF8
  7134                           tblptrh	equ	0xFF7
  7135                           tblptrl	equ	0xFF6
  7136                           tablat	equ	0xFF5
  7137                           prodh	equ	0xFF4
  7138                           prodl	equ	0xFF3
  7139                           intcon	equ	0xFF2
  7140                           postinc0	equ	0xFEE
  7141                           plusw0	equ	0xFEB
  7142                           wreg	equ	0xFE8
  7143                           postinc1	equ	0xFE6
  7144                           postdec1	equ	0xFE5
  7145                           plusw1	equ	0xFE3
  7146                           fsr1h	equ	0xFE2
  7147                           fsr1l	equ	0xFE1
  7148                           indf2	equ	0xFDF
  7149                           postinc2	equ	0xFDE
  7150                           postdec2	equ	0xFDD
  7151                           plusw2	equ	0xFDB
  7152                           fsr2h	equ	0xFDA
  7153                           fsr2l	equ	0xFD9
  7154                           status	equ	0xFD8
  7155                           
  7156 ;; *************** function _memcpy *****************
  7157 ;; Defined at:
  7158 ;;		line 27 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\memcpy.c"
  7159 ;; Parameters:    Size  Location     Type
  7160 ;;  d1              2    0[BANK0 ] PTR void 
  7161 ;;		 -> _Hub.Switch(48), Load@LBuffer(12), _Hub(157), 
  7162 ;;  s1              2    2[BANK0 ] PTR const void 
  7163 ;;		 -> Persistant_SaveBuffer@ABuffer(12), _Hub.Switch(48), Hub_ReadSwitch@LBitArray(24), _Config(12), 
  7164 ;;		 -> _Hub.PrimaryBuffer(12), _Hub(157), 
  7165 ;;  n               2    4[BANK0 ] unsigned int 
  7166 ;; Auto vars:     Size  Location     Type
  7167 ;;  s               2    8[BANK0 ] PTR const unsigned char 
  7168 ;;		 -> Persistant_SaveBuffer@ABuffer(12), _Hub.Switch(48), Hub_ReadSwitch@LBitArray(24), _Config(12), 
  7169 ;;		 -> _Hub.PrimaryBuffer(12), _Hub(157), 
  7170 ;;  d               2    6[BANK0 ] PTR unsigned char 
  7171 ;;		 -> _Hub.Switch(48), Load@LBuffer(12), _Hub(157), 
  7172 ;;  tmp             1   10[BANK0 ] unsigned char 
  7173 ;; Return value:  Size  Location     Type
  7174 ;;                  2    0[BANK0 ] PTR void 
  7175 ;; Registers used:
  7176 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  7177 ;; Tracked objects:
  7178 ;;		On entry : 3F/0
  7179 ;;		On exit  : 3F/0
  7180 ;;		Unchanged: 0/0
  7181 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7182 ;;      Params:         0       6       0       0       0       0       0       0       0
  7183 ;;      Locals:         0       5       0       0       0       0       0       0       0
  7184 ;;      Temps:          0       0       0       0       0       0       0       0       0
  7185 ;;      Totals:         0      11       0       0       0       0       0       0       0
  7186 ;;Total ram usage:       11 bytes
  7187 ;; Hardware stack levels used:    1
  7188 ;; Hardware stack levels required when called:    6
  7189 ;; This function calls:
  7190 ;;		Nothing
  7191 ;; This function is called by:
  7192 ;;		_Load
  7193 ;;		_Hub_ReadSwitch
  7194 ;;		_Hub_CopyBuffer
  7195 ;;		_Persistant_SaveBuffer
  7196 ;;		_Persistant_LoadBuffer
  7197 ;; This function uses a non-reentrant model
  7198 ;;
  7199                           
  7200                           	psect	text44
  7201  002D5C                     __ptext44:
  7202                           	opt stack 0
  7203  002D5C                     _memcpy:
  7204                           	opt stack 23
  7205                           
  7206                           ; BSR set to: 0
  7207                           
  7208                           ; BSR set to: 1
  7209                           ;incstack = 0
  7210  002D5C  C062  F068         	movff	memcpy@s1,memcpy@s
  7211  002D60  C063  F069         	movff	memcpy@s1+1,memcpy@s+1
  7212  002D64  C060  F066         	movff	memcpy@d1,memcpy@d
  7213  002D68  C061  F067         	movff	memcpy@d1+1,memcpy@d+1
  7214  002D6C  D010               	goto	l3578
  7215  002D6E                     l3570:
  7216                           
  7217                           ; BSR set to: 0
  7218  002D6E  C068  FFD9         	movff	memcpy@s,fsr2l
  7219  002D72  C069  FFDA         	movff	memcpy@s+1,fsr2h
  7220  002D76  50DF               	movf	indf2,w,c
  7221  002D78  6F6A               	movwf	memcpy@tmp& (0+255),b
  7222                           
  7223                           ; BSR set to: 0
  7224  002D7A  4B68               	infsnz	memcpy@s& (0+255),f,b
  7225  002D7C  2B69               	incf	(memcpy@s+1)& (0+255),f,b
  7226                           
  7227                           ; BSR set to: 0
  7228  002D7E  C066  FFD9         	movff	memcpy@d,fsr2l
  7229  002D82  C067  FFDA         	movff	memcpy@d+1,fsr2h
  7230  002D86  C06A  FFDF         	movff	memcpy@tmp,indf2
  7231                           
  7232                           ; BSR set to: 0
  7233  002D8A  4B66               	infsnz	memcpy@d& (0+255),f,b
  7234  002D8C  2B67               	incf	(memcpy@d+1)& (0+255),f,b
  7235  002D8E                     l3578:
  7236                           
  7237                           ; BSR set to: 0
  7238  002D8E  0764               	decf	memcpy@n& (0+255),f,b
  7239  002D90  A0D8               	btfss	status,0,c
  7240  002D92  0765               	decf	(memcpy@n+1)& (0+255),f,b
  7241  002D94  2964               	incf	memcpy@n& (0+255),w,b
  7242  002D96  E1EB               	bnz	l3570
  7243  002D98  2965               	incf	(memcpy@n+1)& (0+255),w,b
  7244  002D9A  E1E9               	bnz	l3570
  7245                           
  7246                           ; BSR set to: 0
  7247  002D9C  0012               	return		;funcret
  7248  002D9E                     __end_of_memcpy:
  7249                           	opt stack 0
  7250                           tblptru	equ	0xFF8
  7251                           tblptrh	equ	0xFF7
  7252                           tblptrl	equ	0xFF6
  7253                           tablat	equ	0xFF5
  7254                           prodh	equ	0xFF4
  7255                           prodl	equ	0xFF3
  7256                           intcon	equ	0xFF2
  7257                           postinc0	equ	0xFEE
  7258                           plusw0	equ	0xFEB
  7259                           wreg	equ	0xFE8
  7260                           postinc1	equ	0xFE6
  7261                           postdec1	equ	0xFE5
  7262                           plusw1	equ	0xFE3
  7263                           fsr1h	equ	0xFE2
  7264                           fsr1l	equ	0xFE1
  7265                           indf2	equ	0xFDF
  7266                           postinc2	equ	0xFDE
  7267                           postdec2	equ	0xFDD
  7268                           plusw2	equ	0xFDB
  7269                           fsr2h	equ	0xFDA
  7270                           fsr2l	equ	0xFD9
  7271                           status	equ	0xFD8
  7272                           
  7273 ;; *************** function _Display_ProcessData *****************
  7274 ;; Defined at:
  7275 ;;		line 39 in file "display.c"
  7276 ;; Parameters:    Size  Location     Type
  7277 ;;  ADigitalValu    1    wreg     unsigned char 
  7278 ;;  AValues         2    8[BANK0 ] PTR unsigned char 
  7279 ;;		 -> _Hub.SecondaryBuffer(12), _Hub.PrimaryBuffer(12), _Hub(157), 
  7280 ;;  ALoaded         1   10[BANK0 ] unsigned char 
  7281 ;;  APushed         1   11[BANK0 ] unsigned char 
  7282 ;; Auto vars:     Size  Location     Type
  7283 ;;  ADigitalValu    1   19[BANK0 ] unsigned char 
  7284 ;;  i               2   33[BANK0 ] int 
  7285 ;;  LData           1   20[BANK0 ] unsigned char 
  7286 ;;  j               2   31[BANK0 ] int 
  7287 ;;  i               2   25[BANK0 ] int 
  7288 ;;  LBit            1   21[BANK0 ] unsigned char 
  7289 ;;  k               2   23[BANK0 ] int 
  7290 ;;  i               2   29[BANK0 ] int 
  7291 ;;  i               2   27[BANK0 ] int 
  7292 ;;  iDataIndex      1   22[BANK0 ] unsigned char 
  7293 ;; Return value:  Size  Location     Type
  7294 ;;                  1    wreg      void 
  7295 ;; Registers used:
  7296 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7297 ;; Tracked objects:
  7298 ;;		On entry : 3E/0
  7299 ;;		On exit  : 3F/2
  7300 ;;		Unchanged: 0/0
  7301 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7302 ;;      Params:         0       4       0       0       0       0       0       0       0
  7303 ;;      Locals:         0      16       0       0       0       0       0       0       0
  7304 ;;      Temps:          0       7       0       0       0       0       0       0       0
  7305 ;;      Totals:         0      27       0       0       0       0       0       0       0
  7306 ;;Total ram usage:       27 bytes
  7307 ;; Hardware stack levels used:    1
  7308 ;; Hardware stack levels required when called:    7
  7309 ;; This function calls:
  7310 ;;		___lbdiv
  7311 ;;		___lbmod
  7312 ;; This function is called by:
  7313 ;;		_main
  7314 ;;		_InitApp
  7315 ;; This function uses a non-reentrant model
  7316 ;;
  7317                           
  7318                           	psect	text45
  7319  00083C                     __ptext45:
  7320                           	opt stack 0
  7321  00083C                     _Display_ProcessData:
  7322                           	opt stack 22
  7323                           
  7324                           ; BSR set to: 0
  7325                           ;incstack = 0
  7326                           ;Display_ProcessData@ADigitalValue stored from wreg
  7327  00083C  0100               	movlb	0	; () banked
  7328  00083E  6F73               	movwf	Display_ProcessData@ADigitalValue& (0+255),b
  7329                           
  7330                           ;display.c: 41: if (_Display.ReadyToWrite)
  7331  000840  0102               	movlb	2	; () banked
  7332  000842  5101               	movf	(__Display+1)& (0+255),w,b
  7333  000844  B4D8               	btfsc	status,2,c
  7334  000846  0012               	return	
  7335                           
  7336                           ; BSR set to: 2
  7337                           ;display.c: 42: {
  7338                           ;display.c: 43: _Display.ReadyToRead = 0;
  7339  000848  6B00               	clrf	__Display& (0+255),b
  7340                           
  7341                           ;display.c: 44: unsigned char iDataIndex = 0;
  7342  00084A  0100               	movlb	0	; () banked
  7343  00084C  6B76               	clrf	Display_ProcessData@iDataIndex& (0+255),b
  7344                           
  7345                           ;display.c: 45: iDataIndex = 0;
  7346  00084E  6B76               	clrf	Display_ProcessData@iDataIndex& (0+255),b
  7347                           
  7348                           ;display.c: 47: for(int i = 0; i < 2; i++)
  7349  000850  6B7B               	clrf	Display_ProcessData@i& (0+255),b
  7350  000852  6B7C               	clrf	(Display_ProcessData@i+1)& (0+255),b
  7351  000854                     l3996:
  7352                           
  7353                           ; BSR set to: 0
  7354                           ;display.c: 48: _Display.DigitalValueData[i] = _Digits[(ADigitalValue / _Display.Digital
      +                          ValueRatio[i]) % 10];
  7355  000854  0E0A               	movlw	10
  7356  000856  6F64               	movwf	___lbmod@divisor& (0+255),b
  7357  000858  0EBA               	movlw	low (__Display+186)
  7358  00085A  257B               	addwf	Display_ProcessData@i& (0+255),w,b
  7359  00085C  6ED9               	movwf	fsr2l,c
  7360  00085E  0E02               	movlw	high (__Display+186)
  7361  000860  217C               	addwfc	(Display_ProcessData@i+1)& (0+255),w,b
  7362  000862  6EDA               	movwf	fsr2h,c
  7363  000864  50DF               	movf	indf2,w,c
  7364  000866  6F60               	movwf	___lbdiv@divisor& (0+255),b
  7365  000868  5173               	movf	Display_ProcessData@ADigitalValue& (0+255),w,b
  7366  00086A  EC6E  F017         	call	___lbdiv
  7367  00086E  EC18  F018         	call	___lbmod
  7368  000872  6F6C               	movwf	??_Display_ProcessData& (0+255),b
  7369  000874  516C               	movf	??_Display_ProcessData& (0+255),w,b
  7370  000876  0FF2               	addlw	low __Digits
  7371  000878  6ED9               	movwf	fsr2l,c
  7372  00087A  6ADA               	clrf	fsr2h,c
  7373  00087C  0EBC               	movlw	low (__Display+188)
  7374  00087E  257B               	addwf	Display_ProcessData@i& (0+255),w,b
  7375  000880  6EE1               	movwf	fsr1l,c
  7376  000882  0E02               	movlw	high (__Display+188)
  7377  000884  217C               	addwfc	(Display_ProcessData@i+1)& (0+255),w,b
  7378  000886  6EE2               	movwf	fsr1h,c
  7379  000888  CFDF FFE7          	movff	indf2,indf1
  7380                           
  7381                           ; BSR set to: 0
  7382  00088C  4B7B               	infsnz	Display_ProcessData@i& (0+255),f,b
  7383  00088E  2B7C               	incf	(Display_ProcessData@i+1)& (0+255),f,b
  7384                           
  7385                           ; BSR set to: 0
  7386  000890  BF7C               	btfsc	(Display_ProcessData@i+1)& (0+255),7,b
  7387  000892  D7E0               	goto	l3996
  7388  000894  517C               	movf	(Display_ProcessData@i+1)& (0+255),w,b
  7389  000896  E103               	bnz	u4050
  7390  000898  0E02               	movlw	2
  7391  00089A  5D7B               	subwf	Display_ProcessData@i& (0+255),w,b
  7392  00089C  E3DB               	bnc	l3996
  7393  00089E                     u4050:
  7394                           
  7395                           ; BSR set to: 0
  7396                           ;display.c: 50: if (ALoaded)
  7397  00089E  516A               	movf	Display_ProcessData@ALoaded& (0+255),w,b
  7398  0008A0  E004               	bz	l4006
  7399                           
  7400                           ; BSR set to: 0
  7401                           ;display.c: 51: _Display.DigitalValueData[1] |= 0x08 & _Display.PointMask[1];
  7402  0008A2  0102               	movlb	2	; () banked
  7403  0008A4  51C9               	movf	(__Display+201)& (0+255),w,b
  7404  0008A6  0B08               	andlw	8
  7405  0008A8  13BD               	iorwf	(__Display+189)& (0+255),f,b
  7406  0008AA                     l4006:
  7407                           
  7408                           ;display.c: 53: if (APushed)
  7409  0008AA  0100               	movlb	0	; () banked
  7410  0008AC  516B               	movf	Display_ProcessData@APushed& (0+255),w,b
  7411  0008AE  E004               	bz	l4010
  7412                           
  7413                           ; BSR set to: 0
  7414                           ;display.c: 54: _Display.DigitalValueData[0] |= 0x08 & _Display.PointMask[0];
  7415  0008B0  0102               	movlb	2	; () banked
  7416  0008B2  51C8               	movf	(__Display+200)& (0+255),w,b
  7417  0008B4  0B08               	andlw	8
  7418  0008B6  13BC               	iorwf	(__Display+188)& (0+255),f,b
  7419  0008B8                     l4010:
  7420                           
  7421                           ;display.c: 56: for(int i = 0; i < 8; i++)
  7422  0008B8  0100               	movlb	0	; () banked
  7423  0008BA  6B7D               	clrf	Display_ProcessData@i_646& (0+255),b
  7424  0008BC  6B7E               	clrf	(Display_ProcessData@i_646+1)& (0+255),b
  7425  0008BE                     l4014:
  7426                           
  7427                           ; BSR set to: 0
  7428                           ;display.c: 57: _Display.ValueData[i] = AValues[i] % (char)(((0x01 << 6) - 1 * 1.0f) / (
      +                          7 * 1.0f));
  7429  0008BE  0EBE               	movlw	low (__Display+190)
  7430  0008C0  257D               	addwf	Display_ProcessData@i_646& (0+255),w,b
  7431  0008C2  6ED9               	movwf	fsr2l,c
  7432  0008C4  0E02               	movlw	high (__Display+190)
  7433  0008C6  217E               	addwfc	(Display_ProcessData@i_646+1)& (0+255),w,b
  7434  0008C8  6EDA               	movwf	fsr2h,c
  7435  0008CA  0E09               	movlw	9
  7436  0008CC  6F64               	movwf	___lbmod@divisor& (0+255),b
  7437  0008CE  517D               	movf	Display_ProcessData@i_646& (0+255),w,b
  7438  0008D0  2568               	addwf	Display_ProcessData@AValues& (0+255),w,b
  7439  0008D2  6EE1               	movwf	fsr1l,c
  7440  0008D4  517E               	movf	(Display_ProcessData@i_646+1)& (0+255),w,b
  7441  0008D6  2169               	addwfc	(Display_ProcessData@AValues+1)& (0+255),w,b
  7442  0008D8  6EE2               	movwf	fsr1h,c
  7443  0008DA  50E7               	movf	indf1,w,c
  7444  0008DC  EC18  F018         	call	___lbmod
  7445  0008E0  6EDF               	movwf	indf2,c
  7446                           
  7447                           ; BSR set to: 0
  7448  0008E2  4B7D               	infsnz	Display_ProcessData@i_646& (0+255),f,b
  7449  0008E4  2B7E               	incf	(Display_ProcessData@i_646+1)& (0+255),f,b
  7450                           
  7451                           ; BSR set to: 0
  7452  0008E6  BF7E               	btfsc	(Display_ProcessData@i_646+1)& (0+255),7,b
  7453  0008E8  D7EA               	goto	l4014
  7454  0008EA  517E               	movf	(Display_ProcessData@i_646+1)& (0+255),w,b
  7455  0008EC  E103               	bnz	u4080
  7456  0008EE  0E08               	movlw	8
  7457  0008F0  5D7D               	subwf	Display_ProcessData@i_646& (0+255),w,b
  7458  0008F2  E3E5               	bnc	l4014
  7459  0008F4                     u4080:
  7460                           
  7461                           ; BSR set to: 0
  7462                           ;display.c: 59: for (int k = 0; k < (char)(((0x01 << 6) - 1 * 1.0f) / (7 * 1.0f)); k ++)
  7463  0008F4  6B77               	clrf	Display_ProcessData@k& (0+255),b
  7464  0008F6  6B78               	clrf	(Display_ProcessData@k+1)& (0+255),b
  7465  0008F8                     l253:
  7466                           
  7467                           ; BSR set to: 0
  7468                           ;display.c: 60: {
  7469                           ;display.c: 62: for (int i = 0; i < 2; i++)
  7470  0008F8  6B79               	clrf	Display_ProcessData@i_648& (0+255),b
  7471  0008FA  6B7A               	clrf	(Display_ProcessData@i_648+1)& (0+255),b
  7472  0008FC                     l4028:
  7473                           
  7474                           ; BSR set to: 0
  7475                           ;display.c: 63: {
  7476                           ;display.c: 64: *(_Display.SecondaryBuffer + iDataIndex) = _Display.DigitalValueData[i] 
      +                          & _Display.SavingMask;
  7477  0008FC  5176               	movf	Display_ProcessData@iDataIndex& (0+255),w,b
  7478  0008FE  0102               	movlb	2	; () banked
  7479  000900  25B8               	addwf	(__Display+184)& (0+255),w,b
  7480  000902  6ED9               	movwf	fsr2l,c
  7481  000904  0E00               	movlw	0
  7482  000906  21B9               	addwfc	(__Display+185)& (0+255),w,b
  7483  000908  6EDA               	movwf	fsr2h,c
  7484  00090A  0EBC               	movlw	low (__Display+188)
  7485  00090C  0100               	movlb	0	; () banked
  7486  00090E  2579               	addwf	Display_ProcessData@i_648& (0+255),w,b
  7487  000910  6EE1               	movwf	fsr1l,c
  7488  000912  0E02               	movlw	high (__Display+188)
  7489  000914  217A               	addwfc	(Display_ProcessData@i_648+1)& (0+255),w,b
  7490  000916  6EE2               	movwf	fsr1h,c
  7491  000918  50E7               	movf	indf1,w,c
  7492  00091A  0102               	movlb	2	; () banked
  7493  00091C  15C7               	andwf	(__Display+199)& (0+255),w,b
  7494  00091E  6EDF               	movwf	indf2,c
  7495                           
  7496                           ; BSR set to: 2
  7497                           ;display.c: 65: iDataIndex++;
  7498  000920  0100               	movlb	0	; () banked
  7499  000922  2B76               	incf	Display_ProcessData@iDataIndex& (0+255),f,b
  7500                           
  7501                           ; BSR set to: 0
  7502  000924  4B79               	infsnz	Display_ProcessData@i_648& (0+255),f,b
  7503  000926  2B7A               	incf	(Display_ProcessData@i_648+1)& (0+255),f,b
  7504                           
  7505                           ; BSR set to: 0
  7506  000928  BF7A               	btfsc	(Display_ProcessData@i_648+1)& (0+255),7,b
  7507  00092A  D7E8               	goto	l4028
  7508  00092C  517A               	movf	(Display_ProcessData@i_648+1)& (0+255),w,b
  7509  00092E  E103               	bnz	u4090
  7510  000930  0E02               	movlw	2
  7511  000932  5D79               	subwf	Display_ProcessData@i_648& (0+255),w,b
  7512  000934  E3E3               	bnc	l4028
  7513  000936                     u4090:
  7514                           
  7515                           ; BSR set to: 0
  7516                           ;display.c: 66: }
  7517                           ;display.c: 69: unsigned char LBit;
  7518                           ;display.c: 70: for (int j = 0; j < 8; j++)
  7519  000936  6B7F               	clrf	Display_ProcessData@j& (0+255),b
  7520  000938  6B80               	clrf	(Display_ProcessData@j+1)& (0+255),b
  7521  00093A                     l257:
  7522                           
  7523                           ; BSR set to: 0
  7524                           ;display.c: 71: {
  7525                           ;display.c: 72: unsigned char LData = 0x00;
  7526  00093A  6B74               	clrf	Display_ProcessData@LData& (0+255),b
  7527                           
  7528                           ;display.c: 73: for (int i = 0; i < 7; i++)
  7529  00093C  6B81               	clrf	Display_ProcessData@i_652& (0+255),b
  7530  00093E  6B82               	clrf	(Display_ProcessData@i_652+1)& (0+255),b
  7531  000940                     l259:
  7532                           
  7533                           ; BSR set to: 0
  7534                           ;display.c: 74: {
  7535                           ;display.c: 75: LBit = 0x00;
  7536  000940  6B75               	clrf	Display_ProcessData@LBit& (0+255),b
  7537                           
  7538                           ; BSR set to: 0
  7539                           ;display.c: 76: if (AValues[j] >= (char)(((0x01 << 6) - 1 * 1.0f) / (7 * 1.0f)) * (i + 1
      +                          ))
  7540  000942  2981               	incf	Display_ProcessData@i_652& (0+255),w,b
  7541  000944  6F6C               	movwf	??_Display_ProcessData& (0+255),b
  7542  000946  0E00               	movlw	0
  7543  000948  2182               	addwfc	(Display_ProcessData@i_652+1)& (0+255),w,b
  7544  00094A  6F6D               	movwf	(??_Display_ProcessData+1)& (0+255),b
  7545  00094C  0E09               	movlw	9
  7546  00094E  036C               	mulwf	??_Display_ProcessData& (0+255),b
  7547  000950  CFF3 F06E          	movff	prodl,??_Display_ProcessData+2
  7548  000954  CFF4 F06F          	movff	prodh,??_Display_ProcessData+3
  7549  000958  036D               	mulwf	(??_Display_ProcessData+1)& (0+255),b
  7550  00095A  50F3               	movf	prodl,w,c
  7551  00095C  276F               	addwf	(??_Display_ProcessData+3)& (0+255),f,b
  7552  00095E  517F               	movf	Display_ProcessData@j& (0+255),w,b
  7553  000960  2568               	addwf	Display_ProcessData@AValues& (0+255),w,b
  7554  000962  6ED9               	movwf	fsr2l,c
  7555  000964  5180               	movf	(Display_ProcessData@j+1)& (0+255),w,b
  7556  000966  2169               	addwfc	(Display_ProcessData@AValues+1)& (0+255),w,b
  7557  000968  6EDA               	movwf	fsr2h,c
  7558  00096A  50DF               	movf	indf2,w,c
  7559  00096C  6F70               	movwf	(??_Display_ProcessData+4)& (0+255),b
  7560  00096E  6B71               	clrf	(??_Display_ProcessData+5)& (0+255),b
  7561  000970  516E               	movf	(??_Display_ProcessData+2)& (0+255),w,b
  7562  000972  5D70               	subwf	(??_Display_ProcessData+4)& (0+255),w,b
  7563  000974  5171               	movf	(??_Display_ProcessData+5)& (0+255),w,b
  7564  000976  0A80               	xorlw	128
  7565  000978  6F72               	movwf	(??_Display_ProcessData+6)& (0+255),b
  7566  00097A  516F               	movf	(??_Display_ProcessData+3)& (0+255),w,b
  7567  00097C  0A80               	xorlw	128
  7568  00097E  5972               	subwfb	(??_Display_ProcessData+6)& (0+255),w,b
  7569  000980  E302               	bnc	l4048
  7570                           
  7571                           ; BSR set to: 0
  7572                           ;display.c: 77: LBit = 0x01;
  7573  000982  0E01               	movlw	1
  7574  000984  D02F               	goto	u4120
  7575  000986                     l4048:
  7576                           
  7577                           ; BSR set to: 0
  7578                           ;display.c: 78: else
  7579                           ;display.c: 79: {
  7580                           ;display.c: 80: if (AValues[j] > (char)(((0x01 << 6) - 1 * 1.0f) / (7 * 1.0f)) * i)
  7581  000986  517F               	movf	Display_ProcessData@j& (0+255),w,b
  7582  000988  2568               	addwf	Display_ProcessData@AValues& (0+255),w,b
  7583  00098A  6ED9               	movwf	fsr2l,c
  7584  00098C  5180               	movf	(Display_ProcessData@j+1)& (0+255),w,b
  7585  00098E  2169               	addwfc	(Display_ProcessData@AValues+1)& (0+255),w,b
  7586  000990  6EDA               	movwf	fsr2h,c
  7587  000992  50DF               	movf	indf2,w,c
  7588  000994  6F6C               	movwf	??_Display_ProcessData& (0+255),b
  7589  000996  6B6D               	clrf	(??_Display_ProcessData+1)& (0+255),b
  7590  000998  0E09               	movlw	9
  7591  00099A  0381               	mulwf	Display_ProcessData@i_652& (0+255),b
  7592  00099C  CFF3 F06E          	movff	prodl,??_Display_ProcessData+2
  7593  0009A0  CFF4 F06F          	movff	prodh,??_Display_ProcessData+3
  7594  0009A4  0382               	mulwf	(Display_ProcessData@i_652+1)& (0+255),b
  7595  0009A6  50F3               	movf	prodl,w,c
  7596  0009A8  276F               	addwf	(??_Display_ProcessData+3)& (0+255),f,b
  7597  0009AA  516C               	movf	??_Display_ProcessData& (0+255),w,b
  7598  0009AC  5D6E               	subwf	(??_Display_ProcessData+2)& (0+255),w,b
  7599  0009AE  516F               	movf	(??_Display_ProcessData+3)& (0+255),w,b
  7600  0009B0  0A80               	xorlw	128
  7601  0009B2  6F70               	movwf	(??_Display_ProcessData+4)& (0+255),b
  7602  0009B4  516D               	movf	(??_Display_ProcessData+1)& (0+255),w,b
  7603  0009B6  0A80               	xorlw	128
  7604  0009B8  5970               	subwfb	(??_Display_ProcessData+4)& (0+255),w,b
  7605  0009BA  E215               	bc	l4052
  7606                           
  7607                           ; BSR set to: 0
  7608                           ;display.c: 81: LBit = (unsigned char)(_Display.ValueData[j] > k);
  7609  0009BC  0EBE               	movlw	low (__Display+190)
  7610  0009BE  257F               	addwf	Display_ProcessData@j& (0+255),w,b
  7611  0009C0  6ED9               	movwf	fsr2l,c
  7612  0009C2  0E02               	movlw	high (__Display+190)
  7613  0009C4  2180               	addwfc	(Display_ProcessData@j+1)& (0+255),w,b
  7614  0009C6  6EDA               	movwf	fsr2h,c
  7615  0009C8  50DF               	movf	indf2,w,c
  7616  0009CA  6F6C               	movwf	??_Display_ProcessData& (0+255),b
  7617  0009CC  6B6D               	clrf	(??_Display_ProcessData+1)& (0+255),b
  7618  0009CE  516C               	movf	??_Display_ProcessData& (0+255),w,b
  7619  0009D0  5D77               	subwf	Display_ProcessData@k& (0+255),w,b
  7620  0009D2  5178               	movf	(Display_ProcessData@k+1)& (0+255),w,b
  7621  0009D4  0A80               	xorlw	128
  7622  0009D6  6F6E               	movwf	(??_Display_ProcessData+2)& (0+255),b
  7623  0009D8  516D               	movf	(??_Display_ProcessData+1)& (0+255),w,b
  7624  0009DA  0A80               	xorlw	128
  7625  0009DC  596E               	subwfb	(??_Display_ProcessData+2)& (0+255),w,b
  7626  0009DE  0E01               	movlw	1
  7627  0009E0  B0D8               	btfsc	status,0,c
  7628  0009E2  0E00               	movlw	0
  7629  0009E4                     u4120:
  7630  0009E4  6F75               	movwf	Display_ProcessData@LBit& (0+255),b
  7631  0009E6                     l4052:
  7632                           
  7633                           ; BSR set to: 0
  7634                           ;display.c: 82: }
  7635                           ;display.c: 83: LData |= LBit << i;
  7636  0009E6  C081  F06C         	movff	Display_ProcessData@i_652,??_Display_ProcessData
  7637  0009EA  C075  F06D         	movff	Display_ProcessData@LBit,??_Display_ProcessData+1
  7638  0009EE  2B6C               	incf	??_Display_ProcessData& (0+255),f,b
  7639  0009F0  D002               	goto	u4144
  7640  0009F2                     u4145:
  7641  0009F2  90D8               	bcf	status,0,c
  7642  0009F4  376D               	rlcf	(??_Display_ProcessData+1)& (0+255),f,b
  7643  0009F6                     u4144:
  7644  0009F6  2F6C               	decfsz	??_Display_ProcessData& (0+255),f,b
  7645  0009F8  D7FC               	goto	u4145
  7646  0009FA  0100               	movlb	0	; () banked
  7647  0009FC  516D               	movf	(??_Display_ProcessData+1)& (0+255),w,b
  7648  0009FE  1374               	iorwf	Display_ProcessData@LData& (0+255),f,b
  7649                           
  7650                           ; BSR set to: 0
  7651  000A00  4B81               	infsnz	Display_ProcessData@i_652& (0+255),f,b
  7652  000A02  2B82               	incf	(Display_ProcessData@i_652+1)& (0+255),f,b
  7653                           
  7654                           ; BSR set to: 0
  7655  000A04  BF82               	btfsc	(Display_ProcessData@i_652+1)& (0+255),7,b
  7656  000A06  D79C               	goto	l259
  7657  000A08  5182               	movf	(Display_ProcessData@i_652+1)& (0+255),w,b
  7658  000A0A  E103               	bnz	u4150
  7659  000A0C  0E07               	movlw	7
  7660  000A0E  5D81               	subwf	Display_ProcessData@i_652& (0+255),w,b
  7661  000A10  E397               	bnc	l259
  7662  000A12                     u4150:
  7663                           
  7664                           ; BSR set to: 0
  7665                           ;display.c: 84: }
  7666                           ;display.c: 85: *(_Display.SecondaryBuffer + iDataIndex) = LData;
  7667  000A12  5176               	movf	Display_ProcessData@iDataIndex& (0+255),w,b
  7668  000A14  0102               	movlb	2	; () banked
  7669  000A16  25B8               	addwf	(__Display+184)& (0+255),w,b
  7670  000A18  6ED9               	movwf	fsr2l,c
  7671  000A1A  0E00               	movlw	0
  7672  000A1C  21B9               	addwfc	(__Display+185)& (0+255),w,b
  7673  000A1E  6EDA               	movwf	fsr2h,c
  7674  000A20  C074  FFDF         	movff	Display_ProcessData@LData,indf2
  7675                           
  7676                           ; BSR set to: 2
  7677                           ;display.c: 86: iDataIndex++;
  7678  000A24  0100               	movlb	0	; () banked
  7679  000A26  2B76               	incf	Display_ProcessData@iDataIndex& (0+255),f,b
  7680                           
  7681                           ; BSR set to: 0
  7682  000A28  4B7F               	infsnz	Display_ProcessData@j& (0+255),f,b
  7683  000A2A  2B80               	incf	(Display_ProcessData@j+1)& (0+255),f,b
  7684                           
  7685                           ; BSR set to: 0
  7686  000A2C  BF80               	btfsc	(Display_ProcessData@j+1)& (0+255),7,b
  7687  000A2E  D785               	goto	l257
  7688  000A30  5180               	movf	(Display_ProcessData@j+1)& (0+255),w,b
  7689  000A32  E103               	bnz	u4160
  7690  000A34  0E08               	movlw	8
  7691  000A36  5D7F               	subwf	Display_ProcessData@j& (0+255),w,b
  7692  000A38  E380               	bnc	l257
  7693  000A3A                     u4160:
  7694                           
  7695                           ; BSR set to: 0
  7696  000A3A  4B77               	infsnz	Display_ProcessData@k& (0+255),f,b
  7697  000A3C  2B78               	incf	(Display_ProcessData@k+1)& (0+255),f,b
  7698                           
  7699                           ; BSR set to: 0
  7700  000A3E  BF78               	btfsc	(Display_ProcessData@k+1)& (0+255),7,b
  7701  000A40  D75B               	goto	l253
  7702  000A42  5178               	movf	(Display_ProcessData@k+1)& (0+255),w,b
  7703  000A44  E104               	bnz	u4170
  7704  000A46  0E09               	movlw	9
  7705  000A48  5D77               	subwf	Display_ProcessData@k& (0+255),w,b
  7706  000A4A  E201 D755          	bnc	l253
  7707  000A4E                     u4170:
  7708                           
  7709                           ; BSR set to: 0
  7710                           ;display.c: 87: }
  7711                           ;display.c: 88: }
  7712                           ;display.c: 89: _Display.ReadyToRead = 1;
  7713  000A4E  0E01               	movlw	1
  7714  000A50  0102               	movlb	2	; () banked
  7715  000A52  6F00               	movwf	__Display& (0+255),b
  7716                           
  7717                           ; BSR set to: 2
  7718                           ;display.c: 90: _Display.ReadyToWrite = 0;
  7719  000A54  6B01               	clrf	(__Display+1)& (0+255),b
  7720                           
  7721                           ; BSR set to: 2
  7722  000A56  0012               	return		;funcret
  7723  000A58                     __end_of_Display_ProcessData:
  7724                           	opt stack 0
  7725                           tblptru	equ	0xFF8
  7726                           tblptrh	equ	0xFF7
  7727                           tblptrl	equ	0xFF6
  7728                           tablat	equ	0xFF5
  7729                           prodh	equ	0xFF4
  7730                           prodl	equ	0xFF3
  7731                           intcon	equ	0xFF2
  7732                           postinc0	equ	0xFEE
  7733                           plusw0	equ	0xFEB
  7734                           wreg	equ	0xFE8
  7735                           indf1	equ	0xFE7
  7736                           postinc1	equ	0xFE6
  7737                           postdec1	equ	0xFE5
  7738                           plusw1	equ	0xFE3
  7739                           fsr1h	equ	0xFE2
  7740                           fsr1l	equ	0xFE1
  7741                           indf2	equ	0xFDF
  7742                           postinc2	equ	0xFDE
  7743                           postdec2	equ	0xFDD
  7744                           plusw2	equ	0xFDB
  7745                           fsr2h	equ	0xFDA
  7746                           fsr2l	equ	0xFD9
  7747                           status	equ	0xFD8
  7748                           
  7749 ;; *************** function ___lbmod *****************
  7750 ;; Defined at:
  7751 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\lbmod.c"
  7752 ;; Parameters:    Size  Location     Type
  7753 ;;  dividend        1    wreg     unsigned char 
  7754 ;;  divisor         1    4[BANK0 ] unsigned char 
  7755 ;; Auto vars:     Size  Location     Type
  7756 ;;  dividend        1    5[BANK0 ] unsigned char 
  7757 ;;  rem             1    7[BANK0 ] unsigned char 
  7758 ;;  counter         1    6[BANK0 ] unsigned char 
  7759 ;; Return value:  Size  Location     Type
  7760 ;;                  1    wreg      unsigned char 
  7761 ;; Registers used:
  7762 ;;		wreg, status,2, status,0
  7763 ;; Tracked objects:
  7764 ;;		On entry : 3F/0
  7765 ;;		On exit  : 3F/0
  7766 ;;		Unchanged: 0/0
  7767 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7768 ;;      Params:         0       1       0       0       0       0       0       0       0
  7769 ;;      Locals:         0       3       0       0       0       0       0       0       0
  7770 ;;      Temps:          0       0       0       0       0       0       0       0       0
  7771 ;;      Totals:         0       4       0       0       0       0       0       0       0
  7772 ;;Total ram usage:        4 bytes
  7773 ;; Hardware stack levels used:    1
  7774 ;; Hardware stack levels required when called:    6
  7775 ;; This function calls:
  7776 ;;		Nothing
  7777 ;; This function is called by:
  7778 ;;		_Display_ProcessData
  7779 ;; This function uses a non-reentrant model
  7780 ;;
  7781                           
  7782                           	psect	text46
  7783  003030                     __ptext46:
  7784                           	opt stack 0
  7785  003030                     ___lbmod:
  7786                           	opt stack 22
  7787                           
  7788                           ; BSR set to: 2
  7789                           ;incstack = 0
  7790                           ;___lbmod@dividend stored from wreg
  7791  003030  6F65               	movwf	___lbmod@dividend& (0+255),b
  7792  003032  0E08               	movlw	8
  7793  003034  0100               	movlb	0	; () banked
  7794  003036  6F66               	movwf	___lbmod@counter& (0+255),b
  7795                           
  7796                           ; BSR set to: 0
  7797  003038  6B67               	clrf	___lbmod@rem& (0+255),b
  7798  00303A                     l3878:
  7799                           
  7800                           ; BSR set to: 0
  7801  00303A  90D8               	bcf	status,0,c
  7802  00303C  3565               	rlcf	___lbmod@dividend& (0+255),w,b
  7803  00303E  3567               	rlcf	___lbmod@rem& (0+255),w,b
  7804  003040  6F67               	movwf	___lbmod@rem& (0+255),b
  7805                           
  7806                           ; BSR set to: 0
  7807  003042  90D8               	bcf	status,0,c
  7808  003044  3765               	rlcf	___lbmod@dividend& (0+255),f,b
  7809                           
  7810                           ; BSR set to: 0
  7811  003046  5164               	movf	___lbmod@divisor& (0+255),w,b
  7812  003048  5D67               	subwf	___lbmod@rem& (0+255),w,b
  7813  00304A  E302               	bnc	l3886
  7814                           
  7815                           ; BSR set to: 0
  7816  00304C  5164               	movf	___lbmod@divisor& (0+255),w,b
  7817  00304E  5F67               	subwf	___lbmod@rem& (0+255),f,b
  7818  003050                     l3886:
  7819                           
  7820                           ; BSR set to: 0
  7821  003050  2F66               	decfsz	___lbmod@counter& (0+255),f,b
  7822  003052  D7F3               	goto	l3878
  7823                           
  7824                           ; BSR set to: 0
  7825  003054  5167               	movf	___lbmod@rem& (0+255),w,b
  7826                           
  7827                           ; BSR set to: 0
  7828  003056  0012               	return		;funcret
  7829  003058                     __end_of___lbmod:
  7830                           	opt stack 0
  7831                           tblptru	equ	0xFF8
  7832                           tblptrh	equ	0xFF7
  7833                           tblptrl	equ	0xFF6
  7834                           tablat	equ	0xFF5
  7835                           prodh	equ	0xFF4
  7836                           prodl	equ	0xFF3
  7837                           intcon	equ	0xFF2
  7838                           postinc0	equ	0xFEE
  7839                           plusw0	equ	0xFEB
  7840                           wreg	equ	0xFE8
  7841                           indf1	equ	0xFE7
  7842                           postinc1	equ	0xFE6
  7843                           postdec1	equ	0xFE5
  7844                           plusw1	equ	0xFE3
  7845                           fsr1h	equ	0xFE2
  7846                           fsr1l	equ	0xFE1
  7847                           indf2	equ	0xFDF
  7848                           postinc2	equ	0xFDE
  7849                           postdec2	equ	0xFDD
  7850                           plusw2	equ	0xFDB
  7851                           fsr2h	equ	0xFDA
  7852                           fsr2l	equ	0xFD9
  7853                           status	equ	0xFD8
  7854                           
  7855 ;; *************** function ___lbdiv *****************
  7856 ;; Defined at:
  7857 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\lbdiv.c"
  7858 ;; Parameters:    Size  Location     Type
  7859 ;;  dividend        1    wreg     unsigned char 
  7860 ;;  divisor         1    0[BANK0 ] unsigned char 
  7861 ;; Auto vars:     Size  Location     Type
  7862 ;;  dividend        1    1[BANK0 ] unsigned char 
  7863 ;;  quotient        1    3[BANK0 ] unsigned char 
  7864 ;;  counter         1    2[BANK0 ] unsigned char 
  7865 ;; Return value:  Size  Location     Type
  7866 ;;                  1    wreg      unsigned char 
  7867 ;; Registers used:
  7868 ;;		wreg, status,2, status,0
  7869 ;; Tracked objects:
  7870 ;;		On entry : 3F/0
  7871 ;;		On exit  : 3F/0
  7872 ;;		Unchanged: 0/0
  7873 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7874 ;;      Params:         0       1       0       0       0       0       0       0       0
  7875 ;;      Locals:         0       3       0       0       0       0       0       0       0
  7876 ;;      Temps:          0       0       0       0       0       0       0       0       0
  7877 ;;      Totals:         0       4       0       0       0       0       0       0       0
  7878 ;;Total ram usage:        4 bytes
  7879 ;; Hardware stack levels used:    1
  7880 ;; Hardware stack levels required when called:    6
  7881 ;; This function calls:
  7882 ;;		Nothing
  7883 ;; This function is called by:
  7884 ;;		_Display_ProcessData
  7885 ;; This function uses a non-reentrant model
  7886 ;;
  7887                           
  7888                           	psect	text47
  7889  002EDC                     __ptext47:
  7890                           	opt stack 0
  7891  002EDC                     ___lbdiv:
  7892                           	opt stack 22
  7893                           
  7894                           ; BSR set to: 0
  7895                           ;incstack = 0
  7896                           ;___lbdiv@dividend stored from wreg
  7897  002EDC  6F61               	movwf	___lbdiv@dividend& (0+255),b
  7898  002EDE  0100               	movlb	0	; () banked
  7899  002EE0  6B63               	clrf	___lbdiv@quotient& (0+255),b
  7900                           
  7901                           ; BSR set to: 0
  7902  002EE2  5160               	movf	___lbdiv@divisor& (0+255),w,b
  7903  002EE4  E014               	bz	l3870
  7904                           
  7905                           ; BSR set to: 0
  7906  002EE6  0E01               	movlw	1
  7907  002EE8  6F62               	movwf	___lbdiv@counter& (0+255),b
  7908  002EEA  D003               	goto	l3858
  7909  002EEC                     l3854:
  7910                           
  7911                           ; BSR set to: 0
  7912  002EEC  90D8               	bcf	status,0,c
  7913  002EEE  3760               	rlcf	___lbdiv@divisor& (0+255),f,b
  7914                           
  7915                           ; BSR set to: 0
  7916  002EF0  2B62               	incf	___lbdiv@counter& (0+255),f,b
  7917  002EF2                     l3858:
  7918                           
  7919                           ; BSR set to: 0
  7920  002EF2  AF60               	btfss	___lbdiv@divisor& (0+255),7,b
  7921  002EF4  D7FB               	goto	l3854
  7922  002EF6                     u3920:
  7923                           
  7924                           ; BSR set to: 0
  7925  002EF6  90D8               	bcf	status,0,c
  7926  002EF8  3763               	rlcf	___lbdiv@quotient& (0+255),f,b
  7927  002EFA  5160               	movf	___lbdiv@divisor& (0+255),w,b
  7928  002EFC  5D61               	subwf	___lbdiv@dividend& (0+255),w,b
  7929  002EFE  E303               	bnc	l3866
  7930                           
  7931                           ; BSR set to: 0
  7932  002F00  5160               	movf	___lbdiv@divisor& (0+255),w,b
  7933  002F02  5F61               	subwf	___lbdiv@dividend& (0+255),f,b
  7934                           
  7935                           ; BSR set to: 0
  7936  002F04  8163               	bsf	___lbdiv@quotient& (0+255),0,b
  7937  002F06                     l3866:
  7938                           
  7939                           ; BSR set to: 0
  7940  002F06  90D8               	bcf	status,0,c
  7941  002F08  3360               	rrcf	___lbdiv@divisor& (0+255),f,b
  7942                           
  7943                           ; BSR set to: 0
  7944  002F0A  2F62               	decfsz	___lbdiv@counter& (0+255),f,b
  7945  002F0C  D7F4               	goto	u3920
  7946  002F0E                     l3870:
  7947                           
  7948                           ; BSR set to: 0
  7949  002F0E  5163               	movf	___lbdiv@quotient& (0+255),w,b
  7950                           
  7951                           ; BSR set to: 0
  7952  002F10  0012               	return		;funcret
  7953  002F12                     __end_of___lbdiv:
  7954                           	opt stack 0
  7955                           tblptru	equ	0xFF8
  7956                           tblptrh	equ	0xFF7
  7957                           tblptrl	equ	0xFF6
  7958                           tablat	equ	0xFF5
  7959                           prodh	equ	0xFF4
  7960                           prodl	equ	0xFF3
  7961                           intcon	equ	0xFF2
  7962                           postinc0	equ	0xFEE
  7963                           plusw0	equ	0xFEB
  7964                           wreg	equ	0xFE8
  7965                           indf1	equ	0xFE7
  7966                           postinc1	equ	0xFE6
  7967                           postdec1	equ	0xFE5
  7968                           plusw1	equ	0xFE3
  7969                           fsr1h	equ	0xFE2
  7970                           fsr1l	equ	0xFE1
  7971                           indf2	equ	0xFDF
  7972                           postinc2	equ	0xFDE
  7973                           postdec2	equ	0xFDD
  7974                           plusw2	equ	0xFDB
  7975                           fsr2h	equ	0xFDA
  7976                           fsr2l	equ	0xFD9
  7977                           status	equ	0xFD8
  7978                           
  7979 ;; *************** function _Display_Init *****************
  7980 ;; Defined at:
  7981 ;;		line 6 in file "display.c"
  7982 ;; Parameters:    Size  Location     Type
  7983 ;;		None
  7984 ;; Auto vars:     Size  Location     Type
  7985 ;;  i               2  110[BANK0 ] int 
  7986 ;;  i               2  108[BANK0 ] int 
  7987 ;; Return value:  Size  Location     Type
  7988 ;;                  1    wreg      void 
  7989 ;; Registers used:
  7990 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7991 ;; Tracked objects:
  7992 ;;		On entry : 3F/1
  7993 ;;		On exit  : 3F/0
  7994 ;;		Unchanged: 0/0
  7995 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7996 ;;      Params:         0       0       0       0       0       0       0       0       0
  7997 ;;      Locals:         0      10       0       0       0       0       0       0       0
  7998 ;;      Temps:          0       0       0       0       0       0       0       0       0
  7999 ;;      Totals:         0      10       0       0       0       0       0       0       0
  8000 ;;Total ram usage:       10 bytes
  8001 ;; Hardware stack levels used:    1
  8002 ;; Hardware stack levels required when called:   11
  8003 ;; This function calls:
  8004 ;;		_InitConnector
  8005 ;;		___awtoft
  8006 ;;		___fttol
  8007 ;;		_pow
  8008 ;; This function is called by:
  8009 ;;		_InitApp
  8010 ;; This function uses a non-reentrant model
  8011 ;;
  8012                           
  8013                           	psect	text48
  8014  001570                     __ptext48:
  8015                           	opt stack 0
  8016  001570                     _Display_Init:
  8017                           	opt stack 18
  8018                           
  8019                           ; BSR set to: 1
  8020                           ;display.c: 8: TRISA5 = 0;
  8021                           
  8022                           ; BSR set to: 0
  8023                           ;incstack = 0
  8024  001570  9A92               	bcf	3986,5,c	;volatile
  8025                           
  8026                           ;display.c: 9: TRISC2 = 0;
  8027  001572  9494               	bcf	3988,2,c	;volatile
  8028                           
  8029                           ;display.c: 10: TRISB4 = 0;
  8030  001574  9893               	bcf	3987,4,c	;volatile
  8031                           
  8032                           ; BSR set to: 1
  8033                           ;display.c: 12: _Display.IO.ClockPin.Port = &LATB;
  8034  001576  0E8A               	movlw	138
  8035  001578  0102               	movlb	2	; () banked
  8036  00157A  6FCA               	movwf	(__Display+202)& (0+255),b
  8037  00157C  0E0F               	movlw	15
  8038  00157E  6FCB               	movwf	(__Display+203)& (0+255),b
  8039                           
  8040                           ; BSR set to: 2
  8041                           ;display.c: 13: _Display.IO.ClockPin.PinNumber = 4;
  8042  001580  0E04               	movlw	4
  8043  001582  6FCC               	movwf	(__Display+204)& (0+255),b
  8044                           
  8045                           ; BSR set to: 2
  8046                           ;display.c: 14: _Display.IO.DataPin.Port = &LATA;
  8047  001584  0E89               	movlw	137
  8048  001586  6FCF               	movwf	(__Display+207)& (0+255),b
  8049  001588  0E0F               	movlw	15
  8050  00158A  6FD0               	movwf	(__Display+208)& (0+255),b
  8051                           
  8052                           ;display.c: 15: _Display.IO.DataPin.PinNumber = 5;
  8053  00158C  0E05               	movlw	5
  8054  00158E  6FD1               	movwf	(__Display+209)& (0+255),b
  8055                           
  8056                           ; BSR set to: 2
  8057                           ;display.c: 16: _Display.IO.LatchPin.Port = &LATC;
  8058  001590  0E8B               	movlw	139
  8059  001592  6FD4               	movwf	(__Display+212)& (0+255),b
  8060  001594  0E0F               	movlw	15
  8061  001596  6FD5               	movwf	(__Display+213)& (0+255),b
  8062                           
  8063                           ; BSR set to: 2
  8064                           ;display.c: 17: _Display.IO.LatchPin.PinNumber = 2;
  8065  001598  0E02               	movlw	2
  8066  00159A  6FD6               	movwf	(__Display+214)& (0+255),b
  8067                           
  8068                           ; BSR set to: 2
  8069                           ;display.c: 18: InitConnector(&_Display.IO);
  8070  00159C  0ECA               	movlw	low (__Display+202)
  8071  00159E  0100               	movlb	0	; () banked
  8072  0015A0  6F64               	movwf	InitConnector@AConnector& (0+255),b
  8073  0015A2  0E02               	movlw	high (__Display+202)
  8074  0015A4  6F65               	movwf	(InitConnector@AConnector+1)& (0+255),b
  8075  0015A6  ECEE  F017         	call	_InitConnector	;wreg free
  8076                           
  8077                           ; BSR set to: 0
  8078                           ;display.c: 20: _Display.SavingMask = 0xFF;
  8079  0015AA  0102               	movlb	2	; () banked
  8080  0015AC  69C7               	setf	(__Display+199)& (0+255),b
  8081                           
  8082                           ; BSR set to: 2
  8083                           ;display.c: 21: _Display.iDisplay = 0;
  8084  0015AE  6BC6               	clrf	(__Display+198)& (0+255),b
  8085                           
  8086                           ; BSR set to: 2
  8087                           ;display.c: 23: _Display.ReadyToWrite = 1;
  8088  0015B0  0E01               	movlw	1
  8089  0015B2  6F01               	movwf	(__Display+1)& (0+255),b
  8090                           
  8091                           ; BSR set to: 2
  8092                           ;display.c: 24: _Display.ReadyToRead = 0;
  8093  0015B4  6B00               	clrf	__Display& (0+255),b
  8094                           
  8095                           ; BSR set to: 2
  8096                           ;display.c: 26: _Display.PrimaryBuffer = (unsigned char*)_Display.Buffer1;
  8097  0015B6  0E02               	movlw	low (__Display+2)
  8098  0015B8  6FB6               	movwf	(__Display+182)& (0+255),b
  8099  0015BA  0E02               	movlw	high (__Display+2)
  8100  0015BC  6FB7               	movwf	(__Display+183)& (0+255),b
  8101                           
  8102                           ; BSR set to: 2
  8103                           ;display.c: 27: _Display.SecondaryBuffer = (unsigned char*)_Display.Buffer2;
  8104  0015BE  0E5C               	movlw	low (__Display+92)
  8105  0015C0  6FB8               	movwf	(__Display+184)& (0+255),b
  8106  0015C2  0E02               	movlw	high (__Display+92)
  8107  0015C4  6FB9               	movwf	(__Display+185)& (0+255),b
  8108                           
  8109                           ; BSR set to: 2
  8110                           ;display.c: 29: for (int i = 0; i < (char)(((0x01 << 6) - 1 * 1.0f) / (7 * 1.0f)) * (2 +
      +                           8); i++)
  8111  0015C6  0100               	movlb	0	; () banked
  8112  0015C8  6BCC               	clrf	Display_Init@i& (0+255),b
  8113  0015CA  6BCD               	clrf	(Display_Init@i+1)& (0+255),b
  8114  0015CC                     l4158:
  8115                           
  8116                           ; BSR set to: 0
  8117                           ;display.c: 30: {
  8118                           ;display.c: 31: *(_Display.PrimaryBuffer + i) = 0x00;
  8119  0015CC  51CC               	movf	Display_Init@i& (0+255),w,b
  8120  0015CE  0102               	movlb	2	; () banked
  8121  0015D0  25B6               	addwf	(__Display+182)& (0+255),w,b
  8122  0015D2  6ED9               	movwf	fsr2l,c
  8123  0015D4  0100               	movlb	0	; () banked
  8124  0015D6  51CD               	movf	(Display_Init@i+1)& (0+255),w,b
  8125  0015D8  0102               	movlb	2	; () banked
  8126  0015DA  21B7               	addwfc	(__Display+183)& (0+255),w,b
  8127  0015DC  6EDA               	movwf	fsr2h,c
  8128  0015DE  6ADF               	clrf	indf2,c
  8129                           
  8130                           ;display.c: 32: *(_Display.SecondaryBuffer + i) = 0x00;
  8131  0015E0  0100               	movlb	0	; () banked
  8132  0015E2  51CC               	movf	Display_Init@i& (0+255),w,b
  8133  0015E4  0102               	movlb	2	; () banked
  8134  0015E6  25B8               	addwf	(__Display+184)& (0+255),w,b
  8135  0015E8  6ED9               	movwf	fsr2l,c
  8136  0015EA  0100               	movlb	0	; () banked
  8137  0015EC  51CD               	movf	(Display_Init@i+1)& (0+255),w,b
  8138  0015EE  0102               	movlb	2	; () banked
  8139  0015F0  21B9               	addwfc	(__Display+185)& (0+255),w,b
  8140  0015F2  6EDA               	movwf	fsr2h,c
  8141  0015F4  0E00               	movlw	0
  8142  0015F6  6EDF               	movwf	indf2,c
  8143                           
  8144                           ; BSR set to: 2
  8145  0015F8  0100               	movlb	0	; () banked
  8146  0015FA  4BCC               	infsnz	Display_Init@i& (0+255),f,b
  8147  0015FC  2BCD               	incf	(Display_Init@i+1)& (0+255),f,b
  8148                           
  8149                           ; BSR set to: 0
  8150  0015FE  BFCD               	btfsc	(Display_Init@i+1)& (0+255),7,b
  8151  001600  D7E5               	goto	l4158
  8152  001602  51CD               	movf	(Display_Init@i+1)& (0+255),w,b
  8153  001604  E103               	bnz	u4190
  8154  001606  0E5A               	movlw	90
  8155  001608  5DCC               	subwf	Display_Init@i& (0+255),w,b
  8156  00160A  E3E0               	bnc	l4158
  8157  00160C                     u4190:
  8158                           
  8159                           ; BSR set to: 0
  8160                           ;display.c: 33: }
  8161                           ;display.c: 35: for(int i = 0; i < 2; i++)
  8162  00160C  6BCE               	clrf	Display_Init@i_638& (0+255),b
  8163  00160E  6BCF               	clrf	(Display_Init@i_638+1)& (0+255),b
  8164  001610                     l4168:
  8165                           
  8166                           ; BSR set to: 0
  8167                           ;display.c: 36: _Display.DigitalValueRatio[i] = 2 * (int)pow(10, 2 - i - 1);
  8168  001610  51CE               	movf	Display_Init@i_638& (0+255),w,b
  8169  001612  0801               	sublw	1
  8170  001614  6F68               	movwf	___awtoft@c& (0+255),b
  8171  001616  51CF               	movf	(Display_Init@i_638+1)& (0+255),w,b
  8172  001618  A0D8               	btfss	status,0,c
  8173  00161A  2AE8               	incf	wreg,f,c
  8174  00161C  0800               	sublw	0
  8175  00161E  6F69               	movwf	(___awtoft@c+1)& (0+255),b
  8176  001620  ECA4  F017         	call	___awtoft	;wreg free
  8177  001624  C068  F0C6         	movff	?___awtoft,_Display_Init$2163
  8178  001628  C069  F0C7         	movff	?___awtoft+1,_Display_Init$2163+1
  8179  00162C  C06A  F0C8         	movff	?___awtoft+2,_Display_Init$2163+2
  8180                           
  8181                           ; BSR set to: 0
  8182                           ;display.c: 36: _Display.DigitalValueRatio[i] = 2 * (int)pow(10, 2 - i - 1);
  8183  001630  C0C6  F0B8         	movff	_Display_Init$2163,pow@y
  8184  001634  C0C7  F0B9         	movff	_Display_Init$2163+1,pow@y+1
  8185  001638  C0C8  F0BA         	movff	_Display_Init$2163+2,pow@y+2
  8186  00163C  6BB5               	clrf	pow@x& (0+255),b
  8187  00163E  0E20               	movlw	32
  8188  001640  6FB6               	movwf	(pow@x+1)& (0+255),b
  8189  001642  0E41               	movlw	65
  8190  001644  6FB7               	movwf	(pow@x+2)& (0+255),b
  8191  001646  EC81  F009         	call	_pow	;wreg free
  8192  00164A  C0B5  F0C9         	movff	?_pow,_Display_Init$2164
  8193  00164E  C0B6  F0CA         	movff	?_pow+1,_Display_Init$2164+1
  8194  001652  C0B7  F0CB         	movff	?_pow+2,_Display_Init$2164+2
  8195                           
  8196                           ; BSR set to: 0
  8197                           ;display.c: 36: _Display.DigitalValueRatio[i] = 2 * (int)pow(10, 2 - i - 1);
  8198  001656  0EBA               	movlw	low (__Display+186)
  8199  001658  25CE               	addwf	Display_Init@i_638& (0+255),w,b
  8200  00165A  6ED9               	movwf	fsr2l,c
  8201  00165C  0E02               	movlw	high (__Display+186)
  8202  00165E  21CF               	addwfc	(Display_Init@i_638+1)& (0+255),w,b
  8203  001660  6EDA               	movwf	fsr2h,c
  8204  001662  C0C9  F08F         	movff	_Display_Init$2164,___fttol@f1
  8205  001666  C0CA  F090         	movff	_Display_Init$2164+1,___fttol@f1+1
  8206  00166A  C0CB  F091         	movff	_Display_Init$2164+2,___fttol@f1+2
  8207  00166E  ECEB  F00E         	call	___fttol	;wreg free
  8208  001672  90D8               	bcf	status,0,c
  8209  001674  358F               	rlcf	?___fttol& (0+255),w,b
  8210  001676  6EDF               	movwf	indf2,c
  8211                           
  8212                           ; BSR set to: 0
  8213  001678  4BCE               	infsnz	Display_Init@i_638& (0+255),f,b
  8214  00167A  2BCF               	incf	(Display_Init@i_638+1)& (0+255),f,b
  8215                           
  8216                           ; BSR set to: 0
  8217  00167C  BFCF               	btfsc	(Display_Init@i_638+1)& (0+255),7,b
  8218  00167E  D7C8               	goto	l4168
  8219  001680  51CF               	movf	(Display_Init@i_638+1)& (0+255),w,b
  8220  001682  E105               	bnz	u4200
  8221  001684  0E02               	movlw	2
  8222  001686  5DCE               	subwf	Display_Init@i_638& (0+255),w,b
  8223  001688  B0D8               	btfsc	status,0,c
  8224  00168A  0012               	return	
  8225  00168C  D7C1               	goto	l4168
  8226  00168E                     u4200:
  8227                           
  8228                           ; BSR set to: 0
  8229  00168E  0012               	return		;funcret
  8230  001690                     __end_of_Display_Init:
  8231                           	opt stack 0
  8232                           tblptru	equ	0xFF8
  8233                           tblptrh	equ	0xFF7
  8234                           tblptrl	equ	0xFF6
  8235                           tablat	equ	0xFF5
  8236                           prodh	equ	0xFF4
  8237                           prodl	equ	0xFF3
  8238                           intcon	equ	0xFF2
  8239                           postinc0	equ	0xFEE
  8240                           plusw0	equ	0xFEB
  8241                           wreg	equ	0xFE8
  8242                           indf1	equ	0xFE7
  8243                           postinc1	equ	0xFE6
  8244                           postdec1	equ	0xFE5
  8245                           plusw1	equ	0xFE3
  8246                           fsr1h	equ	0xFE2
  8247                           fsr1l	equ	0xFE1
  8248                           indf2	equ	0xFDF
  8249                           postinc2	equ	0xFDE
  8250                           postdec2	equ	0xFDD
  8251                           plusw2	equ	0xFDB
  8252                           fsr2h	equ	0xFDA
  8253                           fsr2l	equ	0xFD9
  8254                           status	equ	0xFD8
  8255                           
  8256 ;; *************** function _pow *****************
  8257 ;; Defined at:
  8258 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\pow.c"
  8259 ;; Parameters:    Size  Location     Type
  8260 ;;  x               3   85[BANK0 ] void 
  8261 ;;  y               3   88[BANK0 ] void 
  8262 ;; Auto vars:     Size  Location     Type
  8263 ;;  yi              4   98[BANK0 ] unsigned long 
  8264 ;;  sign            1   97[BANK0 ] unsigned char 
  8265 ;; Return value:  Size  Location     Type
  8266 ;;                  3   85[BANK0 ] unsigned char 
  8267 ;; Registers used:
  8268 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8269 ;; Tracked objects:
  8270 ;;		On entry : 3F/0
  8271 ;;		On exit  : 3F/0
  8272 ;;		Unchanged: 0/0
  8273 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8274 ;;      Params:         0       6       0       0       0       0       0       0       0
  8275 ;;      Locals:         0      11       0       0       0       0       0       0       0
  8276 ;;      Temps:          0       0       0       0       0       0       0       0       0
  8277 ;;      Totals:         0      17       0       0       0       0       0       0       0
  8278 ;;Total ram usage:       17 bytes
  8279 ;; Hardware stack levels used:    1
  8280 ;; Hardware stack levels required when called:   10
  8281 ;; This function calls:
  8282 ;;		___ftge
  8283 ;;		___ftmul
  8284 ;;		___ftneg
  8285 ;;		___fttol
  8286 ;;		___lltoft
  8287 ;;		_exp
  8288 ;;		_log
  8289 ;; This function is called by:
  8290 ;;		_Display_Init
  8291 ;;		_InitDigiPot
  8292 ;; This function uses a non-reentrant model
  8293 ;;
  8294                           
  8295                           	psect	text49
  8296  001302                     __ptext49:
  8297                           	opt stack 0
  8298  001302                     _pow:
  8299                           	opt stack 18
  8300                           
  8301                           ; BSR set to: 0
  8302                           
  8303                           ; BSR set to: 0
  8304                           ;incstack = 0
  8305  001302  6BC1               	clrf	pow@sign& (0+255),b
  8306                           
  8307                           ; BSR set to: 0
  8308  001304  51B5               	movf	pow@x& (0+255),w,b
  8309  001306  11B6               	iorwf	(pow@x+1)& (0+255),w,b
  8310  001308  11B7               	iorwf	(pow@x+2)& (0+255),w,b
  8311  00130A  E10F               	bnz	l3774
  8312                           
  8313                           ; BSR set to: 0
  8314  00130C  6B60               	clrf	___ftge@ff1& (0+255),b
  8315  00130E  6B61               	clrf	(___ftge@ff1+1)& (0+255),b
  8316  001310  6B62               	clrf	(___ftge@ff1+2)& (0+255),b
  8317  001312  C0B8  F063         	movff	pow@y,___ftge@ff2
  8318  001316  C0B9  F064         	movff	pow@y+1,___ftge@ff2+1
  8319  00131A  C0BA  F065         	movff	pow@y+2,___ftge@ff2+2
  8320  00131E  EC23  F015         	call	___ftge	;wreg free
  8321                           
  8322                           ; BSR set to: 0
  8323  001322  6BB5               	clrf	?_pow& (0+255),b
  8324  001324  6BB6               	clrf	(?_pow+1)& (0+255),b
  8325  001326  6BB7               	clrf	(?_pow+2)& (0+255),b
  8326  001328  0012               	return	
  8327  00132A                     l3774:
  8328                           
  8329                           ; BSR set to: 0
  8330  00132A  51B8               	movf	pow@y& (0+255),w,b
  8331  00132C  11B9               	iorwf	(pow@y+1)& (0+255),w,b
  8332  00132E  11BA               	iorwf	(pow@y+2)& (0+255),w,b
  8333  001330  E106               	bnz	l3780
  8334                           
  8335                           ; BSR set to: 0
  8336  001332  6BB5               	clrf	?_pow& (0+255),b
  8337  001334  0E80               	movlw	128
  8338  001336  6FB6               	movwf	(?_pow+1)& (0+255),b
  8339  001338  0E3F               	movlw	63
  8340  00133A  6FB7               	movwf	(?_pow+2)& (0+255),b
  8341  00133C  0C3F               	retlw	63
  8342  00133E                     l3780:
  8343                           
  8344                           ; BSR set to: 0
  8345  00133E  AFB7               	btfss	(pow@x+2)& (0+255),7,b
  8346  001340  D038               	goto	l3790
  8347                           
  8348                           ; BSR set to: 0
  8349  001342  C0B8  F08F         	movff	pow@y,___fttol@f1
  8350  001346  C0B9  F090         	movff	pow@y+1,___fttol@f1+1
  8351  00134A  C0BA  F091         	movff	pow@y+2,___fttol@f1+2
  8352  00134E  ECEB  F00E         	call	___fttol	;wreg free
  8353  001352  C08F  F0C2         	movff	?___fttol,pow@yi
  8354  001356  C090  F0C3         	movff	?___fttol+1,pow@yi+1
  8355  00135A  C091  F0C4         	movff	?___fttol+2,pow@yi+2
  8356  00135E  C092  F0C5         	movff	?___fttol+3,pow@yi+3
  8357  001362  C0C2  F068         	movff	pow@yi,___lltoft@c
  8358  001366  C0C3  F069         	movff	pow@yi+1,___lltoft@c+1
  8359  00136A  C0C4  F06A         	movff	pow@yi+2,___lltoft@c+2
  8360  00136E  C0C5  F06B         	movff	pow@yi+3,___lltoft@c+3
  8361  001372  EC43  F016         	call	___lltoft	;wreg free
  8362  001376  51B8               	movf	pow@y& (0+255),w,b
  8363  001378  1968               	xorwf	?___lltoft& (0+255),w,b
  8364  00137A  E106               	bnz	u3840
  8365  00137C  51B9               	movf	(pow@y+1)& (0+255),w,b
  8366  00137E  1969               	xorwf	(?___lltoft+1)& (0+255),w,b
  8367  001380  E103               	bnz	u3840
  8368  001382  51BA               	movf	(pow@y+2)& (0+255),w,b
  8369  001384  196A               	xorwf	(?___lltoft+2)& (0+255),w,b
  8370  001386  E004               	bz	l3786
  8371  001388                     u3840:
  8372                           
  8373                           ; BSR set to: 0
  8374  001388  6BB5               	clrf	?_pow& (0+255),b
  8375  00138A  6BB6               	clrf	(?_pow+1)& (0+255),b
  8376  00138C  6BB7               	clrf	(?_pow+2)& (0+255),b
  8377  00138E  0012               	return	
  8378  001390                     l3786:
  8379                           
  8380                           ; BSR set to: 0
  8381  001390  51C2               	movf	pow@yi& (0+255),w,b
  8382  001392  0B01               	andlw	1
  8383  001394  6FC1               	movwf	pow@sign& (0+255),b
  8384                           
  8385                           ; BSR set to: 0
  8386  001396  C0B5  F060         	movff	pow@x,___ftneg@f1
  8387  00139A  C0B6  F061         	movff	pow@x+1,___ftneg@f1+1
  8388  00139E  C0B7  F062         	movff	pow@x+2,___ftneg@f1+2
  8389  0013A2  EC7B  F018         	call	___ftneg	;wreg free
  8390  0013A6  C060  F0B5         	movff	?___ftneg,pow@x
  8391  0013AA  C061  F0B6         	movff	?___ftneg+1,pow@x+1
  8392  0013AE  C062  F0B7         	movff	?___ftneg+2,pow@x+2
  8393  0013B2                     l3790:
  8394                           
  8395                           ; BSR set to: 0
  8396  0013B2  C0B5  F0A5         	movff	pow@x,log@x
  8397  0013B6  C0B6  F0A6         	movff	pow@x+1,log@x+1
  8398  0013BA  C0B7  F0A7         	movff	pow@x+2,log@x+2
  8399  0013BE  EC62  F00C         	call	_log	;wreg free
  8400  0013C2  C0A5  F0BB         	movff	?_log,_pow$2166
  8401  0013C6  C0A6  F0BC         	movff	?_log+1,_pow$2166+1
  8402  0013CA  C0A7  F0BD         	movff	?_log+2,_pow$2166+2
  8403                           
  8404                           ; BSR set to: 0
  8405  0013CE  C0BB  F072         	movff	_pow$2166,___ftmul@f1
  8406  0013D2  C0BC  F073         	movff	_pow$2166+1,___ftmul@f1+1
  8407  0013D6  C0BD  F074         	movff	_pow$2166+2,___ftmul@f1+2
  8408  0013DA  C0B8  F075         	movff	pow@y,___ftmul@f2
  8409  0013DE  C0B9  F076         	movff	pow@y+1,___ftmul@f2+1
  8410  0013E2  C0BA  F077         	movff	pow@y+2,___ftmul@f2+2
  8411  0013E6  EC4C  F00D         	call	___ftmul	;wreg free
  8412  0013EA  C072  F0BE         	movff	?___ftmul,_pow$2167
  8413  0013EE  C073  F0BF         	movff	?___ftmul+1,_pow$2167+1
  8414  0013F2  C074  F0C0         	movff	?___ftmul+2,_pow$2167+2
  8415                           
  8416                           ; BSR set to: 0
  8417  0013F6  C0BE  F0AC         	movff	_pow$2167,exp@x
  8418  0013FA  C0BF  F0AD         	movff	_pow$2167+1,exp@x+1
  8419  0013FE  C0C0  F0AE         	movff	_pow$2167+2,exp@x+2
  8420  001402  EC2C  F007         	call	_exp	;wreg free
  8421  001406  C0AC  F0B5         	movff	?_exp,pow@x
  8422  00140A  C0AD  F0B6         	movff	?_exp+1,pow@x+1
  8423  00140E  C0AE  F0B7         	movff	?_exp+2,pow@x+2
  8424                           
  8425                           ; BSR set to: 0
  8426  001412  51C1               	movf	pow@sign& (0+255),w,b
  8427  001414  E00F               	bz	l1151
  8428                           
  8429                           ; BSR set to: 0
  8430  001416  C0B5  F060         	movff	pow@x,___ftneg@f1
  8431  00141A  C0B6  F061         	movff	pow@x+1,___ftneg@f1+1
  8432  00141E  C0B7  F062         	movff	pow@x+2,___ftneg@f1+2
  8433  001422  EC7B  F018         	call	___ftneg	;wreg free
  8434  001426  C060  F0B5         	movff	?___ftneg,?_pow
  8435  00142A  C061  F0B6         	movff	?___ftneg+1,?_pow+1
  8436  00142E  C062  F0B7         	movff	?___ftneg+2,?_pow+2
  8437  001432  0012               	return	
  8438  001434                     l1151:
  8439                           
  8440                           ; BSR set to: 0
  8441  001434  C0B5  F0B5         	movff	pow@x,?_pow
  8442  001438  C0B6  F0B6         	movff	pow@x+1,?_pow+1
  8443  00143C  C0B7  F0B7         	movff	pow@x+2,?_pow+2
  8444                           
  8445                           ; BSR set to: 0
  8446  001440  0012               	return		;funcret
  8447  001442                     __end_of_pow:
  8448                           	opt stack 0
  8449                           tblptru	equ	0xFF8
  8450                           tblptrh	equ	0xFF7
  8451                           tblptrl	equ	0xFF6
  8452                           tablat	equ	0xFF5
  8453                           prodh	equ	0xFF4
  8454                           prodl	equ	0xFF3
  8455                           intcon	equ	0xFF2
  8456                           postinc0	equ	0xFEE
  8457                           plusw0	equ	0xFEB
  8458                           wreg	equ	0xFE8
  8459                           indf1	equ	0xFE7
  8460                           postinc1	equ	0xFE6
  8461                           postdec1	equ	0xFE5
  8462                           plusw1	equ	0xFE3
  8463                           fsr1h	equ	0xFE2
  8464                           fsr1l	equ	0xFE1
  8465                           indf2	equ	0xFDF
  8466                           postinc2	equ	0xFDE
  8467                           postdec2	equ	0xFDD
  8468                           plusw2	equ	0xFDB
  8469                           fsr2h	equ	0xFDA
  8470                           fsr2l	equ	0xFD9
  8471                           status	equ	0xFD8
  8472                           
  8473 ;; *************** function _log *****************
  8474 ;; Defined at:
  8475 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\log.c"
  8476 ;; Parameters:    Size  Location     Type
  8477 ;;  x               3   69[BANK0 ] unsigned char 
  8478 ;; Auto vars:     Size  Location     Type
  8479 ;;  exponent        2   72[BANK0 ] int 
  8480 ;; Return value:  Size  Location     Type
  8481 ;;                  3   69[BANK0 ] int 
  8482 ;; Registers used:
  8483 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8484 ;; Tracked objects:
  8485 ;;		On entry : 3F/0
  8486 ;;		On exit  : 3F/0
  8487 ;;		Unchanged: 0/0
  8488 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8489 ;;      Params:         0       3       0       0       0       0       0       0       0
  8490 ;;      Locals:         0       2       0       0       0       0       0       0       0
  8491 ;;      Temps:          0       0       0       0       0       0       0       0       0
  8492 ;;      Totals:         0       5       0       0       0       0       0       0       0
  8493 ;;Total ram usage:        5 bytes
  8494 ;; Hardware stack levels used:    1
  8495 ;; Hardware stack levels required when called:    9
  8496 ;; This function calls:
  8497 ;;		___awtoft
  8498 ;;		___ftadd
  8499 ;;		___ftmul
  8500 ;;		_eval_poly
  8501 ;;		_frexp
  8502 ;; This function is called by:
  8503 ;;		_pow
  8504 ;; This function uses a non-reentrant model
  8505 ;;
  8506                           
  8507                           	psect	text50
  8508  0018C4                     __ptext50:
  8509                           	opt stack 0
  8510  0018C4                     _log:
  8511                           	opt stack 18
  8512                           
  8513                           ; BSR set to: 0
  8514                           
  8515                           ; BSR set to: 0
  8516                           ;incstack = 0
  8517  0018C4  AFA7               	btfss	(log@x+2)& (0+255),7,b
  8518  0018C6  D004               	goto	l3656
  8519                           
  8520                           ; BSR set to: 0
  8521  0018C8  6BA5               	clrf	?_log& (0+255),b
  8522  0018CA  6BA6               	clrf	(?_log+1)& (0+255),b
  8523  0018CC  6BA7               	clrf	(?_log+2)& (0+255),b
  8524  0018CE  0012               	return	
  8525  0018D0                     l3656:
  8526                           
  8527                           ; BSR set to: 0
  8528  0018D0  51A5               	movf	log@x& (0+255),w,b
  8529  0018D2  11A6               	iorwf	(log@x+1)& (0+255),w,b
  8530  0018D4  11A7               	iorwf	(log@x+2)& (0+255),w,b
  8531  0018D6  E104               	bnz	l3660
  8532                           
  8533                           ; BSR set to: 0
  8534  0018D8  6BA5               	clrf	?_log& (0+255),b
  8535  0018DA  6BA6               	clrf	(?_log+1)& (0+255),b
  8536  0018DC  6BA7               	clrf	(?_log+2)& (0+255),b
  8537  0018DE  0012               	return	
  8538  0018E0                     l3660:
  8539                           
  8540                           ; BSR set to: 0
  8541  0018E0  6B75               	clrf	___ftmul@f2& (0+255),b
  8542  0018E2  6B76               	clrf	(___ftmul@f2+1)& (0+255),b
  8543  0018E4  0E40               	movlw	64
  8544  0018E6  6F77               	movwf	(___ftmul@f2+2)& (0+255),b
  8545  0018E8  0EA8               	movlw	low log@exponent
  8546  0018EA  6F63               	movwf	frexp@eptr& (0+255),b
  8547  0018EC  C0A5  F060         	movff	log@x,frexp@value
  8548  0018F0  C0A6  F061         	movff	log@x+1,frexp@value+1
  8549  0018F4  C0A7  F062         	movff	log@x+2,frexp@value+2
  8550  0018F8  ECBB  F013         	call	_frexp	;wreg free
  8551  0018FC  C060  F072         	movff	?_frexp,___ftmul@f1
  8552  001900  C061  F073         	movff	?_frexp+1,___ftmul@f1+1
  8553  001904  C062  F074         	movff	?_frexp+2,___ftmul@f1+2
  8554  001908  EC4C  F00D         	call	___ftmul	;wreg free
  8555  00190C  C072  F08F         	movff	?___ftmul,___ftadd@f1
  8556  001910  C073  F090         	movff	?___ftmul+1,___ftadd@f1+1
  8557  001914  C074  F091         	movff	?___ftmul+2,___ftadd@f1+2
  8558  001918  6B92               	clrf	___ftadd@f2& (0+255),b
  8559  00191A  0E80               	movlw	128
  8560  00191C  6F93               	movwf	(___ftadd@f2+1)& (0+255),b
  8561  00191E  0EBF               	movlw	191
  8562  001920  6F94               	movwf	(___ftadd@f2+2)& (0+255),b
  8563  001922  ECD3  F008         	call	___ftadd	;wreg free
  8564  001926  C08F  F0A5         	movff	?___ftadd,log@x
  8565  00192A  C090  F0A6         	movff	?___ftadd+1,log@x+1
  8566  00192E  C091  F0A7         	movff	?___ftadd+2,log@x+2
  8567                           
  8568                           ; BSR set to: 0
  8569  001932  07A8               	decf	log@exponent& (0+255),f,b
  8570  001934  A0D8               	btfss	status,0,c
  8571  001936  07A9               	decf	(log@exponent+1)& (0+255),f,b
  8572                           
  8573                           ; BSR set to: 0
  8574  001938  C0A5  F09B         	movff	log@x,eval_poly@x
  8575  00193C  C0A6  F09C         	movff	log@x+1,eval_poly@x+1
  8576  001940  C0A7  F09D         	movff	log@x+2,eval_poly@x+2
  8577  001944  0E1F               	movlw	low log@coeff
  8578  001946  6F9E               	movwf	eval_poly@d& (0+255),b
  8579  001948  6BA0               	clrf	(eval_poly@n+1)& (0+255),b
  8580  00194A  0E08               	movlw	8
  8581  00194C  6F9F               	movwf	eval_poly@n& (0+255),b
  8582  00194E  EC52  F010         	call	_eval_poly	;wreg free
  8583  001952  C09B  F0A5         	movff	?_eval_poly,log@x
  8584  001956  C09C  F0A6         	movff	?_eval_poly+1,log@x+1
  8585  00195A  C09D  F0A7         	movff	?_eval_poly+2,log@x+2
  8586                           
  8587                           ; BSR set to: 0
  8588  00195E  0E72               	movlw	114
  8589  001960  6F75               	movwf	___ftmul@f2& (0+255),b
  8590  001962  0E31               	movlw	49
  8591  001964  6F76               	movwf	(___ftmul@f2+1)& (0+255),b
  8592  001966  0E3F               	movlw	63
  8593  001968  6F77               	movwf	(___ftmul@f2+2)& (0+255),b
  8594  00196A  C0A8  F068         	movff	log@exponent,___awtoft@c
  8595  00196E  C0A9  F069         	movff	log@exponent+1,___awtoft@c+1
  8596  001972  ECA4  F017         	call	___awtoft	;wreg free
  8597  001976  C068  F072         	movff	?___awtoft,___ftmul@f1
  8598  00197A  C069  F073         	movff	?___awtoft+1,___ftmul@f1+1
  8599  00197E  C06A  F074         	movff	?___awtoft+2,___ftmul@f1+2
  8600  001982  EC4C  F00D         	call	___ftmul	;wreg free
  8601  001986  C072  F08F         	movff	?___ftmul,___ftadd@f1
  8602  00198A  C073  F090         	movff	?___ftmul+1,___ftadd@f1+1
  8603  00198E  C074  F091         	movff	?___ftmul+2,___ftadd@f1+2
  8604  001992  C0A5  F092         	movff	log@x,___ftadd@f2
  8605  001996  C0A6  F093         	movff	log@x+1,___ftadd@f2+1
  8606  00199A  C0A7  F094         	movff	log@x+2,___ftadd@f2+2
  8607  00199E  ECD3  F008         	call	___ftadd	;wreg free
  8608  0019A2  C08F  F0A5         	movff	?___ftadd,?_log
  8609  0019A6  C090  F0A6         	movff	?___ftadd+1,?_log+1
  8610  0019AA  C091  F0A7         	movff	?___ftadd+2,?_log+2
  8611                           
  8612                           ; BSR set to: 0
  8613  0019AE  0012               	return		;funcret
  8614  0019B0                     __end_of_log:
  8615                           	opt stack 0
  8616                           tblptru	equ	0xFF8
  8617                           tblptrh	equ	0xFF7
  8618                           tblptrl	equ	0xFF6
  8619                           tablat	equ	0xFF5
  8620                           prodh	equ	0xFF4
  8621                           prodl	equ	0xFF3
  8622                           intcon	equ	0xFF2
  8623                           postinc0	equ	0xFEE
  8624                           plusw0	equ	0xFEB
  8625                           wreg	equ	0xFE8
  8626                           indf1	equ	0xFE7
  8627                           postinc1	equ	0xFE6
  8628                           postdec1	equ	0xFE5
  8629                           plusw1	equ	0xFE3
  8630                           fsr1h	equ	0xFE2
  8631                           fsr1l	equ	0xFE1
  8632                           indf2	equ	0xFDF
  8633                           postinc2	equ	0xFDE
  8634                           postdec2	equ	0xFDD
  8635                           plusw2	equ	0xFDB
  8636                           fsr2h	equ	0xFDA
  8637                           fsr2l	equ	0xFD9
  8638                           status	equ	0xFD8
  8639                           
  8640 ;; *************** function _exp *****************
  8641 ;; Defined at:
  8642 ;;		line 12 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\exp.c"
  8643 ;; Parameters:    Size  Location     Type
  8644 ;;  x               3   76[BANK0 ] int 
  8645 ;; Auto vars:     Size  Location     Type
  8646 ;;  exponent        2   82[BANK0 ] int 
  8647 ;;  sign            1   84[BANK0 ] unsigned char 
  8648 ;; Return value:  Size  Location     Type
  8649 ;;                  3   76[BANK0 ] unsigned char 
  8650 ;; Registers used:
  8651 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8652 ;; Tracked objects:
  8653 ;;		On entry : 3F/0
  8654 ;;		On exit  : 3F/0
  8655 ;;		Unchanged: 0/0
  8656 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8657 ;;      Params:         0       3       0       0       0       0       0       0       0
  8658 ;;      Locals:         0       6       0       0       0       0       0       0       0
  8659 ;;      Temps:          0       0       0       0       0       0       0       0       0
  8660 ;;      Totals:         0       9       0       0       0       0       0       0       0
  8661 ;;Total ram usage:        9 bytes
  8662 ;; Hardware stack levels used:    1
  8663 ;; Hardware stack levels required when called:    9
  8664 ;; This function calls:
  8665 ;;		___awtoft
  8666 ;;		___ftdiv
  8667 ;;		___ftge
  8668 ;;		___ftmul
  8669 ;;		___ftneg
  8670 ;;		___ftsub
  8671 ;;		___fttol
  8672 ;;		_eval_poly
  8673 ;;		_floor
  8674 ;;		_ldexp
  8675 ;; This function is called by:
  8676 ;;		_pow
  8677 ;; This function uses a non-reentrant model
  8678 ;;
  8679                           
  8680                           	psect	text51
  8681  000E58                     __ptext51:
  8682                           	opt stack 0
  8683  000E58                     _exp:
  8684                           	opt stack 18
  8685                           
  8686                           ; BSR set to: 0
  8687                           
  8688                           ; BSR set to: 0
  8689                           ;incstack = 0
  8690  000E58  51AC               	movf	exp@x& (0+255),w,b
  8691  000E5A  11AD               	iorwf	(exp@x+1)& (0+255),w,b
  8692  000E5C  11AE               	iorwf	(exp@x+2)& (0+255),w,b
  8693  000E5E  E106               	bnz	l3676
  8694                           
  8695                           ; BSR set to: 0
  8696  000E60  6BAC               	clrf	?_exp& (0+255),b
  8697  000E62  0E80               	movlw	128
  8698  000E64  6FAD               	movwf	(?_exp+1)& (0+255),b
  8699  000E66  0E3F               	movlw	63
  8700  000E68  6FAE               	movwf	(?_exp+2)& (0+255),b
  8701  000E6A  0C3F               	retlw	63
  8702  000E6C                     l3676:
  8703                           
  8704                           ; BSR set to: 0
  8705  000E6C  0E72               	movlw	114
  8706  000E6E  6F60               	movwf	___ftge@ff1& (0+255),b
  8707  000E70  0E31               	movlw	49
  8708  000E72  6F61               	movwf	(___ftge@ff1+1)& (0+255),b
  8709  000E74  0E44               	movlw	68
  8710  000E76  6F62               	movwf	(___ftge@ff1+2)& (0+255),b
  8711  000E78  C0AC  F063         	movff	exp@x,___ftge@ff2
  8712  000E7C  C0AD  F064         	movff	exp@x+1,___ftge@ff2+1
  8713  000E80  C0AE  F065         	movff	exp@x+2,___ftge@ff2+2
  8714  000E84  EC23  F015         	call	___ftge	;wreg free
  8715  000E88  E205               	bc	l3682
  8716                           
  8717                           ; BSR set to: 0
  8718  000E8A  69AC               	setf	?_exp& (0+255),b
  8719  000E8C  0E7F               	movlw	127
  8720  000E8E  6FAD               	movwf	(?_exp+1)& (0+255),b
  8721  000E90  6FAE               	movwf	(?_exp+2)& (0+255),b
  8722  000E92  0C7F               	retlw	127
  8723  000E94                     l3682:
  8724                           
  8725                           ; BSR set to: 0
  8726  000E94  C0AC  F060         	movff	exp@x,___ftge@ff1
  8727  000E98  C0AD  F061         	movff	exp@x+1,___ftge@ff1+1
  8728  000E9C  C0AE  F062         	movff	exp@x+2,___ftge@ff1+2
  8729  000EA0  0E49               	movlw	73
  8730  000EA2  6F63               	movwf	___ftge@ff2& (0+255),b
  8731  000EA4  0E3A               	movlw	58
  8732  000EA6  6F64               	movwf	(___ftge@ff2+1)& (0+255),b
  8733  000EA8  0EC4               	movlw	196
  8734  000EAA  6F65               	movwf	(___ftge@ff2+2)& (0+255),b
  8735  000EAC  EC23  F015         	call	___ftge	;wreg free
  8736  000EB0  E204               	bc	l3686
  8737                           
  8738                           ; BSR set to: 0
  8739  000EB2  6BAC               	clrf	?_exp& (0+255),b
  8740  000EB4  6BAD               	clrf	(?_exp+1)& (0+255),b
  8741  000EB6  6BAE               	clrf	(?_exp+2)& (0+255),b
  8742  000EB8  0012               	return	
  8743  000EBA                     l3686:
  8744  000EBA  0E01               	movlw	1
  8745                           
  8746                           ; BSR set to: 0
  8747  000EBC  AFAE               	btfss	(exp@x+2)& (0+255),7,b
  8748  000EBE  0E00               	movlw	0
  8749  000EC0  6FB4               	movwf	exp@sign& (0+255),b
  8750                           
  8751                           ; BSR set to: 0
  8752  000EC2  51B4               	movf	exp@sign& (0+255),w,b
  8753  000EC4  E00E               	bz	l3692
  8754                           
  8755                           ; BSR set to: 0
  8756  000EC6  C0AC  F060         	movff	exp@x,___ftneg@f1
  8757  000ECA  C0AD  F061         	movff	exp@x+1,___ftneg@f1+1
  8758  000ECE  C0AE  F062         	movff	exp@x+2,___ftneg@f1+2
  8759  000ED2  EC7B  F018         	call	___ftneg	;wreg free
  8760  000ED6  C060  F0AC         	movff	?___ftneg,exp@x
  8761  000EDA  C061  F0AD         	movff	?___ftneg+1,exp@x+1
  8762  000EDE  C062  F0AE         	movff	?___ftneg+2,exp@x+2
  8763  000EE2                     l3692:
  8764                           
  8765                           ; BSR set to: 0
  8766  000EE2  C0AC  F072         	movff	exp@x,___ftmul@f1
  8767  000EE6  C0AD  F073         	movff	exp@x+1,___ftmul@f1+1
  8768  000EEA  C0AE  F074         	movff	exp@x+2,___ftmul@f1+2
  8769  000EEE  0EAA               	movlw	170
  8770  000EF0  6F75               	movwf	___ftmul@f2& (0+255),b
  8771  000EF2  0EB8               	movlw	184
  8772  000EF4  6F76               	movwf	(___ftmul@f2+1)& (0+255),b
  8773  000EF6  0E3F               	movlw	63
  8774  000EF8  6F77               	movwf	(___ftmul@f2+2)& (0+255),b
  8775  000EFA  EC4C  F00D         	call	___ftmul	;wreg free
  8776  000EFE  C072  F0AC         	movff	?___ftmul,exp@x
  8777  000F02  C073  F0AD         	movff	?___ftmul+1,exp@x+1
  8778  000F06  C074  F0AE         	movff	?___ftmul+2,exp@x+2
  8779                           
  8780                           ; BSR set to: 0
  8781  000F0A  C0AC  F09E         	movff	exp@x,floor@x
  8782  000F0E  C0AD  F09F         	movff	exp@x+1,floor@x+1
  8783  000F12  C0AE  F0A0         	movff	exp@x+2,floor@x+2
  8784  000F16  EC20  F00E         	call	_floor	;wreg free
  8785  000F1A  C09E  F0AF         	movff	?_floor,_exp$2168
  8786  000F1E  C09F  F0B0         	movff	?_floor+1,_exp$2168+1
  8787  000F22  C0A0  F0B1         	movff	?_floor+2,_exp$2168+2
  8788                           
  8789                           ; BSR set to: 0
  8790  000F26  C0AF  F08F         	movff	_exp$2168,___fttol@f1
  8791  000F2A  C0B0  F090         	movff	_exp$2168+1,___fttol@f1+1
  8792  000F2E  C0B1  F091         	movff	_exp$2168+2,___fttol@f1+2
  8793  000F32  ECEB  F00E         	call	___fttol	;wreg free
  8794  000F36  C08F  F0B2         	movff	?___fttol,exp@exponent
  8795  000F3A  C090  F0B3         	movff	?___fttol+1,exp@exponent+1
  8796                           
  8797                           ; BSR set to: 0
  8798  000F3E  C0AC  F09B         	movff	exp@x,___ftsub@f1
  8799  000F42  C0AD  F09C         	movff	exp@x+1,___ftsub@f1+1
  8800  000F46  C0AE  F09D         	movff	exp@x+2,___ftsub@f1+2
  8801  000F4A  C0B2  F068         	movff	exp@exponent,___awtoft@c
  8802  000F4E  C0B3  F069         	movff	exp@exponent+1,___awtoft@c+1
  8803  000F52  ECA4  F017         	call	___awtoft	;wreg free
  8804  000F56  C068  F09E         	movff	?___awtoft,___ftsub@f2
  8805  000F5A  C069  F09F         	movff	?___awtoft+1,___ftsub@f2+1
  8806  000F5E  C06A  F0A0         	movff	?___awtoft+2,___ftsub@f2+2
  8807  000F62  EC89  F017         	call	___ftsub	;wreg free
  8808  000F66  C09B  F0AC         	movff	?___ftsub,exp@x
  8809  000F6A  C09C  F0AD         	movff	?___ftsub+1,exp@x+1
  8810  000F6E  C09D  F0AE         	movff	?___ftsub+2,exp@x+2
  8811                           
  8812                           ; BSR set to: 0
  8813  000F72  C0AC  F09B         	movff	exp@x,eval_poly@x
  8814  000F76  C0AD  F09C         	movff	exp@x+1,eval_poly@x+1
  8815  000F7A  C0AE  F09D         	movff	exp@x+2,eval_poly@x+2
  8816  000F7E  0E01               	movlw	low exp@coeff
  8817  000F80  6F9E               	movwf	eval_poly@d& (0+255),b
  8818  000F82  6BA0               	clrf	(eval_poly@n+1)& (0+255),b
  8819  000F84  0E09               	movlw	9
  8820  000F86  6F9F               	movwf	eval_poly@n& (0+255),b
  8821  000F88  EC52  F010         	call	_eval_poly	;wreg free
  8822  000F8C  C09B  F0A5         	movff	?_eval_poly,ldexp@value
  8823  000F90  C09C  F0A6         	movff	?_eval_poly+1,ldexp@value+1
  8824  000F94  C09D  F0A7         	movff	?_eval_poly+2,ldexp@value+2
  8825  000F98  C0B2  F0A8         	movff	exp@exponent,ldexp@newexp
  8826  000F9C  C0B3  F0A9         	movff	exp@exponent+1,ldexp@newexp+1
  8827  000FA0  ECEB  F010         	call	_ldexp	;wreg free
  8828  000FA4  C0A5  F0AC         	movff	?_ldexp,exp@x
  8829  000FA8  C0A6  F0AD         	movff	?_ldexp+1,exp@x+1
  8830  000FAC  C0A7  F0AE         	movff	?_ldexp+2,exp@x+2
  8831                           
  8832                           ; BSR set to: 0
  8833  000FB0  51B4               	movf	exp@sign& (0+255),w,b
  8834  000FB2  E020               	bz	l1310
  8835                           
  8836                           ; BSR set to: 0
  8837  000FB4  29AC               	incf	exp@x& (0+255),w,b
  8838  000FB6  E10A               	bnz	l3708
  8839  000FB8  0E7F               	movlw	127
  8840  000FBA  19AD               	xorwf	(exp@x+1)& (0+255),w,b
  8841  000FBC  E107               	bnz	l3708
  8842  000FBE  0E7F               	movlw	127
  8843  000FC0  19AE               	xorwf	(exp@x+2)& (0+255),w,b
  8844  000FC2  E104               	bnz	l3708
  8845                           
  8846                           ; BSR set to: 0
  8847  000FC4  6BAC               	clrf	?_exp& (0+255),b
  8848  000FC6  6BAD               	clrf	(?_exp+1)& (0+255),b
  8849  000FC8  6BAE               	clrf	(?_exp+2)& (0+255),b
  8850  000FCA  0012               	return	
  8851  000FCC                     l3708:
  8852                           
  8853                           ; BSR set to: 0
  8854  000FCC  6B80               	clrf	___ftdiv@f1& (0+255),b
  8855  000FCE  0E80               	movlw	128
  8856  000FD0  6F81               	movwf	(___ftdiv@f1+1)& (0+255),b
  8857  000FD2  0E3F               	movlw	63
  8858  000FD4  6F82               	movwf	(___ftdiv@f1+2)& (0+255),b
  8859  000FD6  C0AC  F083         	movff	exp@x,___ftdiv@f2
  8860  000FDA  C0AD  F084         	movff	exp@x+1,___ftdiv@f2+1
  8861  000FDE  C0AE  F085         	movff	exp@x+2,___ftdiv@f2+2
  8862  000FE2  EC48  F00F         	call	___ftdiv	;wreg free
  8863  000FE6  C080  F0AC         	movff	?___ftdiv,?_exp
  8864  000FEA  C081  F0AD         	movff	?___ftdiv+1,?_exp+1
  8865  000FEE  C082  F0AE         	movff	?___ftdiv+2,?_exp+2
  8866  000FF2  0012               	return	
  8867  000FF4                     l1310:
  8868                           
  8869                           ; BSR set to: 0
  8870  000FF4  C0AC  F0AC         	movff	exp@x,?_exp
  8871  000FF8  C0AD  F0AD         	movff	exp@x+1,?_exp+1
  8872  000FFC  C0AE  F0AE         	movff	exp@x+2,?_exp+2
  8873                           
  8874                           ; BSR set to: 0
  8875  001000  0012               	return		;funcret
  8876  001002                     __end_of_exp:
  8877                           	opt stack 0
  8878                           tblptru	equ	0xFF8
  8879                           tblptrh	equ	0xFF7
  8880                           tblptrl	equ	0xFF6
  8881                           tablat	equ	0xFF5
  8882                           prodh	equ	0xFF4
  8883                           prodl	equ	0xFF3
  8884                           intcon	equ	0xFF2
  8885                           postinc0	equ	0xFEE
  8886                           plusw0	equ	0xFEB
  8887                           wreg	equ	0xFE8
  8888                           indf1	equ	0xFE7
  8889                           postinc1	equ	0xFE6
  8890                           postdec1	equ	0xFE5
  8891                           plusw1	equ	0xFE3
  8892                           fsr1h	equ	0xFE2
  8893                           fsr1l	equ	0xFE1
  8894                           indf2	equ	0xFDF
  8895                           postinc2	equ	0xFDE
  8896                           postdec2	equ	0xFDD
  8897                           plusw2	equ	0xFDB
  8898                           fsr2h	equ	0xFDA
  8899                           fsr2l	equ	0xFD9
  8900                           status	equ	0xFD8
  8901                           
  8902 ;; *************** function _ldexp *****************
  8903 ;; Defined at:
  8904 ;;		line 277 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\frexp.c"
  8905 ;; Parameters:    Size  Location     Type
  8906 ;;  value           3   69[BANK0 ] unsigned char 
  8907 ;;  newexp          2   72[BANK0 ] int 
  8908 ;; Auto vars:     Size  Location     Type
  8909 ;;		None
  8910 ;; Return value:  Size  Location     Type
  8911 ;;                  3   69[BANK0 ] int 
  8912 ;; Registers used:
  8913 ;;		wreg, status,2, status,0
  8914 ;; Tracked objects:
  8915 ;;		On entry : 3F/0
  8916 ;;		On exit  : 3F/0
  8917 ;;		Unchanged: 0/0
  8918 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8919 ;;      Params:         0       5       0       0       0       0       0       0       0
  8920 ;;      Locals:         0       0       0       0       0       0       0       0       0
  8921 ;;      Temps:          0       2       0       0       0       0       0       0       0
  8922 ;;      Totals:         0       7       0       0       0       0       0       0       0
  8923 ;;Total ram usage:        7 bytes
  8924 ;; Hardware stack levels used:    1
  8925 ;; Hardware stack levels required when called:    6
  8926 ;; This function calls:
  8927 ;;		Nothing
  8928 ;; This function is called by:
  8929 ;;		_exp
  8930 ;; This function uses a non-reentrant model
  8931 ;;
  8932                           
  8933                           	psect	text52
  8934  0021D6                     __ptext52:
  8935                           	opt stack 0
  8936  0021D6                     _ldexp:
  8937                           	opt stack 20
  8938                           
  8939                           ; BSR set to: 0
  8940                           
  8941                           ; BSR set to: 0
  8942                           ;incstack = 0
  8943  0021D6  51A5               	movf	ldexp@value& (0+255),w,b
  8944  0021D8  11A6               	iorwf	(ldexp@value+1)& (0+255),w,b
  8945  0021DA  11A7               	iorwf	(ldexp@value+2)& (0+255),w,b
  8946  0021DC  E104               	bnz	l3538
  8947                           
  8948                           ; BSR set to: 0
  8949  0021DE  6BA5               	clrf	?_ldexp& (0+255),b
  8950  0021E0  6BA6               	clrf	(?_ldexp+1)& (0+255),b
  8951  0021E2  6BA7               	clrf	(?_ldexp+2)& (0+255),b
  8952  0021E4  0012               	return	
  8953  0021E6                     l3538:
  8954                           
  8955                           ; BSR set to: 0
  8956  0021E6  51A7               	movf	(ldexp@value+2)& (0+255),w,b
  8957  0021E8  0B7F               	andlw	127
  8958  0021EA  6FAA               	movwf	??_ldexp& (0+255),b
  8959  0021EC  6BAB               	clrf	(??_ldexp+1)& (0+255),b
  8960  0021EE  90D8               	bcf	status,0,c
  8961  0021F0  37AA               	rlcf	??_ldexp& (0+255),f,b
  8962  0021F2  37AB               	rlcf	(??_ldexp+1)& (0+255),f,b
  8963  0021F4  51AA               	movf	??_ldexp& (0+255),w,b
  8964  0021F6  27A8               	addwf	ldexp@newexp& (0+255),f,b
  8965  0021F8  51AB               	movf	(??_ldexp+1)& (0+255),w,b
  8966  0021FA  23A9               	addwfc	(ldexp@newexp+1)& (0+255),f,b
  8967  0021FC  0E01               	movlw	1
  8968  0021FE  AFA6               	btfss	(ldexp@value+1)& (0+255),7,b
  8969  002200  0E00               	movlw	0
  8970  002202  27A8               	addwf	ldexp@newexp& (0+255),f,b
  8971  002204  0E00               	movlw	0
  8972  002206  23A9               	addwfc	(ldexp@newexp+1)& (0+255),f,b
  8973  002208  AFA9               	btfss	(ldexp@newexp+1)& (0+255),7,b
  8974  00220A  D004               	goto	l3544
  8975                           
  8976                           ; BSR set to: 0
  8977  00220C  6BA5               	clrf	?_ldexp& (0+255),b
  8978  00220E  6BA6               	clrf	(?_ldexp+1)& (0+255),b
  8979  002210  6BA7               	clrf	(?_ldexp+2)& (0+255),b
  8980  002212  0012               	return	
  8981  002214                     l3544:
  8982                           
  8983                           ; BSR set to: 0
  8984  002214  BFA9               	btfsc	(ldexp@newexp+1)& (0+255),7,b
  8985  002216  D00E               	goto	l3558
  8986  002218  05A9               	decf	(ldexp@newexp+1)& (0+255),w,b
  8987  00221A  E30C               	bnc	l3558
  8988                           
  8989                           ; BSR set to: 0
  8990  00221C  AFA7               	btfss	(ldexp@value+2)& (0+255),7,b
  8991  00221E  D005               	goto	l3554
  8992                           
  8993                           ; BSR set to: 0
  8994  002220  69A5               	setf	?_ldexp& (0+255),b
  8995  002222  0E7F               	movlw	127
  8996  002224  6FA6               	movwf	(?_ldexp+1)& (0+255),b
  8997  002226  69A7               	setf	(?_ldexp+2)& (0+255),b
  8998  002228  0CFF               	retlw	255
  8999  00222A                     l3554:
  9000                           
  9001                           ; BSR set to: 0
  9002  00222A  69A5               	setf	?_ldexp& (0+255),b
  9003  00222C  0E7F               	movlw	127
  9004  00222E  6FA6               	movwf	(?_ldexp+1)& (0+255),b
  9005  002230  6FA7               	movwf	(?_ldexp+2)& (0+255),b
  9006  002232  0C7F               	retlw	127
  9007  002234                     l3558:
  9008                           
  9009                           ; BSR set to: 0
  9010  002234  35A9               	rlcf	(ldexp@newexp+1)& (0+255),w,b
  9011  002236  31A9               	rrcf	(ldexp@newexp+1)& (0+255),w,b
  9012  002238  6FAB               	movwf	(??_ldexp+1)& (0+255),b
  9013  00223A  31A8               	rrcf	ldexp@newexp& (0+255),w,b
  9014  00223C  6FAA               	movwf	??_ldexp& (0+255),b
  9015  00223E  19A7               	xorwf	(ldexp@value+2)& (0+255),w,b
  9016  002240  0B80               	andlw	-128
  9017  002242  19AA               	xorwf	??_ldexp& (0+255),w,b
  9018  002244  6FA7               	movwf	(ldexp@value+2)& (0+255),b
  9019  002246  C0A8  F0AA         	movff	ldexp@newexp,??_ldexp
  9020  00224A  0E01               	movlw	1
  9021  00224C  17AA               	andwf	??_ldexp& (0+255),f,b
  9022  00224E  33AA               	rrcf	??_ldexp& (0+255),f,b
  9023  002250  33AA               	rrcf	??_ldexp& (0+255),f,b
  9024  002252  51A6               	movf	(ldexp@value+1)& (0+255),w,b
  9025  002254  19AA               	xorwf	??_ldexp& (0+255),w,b
  9026  002256  0B7F               	andlw	-129
  9027  002258  19AA               	xorwf	??_ldexp& (0+255),w,b
  9028  00225A  6FA6               	movwf	(ldexp@value+1)& (0+255),b
  9029                           
  9030                           ; BSR set to: 0
  9031  00225C  C0A5  F0A5         	movff	ldexp@value,?_ldexp
  9032  002260  C0A6  F0A6         	movff	ldexp@value+1,?_ldexp+1
  9033  002264  C0A7  F0A7         	movff	ldexp@value+2,?_ldexp+2
  9034                           
  9035                           ; BSR set to: 0
  9036  002268  0012               	return		;funcret
  9037  00226A                     __end_of_ldexp:
  9038                           	opt stack 0
  9039                           tblptru	equ	0xFF8
  9040                           tblptrh	equ	0xFF7
  9041                           tblptrl	equ	0xFF6
  9042                           tablat	equ	0xFF5
  9043                           prodh	equ	0xFF4
  9044                           prodl	equ	0xFF3
  9045                           intcon	equ	0xFF2
  9046                           postinc0	equ	0xFEE
  9047                           plusw0	equ	0xFEB
  9048                           wreg	equ	0xFE8
  9049                           indf1	equ	0xFE7
  9050                           postinc1	equ	0xFE6
  9051                           postdec1	equ	0xFE5
  9052                           plusw1	equ	0xFE3
  9053                           fsr1h	equ	0xFE2
  9054                           fsr1l	equ	0xFE1
  9055                           indf2	equ	0xFDF
  9056                           postinc2	equ	0xFDE
  9057                           postdec2	equ	0xFDD
  9058                           plusw2	equ	0xFDB
  9059                           fsr2h	equ	0xFDA
  9060                           fsr2l	equ	0xFD9
  9061                           status	equ	0xFD8
  9062                           
  9063 ;; *************** function _floor *****************
  9064 ;; Defined at:
  9065 ;;		line 13 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\floor.c"
  9066 ;; Parameters:    Size  Location     Type
  9067 ;;  x               3   62[BANK0 ] int 
  9068 ;; Auto vars:     Size  Location     Type
  9069 ;;  i               3   65[BANK0 ] int 
  9070 ;;  expon           2   68[BANK0 ] int 
  9071 ;; Return value:  Size  Location     Type
  9072 ;;                  3   62[BANK0 ] int 
  9073 ;; Registers used:
  9074 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  9075 ;; Tracked objects:
  9076 ;;		On entry : 3F/0
  9077 ;;		On exit  : 3F/0
  9078 ;;		Unchanged: 0/0
  9079 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  9080 ;;      Params:         0       3       0       0       0       0       0       0       0
  9081 ;;      Locals:         0       5       0       0       0       0       0       0       0
  9082 ;;      Temps:          0       0       0       0       0       0       0       0       0
  9083 ;;      Totals:         0       8       0       0       0       0       0       0       0
  9084 ;;Total ram usage:        8 bytes
  9085 ;; Hardware stack levels used:    1
  9086 ;; Hardware stack levels required when called:    8
  9087 ;; This function calls:
  9088 ;;		___altoft
  9089 ;;		___ftadd
  9090 ;;		___ftge
  9091 ;;		___fttol
  9092 ;;		_frexp
  9093 ;; This function is called by:
  9094 ;;		_exp
  9095 ;; This function uses a non-reentrant model
  9096 ;;
  9097                           
  9098                           	psect	text53
  9099  001C40                     __ptext53:
  9100                           	opt stack 0
  9101  001C40                     _floor:
  9102                           	opt stack 18
  9103                           
  9104                           ; BSR set to: 0
  9105                           
  9106                           ; BSR set to: 0
  9107                           ;incstack = 0
  9108  001C40  C09E  F060         	movff	floor@x,frexp@value
  9109  001C44  C09F  F061         	movff	floor@x+1,frexp@value+1
  9110  001C48  C0A0  F062         	movff	floor@x+2,frexp@value+2
  9111  001C4C  0EA4               	movlw	low floor@expon
  9112  001C4E  6F63               	movwf	frexp@eptr& (0+255),b
  9113  001C50  ECBB  F013         	call	_frexp	;wreg free
  9114                           
  9115                           ; BSR set to: 0
  9116  001C54  AFA5               	btfss	(floor@expon+1)& (0+255),7,b
  9117  001C56  D00C               	goto	l3518
  9118                           
  9119                           ; BSR set to: 0
  9120  001C58  AFA0               	btfss	(floor@x+2)& (0+255),7,b
  9121  001C5A  D006               	goto	l1317
  9122                           
  9123                           ; BSR set to: 0
  9124  001C5C  6B9E               	clrf	?_floor& (0+255),b
  9125  001C5E  0E80               	movlw	128
  9126  001C60  6F9F               	movwf	(?_floor+1)& (0+255),b
  9127  001C62  0EBF               	movlw	191
  9128  001C64  6FA0               	movwf	(?_floor+2)& (0+255),b
  9129  001C66  0CBF               	retlw	191
  9130  001C68                     l1317:
  9131                           
  9132                           ; BSR set to: 0
  9133  001C68  6B9E               	clrf	?_floor& (0+255),b
  9134  001C6A  6B9F               	clrf	(?_floor+1)& (0+255),b
  9135  001C6C  6BA0               	clrf	(?_floor+2)& (0+255),b
  9136  001C6E  0012               	return	
  9137  001C70                     l3518:
  9138                           
  9139                           ; BSR set to: 0
  9140  001C70  51A5               	movf	(floor@expon+1)& (0+255),w,b
  9141  001C72  E103               	bnz	u3410
  9142  001C74  0E15               	movlw	21
  9143  001C76  5DA4               	subwf	floor@expon& (0+255),w,b
  9144  001C78  E307               	bnc	l3522
  9145  001C7A                     u3410:
  9146                           
  9147                           ; BSR set to: 0
  9148  001C7A  C09E  F09E         	movff	floor@x,?_floor
  9149  001C7E  C09F  F09F         	movff	floor@x+1,?_floor+1
  9150  001C82  C0A0  F0A0         	movff	floor@x+2,?_floor+2
  9151  001C86  0012               	return	
  9152  001C88                     l3522:
  9153                           
  9154                           ; BSR set to: 0
  9155  001C88  C09E  F08F         	movff	floor@x,___fttol@f1
  9156  001C8C  C09F  F090         	movff	floor@x+1,___fttol@f1+1
  9157  001C90  C0A0  F091         	movff	floor@x+2,___fttol@f1+2
  9158  001C94  ECEB  F00E         	call	___fttol	;wreg free
  9159  001C98  C08F  F068         	movff	?___fttol,___altoft@c
  9160  001C9C  C090  F069         	movff	?___fttol+1,___altoft@c+1
  9161  001CA0  C091  F06A         	movff	?___fttol+2,___altoft@c+2
  9162  001CA4  C092  F06B         	movff	?___fttol+3,___altoft@c+3
  9163  001CA8  EC91  F014         	call	___altoft	;wreg free
  9164  001CAC  C068  F0A1         	movff	?___altoft,floor@i
  9165  001CB0  C069  F0A2         	movff	?___altoft+1,floor@i+1
  9166  001CB4  C06A  F0A3         	movff	?___altoft+2,floor@i+2
  9167  001CB8  C09E  F060         	movff	floor@x,___ftge@ff1
  9168  001CBC  C09F  F061         	movff	floor@x+1,___ftge@ff1+1
  9169  001CC0  C0A0  F062         	movff	floor@x+2,___ftge@ff1+2
  9170  001CC4  C0A1  F063         	movff	floor@i,___ftge@ff2
  9171  001CC8  C0A2  F064         	movff	floor@i+1,___ftge@ff2+1
  9172  001CCC  C0A3  F065         	movff	floor@i+2,___ftge@ff2+2
  9173  001CD0  EC23  F015         	call	___ftge	;wreg free
  9174  001CD4  E214               	bc	l1320
  9175                           
  9176                           ; BSR set to: 0
  9177  001CD6  C0A1  F08F         	movff	floor@i,___ftadd@f1
  9178  001CDA  C0A2  F090         	movff	floor@i+1,___ftadd@f1+1
  9179  001CDE  C0A3  F091         	movff	floor@i+2,___ftadd@f1+2
  9180  001CE2  6B92               	clrf	___ftadd@f2& (0+255),b
  9181  001CE4  0E80               	movlw	128
  9182  001CE6  6F93               	movwf	(___ftadd@f2+1)& (0+255),b
  9183  001CE8  0EBF               	movlw	191
  9184  001CEA  6F94               	movwf	(___ftadd@f2+2)& (0+255),b
  9185  001CEC  ECD3  F008         	call	___ftadd	;wreg free
  9186  001CF0  C08F  F09E         	movff	?___ftadd,?_floor
  9187  001CF4  C090  F09F         	movff	?___ftadd+1,?_floor+1
  9188  001CF8  C091  F0A0         	movff	?___ftadd+2,?_floor+2
  9189  001CFC  0012               	return	
  9190  001CFE                     l1320:
  9191                           
  9192                           ; BSR set to: 0
  9193  001CFE  C0A1  F09E         	movff	floor@i,?_floor
  9194  001D02  C0A2  F09F         	movff	floor@i+1,?_floor+1
  9195  001D06  C0A3  F0A0         	movff	floor@i+2,?_floor+2
  9196                           
  9197                           ; BSR set to: 0
  9198  001D0A  0012               	return		;funcret
  9199  001D0C                     __end_of_floor:
  9200                           	opt stack 0
  9201                           tblptru	equ	0xFF8
  9202                           tblptrh	equ	0xFF7
  9203                           tblptrl	equ	0xFF6
  9204                           tablat	equ	0xFF5
  9205                           prodh	equ	0xFF4
  9206                           prodl	equ	0xFF3
  9207                           intcon	equ	0xFF2
  9208                           postinc0	equ	0xFEE
  9209                           plusw0	equ	0xFEB
  9210                           wreg	equ	0xFE8
  9211                           indf1	equ	0xFE7
  9212                           postinc1	equ	0xFE6
  9213                           postdec1	equ	0xFE5
  9214                           plusw1	equ	0xFE3
  9215                           fsr1h	equ	0xFE2
  9216                           fsr1l	equ	0xFE1
  9217                           indf2	equ	0xFDF
  9218                           postinc2	equ	0xFDE
  9219                           postdec2	equ	0xFDD
  9220                           plusw2	equ	0xFDB
  9221                           fsr2h	equ	0xFDA
  9222                           fsr2l	equ	0xFD9
  9223                           status	equ	0xFD8
  9224                           
  9225 ;; *************** function _frexp *****************
  9226 ;; Defined at:
  9227 ;;		line 254 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\frexp.c"
  9228 ;; Parameters:    Size  Location     Type
  9229 ;;  value           3    0[BANK0 ] int 
  9230 ;;  eptr            1    3[BANK0 ] PTR int 
  9231 ;;		 -> log@exponent(2), floor@expon(2), 
  9232 ;; Auto vars:     Size  Location     Type
  9233 ;;		None
  9234 ;; Return value:  Size  Location     Type
  9235 ;;                  3    0[BANK0 ] PTR int 
  9236 ;; Registers used:
  9237 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  9238 ;; Tracked objects:
  9239 ;;		On entry : 3F/0
  9240 ;;		On exit  : 3F/0
  9241 ;;		Unchanged: 0/0
  9242 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  9243 ;;      Params:         0       4       0       0       0       0       0       0       0
  9244 ;;      Locals:         0       0       0       0       0       0       0       0       0
  9245 ;;      Temps:          0       2       0       0       0       0       0       0       0
  9246 ;;      Totals:         0       6       0       0       0       0       0       0       0
  9247 ;;Total ram usage:        6 bytes
  9248 ;; Hardware stack levels used:    1
  9249 ;; Hardware stack levels required when called:    6
  9250 ;; This function calls:
  9251 ;;		Nothing
  9252 ;; This function is called by:
  9253 ;;		_floor
  9254 ;;		_log
  9255 ;; This function uses a non-reentrant model
  9256 ;;
  9257                           
  9258                           	psect	text54
  9259  002776                     __ptext54:
  9260                           	opt stack 0
  9261  002776                     _frexp:
  9262                           	opt stack 20
  9263                           
  9264                           ; BSR set to: 0
  9265                           
  9266                           ; BSR set to: 0
  9267                           ;incstack = 0
  9268  002776  5160               	movf	frexp@value& (0+255),w,b
  9269  002778  1161               	iorwf	(frexp@value+1)& (0+255),w,b
  9270  00277A  1162               	iorwf	(frexp@value+2)& (0+255),w,b
  9271  00277C  E10A               	bnz	l3404
  9272                           
  9273                           ; BSR set to: 0
  9274  00277E  5163               	movf	frexp@eptr& (0+255),w,b
  9275  002780  6ED9               	movwf	fsr2l,c
  9276  002782  6ADA               	clrf	fsr2h,c
  9277  002784  0E00               	movlw	0
  9278  002786  6ADE               	clrf	postinc2,c
  9279  002788  6ADD               	clrf	postdec2,c
  9280                           
  9281                           ; BSR set to: 0
  9282  00278A  6B60               	clrf	?_frexp& (0+255),b
  9283  00278C  6B61               	clrf	(?_frexp+1)& (0+255),b
  9284  00278E  6B62               	clrf	(?_frexp+2)& (0+255),b
  9285  002790  0012               	return	
  9286  002792                     l3404:
  9287                           
  9288                           ; BSR set to: 0
  9289  002792  5162               	movf	(frexp@value+2)& (0+255),w,b
  9290  002794  0B7F               	andlw	127
  9291  002796  6F64               	movwf	??_frexp& (0+255),b
  9292  002798  6B65               	clrf	(??_frexp+1)& (0+255),b
  9293  00279A  90D8               	bcf	status,0,c
  9294  00279C  3764               	rlcf	??_frexp& (0+255),f,b
  9295  00279E  3765               	rlcf	(??_frexp+1)& (0+255),f,b
  9296  0027A0  5163               	movf	frexp@eptr& (0+255),w,b
  9297  0027A2  6ED9               	movwf	fsr2l,c
  9298  0027A4  6ADA               	clrf	fsr2h,c
  9299  0027A6  C064  FFDE         	movff	??_frexp,postinc2
  9300  0027AA  C065  FFDD         	movff	??_frexp+1,postdec2
  9301  0027AE  5163               	movf	frexp@eptr& (0+255),w,b
  9302  0027B0  6ED9               	movwf	fsr2l,c
  9303  0027B2  6ADA               	clrf	fsr2h,c
  9304  0027B4  0E01               	movlw	1
  9305  0027B6  AF61               	btfss	(frexp@value+1)& (0+255),7,b
  9306  0027B8  0E00               	movlw	0
  9307  0027BA  12DE               	iorwf	postinc2,f,c
  9308  0027BC  0E00               	movlw	0
  9309  0027BE  12DD               	iorwf	postdec2,f,c
  9310                           
  9311                           ; BSR set to: 0
  9312  0027C0  5163               	movf	frexp@eptr& (0+255),w,b
  9313  0027C2  6ED9               	movwf	fsr2l,c
  9314  0027C4  6ADA               	clrf	fsr2h,c
  9315  0027C6  0E82               	movlw	130
  9316  0027C8  26DE               	addwf	postinc2,f,c
  9317  0027CA  0EFF               	movlw	255
  9318  0027CC  22DD               	addwfc	postdec2,f,c
  9319                           
  9320                           ; BSR set to: 0
  9321  0027CE  5162               	movf	(frexp@value+2)& (0+255),w,b
  9322  0027D0  0B80               	andlw	-128
  9323  0027D2  093F               	iorlw	63
  9324  0027D4  6F62               	movwf	(frexp@value+2)& (0+255),b
  9325                           
  9326                           ; BSR set to: 0
  9327  0027D6  9F61               	bcf	(frexp@value+1)& (0+255),7,b
  9328                           
  9329                           ; BSR set to: 0
  9330  0027D8  C060  F060         	movff	frexp@value,?_frexp
  9331  0027DC  C061  F061         	movff	frexp@value+1,?_frexp+1
  9332  0027E0  C062  F062         	movff	frexp@value+2,?_frexp+2
  9333                           
  9334                           ; BSR set to: 0
  9335  0027E4  0012               	return		;funcret
  9336  0027E6                     __end_of_frexp:
  9337                           	opt stack 0
  9338                           tblptru	equ	0xFF8
  9339                           tblptrh	equ	0xFF7
  9340                           tblptrl	equ	0xFF6
  9341                           tablat	equ	0xFF5
  9342                           prodh	equ	0xFF4
  9343                           prodl	equ	0xFF3
  9344                           intcon	equ	0xFF2
  9345                           postinc0	equ	0xFEE
  9346                           plusw0	equ	0xFEB
  9347                           wreg	equ	0xFE8
  9348                           indf1	equ	0xFE7
  9349                           postinc1	equ	0xFE6
  9350                           postdec1	equ	0xFE5
  9351                           plusw1	equ	0xFE3
  9352                           fsr1h	equ	0xFE2
  9353                           fsr1l	equ	0xFE1
  9354                           indf2	equ	0xFDF
  9355                           postinc2	equ	0xFDE
  9356                           postdec2	equ	0xFDD
  9357                           plusw2	equ	0xFDB
  9358                           fsr2h	equ	0xFDA
  9359                           fsr2l	equ	0xFD9
  9360                           status	equ	0xFD8
  9361                           
  9362 ;; *************** function ___fttol *****************
  9363 ;; Defined at:
  9364 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\fttol.c"
  9365 ;; Parameters:    Size  Location     Type
  9366 ;;  f1              3   47[BANK0 ] float 
  9367 ;; Auto vars:     Size  Location     Type
  9368 ;;  lval            4   57[BANK0 ] unsigned long 
  9369 ;;  exp1            1   61[BANK0 ] unsigned char 
  9370 ;;  sign1           1   56[BANK0 ] unsigned char 
  9371 ;; Return value:  Size  Location     Type
  9372 ;;                  4   47[BANK0 ] long 
  9373 ;; Registers used:
  9374 ;;		wreg, status,2, status,0
  9375 ;; Tracked objects:
  9376 ;;		On entry : 3F/0
  9377 ;;		On exit  : 3F/0
  9378 ;;		Unchanged: 0/0
  9379 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  9380 ;;      Params:         0       4       0       0       0       0       0       0       0
  9381 ;;      Locals:         0       6       0       0       0       0       0       0       0
  9382 ;;      Temps:          0       5       0       0       0       0       0       0       0
  9383 ;;      Totals:         0      15       0       0       0       0       0       0       0
  9384 ;;Total ram usage:       15 bytes
  9385 ;; Hardware stack levels used:    1
  9386 ;; Hardware stack levels required when called:    6
  9387 ;; This function calls:
  9388 ;;		Nothing
  9389 ;; This function is called by:
  9390 ;;		_Display_Init
  9391 ;;		_Sequencer_StartTimer
  9392 ;;		_InitDigiPot
  9393 ;;		_Zip
  9394 ;;		_UnZip
  9395 ;;		_I2C_Init
  9396 ;;		_pow
  9397 ;;		_exp
  9398 ;;		_floor
  9399 ;; This function uses a non-reentrant model
  9400 ;;
  9401                           
  9402                           	psect	text55
  9403  001DD6                     __ptext55:
  9404                           	opt stack 0
  9405  001DD6                     ___fttol:
  9406                           	opt stack 23
  9407                           
  9408                           ; BSR set to: 0
  9409                           
  9410                           ; BSR set to: 0
  9411                           ;incstack = 0
  9412  001DD6  C091  F093         	movff	___fttol@f1+2,??___fttol
  9413  001DDA  6B94               	clrf	(??___fttol+1)& (0+255),b
  9414  001DDC  6B95               	clrf	(??___fttol+2)& (0+255),b
  9415  001DDE  3590               	rlcf	(___fttol@f1+1)& (0+255),w,b
  9416  001DE0  3793               	rlcf	??___fttol& (0+255),f,b
  9417  001DE2  E301               	bnc	u3151
  9418  001DE4  8194               	bsf	(??___fttol+1)& (0+255),0,b
  9419  001DE6                     u3151:
  9420  001DE6  5193               	movf	??___fttol& (0+255),w,b
  9421  001DE8  6F9D               	movwf	___fttol@exp1& (0+255),b
  9422  001DEA  519D               	movf	___fttol@exp1& (0+255),w,b
  9423  001DEC  E105               	bnz	l3360
  9424  001DEE                     u3160:
  9425                           
  9426                           ; BSR set to: 0
  9427  001DEE  6B8F               	clrf	?___fttol& (0+255),b
  9428  001DF0  6B90               	clrf	(?___fttol+1)& (0+255),b
  9429  001DF2  6B91               	clrf	(?___fttol+2)& (0+255),b
  9430  001DF4  6B92               	clrf	(?___fttol+3)& (0+255),b
  9431  001DF6  0012               	return	
  9432  001DF8                     l3360:
  9433                           
  9434                           ; BSR set to: 0
  9435  001DF8  0E17               	movlw	23
  9436  001DFA  6F93               	movwf	??___fttol& (0+255),b
  9437  001DFC  C08F  F094         	movff	___fttol@f1,??___fttol+1
  9438  001E00  C090  F095         	movff	___fttol@f1+1,??___fttol+2
  9439  001E04  C091  F096         	movff	___fttol@f1+2,??___fttol+3
  9440  001E08  2993               	incf	??___fttol& (0+255),w,b
  9441  001E0A  6F97               	movwf	(??___fttol+4)& (0+255),b
  9442  001E0C  D004               	goto	u3170
  9443  001E0E                     u3175:
  9444  001E0E  90D8               	bcf	status,0,c
  9445  001E10  3396               	rrcf	(??___fttol+3)& (0+255),f,b
  9446  001E12  3395               	rrcf	(??___fttol+2)& (0+255),f,b
  9447  001E14  3394               	rrcf	(??___fttol+1)& (0+255),f,b
  9448  001E16                     u3170:
  9449  001E16  2F97               	decfsz	(??___fttol+4)& (0+255),f,b
  9450  001E18  D7FA               	goto	u3175
  9451  001E1A  0100               	movlb	0	; () banked
  9452  001E1C  5194               	movf	(??___fttol+1)& (0+255),w,b
  9453  001E1E  6F98               	movwf	___fttol@sign1& (0+255),b
  9454                           
  9455                           ; BSR set to: 0
  9456  001E20  8F90               	bsf	(___fttol@f1+1)& (0+255),7,b
  9457                           
  9458                           ; BSR set to: 0
  9459  001E22  6B91               	clrf	(___fttol@f1+2)& (0+255),b
  9460                           
  9461                           ; BSR set to: 0
  9462  001E24  518F               	movf	___fttol@f1& (0+255),w,b
  9463  001E26  6F99               	movwf	___fttol@lval& (0+255),b
  9464  001E28  5190               	movf	(___fttol@f1+1)& (0+255),w,b
  9465  001E2A  6F9A               	movwf	(___fttol@lval+1)& (0+255),b
  9466  001E2C  5191               	movf	(___fttol@f1+2)& (0+255),w,b
  9467  001E2E  6F9B               	movwf	(___fttol@lval+2)& (0+255),b
  9468  001E30  6B9C               	clrf	(___fttol@lval+3)& (0+255),b
  9469                           
  9470                           ; BSR set to: 0
  9471  001E32  0E8E               	movlw	142
  9472  001E34  5F9D               	subwf	___fttol@exp1& (0+255),f,b
  9473                           
  9474                           ; BSR set to: 0
  9475  001E36  AF9D               	btfss	___fttol@exp1& (0+255),7,b
  9476  001E38  D00C               	goto	l3380
  9477                           
  9478                           ; BSR set to: 0
  9479  001E3A  519D               	movf	___fttol@exp1& (0+255),w,b
  9480  001E3C  0A80               	xorlw	128
  9481  001E3E  0F8F               	addlw	143
  9482  001E40  E3D6               	bnc	u3160
  9483  001E42                     l3376:
  9484                           
  9485                           ; BSR set to: 0
  9486  001E42  90D8               	bcf	status,0,c
  9487  001E44  339C               	rrcf	(___fttol@lval+3)& (0+255),f,b
  9488  001E46  339B               	rrcf	(___fttol@lval+2)& (0+255),f,b
  9489  001E48  339A               	rrcf	(___fttol@lval+1)& (0+255),f,b
  9490  001E4A  3399               	rrcf	___fttol@lval& (0+255),f,b
  9491                           
  9492                           ; BSR set to: 0
  9493  001E4C  3F9D               	incfsz	___fttol@exp1& (0+255),f,b
  9494  001E4E  D7F9               	goto	l3376
  9495  001E50  D00C               	goto	u3210
  9496  001E52                     l3380:
  9497                           
  9498                           ; BSR set to: 0
  9499  001E52  0E17               	movlw	23
  9500  001E54  659D               	cpfsgt	___fttol@exp1& (0+255),b
  9501  001E56  D007               	goto	l3386
  9502  001E58  D7CA               	goto	u3160
  9503  001E5A                     l3384:
  9504                           
  9505                           ; BSR set to: 0
  9506  001E5A  90D8               	bcf	status,0,c
  9507  001E5C  3799               	rlcf	___fttol@lval& (0+255),f,b
  9508  001E5E  379A               	rlcf	(___fttol@lval+1)& (0+255),f,b
  9509  001E60  379B               	rlcf	(___fttol@lval+2)& (0+255),f,b
  9510  001E62  379C               	rlcf	(___fttol@lval+3)& (0+255),f,b
  9511  001E64  079D               	decf	___fttol@exp1& (0+255),f,b
  9512  001E66                     l3386:
  9513                           
  9514                           ; BSR set to: 0
  9515  001E66  519D               	movf	___fttol@exp1& (0+255),w,b
  9516  001E68  E1F8               	bnz	l3384
  9517  001E6A                     u3210:
  9518                           
  9519                           ; BSR set to: 0
  9520  001E6A  5198               	movf	___fttol@sign1& (0+255),w,b
  9521  001E6C  E008               	bz	l3392
  9522                           
  9523                           ; BSR set to: 0
  9524  001E6E  1F9C               	comf	(___fttol@lval+3)& (0+255),f,b
  9525  001E70  1F9B               	comf	(___fttol@lval+2)& (0+255),f,b
  9526  001E72  1F9A               	comf	(___fttol@lval+1)& (0+255),f,b
  9527  001E74  6D99               	negf	___fttol@lval& (0+255),b
  9528  001E76  0E00               	movlw	0
  9529  001E78  239A               	addwfc	(___fttol@lval+1)& (0+255),f,b
  9530  001E7A  239B               	addwfc	(___fttol@lval+2)& (0+255),f,b
  9531  001E7C  239C               	addwfc	(___fttol@lval+3)& (0+255),f,b
  9532  001E7E                     l3392:
  9533                           
  9534                           ; BSR set to: 0
  9535  001E7E  C099  F08F         	movff	___fttol@lval,?___fttol
  9536  001E82  C09A  F090         	movff	___fttol@lval+1,?___fttol+1
  9537  001E86  C09B  F091         	movff	___fttol@lval+2,?___fttol+2
  9538  001E8A  C09C  F092         	movff	___fttol@lval+3,?___fttol+3
  9539                           
  9540                           ; BSR set to: 0
  9541  001E8E  0012               	return		;funcret
  9542  001E90                     __end_of___fttol:
  9543                           	opt stack 0
  9544                           tblptru	equ	0xFF8
  9545                           tblptrh	equ	0xFF7
  9546                           tblptrl	equ	0xFF6
  9547                           tablat	equ	0xFF5
  9548                           prodh	equ	0xFF4
  9549                           prodl	equ	0xFF3
  9550                           intcon	equ	0xFF2
  9551                           postinc0	equ	0xFEE
  9552                           plusw0	equ	0xFEB
  9553                           wreg	equ	0xFE8
  9554                           indf1	equ	0xFE7
  9555                           postinc1	equ	0xFE6
  9556                           postdec1	equ	0xFE5
  9557                           plusw1	equ	0xFE3
  9558                           fsr1h	equ	0xFE2
  9559                           fsr1l	equ	0xFE1
  9560                           indf2	equ	0xFDF
  9561                           postinc2	equ	0xFDE
  9562                           postdec2	equ	0xFDD
  9563                           plusw2	equ	0xFDB
  9564                           fsr2h	equ	0xFDA
  9565                           fsr2l	equ	0xFD9
  9566                           status	equ	0xFD8
  9567                           
  9568 ;; *************** function ___ftge *****************
  9569 ;; Defined at:
  9570 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\ftge.c"
  9571 ;; Parameters:    Size  Location     Type
  9572 ;;  ff1             3    0[BANK0 ] float 
  9573 ;;  ff2             3    3[BANK0 ] float 
  9574 ;; Auto vars:     Size  Location     Type
  9575 ;;		None
  9576 ;; Return value:  Size  Location     Type
  9577 ;;		None               void
  9578 ;; Registers used:
  9579 ;;		wreg, status,2, status,0
  9580 ;; Tracked objects:
  9581 ;;		On entry : 3F/0
  9582 ;;		On exit  : 3F/0
  9583 ;;		Unchanged: 0/0
  9584 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  9585 ;;      Params:         0       6       0       0       0       0       0       0       0
  9586 ;;      Locals:         0       0       0       0       0       0       0       0       0
  9587 ;;      Temps:          0       3       0       0       0       0       0       0       0
  9588 ;;      Totals:         0       9       0       0       0       0       0       0       0
  9589 ;;Total ram usage:        9 bytes
  9590 ;; Hardware stack levels used:    1
  9591 ;; Hardware stack levels required when called:    6
  9592 ;; This function calls:
  9593 ;;		Nothing
  9594 ;; This function is called by:
  9595 ;;		_pow
  9596 ;;		_exp
  9597 ;;		_floor
  9598 ;; This function uses a non-reentrant model
  9599 ;;
  9600                           
  9601                           	psect	text56
  9602  002A46                     __ptext56:
  9603                           	opt stack 0
  9604  002A46                     ___ftge:
  9605                           	opt stack 19
  9606                           
  9607                           ; BSR set to: 0
  9608                           
  9609                           ; BSR set to: 0
  9610                           ;incstack = 0
  9611  002A46  AF62               	btfss	(___ftge@ff1+2)& (0+255),7,b
  9612  002A48  D00D               	goto	l3342
  9613                           
  9614                           ; BSR set to: 0
  9615  002A4A  6B66               	clrf	??___ftge& (0+255),b
  9616  002A4C  6B67               	clrf	(??___ftge+1)& (0+255),b
  9617  002A4E  0E80               	movlw	128
  9618  002A50  6F68               	movwf	(??___ftge+2)& (0+255),b
  9619  002A52  5160               	movf	___ftge@ff1& (0+255),w,b
  9620  002A54  5D66               	subwf	??___ftge& (0+255),w,b
  9621  002A56  6F60               	movwf	___ftge@ff1& (0+255),b
  9622  002A58  5161               	movf	(___ftge@ff1+1)& (0+255),w,b
  9623  002A5A  5967               	subwfb	(??___ftge+1)& (0+255),w,b
  9624  002A5C  6F61               	movwf	(___ftge@ff1+1)& (0+255),b
  9625  002A5E  5162               	movf	(___ftge@ff1+2)& (0+255),w,b
  9626  002A60  5968               	subwfb	(??___ftge+2)& (0+255),w,b
  9627  002A62  6F62               	movwf	(___ftge@ff1+2)& (0+255),b
  9628  002A64                     l3342:
  9629                           
  9630                           ; BSR set to: 0
  9631  002A64  AF65               	btfss	(___ftge@ff2+2)& (0+255),7,b
  9632  002A66  D00D               	goto	l3346
  9633                           
  9634                           ; BSR set to: 0
  9635  002A68  6B66               	clrf	??___ftge& (0+255),b
  9636  002A6A  6B67               	clrf	(??___ftge+1)& (0+255),b
  9637  002A6C  0E80               	movlw	128
  9638  002A6E  6F68               	movwf	(??___ftge+2)& (0+255),b
  9639  002A70  5163               	movf	___ftge@ff2& (0+255),w,b
  9640  002A72  5D66               	subwf	??___ftge& (0+255),w,b
  9641  002A74  6F63               	movwf	___ftge@ff2& (0+255),b
  9642  002A76  5164               	movf	(___ftge@ff2+1)& (0+255),w,b
  9643  002A78  5967               	subwfb	(??___ftge+1)& (0+255),w,b
  9644  002A7A  6F64               	movwf	(___ftge@ff2+1)& (0+255),b
  9645  002A7C  5165               	movf	(___ftge@ff2+2)& (0+255),w,b
  9646  002A7E  5968               	subwfb	(??___ftge+2)& (0+255),w,b
  9647  002A80  6F65               	movwf	(___ftge@ff2+2)& (0+255),b
  9648  002A82                     l3346:
  9649                           
  9650                           ; BSR set to: 0
  9651  002A82  0E80               	movlw	128
  9652  002A84  1B62               	xorwf	(___ftge@ff1+2)& (0+255),f,b
  9653                           
  9654                           ; BSR set to: 0
  9655  002A86  1B65               	xorwf	(___ftge@ff2+2)& (0+255),f,b
  9656  002A88  5163               	movf	___ftge@ff2& (0+255),w,b
  9657  002A8A  5D60               	subwf	___ftge@ff1& (0+255),w,b
  9658  002A8C  5164               	movf	(___ftge@ff2+1)& (0+255),w,b
  9659  002A8E  5961               	subwfb	(___ftge@ff1+1)& (0+255),w,b
  9660  002A90  5165               	movf	(___ftge@ff2+2)& (0+255),w,b
  9661  002A92  5962               	subwfb	(___ftge@ff1+2)& (0+255),w,b
  9662  002A94  E202               	bc	l3352
  9663                           
  9664                           ; BSR set to: 0
  9665  002A96  90D8               	bcf	status,0,c
  9666  002A98  0012               	return	
  9667  002A9A                     l3352:
  9668                           
  9669                           ; BSR set to: 0
  9670  002A9A  80D8               	bsf	status,0,c
  9671                           
  9672                           ; BSR set to: 0
  9673  002A9C  0012               	return		;funcret
  9674  002A9E                     __end_of___ftge:
  9675                           	opt stack 0
  9676                           tblptru	equ	0xFF8
  9677                           tblptrh	equ	0xFF7
  9678                           tblptrl	equ	0xFF6
  9679                           tablat	equ	0xFF5
  9680                           prodh	equ	0xFF4
  9681                           prodl	equ	0xFF3
  9682                           intcon	equ	0xFF2
  9683                           postinc0	equ	0xFEE
  9684                           plusw0	equ	0xFEB
  9685                           wreg	equ	0xFE8
  9686                           indf1	equ	0xFE7
  9687                           postinc1	equ	0xFE6
  9688                           postdec1	equ	0xFE5
  9689                           plusw1	equ	0xFE3
  9690                           fsr1h	equ	0xFE2
  9691                           fsr1l	equ	0xFE1
  9692                           indf2	equ	0xFDF
  9693                           postinc2	equ	0xFDE
  9694                           postdec2	equ	0xFDD
  9695                           plusw2	equ	0xFDB
  9696                           fsr2h	equ	0xFDA
  9697                           fsr2l	equ	0xFD9
  9698                           status	equ	0xFD8
  9699                           
  9700 ;; *************** function ___altoft *****************
  9701 ;; Defined at:
  9702 ;;		line 42 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\altoft.c"
  9703 ;; Parameters:    Size  Location     Type
  9704 ;;  c               4    8[BANK0 ] long 
  9705 ;; Auto vars:     Size  Location     Type
  9706 ;;  sign            1   17[BANK0 ] unsigned char 
  9707 ;;  exp             1   16[BANK0 ] unsigned char 
  9708 ;; Return value:  Size  Location     Type
  9709 ;;                  3    8[BANK0 ] float 
  9710 ;; Registers used:
  9711 ;;		wreg, status,2, status,0, cstack
  9712 ;; Tracked objects:
  9713 ;;		On entry : 3F/0
  9714 ;;		On exit  : 3F/0
  9715 ;;		Unchanged: 0/0
  9716 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  9717 ;;      Params:         0       4       0       0       0       0       0       0       0
  9718 ;;      Locals:         0       2       0       0       0       0       0       0       0
  9719 ;;      Temps:          0       4       0       0       0       0       0       0       0
  9720 ;;      Totals:         0      10       0       0       0       0       0       0       0
  9721 ;;Total ram usage:       10 bytes
  9722 ;; Hardware stack levels used:    1
  9723 ;; Hardware stack levels required when called:    7
  9724 ;; This function calls:
  9725 ;;		___ftpack
  9726 ;; This function is called by:
  9727 ;;		_InitDigiPot
  9728 ;;		_I2C_Init
  9729 ;;		_floor
  9730 ;; This function uses a non-reentrant model
  9731 ;;
  9732                           
  9733                           	psect	text57
  9734  002922                     __ptext57:
  9735                           	opt stack 0
  9736  002922                     ___altoft:
  9737                           	opt stack 20
  9738                           
  9739                           ; BSR set to: 0
  9740                           
  9741                           ; BSR set to: 0
  9742                           ;incstack = 0
  9743  002922  6B71               	clrf	___altoft@sign& (0+255),b
  9744                           
  9745                           ; BSR set to: 0
  9746  002924  0E8E               	movlw	142
  9747  002926  6F70               	movwf	___altoft@exp& (0+255),b
  9748                           
  9749                           ; BSR set to: 0
  9750  002928  AF6B               	btfss	(___altoft@c+3)& (0+255),7,b
  9751  00292A  D011               	goto	l3230
  9752                           
  9753                           ; BSR set to: 0
  9754  00292C  1F6B               	comf	(___altoft@c+3)& (0+255),f,b
  9755  00292E  1F6A               	comf	(___altoft@c+2)& (0+255),f,b
  9756  002930  1F69               	comf	(___altoft@c+1)& (0+255),f,b
  9757  002932  6D68               	negf	___altoft@c& (0+255),b
  9758  002934  0E00               	movlw	0
  9759  002936  2369               	addwfc	(___altoft@c+1)& (0+255),f,b
  9760  002938  236A               	addwfc	(___altoft@c+2)& (0+255),f,b
  9761  00293A  236B               	addwfc	(___altoft@c+3)& (0+255),f,b
  9762                           
  9763                           ; BSR set to: 0
  9764  00293C  0E01               	movlw	1
  9765  00293E  6F71               	movwf	___altoft@sign& (0+255),b
  9766  002940  D006               	goto	l3230
  9767  002942                     l3228:
  9768                           
  9769                           ; BSR set to: 0
  9770  002942  90D8               	bcf	status,0,c
  9771  002944  336B               	rrcf	(___altoft@c+3)& (0+255),f,b
  9772  002946  336A               	rrcf	(___altoft@c+2)& (0+255),f,b
  9773  002948  3369               	rrcf	(___altoft@c+1)& (0+255),f,b
  9774  00294A  3368               	rrcf	___altoft@c& (0+255),f,b
  9775  00294C  2B70               	incf	___altoft@exp& (0+255),f,b
  9776  00294E                     l3230:
  9777                           
  9778                           ; BSR set to: 0
  9779  00294E  6B6C               	clrf	??___altoft& (0+255),b
  9780  002950  6B6D               	clrf	(??___altoft+1)& (0+255),b
  9781  002952  6B6E               	clrf	(??___altoft+2)& (0+255),b
  9782  002954  516B               	movf	(___altoft@c+3)& (0+255),w,b
  9783  002956  6F6F               	movwf	(??___altoft+3)& (0+255),b
  9784  002958  516C               	movf	??___altoft& (0+255),w,b
  9785  00295A  116D               	iorwf	(??___altoft+1)& (0+255),w,b
  9786  00295C  116E               	iorwf	(??___altoft+2)& (0+255),w,b
  9787  00295E  116F               	iorwf	(??___altoft+3)& (0+255),w,b
  9788  002960  E1F0               	bnz	l3228
  9789                           
  9790                           ; BSR set to: 0
  9791  002962  C068  F060         	movff	___altoft@c,___ftpack@arg
  9792  002966  C069  F061         	movff	___altoft@c+1,___ftpack@arg+1
  9793  00296A  C06A  F062         	movff	___altoft@c+2,___ftpack@arg+2
  9794  00296E  C070  F063         	movff	___altoft@exp,___ftpack@exp
  9795  002972  C071  F064         	movff	___altoft@sign,___ftpack@sign
  9796  002976  ECC3  F011         	call	___ftpack	;wreg free
  9797  00297A  C060  F068         	movff	?___ftpack,?___altoft
  9798  00297E  C061  F069         	movff	?___ftpack+1,?___altoft+1
  9799  002982  C062  F06A         	movff	?___ftpack+2,?___altoft+2
  9800                           
  9801                           ; BSR set to: 0
  9802  002986  0012               	return		;funcret
  9803  002988                     __end_of___altoft:
  9804                           	opt stack 0
  9805                           tblptru	equ	0xFF8
  9806                           tblptrh	equ	0xFF7
  9807                           tblptrl	equ	0xFF6
  9808                           tablat	equ	0xFF5
  9809                           prodh	equ	0xFF4
  9810                           prodl	equ	0xFF3
  9811                           intcon	equ	0xFF2
  9812                           postinc0	equ	0xFEE
  9813                           plusw0	equ	0xFEB
  9814                           wreg	equ	0xFE8
  9815                           indf1	equ	0xFE7
  9816                           postinc1	equ	0xFE6
  9817                           postdec1	equ	0xFE5
  9818                           plusw1	equ	0xFE3
  9819                           fsr1h	equ	0xFE2
  9820                           fsr1l	equ	0xFE1
  9821                           indf2	equ	0xFDF
  9822                           postinc2	equ	0xFDE
  9823                           postdec2	equ	0xFDD
  9824                           plusw2	equ	0xFDB
  9825                           fsr2h	equ	0xFDA
  9826                           fsr2l	equ	0xFD9
  9827                           status	equ	0xFD8
  9828                           
  9829 ;; *************** function _eval_poly *****************
  9830 ;; Defined at:
  9831 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\evalpoly.c"
  9832 ;; Parameters:    Size  Location     Type
  9833 ;;  x               3   59[BANK0 ] float 
  9834 ;;  d               1   62[BANK0 ] PTR const 
  9835 ;;		 -> log@coeff(27), exp@coeff(30), 
  9836 ;;  n               2   63[BANK0 ] int 
  9837 ;; Auto vars:     Size  Location     Type
  9838 ;;  res             3   66[BANK0 ] int 
  9839 ;; Return value:  Size  Location     Type
  9840 ;;                  3   59[BANK0 ] int 
  9841 ;; Registers used:
  9842 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9843 ;; Tracked objects:
  9844 ;;		On entry : 3F/0
  9845 ;;		On exit  : 3F/0
  9846 ;;		Unchanged: 0/0
  9847 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  9848 ;;      Params:         0       6       0       0       0       0       0       0       0
  9849 ;;      Locals:         0       3       0       0       0       0       0       0       0
  9850 ;;      Temps:          0       1       0       0       0       0       0       0       0
  9851 ;;      Totals:         0      10       0       0       0       0       0       0       0
  9852 ;;Total ram usage:       10 bytes
  9853 ;; Hardware stack levels used:    1
  9854 ;; Hardware stack levels required when called:    8
  9855 ;; This function calls:
  9856 ;;		___ftadd
  9857 ;;		___ftmul
  9858 ;; This function is called by:
  9859 ;;		_exp
  9860 ;;		_log
  9861 ;; This function uses a non-reentrant model
  9862 ;;
  9863                           
  9864                           	psect	text58
  9865  0020A4                     __ptext58:
  9866                           	opt stack 0
  9867  0020A4                     _eval_poly:
  9868                           	opt stack 18
  9869                           
  9870                           ; BSR set to: 0
  9871                           
  9872                           ; BSR set to: 0
  9873                           ;incstack = 0
  9874  0020A4  519F               	movf	eval_poly@n& (0+255),w,b
  9875  0020A6  0D03               	mullw	3
  9876  0020A8  519E               	movf	eval_poly@d& (0+255),w,b
  9877  0020AA  24F3               	addwf	prodl,w,c
  9878  0020AC  6FA1               	movwf	??_eval_poly& (0+255),b
  9879  0020AE  C0A1  FFF6         	movff	??_eval_poly,tblptrl
  9880  0020B2                     	if	1	;There is more than 1 active tblptr byte
  9881  0020B2  0E08               	movlw	high __smallconst
  9882  0020B4  6EF7               	movwf	tblptrh,c
  9883  0020B6                     	endif
  9884  0020B6                     	if	0	;tblptru may be non-zero
  9885  0020B6                     	endif
  9886  0020B6                     	if	0	;tblptru may be non-zero
  9887  0020B6                     	endif
  9888  0020B6  0009               	tblrd		*+
  9889  0020B8  CFF5 F0A2          	movff	tablat,eval_poly@res
  9890  0020BC  0009               	tblrd		*+
  9891  0020BE  CFF5 F0A3          	movff	tablat,eval_poly@res+1
  9892  0020C2  000A               	tblrd		*-
  9893  0020C4  CFF5 F0A4          	movff	tablat,eval_poly@res+2
  9894  0020C8  D031               	goto	l3532
  9895  0020CA                     l3530:
  9896                           
  9897                           ; BSR set to: 0
  9898  0020CA  C0A2  F075         	movff	eval_poly@res,___ftmul@f2
  9899  0020CE  C0A3  F076         	movff	eval_poly@res+1,___ftmul@f2+1
  9900  0020D2  C0A4  F077         	movff	eval_poly@res+2,___ftmul@f2+2
  9901  0020D6  C09B  F072         	movff	eval_poly@x,___ftmul@f1
  9902  0020DA  C09C  F073         	movff	eval_poly@x+1,___ftmul@f1+1
  9903  0020DE  C09D  F074         	movff	eval_poly@x+2,___ftmul@f1+2
  9904  0020E2  EC4C  F00D         	call	___ftmul	;wreg free
  9905  0020E6  C072  F08F         	movff	?___ftmul,___ftadd@f1
  9906  0020EA  C073  F090         	movff	?___ftmul+1,___ftadd@f1+1
  9907  0020EE  C074  F091         	movff	?___ftmul+2,___ftadd@f1+2
  9908  0020F2  079F               	decf	eval_poly@n& (0+255),f,b
  9909  0020F4  A0D8               	btfss	status,0,c
  9910  0020F6  07A0               	decf	(eval_poly@n+1)& (0+255),f,b
  9911  0020F8  519F               	movf	eval_poly@n& (0+255),w,b
  9912  0020FA  0D03               	mullw	3
  9913  0020FC  519E               	movf	eval_poly@d& (0+255),w,b
  9914  0020FE  24F3               	addwf	prodl,w,c
  9915  002100  6FA1               	movwf	??_eval_poly& (0+255),b
  9916  002102  C0A1  FFF6         	movff	??_eval_poly,tblptrl
  9917  002106                     	if	1	;There is more than 1 active tblptr byte
  9918  002106  0E08               	movlw	high __smallconst
  9919  002108  6EF7               	movwf	tblptrh,c
  9920  00210A                     	endif
  9921  00210A                     	if	0	;tblptru may be non-zero
  9922  00210A                     	endif
  9923  00210A                     	if	0	;tblptru may be non-zero
  9924  00210A                     	endif
  9925  00210A  0009               	tblrd		*+
  9926  00210C  CFF5 F092          	movff	tablat,___ftadd@f2
  9927  002110  0009               	tblrd		*+
  9928  002112  CFF5 F093          	movff	tablat,___ftadd@f2+1
  9929  002116  000A               	tblrd		*-
  9930  002118  CFF5 F094          	movff	tablat,___ftadd@f2+2
  9931  00211C  ECD3  F008         	call	___ftadd	;wreg free
  9932  002120  C08F  F0A2         	movff	?___ftadd,eval_poly@res
  9933  002124  C090  F0A3         	movff	?___ftadd+1,eval_poly@res+1
  9934  002128  C091  F0A4         	movff	?___ftadd+2,eval_poly@res+2
  9935  00212C                     l3532:
  9936                           
  9937                           ; BSR set to: 0
  9938  00212C  519F               	movf	eval_poly@n& (0+255),w,b
  9939  00212E  11A0               	iorwf	(eval_poly@n+1)& (0+255),w,b
  9940  002130  E1CC               	bnz	l3530
  9941                           
  9942                           ; BSR set to: 0
  9943  002132  C0A2  F09B         	movff	eval_poly@res,?_eval_poly
  9944  002136  C0A3  F09C         	movff	eval_poly@res+1,?_eval_poly+1
  9945  00213A  C0A4  F09D         	movff	eval_poly@res+2,?_eval_poly+2
  9946                           
  9947                           ; BSR set to: 0
  9948  00213E  0012               	return		;funcret
  9949  002140                     __end_of_eval_poly:
  9950                           	opt stack 0
  9951                           tblptru	equ	0xFF8
  9952                           tblptrh	equ	0xFF7
  9953                           tblptrl	equ	0xFF6
  9954                           tablat	equ	0xFF5
  9955                           prodh	equ	0xFF4
  9956                           prodl	equ	0xFF3
  9957                           intcon	equ	0xFF2
  9958                           postinc0	equ	0xFEE
  9959                           plusw0	equ	0xFEB
  9960                           wreg	equ	0xFE8
  9961                           indf1	equ	0xFE7
  9962                           postinc1	equ	0xFE6
  9963                           postdec1	equ	0xFE5
  9964                           plusw1	equ	0xFE3
  9965                           fsr1h	equ	0xFE2
  9966                           fsr1l	equ	0xFE1
  9967                           indf2	equ	0xFDF
  9968                           postinc2	equ	0xFDE
  9969                           postdec2	equ	0xFDD
  9970                           plusw2	equ	0xFDB
  9971                           fsr2h	equ	0xFDA
  9972                           fsr2l	equ	0xFD9
  9973                           status	equ	0xFD8
  9974                           
  9975 ;; *************** function ___ftmul *****************
  9976 ;; Defined at:
  9977 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\ftmul.c"
  9978 ;; Parameters:    Size  Location     Type
  9979 ;;  f1              3   18[BANK0 ] float 
  9980 ;;  f2              3   21[BANK0 ] float 
  9981 ;; Auto vars:     Size  Location     Type
  9982 ;;  f3_as_produc    3   29[BANK0 ] unsigned um
  9983 ;;  sign            1   28[BANK0 ] unsigned char 
  9984 ;;  exp             1   27[BANK0 ] unsigned char 
  9985 ;;  cntr            1    0        unsigned char 
  9986 ;; Return value:  Size  Location     Type
  9987 ;;                  3   18[BANK0 ] float 
  9988 ;; Registers used:
  9989 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  9990 ;; Tracked objects:
  9991 ;;		On entry : 3F/0
  9992 ;;		On exit  : 3F/0
  9993 ;;		Unchanged: 0/0
  9994 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  9995 ;;      Params:         0       6       0       0       0       0       0       0       0
  9996 ;;      Locals:         0       5       0       0       0       0       0       0       0
  9997 ;;      Temps:          0       3       0       0       0       0       0       0       0
  9998 ;;      Totals:         0      14       0       0       0       0       0       0       0
  9999 ;;Total ram usage:       14 bytes
 10000 ;; Hardware stack levels used:    1
 10001 ;; Hardware stack levels required when called:    7
 10002 ;; This function calls:
 10003 ;;		___ftpack
 10004 ;; This function is called by:
 10005 ;;		_InitDigiPot
 10006 ;;		_I2C_Init
 10007 ;;		_pow
 10008 ;;		_exp
 10009 ;;		_log
 10010 ;;		_eval_poly
 10011 ;; This function uses a non-reentrant model
 10012 ;;
 10013                           
 10014                           	psect	text59
 10015  001A98                     __ptext59:
 10016                           	opt stack 0
 10017  001A98                     ___ftmul:
 10018                           	opt stack 20
 10019                           
 10020                           ; BSR set to: 0
 10021                           
 10022                           ; BSR set to: 0
 10023                           ;incstack = 0
 10024  001A98  C074  F078         	movff	___ftmul@f1+2,??___ftmul
 10025  001A9C  6B79               	clrf	(??___ftmul+1)& (0+255),b
 10026  001A9E  6B7A               	clrf	(??___ftmul+2)& (0+255),b
 10027  001AA0  3573               	rlcf	(___ftmul@f1+1)& (0+255),w,b
 10028  001AA2  3778               	rlcf	??___ftmul& (0+255),f,b
 10029  001AA4  E301               	bnc	u3071
 10030  001AA6  8179               	bsf	(??___ftmul+1)& (0+255),0,b
 10031  001AA8                     u3071:
 10032  001AA8  5178               	movf	??___ftmul& (0+255),w,b
 10033  001AAA  6F7B               	movwf	___ftmul@exp& (0+255),b
 10034  001AAC  517B               	movf	___ftmul@exp& (0+255),w,b
 10035  001AAE  E104               	bnz	l3304
 10036                           
 10037                           ; BSR set to: 0
 10038  001AB0  6B72               	clrf	?___ftmul& (0+255),b
 10039  001AB2  6B73               	clrf	(?___ftmul+1)& (0+255),b
 10040  001AB4  6B74               	clrf	(?___ftmul+2)& (0+255),b
 10041  001AB6  0012               	return	
 10042  001AB8                     l3304:
 10043                           
 10044                           ; BSR set to: 0
 10045  001AB8  C077  F078         	movff	___ftmul@f2+2,??___ftmul
 10046  001ABC  6B79               	clrf	(??___ftmul+1)& (0+255),b
 10047  001ABE  6B7A               	clrf	(??___ftmul+2)& (0+255),b
 10048  001AC0  3576               	rlcf	(___ftmul@f2+1)& (0+255),w,b
 10049  001AC2  3778               	rlcf	??___ftmul& (0+255),f,b
 10050  001AC4  E301               	bnc	u3091
 10051  001AC6  8179               	bsf	(??___ftmul+1)& (0+255),0,b
 10052  001AC8                     u3091:
 10053  001AC8  5178               	movf	??___ftmul& (0+255),w,b
 10054  001ACA  6F7C               	movwf	___ftmul@sign& (0+255),b
 10055  001ACC  517C               	movf	___ftmul@sign& (0+255),w,b
 10056  001ACE  E104               	bnz	l3308
 10057                           
 10058                           ; BSR set to: 0
 10059  001AD0  6B72               	clrf	?___ftmul& (0+255),b
 10060  001AD2  6B73               	clrf	(?___ftmul+1)& (0+255),b
 10061  001AD4  6B74               	clrf	(?___ftmul+2)& (0+255),b
 10062  001AD6  0012               	return	
 10063  001AD8                     l3308:
 10064                           
 10065                           ; BSR set to: 0
 10066  001AD8  517C               	movf	___ftmul@sign& (0+255),w,b
 10067  001ADA  0F7B               	addlw	123
 10068  001ADC  277B               	addwf	___ftmul@exp& (0+255),f,b
 10069                           
 10070                           ; BSR set to: 0
 10071  001ADE  C074  F07C         	movff	___ftmul@f1+2,___ftmul@sign
 10072  001AE2  5177               	movf	(___ftmul@f2+2)& (0+255),w,b
 10073  001AE4  1B7C               	xorwf	___ftmul@sign& (0+255),f,b
 10074  001AE6  0E80               	movlw	128
 10075  001AE8  177C               	andwf	___ftmul@sign& (0+255),f,b
 10076                           
 10077                           ; BSR set to: 0
 10078  001AEA  8F73               	bsf	(___ftmul@f1+1)& (0+255),7,b
 10079                           
 10080                           ; BSR set to: 0
 10081  001AEC  8F76               	bsf	(___ftmul@f2+1)& (0+255),7,b
 10082                           
 10083                           ; BSR set to: 0
 10084  001AEE  6B77               	clrf	(___ftmul@f2+2)& (0+255),b
 10085                           
 10086                           ; BSR set to: 0
 10087                           
 10088                           ; BSR set to: 0
 10089  001AF0  6B74               	clrf	(___ftmul@f1+2)& (0+255),b
 10090                           
 10091                           ; BSR set to: 0
 10092  001AF2  5172               	movf	___ftmul@f1& (0+255),w,b
 10093  001AF4  0375               	mulwf	___ftmul@f2& (0+255),b
 10094  001AF6  CFF4 FFF3          	movff	prodh,prodl
 10095  001AFA  6AF4               	clrf	prodh,c
 10096  001AFC  CFF3 F07D          	movff	prodl,___ftmul@f3_as_product
 10097  001B00  CFF4 F07E          	movff	prodh,___ftmul@f3_as_product+1
 10098  001B04  6B7F               	clrf	(___ftmul@f3_as_product+2)& (0+255),b
 10099                           
 10100                           ; BSR set to: 0
 10101  001B06  5172               	movf	___ftmul@f1& (0+255),w,b
 10102  001B08  0376               	mulwf	(___ftmul@f2+1)& (0+255),b
 10103  001B0A  50F3               	movf	prodl,w,c
 10104  001B0C  277D               	addwf	___ftmul@f3_as_product& (0+255),f,b
 10105  001B0E  50F4               	movf	prodh,w,c
 10106  001B10  237E               	addwfc	(___ftmul@f3_as_product+1)& (0+255),f,b
 10107  001B12  0E00               	movlw	0
 10108  001B14  237F               	addwfc	(___ftmul@f3_as_product+2)& (0+255),f,b
 10109                           
 10110                           ; BSR set to: 0
 10111  001B16  5173               	movf	(___ftmul@f1+1)& (0+255),w,b
 10112  001B18  0375               	mulwf	___ftmul@f2& (0+255),b
 10113  001B1A  50F3               	movf	prodl,w,c
 10114  001B1C  277D               	addwf	___ftmul@f3_as_product& (0+255),f,b
 10115  001B1E  50F4               	movf	prodh,w,c
 10116  001B20  237E               	addwfc	(___ftmul@f3_as_product+1)& (0+255),f,b
 10117  001B22  0E00               	movlw	0
 10118  001B24  237F               	addwfc	(___ftmul@f3_as_product+2)& (0+255),f,b
 10119                           
 10120                           ; BSR set to: 0
 10121  001B26  5173               	movf	(___ftmul@f1+1)& (0+255),w,b
 10122  001B28  0376               	mulwf	(___ftmul@f2+1)& (0+255),b
 10123  001B2A  50F3               	movf	prodl,w,c
 10124  001B2C  277E               	addwf	(___ftmul@f3_as_product+1)& (0+255),f,b
 10125  001B2E  50F4               	movf	prodh,w,c
 10126  001B30  237F               	addwfc	(___ftmul@f3_as_product+2)& (0+255),f,b
 10127                           
 10128                           ; BSR set to: 0
 10129  001B32  AF7F               	btfss	(___ftmul@f3_as_product+2)& (0+255),7,b
 10130  001B34  D005               	goto	l1000
 10131                           
 10132                           ; BSR set to: 0
 10133  001B36  90D8               	bcf	status,0,c
 10134  001B38  337F               	rrcf	(___ftmul@f3_as_product+2)& (0+255),f,b
 10135  001B3A  337E               	rrcf	(___ftmul@f3_as_product+1)& (0+255),f,b
 10136  001B3C  337D               	rrcf	___ftmul@f3_as_product& (0+255),f,b
 10137  001B3E  2B7B               	incf	___ftmul@exp& (0+255),f,b
 10138  001B40                     l1000:
 10139                           
 10140                           ; BSR set to: 0
 10141  001B40  90D8               	bcf	status,0,c
 10142  001B42  337F               	rrcf	(___ftmul@f3_as_product+2)& (0+255),f,b
 10143  001B44  337E               	rrcf	(___ftmul@f3_as_product+1)& (0+255),f,b
 10144  001B46  337D               	rrcf	___ftmul@f3_as_product& (0+255),f,b
 10145                           
 10146                           ; BSR set to: 0
 10147  001B48  C07D  F060         	movff	___ftmul@f3_as_product,___ftpack@arg
 10148  001B4C  C07E  F061         	movff	___ftmul@f3_as_product+1,___ftpack@arg+1
 10149  001B50  C07F  F062         	movff	___ftmul@f3_as_product+2,___ftpack@arg+2
 10150  001B54  C07B  F063         	movff	___ftmul@exp,___ftpack@exp
 10151  001B58  C07C  F064         	movff	___ftmul@sign,___ftpack@sign
 10152  001B5C  ECC3  F011         	call	___ftpack	;wreg free
 10153  001B60  C060  F072         	movff	?___ftpack,?___ftmul
 10154  001B64  C061  F073         	movff	?___ftpack+1,?___ftmul+1
 10155  001B68  C062  F074         	movff	?___ftpack+2,?___ftmul+2
 10156                           
 10157                           ; BSR set to: 0
 10158  001B6C  0012               	return		;funcret
 10159  001B6E                     __end_of___ftmul:
 10160                           	opt stack 0
 10161                           tblptru	equ	0xFF8
 10162                           tblptrh	equ	0xFF7
 10163                           tblptrl	equ	0xFF6
 10164                           tablat	equ	0xFF5
 10165                           prodh	equ	0xFF4
 10166                           prodl	equ	0xFF3
 10167                           intcon	equ	0xFF2
 10168                           postinc0	equ	0xFEE
 10169                           plusw0	equ	0xFEB
 10170                           wreg	equ	0xFE8
 10171                           indf1	equ	0xFE7
 10172                           postinc1	equ	0xFE6
 10173                           postdec1	equ	0xFE5
 10174                           plusw1	equ	0xFE3
 10175                           fsr1h	equ	0xFE2
 10176                           fsr1l	equ	0xFE1
 10177                           indf2	equ	0xFDF
 10178                           postinc2	equ	0xFDE
 10179                           postdec2	equ	0xFDD
 10180                           plusw2	equ	0xFDB
 10181                           fsr2h	equ	0xFDA
 10182                           fsr2l	equ	0xFD9
 10183                           status	equ	0xFD8
 10184                           
 10185 ;; *************** function ___ftsub *****************
 10186 ;; Defined at:
 10187 ;;		line 20 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\ftsub.c"
 10188 ;; Parameters:    Size  Location     Type
 10189 ;;  f1              3   59[BANK0 ] float 
 10190 ;;  f2              3   62[BANK0 ] float 
 10191 ;; Auto vars:     Size  Location     Type
 10192 ;;		None
 10193 ;; Return value:  Size  Location     Type
 10194 ;;                  3   59[BANK0 ] float 
 10195 ;; Registers used:
 10196 ;;		wreg, status,2, status,0, cstack
 10197 ;; Tracked objects:
 10198 ;;		On entry : 3F/0
 10199 ;;		On exit  : 3F/0
 10200 ;;		Unchanged: 0/0
 10201 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 10202 ;;      Params:         0       6       0       0       0       0       0       0       0
 10203 ;;      Locals:         0       0       0       0       0       0       0       0       0
 10204 ;;      Temps:          0       0       0       0       0       0       0       0       0
 10205 ;;      Totals:         0       6       0       0       0       0       0       0       0
 10206 ;;Total ram usage:        6 bytes
 10207 ;; Hardware stack levels used:    1
 10208 ;; Hardware stack levels required when called:    8
 10209 ;; This function calls:
 10210 ;;		___ftadd
 10211 ;; This function is called by:
 10212 ;;		_exp
 10213 ;; This function uses a non-reentrant model
 10214 ;;
 10215                           
 10216                           	psect	text60
 10217  002F12                     __ptext60:
 10218                           	opt stack 0
 10219  002F12                     ___ftsub:
 10220                           	opt stack 18
 10221                           
 10222                           ; BSR set to: 0
 10223                           
 10224                           ; BSR set to: 0
 10225                           ;incstack = 0
 10226  002F12  519E               	movf	___ftsub@f2& (0+255),w,b
 10227  002F14  119F               	iorwf	(___ftsub@f2+1)& (0+255),w,b
 10228  002F16  11A0               	iorwf	(___ftsub@f2+2)& (0+255),w,b
 10229  002F18  E002               	bz	l3488
 10230                           
 10231                           ; BSR set to: 0
 10232  002F1A  0E80               	movlw	128
 10233  002F1C  1BA0               	xorwf	(___ftsub@f2+2)& (0+255),f,b
 10234  002F1E                     l3488:
 10235                           
 10236                           ; BSR set to: 0
 10237  002F1E  C09B  F08F         	movff	___ftsub@f1,___ftadd@f1
 10238  002F22  C09C  F090         	movff	___ftsub@f1+1,___ftadd@f1+1
 10239  002F26  C09D  F091         	movff	___ftsub@f1+2,___ftadd@f1+2
 10240  002F2A  C09E  F092         	movff	___ftsub@f2,___ftadd@f2
 10241  002F2E  C09F  F093         	movff	___ftsub@f2+1,___ftadd@f2+1
 10242  002F32  C0A0  F094         	movff	___ftsub@f2+2,___ftadd@f2+2
 10243  002F36  ECD3  F008         	call	___ftadd	;wreg free
 10244  002F3A  C08F  F09B         	movff	?___ftadd,?___ftsub
 10245  002F3E  C090  F09C         	movff	?___ftadd+1,?___ftsub+1
 10246  002F42  C091  F09D         	movff	?___ftadd+2,?___ftsub+2
 10247                           
 10248                           ; BSR set to: 0
 10249  002F46  0012               	return		;funcret
 10250  002F48                     __end_of___ftsub:
 10251                           	opt stack 0
 10252                           tblptru	equ	0xFF8
 10253                           tblptrh	equ	0xFF7
 10254                           tblptrl	equ	0xFF6
 10255                           tablat	equ	0xFF5
 10256                           prodh	equ	0xFF4
 10257                           prodl	equ	0xFF3
 10258                           intcon	equ	0xFF2
 10259                           postinc0	equ	0xFEE
 10260                           plusw0	equ	0xFEB
 10261                           wreg	equ	0xFE8
 10262                           indf1	equ	0xFE7
 10263                           postinc1	equ	0xFE6
 10264                           postdec1	equ	0xFE5
 10265                           plusw1	equ	0xFE3
 10266                           fsr1h	equ	0xFE2
 10267                           fsr1l	equ	0xFE1
 10268                           indf2	equ	0xFDF
 10269                           postinc2	equ	0xFDE
 10270                           postdec2	equ	0xFDD
 10271                           plusw2	equ	0xFDB
 10272                           fsr2h	equ	0xFDA
 10273                           fsr2l	equ	0xFD9
 10274                           status	equ	0xFD8
 10275                           
 10276 ;; *************** function ___ftadd *****************
 10277 ;; Defined at:
 10278 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\ftadd.c"
 10279 ;; Parameters:    Size  Location     Type
 10280 ;;  f1              3   47[BANK0 ] float 
 10281 ;;  f2              3   50[BANK0 ] float 
 10282 ;; Auto vars:     Size  Location     Type
 10283 ;;  exp1            1   58[BANK0 ] unsigned char 
 10284 ;;  exp2            1   57[BANK0 ] unsigned char 
 10285 ;;  sign            1   56[BANK0 ] unsigned char 
 10286 ;; Return value:  Size  Location     Type
 10287 ;;                  3   47[BANK0 ] float 
 10288 ;; Registers used:
 10289 ;;		wreg, status,2, status,0, cstack
 10290 ;; Tracked objects:
 10291 ;;		On entry : 3F/0
 10292 ;;		On exit  : 3F/0
 10293 ;;		Unchanged: 0/0
 10294 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 10295 ;;      Params:         0       6       0       0       0       0       0       0       0
 10296 ;;      Locals:         0       3       0       0       0       0       0       0       0
 10297 ;;      Temps:          0       3       0       0       0       0       0       0       0
 10298 ;;      Totals:         0      12       0       0       0       0       0       0       0
 10299 ;;Total ram usage:       12 bytes
 10300 ;; Hardware stack levels used:    1
 10301 ;; Hardware stack levels required when called:    7
 10302 ;; This function calls:
 10303 ;;		___ftpack
 10304 ;; This function is called by:
 10305 ;;		_I2C_Init
 10306 ;;		___ftsub
 10307 ;;		_floor
 10308 ;;		_log
 10309 ;;		_eval_poly
 10310 ;; This function uses a non-reentrant model
 10311 ;;
 10312                           
 10313                           	psect	text61
 10314  0011A6                     __ptext61:
 10315                           	opt stack 0
 10316  0011A6                     ___ftadd:
 10317                           	opt stack 20
 10318                           
 10319                           ; BSR set to: 0
 10320                           
 10321                           ; BSR set to: 0
 10322                           ;incstack = 0
 10323  0011A6  C091  F095         	movff	___ftadd@f1+2,??___ftadd
 10324  0011AA  6B96               	clrf	(??___ftadd+1)& (0+255),b
 10325  0011AC  6B97               	clrf	(??___ftadd+2)& (0+255),b
 10326  0011AE  3590               	rlcf	(___ftadd@f1+1)& (0+255),w,b
 10327  0011B0  3795               	rlcf	??___ftadd& (0+255),f,b
 10328  0011B2  E301               	bnc	u2861
 10329  0011B4  8196               	bsf	(??___ftadd+1)& (0+255),0,b
 10330  0011B6                     u2861:
 10331  0011B6  5195               	movf	??___ftadd& (0+255),w,b
 10332  0011B8  6F9A               	movwf	___ftadd@exp1& (0+255),b
 10333  0011BA  C094  F095         	movff	___ftadd@f2+2,??___ftadd
 10334  0011BE  6B96               	clrf	(??___ftadd+1)& (0+255),b
 10335  0011C0  6B97               	clrf	(??___ftadd+2)& (0+255),b
 10336  0011C2  3593               	rlcf	(___ftadd@f2+1)& (0+255),w,b
 10337  0011C4  3795               	rlcf	??___ftadd& (0+255),f,b
 10338  0011C6  E301               	bnc	u2871
 10339  0011C8  8196               	bsf	(??___ftadd+1)& (0+255),0,b
 10340  0011CA                     u2871:
 10341  0011CA  5195               	movf	??___ftadd& (0+255),w,b
 10342  0011CC  6F99               	movwf	___ftadd@exp2& (0+255),b
 10343                           
 10344                           ; BSR set to: 0
 10345  0011CE  519A               	movf	___ftadd@exp1& (0+255),w,b
 10346  0011D0  E009               	bz	u2900
 10347                           
 10348                           ; BSR set to: 0
 10349  0011D2  5199               	movf	___ftadd@exp2& (0+255),w,b
 10350  0011D4  5D9A               	subwf	___ftadd@exp1& (0+255),w,b
 10351  0011D6  E20D               	bc	l3244
 10352                           
 10353                           ; BSR set to: 0
 10354  0011D8  519A               	movf	___ftadd@exp1& (0+255),w,b
 10355  0011DA  5D99               	subwf	___ftadd@exp2& (0+255),w,b
 10356  0011DC  6F95               	movwf	??___ftadd& (0+255),b
 10357  0011DE  0E18               	movlw	24
 10358  0011E0  6595               	cpfsgt	??___ftadd& (0+255),b
 10359  0011E2  D007               	goto	l3244
 10360  0011E4                     u2900:
 10361                           
 10362                           ; BSR set to: 0
 10363  0011E4  C092  F08F         	movff	___ftadd@f2,?___ftadd
 10364  0011E8  C093  F090         	movff	___ftadd@f2+1,?___ftadd+1
 10365  0011EC  C094  F091         	movff	___ftadd@f2+2,?___ftadd+2
 10366  0011F0  0012               	return	
 10367  0011F2                     l3244:
 10368                           
 10369                           ; BSR set to: 0
 10370  0011F2  5199               	movf	___ftadd@exp2& (0+255),w,b
 10371  0011F4  E009               	bz	u2930
 10372                           
 10373                           ; BSR set to: 0
 10374  0011F6  519A               	movf	___ftadd@exp1& (0+255),w,b
 10375  0011F8  5D99               	subwf	___ftadd@exp2& (0+255),w,b
 10376  0011FA  E20D               	bc	l3250
 10377                           
 10378                           ; BSR set to: 0
 10379  0011FC  5199               	movf	___ftadd@exp2& (0+255),w,b
 10380  0011FE  5D9A               	subwf	___ftadd@exp1& (0+255),w,b
 10381  001200  6F95               	movwf	??___ftadd& (0+255),b
 10382  001202  0E18               	movlw	24
 10383  001204  6595               	cpfsgt	??___ftadd& (0+255),b
 10384  001206  D007               	goto	l3250
 10385  001208                     u2930:
 10386                           
 10387                           ; BSR set to: 0
 10388  001208  C08F  F08F         	movff	___ftadd@f1,?___ftadd
 10389  00120C  C090  F090         	movff	___ftadd@f1+1,?___ftadd+1
 10390  001210  C091  F091         	movff	___ftadd@f1+2,?___ftadd+2
 10391  001214  0012               	return	
 10392  001216                     l3250:
 10393                           
 10394                           ; BSR set to: 0
 10395  001216  0E06               	movlw	6
 10396  001218  6F98               	movwf	___ftadd@sign& (0+255),b
 10397                           
 10398                           ; BSR set to: 0
 10399  00121A  BF91               	btfsc	(___ftadd@f1+2)& (0+255),7,b
 10400                           
 10401                           ; BSR set to: 0
 10402  00121C  8F98               	bsf	___ftadd@sign& (0+255),7,b
 10403                           
 10404                           ; BSR set to: 0
 10405  00121E  BF94               	btfsc	(___ftadd@f2+2)& (0+255),7,b
 10406                           
 10407                           ; BSR set to: 0
 10408  001220  8D98               	bsf	___ftadd@sign& (0+255),6,b
 10409                           
 10410                           ; BSR set to: 0
 10411  001222  8F90               	bsf	(___ftadd@f1+1)& (0+255),7,b
 10412                           
 10413                           ; BSR set to: 0
 10414  001224  6B91               	clrf	(___ftadd@f1+2)& (0+255),b
 10415  001226  8F93               	bsf	(___ftadd@f2+1)& (0+255),7,b
 10416                           
 10417                           ; BSR set to: 0
 10418  001228  6B94               	clrf	(___ftadd@f2+2)& (0+255),b
 10419                           
 10420                           ; BSR set to: 0
 10421  00122A  5199               	movf	___ftadd@exp2& (0+255),w,b
 10422  00122C  5D9A               	subwf	___ftadd@exp1& (0+255),w,b
 10423  00122E  E218               	bc	l3276
 10424  001230                     u2960:
 10425                           
 10426                           ; BSR set to: 0
 10427  001230  90D8               	bcf	status,0,c
 10428  001232  3792               	rlcf	___ftadd@f2& (0+255),f,b
 10429  001234  3793               	rlcf	(___ftadd@f2+1)& (0+255),f,b
 10430  001236  3794               	rlcf	(___ftadd@f2+2)& (0+255),f,b
 10431  001238  0799               	decf	___ftadd@exp2& (0+255),f,b
 10432                           
 10433                           ; BSR set to: 0
 10434  00123A  519A               	movf	___ftadd@exp1& (0+255),w,b
 10435  00123C  1999               	xorwf	___ftadd@exp2& (0+255),w,b
 10436  00123E  E00C               	bz	l3274
 10437                           
 10438                           ; BSR set to: 0
 10439  001240  0798               	decf	___ftadd@sign& (0+255),f,b
 10440  001242  C098  F095         	movff	___ftadd@sign,??___ftadd
 10441  001246  0E07               	movlw	7
 10442  001248  1795               	andwf	??___ftadd& (0+255),f,b
 10443  00124A  E006               	bz	l3274
 10444  00124C  D7F1               	goto	u2960
 10445  00124E                     l3272:
 10446                           
 10447                           ; BSR set to: 0
 10448  00124E  90D8               	bcf	status,0,c
 10449  001250  3391               	rrcf	(___ftadd@f1+2)& (0+255),f,b
 10450  001252  3390               	rrcf	(___ftadd@f1+1)& (0+255),f,b
 10451  001254  338F               	rrcf	___ftadd@f1& (0+255),f,b
 10452  001256  2B9A               	incf	___ftadd@exp1& (0+255),f,b
 10453  001258                     l3274:
 10454                           
 10455                           ; BSR set to: 0
 10456  001258  5199               	movf	___ftadd@exp2& (0+255),w,b
 10457  00125A  199A               	xorwf	___ftadd@exp1& (0+255),w,b
 10458  00125C  E01B               	bz	u3030
 10459  00125E  D7F7               	goto	l3272
 10460  001260                     l3276:
 10461                           
 10462                           ; BSR set to: 0
 10463  001260  519A               	movf	___ftadd@exp1& (0+255),w,b
 10464  001262  5D99               	subwf	___ftadd@exp2& (0+255),w,b
 10465  001264  E217               	bc	u3030
 10466  001266                     u3000:
 10467                           
 10468                           ; BSR set to: 0
 10469  001266  90D8               	bcf	status,0,c
 10470  001268  378F               	rlcf	___ftadd@f1& (0+255),f,b
 10471  00126A  3790               	rlcf	(___ftadd@f1+1)& (0+255),f,b
 10472  00126C  3791               	rlcf	(___ftadd@f1+2)& (0+255),f,b
 10473  00126E  079A               	decf	___ftadd@exp1& (0+255),f,b
 10474                           
 10475                           ; BSR set to: 0
 10476  001270  519A               	movf	___ftadd@exp1& (0+255),w,b
 10477  001272  1999               	xorwf	___ftadd@exp2& (0+255),w,b
 10478  001274  E00C               	bz	l3286
 10479                           
 10480                           ; BSR set to: 0
 10481  001276  0798               	decf	___ftadd@sign& (0+255),f,b
 10482  001278  C098  F095         	movff	___ftadd@sign,??___ftadd
 10483  00127C  0E07               	movlw	7
 10484  00127E  1795               	andwf	??___ftadd& (0+255),f,b
 10485  001280  E006               	bz	l3286
 10486  001282  D7F1               	goto	u3000
 10487  001284                     l3284:
 10488                           
 10489                           ; BSR set to: 0
 10490  001284  90D8               	bcf	status,0,c
 10491  001286  3394               	rrcf	(___ftadd@f2+2)& (0+255),f,b
 10492  001288  3393               	rrcf	(___ftadd@f2+1)& (0+255),f,b
 10493  00128A  3392               	rrcf	___ftadd@f2& (0+255),f,b
 10494  00128C  2B99               	incf	___ftadd@exp2& (0+255),f,b
 10495  00128E                     l3286:
 10496                           
 10497                           ; BSR set to: 0
 10498  00128E  5199               	movf	___ftadd@exp2& (0+255),w,b
 10499  001290  199A               	xorwf	___ftadd@exp1& (0+255),w,b
 10500  001292  E1F8               	bnz	l3284
 10501  001294                     u3030:
 10502                           
 10503                           ; BSR set to: 0
 10504  001294  AF98               	btfss	___ftadd@sign& (0+255),7,b
 10505  001296  D007               	goto	l975
 10506                           
 10507                           ; BSR set to: 0
 10508  001298  1F8F               	comf	___ftadd@f1& (0+255),f,b
 10509  00129A  1F90               	comf	(___ftadd@f1+1)& (0+255),f,b
 10510  00129C  1F91               	comf	(___ftadd@f1+2)& (0+255),f,b
 10511  00129E  2B8F               	incf	___ftadd@f1& (0+255),f,b
 10512  0012A0  0E00               	movlw	0
 10513  0012A2  2390               	addwfc	(___ftadd@f1+1)& (0+255),f,b
 10514  0012A4  2391               	addwfc	(___ftadd@f1+2)& (0+255),f,b
 10515  0012A6                     l975:
 10516                           
 10517                           ; BSR set to: 0
 10518  0012A6  AD98               	btfss	___ftadd@sign& (0+255),6,b
 10519  0012A8  D007               	goto	l976
 10520                           
 10521                           ; BSR set to: 0
 10522  0012AA  1F92               	comf	___ftadd@f2& (0+255),f,b
 10523  0012AC  1F93               	comf	(___ftadd@f2+1)& (0+255),f,b
 10524  0012AE  1F94               	comf	(___ftadd@f2+2)& (0+255),f,b
 10525  0012B0  2B92               	incf	___ftadd@f2& (0+255),f,b
 10526  0012B2  0E00               	movlw	0
 10527  0012B4  2393               	addwfc	(___ftadd@f2+1)& (0+255),f,b
 10528  0012B6  2394               	addwfc	(___ftadd@f2+2)& (0+255),f,b
 10529  0012B8                     l976:
 10530                           
 10531                           ; BSR set to: 0
 10532  0012B8  6B98               	clrf	___ftadd@sign& (0+255),b
 10533  0012BA  518F               	movf	___ftadd@f1& (0+255),w,b
 10534  0012BC  2792               	addwf	___ftadd@f2& (0+255),f,b
 10535  0012BE  5190               	movf	(___ftadd@f1+1)& (0+255),w,b
 10536  0012C0  2393               	addwfc	(___ftadd@f2+1)& (0+255),f,b
 10537  0012C2  5191               	movf	(___ftadd@f1+2)& (0+255),w,b
 10538  0012C4  2394               	addwfc	(___ftadd@f2+2)& (0+255),f,b
 10539  0012C6  AF94               	btfss	(___ftadd@f2+2)& (0+255),7,b
 10540  0012C8  D009               	goto	l3296
 10541                           
 10542                           ; BSR set to: 0
 10543  0012CA  1F92               	comf	___ftadd@f2& (0+255),f,b
 10544  0012CC  1F93               	comf	(___ftadd@f2+1)& (0+255),f,b
 10545  0012CE  1F94               	comf	(___ftadd@f2+2)& (0+255),f,b
 10546  0012D0  2B92               	incf	___ftadd@f2& (0+255),f,b
 10547  0012D2  0E00               	movlw	0
 10548  0012D4  2393               	addwfc	(___ftadd@f2+1)& (0+255),f,b
 10549  0012D6  2394               	addwfc	(___ftadd@f2+2)& (0+255),f,b
 10550                           
 10551                           ; BSR set to: 0
 10552  0012D8  0E01               	movlw	1
 10553  0012DA  6F98               	movwf	___ftadd@sign& (0+255),b
 10554  0012DC                     l3296:
 10555                           
 10556                           ; BSR set to: 0
 10557  0012DC  C092  F060         	movff	___ftadd@f2,___ftpack@arg
 10558  0012E0  C093  F061         	movff	___ftadd@f2+1,___ftpack@arg+1
 10559  0012E4  C094  F062         	movff	___ftadd@f2+2,___ftpack@arg+2
 10560  0012E8  C09A  F063         	movff	___ftadd@exp1,___ftpack@exp
 10561  0012EC  C098  F064         	movff	___ftadd@sign,___ftpack@sign
 10562  0012F0  ECC3  F011         	call	___ftpack	;wreg free
 10563  0012F4  C060  F08F         	movff	?___ftpack,?___ftadd
 10564  0012F8  C061  F090         	movff	?___ftpack+1,?___ftadd+1
 10565  0012FC  C062  F091         	movff	?___ftpack+2,?___ftadd+2
 10566                           
 10567                           ; BSR set to: 0
 10568  001300  0012               	return		;funcret
 10569  001302                     __end_of___ftadd:
 10570                           	opt stack 0
 10571                           tblptru	equ	0xFF8
 10572                           tblptrh	equ	0xFF7
 10573                           tblptrl	equ	0xFF6
 10574                           tablat	equ	0xFF5
 10575                           prodh	equ	0xFF4
 10576                           prodl	equ	0xFF3
 10577                           intcon	equ	0xFF2
 10578                           postinc0	equ	0xFEE
 10579                           plusw0	equ	0xFEB
 10580                           wreg	equ	0xFE8
 10581                           indf1	equ	0xFE7
 10582                           postinc1	equ	0xFE6
 10583                           postdec1	equ	0xFE5
 10584                           plusw1	equ	0xFE3
 10585                           fsr1h	equ	0xFE2
 10586                           fsr1l	equ	0xFE1
 10587                           indf2	equ	0xFDF
 10588                           postinc2	equ	0xFDE
 10589                           postdec2	equ	0xFDD
 10590                           plusw2	equ	0xFDB
 10591                           fsr2h	equ	0xFDA
 10592                           fsr2l	equ	0xFD9
 10593                           status	equ	0xFD8
 10594                           
 10595 ;; *************** function ___ftneg *****************
 10596 ;; Defined at:
 10597 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\ftneg.c"
 10598 ;; Parameters:    Size  Location     Type
 10599 ;;  f1              3    0[BANK0 ] float 
 10600 ;; Auto vars:     Size  Location     Type
 10601 ;;		None
 10602 ;; Return value:  Size  Location     Type
 10603 ;;                  3    0[BANK0 ] float 
 10604 ;; Registers used:
 10605 ;;		wreg, status,2, status,0
 10606 ;; Tracked objects:
 10607 ;;		On entry : 3F/0
 10608 ;;		On exit  : 3F/0
 10609 ;;		Unchanged: 0/0
 10610 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 10611 ;;      Params:         0       3       0       0       0       0       0       0       0
 10612 ;;      Locals:         0       0       0       0       0       0       0       0       0
 10613 ;;      Temps:          0       0       0       0       0       0       0       0       0
 10614 ;;      Totals:         0       3       0       0       0       0       0       0       0
 10615 ;;Total ram usage:        3 bytes
 10616 ;; Hardware stack levels used:    1
 10617 ;; Hardware stack levels required when called:    6
 10618 ;; This function calls:
 10619 ;;		Nothing
 10620 ;; This function is called by:
 10621 ;;		_pow
 10622 ;;		_exp
 10623 ;; This function uses a non-reentrant model
 10624 ;;
 10625                           
 10626                           	psect	text62
 10627  0030F6                     __ptext62:
 10628                           	opt stack 0
 10629  0030F6                     ___ftneg:
 10630                           	opt stack 20
 10631                           
 10632                           ; BSR set to: 0
 10633                           
 10634                           ; BSR set to: 0
 10635                           ;incstack = 0
 10636  0030F6  5160               	movf	___ftneg@f1& (0+255),w,b
 10637  0030F8  1161               	iorwf	(___ftneg@f1+1)& (0+255),w,b
 10638  0030FA  1162               	iorwf	(___ftneg@f1+2)& (0+255),w,b
 10639  0030FC  E002               	bz	l1003
 10640                           
 10641                           ; BSR set to: 0
 10642  0030FE  0E80               	movlw	128
 10643  003100  1B62               	xorwf	(___ftneg@f1+2)& (0+255),f,b
 10644  003102                     l1003:
 10645                           
 10646                           ; BSR set to: 0
 10647  003102  C060  F060         	movff	___ftneg@f1,?___ftneg
 10648  003106  C061  F061         	movff	___ftneg@f1+1,?___ftneg+1
 10649  00310A  C062  F062         	movff	___ftneg@f1+2,?___ftneg+2
 10650                           
 10651                           ; BSR set to: 0
 10652  00310E  0012               	return		;funcret
 10653  003110                     __end_of___ftneg:
 10654                           	opt stack 0
 10655                           tblptru	equ	0xFF8
 10656                           tblptrh	equ	0xFF7
 10657                           tblptrl	equ	0xFF6
 10658                           tablat	equ	0xFF5
 10659                           prodh	equ	0xFF4
 10660                           prodl	equ	0xFF3
 10661                           intcon	equ	0xFF2
 10662                           postinc0	equ	0xFEE
 10663                           plusw0	equ	0xFEB
 10664                           wreg	equ	0xFE8
 10665                           indf1	equ	0xFE7
 10666                           postinc1	equ	0xFE6
 10667                           postdec1	equ	0xFE5
 10668                           plusw1	equ	0xFE3
 10669                           fsr1h	equ	0xFE2
 10670                           fsr1l	equ	0xFE1
 10671                           indf2	equ	0xFDF
 10672                           postinc2	equ	0xFDE
 10673                           postdec2	equ	0xFDD
 10674                           plusw2	equ	0xFDB
 10675                           fsr2h	equ	0xFDA
 10676                           fsr2l	equ	0xFD9
 10677                           status	equ	0xFD8
 10678                           
 10679 ;; *************** function ___ftdiv *****************
 10680 ;; Defined at:
 10681 ;;		line 54 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\ftdiv.c"
 10682 ;; Parameters:    Size  Location     Type
 10683 ;;  f1              3   32[BANK0 ] float 
 10684 ;;  f2              3   35[BANK0 ] float 
 10685 ;; Auto vars:     Size  Location     Type
 10686 ;;  f3              3   42[BANK0 ] float 
 10687 ;;  sign            1   46[BANK0 ] unsigned char 
 10688 ;;  exp             1   45[BANK0 ] unsigned char 
 10689 ;;  cntr            1   41[BANK0 ] unsigned char 
 10690 ;; Return value:  Size  Location     Type
 10691 ;;                  3   32[BANK0 ] float 
 10692 ;; Registers used:
 10693 ;;		wreg, status,2, status,0, cstack
 10694 ;; Tracked objects:
 10695 ;;		On entry : 3F/0
 10696 ;;		On exit  : 3F/0
 10697 ;;		Unchanged: 0/0
 10698 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 10699 ;;      Params:         0       6       0       0       0       0       0       0       0
 10700 ;;      Locals:         0       6       0       0       0       0       0       0       0
 10701 ;;      Temps:          0       3       0       0       0       0       0       0       0
 10702 ;;      Totals:         0      15       0       0       0       0       0       0       0
 10703 ;;Total ram usage:       15 bytes
 10704 ;; Hardware stack levels used:    1
 10705 ;; Hardware stack levels required when called:    7
 10706 ;; This function calls:
 10707 ;;		___ftpack
 10708 ;; This function is called by:
 10709 ;;		_Sequencer_StartTimer
 10710 ;;		_InitDigiPot
 10711 ;;		_Zip
 10712 ;;		_UnZip
 10713 ;;		_I2C_Init
 10714 ;;		_exp
 10715 ;; This function uses a non-reentrant model
 10716 ;;
 10717                           
 10718                           	psect	text63
 10719  001E90                     __ptext63:
 10720                           	opt stack 0
 10721  001E90                     ___ftdiv:
 10722                           	opt stack 22
 10723                           
 10724                           ; BSR set to: 0
 10725                           
 10726                           ; BSR set to: 0
 10727                           ;incstack = 0
 10728  001E90  C082  F086         	movff	___ftdiv@f1+2,??___ftdiv
 10729  001E94  6B87               	clrf	(??___ftdiv+1)& (0+255),b
 10730  001E96  6B88               	clrf	(??___ftdiv+2)& (0+255),b
 10731  001E98  3581               	rlcf	(___ftdiv@f1+1)& (0+255),w,b
 10732  001E9A  3786               	rlcf	??___ftdiv& (0+255),f,b
 10733  001E9C  E301               	bnc	u3311
 10734  001E9E  8187               	bsf	(??___ftdiv+1)& (0+255),0,b
 10735  001EA0                     u3311:
 10736  001EA0  5186               	movf	??___ftdiv& (0+255),w,b
 10737  001EA2  6F8D               	movwf	___ftdiv@exp& (0+255),b
 10738  001EA4  518D               	movf	___ftdiv@exp& (0+255),w,b
 10739  001EA6  E104               	bnz	l3452
 10740                           
 10741                           ; BSR set to: 0
 10742  001EA8  6B80               	clrf	?___ftdiv& (0+255),b
 10743  001EAA  6B81               	clrf	(?___ftdiv+1)& (0+255),b
 10744  001EAC  6B82               	clrf	(?___ftdiv+2)& (0+255),b
 10745  001EAE  0012               	return	
 10746  001EB0                     l3452:
 10747                           
 10748                           ; BSR set to: 0
 10749  001EB0  C085  F086         	movff	___ftdiv@f2+2,??___ftdiv
 10750  001EB4  6B87               	clrf	(??___ftdiv+1)& (0+255),b
 10751  001EB6  6B88               	clrf	(??___ftdiv+2)& (0+255),b
 10752  001EB8  3584               	rlcf	(___ftdiv@f2+1)& (0+255),w,b
 10753  001EBA  3786               	rlcf	??___ftdiv& (0+255),f,b
 10754  001EBC  E301               	bnc	u3331
 10755  001EBE  8187               	bsf	(??___ftdiv+1)& (0+255),0,b
 10756  001EC0                     u3331:
 10757  001EC0  5186               	movf	??___ftdiv& (0+255),w,b
 10758  001EC2  6F8E               	movwf	___ftdiv@sign& (0+255),b
 10759  001EC4  518E               	movf	___ftdiv@sign& (0+255),w,b
 10760  001EC6  E104               	bnz	l984
 10761                           
 10762                           ; BSR set to: 0
 10763  001EC8  6B80               	clrf	?___ftdiv& (0+255),b
 10764  001ECA  6B81               	clrf	(?___ftdiv+1)& (0+255),b
 10765  001ECC  6B82               	clrf	(?___ftdiv+2)& (0+255),b
 10766  001ECE  0012               	return	
 10767  001ED0                     l984:
 10768                           
 10769                           ; BSR set to: 0
 10770  001ED0  6B8A               	clrf	___ftdiv@f3& (0+255),b
 10771  001ED2  6B8B               	clrf	(___ftdiv@f3+1)& (0+255),b
 10772  001ED4  6B8C               	clrf	(___ftdiv@f3+2)& (0+255),b
 10773                           
 10774                           ; BSR set to: 0
 10775  001ED6  518E               	movf	___ftdiv@sign& (0+255),w,b
 10776  001ED8  0F89               	addlw	137
 10777  001EDA  5F8D               	subwf	___ftdiv@exp& (0+255),f,b
 10778                           
 10779                           ; BSR set to: 0
 10780  001EDC  C082  F08E         	movff	___ftdiv@f1+2,___ftdiv@sign
 10781  001EE0  5185               	movf	(___ftdiv@f2+2)& (0+255),w,b
 10782  001EE2  1B8E               	xorwf	___ftdiv@sign& (0+255),f,b
 10783  001EE4  0E80               	movlw	128
 10784  001EE6  178E               	andwf	___ftdiv@sign& (0+255),f,b
 10785                           
 10786                           ; BSR set to: 0
 10787  001EE8  8F81               	bsf	(___ftdiv@f1+1)& (0+255),7,b
 10788                           
 10789                           ; BSR set to: 0
 10790  001EEA  6B82               	clrf	(___ftdiv@f1+2)& (0+255),b
 10791                           
 10792                           ; BSR set to: 0
 10793  001EEC  8F84               	bsf	(___ftdiv@f2+1)& (0+255),7,b
 10794                           
 10795                           ; BSR set to: 0
 10796  001EEE  6B85               	clrf	(___ftdiv@f2+2)& (0+255),b
 10797                           
 10798                           ; BSR set to: 0
 10799  001EF0  0E18               	movlw	24
 10800  001EF2  6F89               	movwf	___ftdiv@cntr& (0+255),b
 10801  001EF4                     l3470:
 10802                           
 10803                           ; BSR set to: 0
 10804  001EF4  90D8               	bcf	status,0,c
 10805  001EF6  378A               	rlcf	___ftdiv@f3& (0+255),f,b
 10806  001EF8  378B               	rlcf	(___ftdiv@f3+1)& (0+255),f,b
 10807  001EFA  378C               	rlcf	(___ftdiv@f3+2)& (0+255),f,b
 10808                           
 10809                           ; BSR set to: 0
 10810  001EFC  5183               	movf	___ftdiv@f2& (0+255),w,b
 10811  001EFE  5D80               	subwf	___ftdiv@f1& (0+255),w,b
 10812  001F00  5184               	movf	(___ftdiv@f2+1)& (0+255),w,b
 10813  001F02  5981               	subwfb	(___ftdiv@f1+1)& (0+255),w,b
 10814  001F04  5185               	movf	(___ftdiv@f2+2)& (0+255),w,b
 10815  001F06  5982               	subwfb	(___ftdiv@f1+2)& (0+255),w,b
 10816  001F08  E307               	bnc	l986
 10817                           
 10818                           ; BSR set to: 0
 10819  001F0A  5183               	movf	___ftdiv@f2& (0+255),w,b
 10820  001F0C  5F80               	subwf	___ftdiv@f1& (0+255),f,b
 10821  001F0E  5184               	movf	(___ftdiv@f2+1)& (0+255),w,b
 10822  001F10  5B81               	subwfb	(___ftdiv@f1+1)& (0+255),f,b
 10823  001F12  5185               	movf	(___ftdiv@f2+2)& (0+255),w,b
 10824  001F14  5B82               	subwfb	(___ftdiv@f1+2)& (0+255),f,b
 10825                           
 10826                           ; BSR set to: 0
 10827  001F16  818A               	bsf	___ftdiv@f3& (0+255),0,b
 10828  001F18                     l986:
 10829                           
 10830                           ; BSR set to: 0
 10831  001F18  90D8               	bcf	status,0,c
 10832  001F1A  3780               	rlcf	___ftdiv@f1& (0+255),f,b
 10833  001F1C  3781               	rlcf	(___ftdiv@f1+1)& (0+255),f,b
 10834  001F1E  3782               	rlcf	(___ftdiv@f1+2)& (0+255),f,b
 10835                           
 10836                           ; BSR set to: 0
 10837  001F20  2F89               	decfsz	___ftdiv@cntr& (0+255),f,b
 10838  001F22  D7E8               	goto	l3470
 10839                           
 10840                           ; BSR set to: 0
 10841  001F24  C08A  F060         	movff	___ftdiv@f3,___ftpack@arg
 10842  001F28  C08B  F061         	movff	___ftdiv@f3+1,___ftpack@arg+1
 10843  001F2C  C08C  F062         	movff	___ftdiv@f3+2,___ftpack@arg+2
 10844  001F30  C08D  F063         	movff	___ftdiv@exp,___ftpack@exp
 10845  001F34  C08E  F064         	movff	___ftdiv@sign,___ftpack@sign
 10846  001F38  ECC3  F011         	call	___ftpack	;wreg free
 10847  001F3C  C060  F080         	movff	?___ftpack,?___ftdiv
 10848  001F40  C061  F081         	movff	?___ftpack+1,?___ftdiv+1
 10849  001F44  C062  F082         	movff	?___ftpack+2,?___ftdiv+2
 10850                           
 10851                           ; BSR set to: 0
 10852  001F48  0012               	return		;funcret
 10853  001F4A                     __end_of___ftdiv:
 10854                           	opt stack 0
 10855                           tblptru	equ	0xFF8
 10856                           tblptrh	equ	0xFF7
 10857                           tblptrl	equ	0xFF6
 10858                           tablat	equ	0xFF5
 10859                           prodh	equ	0xFF4
 10860                           prodl	equ	0xFF3
 10861                           intcon	equ	0xFF2
 10862                           postinc0	equ	0xFEE
 10863                           plusw0	equ	0xFEB
 10864                           wreg	equ	0xFE8
 10865                           indf1	equ	0xFE7
 10866                           postinc1	equ	0xFE6
 10867                           postdec1	equ	0xFE5
 10868                           plusw1	equ	0xFE3
 10869                           fsr1h	equ	0xFE2
 10870                           fsr1l	equ	0xFE1
 10871                           indf2	equ	0xFDF
 10872                           postinc2	equ	0xFDE
 10873                           postdec2	equ	0xFDD
 10874                           plusw2	equ	0xFDB
 10875                           fsr2h	equ	0xFDA
 10876                           fsr2l	equ	0xFD9
 10877                           status	equ	0xFD8
 10878                           
 10879 ;; *************** function ___awtoft *****************
 10880 ;; Defined at:
 10881 ;;		line 32 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\awtoft.c"
 10882 ;; Parameters:    Size  Location     Type
 10883 ;;  c               2    8[BANK0 ] int 
 10884 ;; Auto vars:     Size  Location     Type
 10885 ;;  sign            1   11[BANK0 ] unsigned char 
 10886 ;; Return value:  Size  Location     Type
 10887 ;;                  3    8[BANK0 ] float 
 10888 ;; Registers used:
 10889 ;;		wreg, status,2, status,0, cstack
 10890 ;; Tracked objects:
 10891 ;;		On entry : 3F/0
 10892 ;;		On exit  : 3F/0
 10893 ;;		Unchanged: 0/0
 10894 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 10895 ;;      Params:         0       3       0       0       0       0       0       0       0
 10896 ;;      Locals:         0       1       0       0       0       0       0       0       0
 10897 ;;      Temps:          0       0       0       0       0       0       0       0       0
 10898 ;;      Totals:         0       4       0       0       0       0       0       0       0
 10899 ;;Total ram usage:        4 bytes
 10900 ;; Hardware stack levels used:    1
 10901 ;; Hardware stack levels required when called:    7
 10902 ;; This function calls:
 10903 ;;		___ftpack
 10904 ;; This function is called by:
 10905 ;;		_Display_Init
 10906 ;;		_exp
 10907 ;;		_log
 10908 ;; This function uses a non-reentrant model
 10909 ;;
 10910                           
 10911                           	psect	text64
 10912  002F48                     __ptext64:
 10913                           	opt stack 0
 10914  002F48                     ___awtoft:
 10915                           	opt stack 19
 10916                           
 10917                           ; BSR set to: 0
 10918                           
 10919                           ; BSR set to: 0
 10920                           ;incstack = 0
 10921  002F48  6B6B               	clrf	___awtoft@sign& (0+255),b
 10922                           
 10923                           ; BSR set to: 0
 10924  002F4A  AF69               	btfss	(___awtoft@c+1)& (0+255),7,b
 10925  002F4C  D006               	goto	l3500
 10926                           
 10927                           ; BSR set to: 0
 10928  002F4E  6D68               	negf	___awtoft@c& (0+255),b
 10929  002F50  1F69               	comf	(___awtoft@c+1)& (0+255),f,b
 10930  002F52  B0D8               	btfsc	status,0,c
 10931  002F54  2B69               	incf	(___awtoft@c+1)& (0+255),f,b
 10932                           
 10933                           ; BSR set to: 0
 10934  002F56  0E01               	movlw	1
 10935  002F58  6F6B               	movwf	___awtoft@sign& (0+255),b
 10936  002F5A                     l3500:
 10937                           
 10938                           ; BSR set to: 0
 10939  002F5A  C068  F060         	movff	___awtoft@c,___ftpack@arg
 10940  002F5E  C069  F061         	movff	___awtoft@c+1,___ftpack@arg+1
 10941  002F62  6B62               	clrf	(___ftpack@arg+2)& (0+255),b
 10942  002F64  0E8E               	movlw	142
 10943  002F66  6F63               	movwf	___ftpack@exp& (0+255),b
 10944  002F68  C06B  F064         	movff	___awtoft@sign,___ftpack@sign
 10945  002F6C  ECC3  F011         	call	___ftpack	;wreg free
 10946  002F70  C060  F068         	movff	?___ftpack,?___awtoft
 10947  002F74  C061  F069         	movff	?___ftpack+1,?___awtoft+1
 10948  002F78  C062  F06A         	movff	?___ftpack+2,?___awtoft+2
 10949                           
 10950                           ; BSR set to: 0
 10951  002F7C  0012               	return		;funcret
 10952  002F7E                     __end_of___awtoft:
 10953                           	opt stack 0
 10954                           tblptru	equ	0xFF8
 10955                           tblptrh	equ	0xFF7
 10956                           tblptrl	equ	0xFF6
 10957                           tablat	equ	0xFF5
 10958                           prodh	equ	0xFF4
 10959                           prodl	equ	0xFF3
 10960                           intcon	equ	0xFF2
 10961                           postinc0	equ	0xFEE
 10962                           plusw0	equ	0xFEB
 10963                           wreg	equ	0xFE8
 10964                           indf1	equ	0xFE7
 10965                           postinc1	equ	0xFE6
 10966                           postdec1	equ	0xFE5
 10967                           plusw1	equ	0xFE3
 10968                           fsr1h	equ	0xFE2
 10969                           fsr1l	equ	0xFE1
 10970                           indf2	equ	0xFDF
 10971                           postinc2	equ	0xFDE
 10972                           postdec2	equ	0xFDD
 10973                           plusw2	equ	0xFDB
 10974                           fsr2h	equ	0xFDA
 10975                           fsr2l	equ	0xFD9
 10976                           status	equ	0xFD8
 10977                           
 10978 ;; *************** function ___lltoft *****************
 10979 ;; Defined at:
 10980 ;;		line 35 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\lltoft.c"
 10981 ;; Parameters:    Size  Location     Type
 10982 ;;  c               4    8[BANK0 ] unsigned long 
 10983 ;; Auto vars:     Size  Location     Type
 10984 ;;  exp             1   16[BANK0 ] unsigned char 
 10985 ;; Return value:  Size  Location     Type
 10986 ;;                  3    8[BANK0 ] float 
 10987 ;; Registers used:
 10988 ;;		wreg, status,2, status,0, cstack
 10989 ;; Tracked objects:
 10990 ;;		On entry : 3F/0
 10991 ;;		On exit  : 3F/0
 10992 ;;		Unchanged: 0/0
 10993 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 10994 ;;      Params:         0       4       0       0       0       0       0       0       0
 10995 ;;      Locals:         0       1       0       0       0       0       0       0       0
 10996 ;;      Temps:          0       4       0       0       0       0       0       0       0
 10997 ;;      Totals:         0       9       0       0       0       0       0       0       0
 10998 ;;Total ram usage:        9 bytes
 10999 ;; Hardware stack levels used:    1
 11000 ;; Hardware stack levels required when called:    7
 11001 ;; This function calls:
 11002 ;;		___ftpack
 11003 ;; This function is called by:
 11004 ;;		_pow
 11005 ;; This function uses a non-reentrant model
 11006 ;;
 11007                           
 11008                           	psect	text65
 11009  002C86                     __ptext65:
 11010                           	opt stack 0
 11011  002C86                     ___lltoft:
 11012                           	opt stack 20
 11013                           
 11014                           ; BSR set to: 0
 11015                           
 11016                           ; BSR set to: 0
 11017                           ;incstack = 0
 11018  002C86  0E8E               	movlw	142
 11019  002C88  6F70               	movwf	___lltoft@exp& (0+255),b
 11020  002C8A  D006               	goto	l3646
 11021  002C8C                     l3644:
 11022                           
 11023                           ; BSR set to: 0
 11024  002C8C  90D8               	bcf	status,0,c
 11025  002C8E  336B               	rrcf	(___lltoft@c+3)& (0+255),f,b
 11026  002C90  336A               	rrcf	(___lltoft@c+2)& (0+255),f,b
 11027  002C92  3369               	rrcf	(___lltoft@c+1)& (0+255),f,b
 11028  002C94  3368               	rrcf	___lltoft@c& (0+255),f,b
 11029  002C96  2B70               	incf	___lltoft@exp& (0+255),f,b
 11030  002C98                     l3646:
 11031                           
 11032                           ; BSR set to: 0
 11033  002C98  6B6C               	clrf	??___lltoft& (0+255),b
 11034  002C9A  6B6D               	clrf	(??___lltoft+1)& (0+255),b
 11035  002C9C  6B6E               	clrf	(??___lltoft+2)& (0+255),b
 11036  002C9E  516B               	movf	(___lltoft@c+3)& (0+255),w,b
 11037  002CA0  6F6F               	movwf	(??___lltoft+3)& (0+255),b
 11038  002CA2  516C               	movf	??___lltoft& (0+255),w,b
 11039  002CA4  116D               	iorwf	(??___lltoft+1)& (0+255),w,b
 11040  002CA6  116E               	iorwf	(??___lltoft+2)& (0+255),w,b
 11041  002CA8  116F               	iorwf	(??___lltoft+3)& (0+255),w,b
 11042  002CAA  E1F0               	bnz	l3644
 11043                           
 11044                           ; BSR set to: 0
 11045  002CAC  C068  F060         	movff	___lltoft@c,___ftpack@arg
 11046  002CB0  C069  F061         	movff	___lltoft@c+1,___ftpack@arg+1
 11047  002CB4  C06A  F062         	movff	___lltoft@c+2,___ftpack@arg+2
 11048  002CB8  C070  F063         	movff	___lltoft@exp,___ftpack@exp
 11049  002CBC  0E00               	movlw	0
 11050  002CBE  6F64               	movwf	___ftpack@sign& (0+255),b
 11051  002CC0  ECC3  F011         	call	___ftpack	;wreg free
 11052  002CC4  C060  F068         	movff	?___ftpack,?___lltoft
 11053  002CC8  C061  F069         	movff	?___ftpack+1,?___lltoft+1
 11054  002CCC  C062  F06A         	movff	?___ftpack+2,?___lltoft+2
 11055                           
 11056                           ; BSR set to: 0
 11057  002CD0  0012               	return		;funcret
 11058  002CD2                     __end_of___lltoft:
 11059                           	opt stack 0
 11060                           tblptru	equ	0xFF8
 11061                           tblptrh	equ	0xFF7
 11062                           tblptrl	equ	0xFF6
 11063                           tablat	equ	0xFF5
 11064                           prodh	equ	0xFF4
 11065                           prodl	equ	0xFF3
 11066                           intcon	equ	0xFF2
 11067                           postinc0	equ	0xFEE
 11068                           plusw0	equ	0xFEB
 11069                           wreg	equ	0xFE8
 11070                           indf1	equ	0xFE7
 11071                           postinc1	equ	0xFE6
 11072                           postdec1	equ	0xFE5
 11073                           plusw1	equ	0xFE3
 11074                           fsr1h	equ	0xFE2
 11075                           fsr1l	equ	0xFE1
 11076                           indf2	equ	0xFDF
 11077                           postinc2	equ	0xFDE
 11078                           postdec2	equ	0xFDD
 11079                           plusw2	equ	0xFDB
 11080                           fsr2h	equ	0xFDA
 11081                           fsr2l	equ	0xFD9
 11082                           status	equ	0xFD8
 11083                           
 11084 ;; *************** function ___ftpack *****************
 11085 ;; Defined at:
 11086 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\float.c"
 11087 ;; Parameters:    Size  Location     Type
 11088 ;;  arg             3    0[BANK0 ] unsigned um
 11089 ;;  exp             1    3[BANK0 ] unsigned char 
 11090 ;;  sign            1    4[BANK0 ] unsigned char 
 11091 ;; Auto vars:     Size  Location     Type
 11092 ;;		None
 11093 ;; Return value:  Size  Location     Type
 11094 ;;                  3    0[BANK0 ] float 
 11095 ;; Registers used:
 11096 ;;		wreg, status,2, status,0
 11097 ;; Tracked objects:
 11098 ;;		On entry : 3F/0
 11099 ;;		On exit  : 3F/0
 11100 ;;		Unchanged: 0/0
 11101 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 11102 ;;      Params:         0       5       0       0       0       0       0       0       0
 11103 ;;      Locals:         0       0       0       0       0       0       0       0       0
 11104 ;;      Temps:          0       3       0       0       0       0       0       0       0
 11105 ;;      Totals:         0       8       0       0       0       0       0       0       0
 11106 ;;Total ram usage:        8 bytes
 11107 ;; Hardware stack levels used:    1
 11108 ;; Hardware stack levels required when called:    6
 11109 ;; This function calls:
 11110 ;;		Nothing
 11111 ;; This function is called by:
 11112 ;;		___altoft
 11113 ;;		___awtoft
 11114 ;;		___ftadd
 11115 ;;		___ftdiv
 11116 ;;		___ftmul
 11117 ;;		___lbtoft
 11118 ;;		___lltoft
 11119 ;; This function uses a non-reentrant model
 11120 ;;
 11121                           
 11122                           	psect	text66
 11123  002386                     __ptext66:
 11124                           	opt stack 0
 11125  002386                     ___ftpack:
 11126                           	opt stack 22
 11127                           
 11128                           ; BSR set to: 0
 11129                           
 11130                           ; BSR set to: 0
 11131                           ;incstack = 0
 11132  002386  5163               	movf	___ftpack@exp& (0+255),w,b
 11133  002388  E004               	bz	u2730
 11134                           
 11135                           ; BSR set to: 0
 11136  00238A  5160               	movf	___ftpack@arg& (0+255),w,b
 11137  00238C  1161               	iorwf	(___ftpack@arg+1)& (0+255),w,b
 11138  00238E  1162               	iorwf	(___ftpack@arg+2)& (0+255),w,b
 11139  002390  E109               	bnz	l3162
 11140  002392                     u2730:
 11141                           
 11142                           ; BSR set to: 0
 11143  002392  6B60               	clrf	?___ftpack& (0+255),b
 11144  002394  6B61               	clrf	(?___ftpack+1)& (0+255),b
 11145  002396  6B62               	clrf	(?___ftpack+2)& (0+255),b
 11146  002398  0012               	return	
 11147  00239A                     l3160:
 11148                           
 11149                           ; BSR set to: 0
 11150  00239A  2B63               	incf	___ftpack@exp& (0+255),f,b
 11151  00239C  90D8               	bcf	status,0,c
 11152  00239E  3362               	rrcf	(___ftpack@arg+2)& (0+255),f,b
 11153  0023A0  3361               	rrcf	(___ftpack@arg+1)& (0+255),f,b
 11154  0023A2  3360               	rrcf	___ftpack@arg& (0+255),f,b
 11155  0023A4                     l3162:
 11156                           
 11157                           ; BSR set to: 0
 11158  0023A4  6B65               	clrf	??___ftpack& (0+255),b
 11159  0023A6  6B66               	clrf	(??___ftpack+1)& (0+255),b
 11160  0023A8  0EFE               	movlw	254
 11161  0023AA  1562               	andwf	(___ftpack@arg+2)& (0+255),w,b
 11162  0023AC  6F67               	movwf	(??___ftpack+2)& (0+255),b
 11163  0023AE  5165               	movf	??___ftpack& (0+255),w,b
 11164  0023B0  1166               	iorwf	(??___ftpack+1)& (0+255),w,b
 11165  0023B2  1167               	iorwf	(??___ftpack+2)& (0+255),w,b
 11166  0023B4  E00A               	bz	l3168
 11167  0023B6  D7F1               	goto	l3160
 11168  0023B8                     l3164:
 11169                           
 11170                           ; BSR set to: 0
 11171  0023B8  2B63               	incf	___ftpack@exp& (0+255),f,b
 11172                           
 11173                           ; BSR set to: 0
 11174  0023BA  2B60               	incf	___ftpack@arg& (0+255),f,b
 11175  0023BC  0E00               	movlw	0
 11176  0023BE  2361               	addwfc	(___ftpack@arg+1)& (0+255),f,b
 11177  0023C0  2362               	addwfc	(___ftpack@arg+2)& (0+255),f,b
 11178  0023C2  90D8               	bcf	status,0,c
 11179  0023C4  3362               	rrcf	(___ftpack@arg+2)& (0+255),f,b
 11180  0023C6  3361               	rrcf	(___ftpack@arg+1)& (0+255),f,b
 11181  0023C8  3360               	rrcf	___ftpack@arg& (0+255),f,b
 11182  0023CA                     l3168:
 11183                           
 11184                           ; BSR set to: 0
 11185  0023CA  6B65               	clrf	??___ftpack& (0+255),b
 11186  0023CC  6B66               	clrf	(??___ftpack+1)& (0+255),b
 11187  0023CE  5162               	movf	(___ftpack@arg+2)& (0+255),w,b
 11188  0023D0  6F67               	movwf	(??___ftpack+2)& (0+255),b
 11189  0023D2  5165               	movf	??___ftpack& (0+255),w,b
 11190  0023D4  1166               	iorwf	(??___ftpack+1)& (0+255),w,b
 11191  0023D6  1167               	iorwf	(??___ftpack+2)& (0+255),w,b
 11192  0023D8  E006               	bz	l3172
 11193  0023DA  D7EE               	goto	l3164
 11194  0023DC                     l3170:
 11195                           
 11196                           ; BSR set to: 0
 11197  0023DC  0763               	decf	___ftpack@exp& (0+255),f,b
 11198  0023DE  90D8               	bcf	status,0,c
 11199  0023E0  3760               	rlcf	___ftpack@arg& (0+255),f,b
 11200  0023E2  3761               	rlcf	(___ftpack@arg+1)& (0+255),f,b
 11201  0023E4  3762               	rlcf	(___ftpack@arg+2)& (0+255),f,b
 11202  0023E6                     l3172:
 11203                           
 11204                           ; BSR set to: 0
 11205  0023E6  BF61               	btfsc	(___ftpack@arg+1)& (0+255),7,b
 11206  0023E8  D003               	goto	u2770
 11207                           
 11208                           ; BSR set to: 0
 11209  0023EA  0E02               	movlw	2
 11210  0023EC  6163               	cpfslt	___ftpack@exp& (0+255),b
 11211  0023EE  D7F6               	goto	l3170
 11212  0023F0                     u2770:
 11213                           
 11214                           ; BSR set to: 0
 11215  0023F0  A163               	btfss	___ftpack@exp& (0+255),0,b
 11216                           
 11217                           ; BSR set to: 0
 11218  0023F2  9F61               	bcf	(___ftpack@arg+1)& (0+255),7,b
 11219                           
 11220                           ; BSR set to: 0
 11221  0023F4  90D8               	bcf	status,0,c
 11222  0023F6  3363               	rrcf	___ftpack@exp& (0+255),f,b
 11223                           
 11224                           ; BSR set to: 0
 11225  0023F8  5163               	movf	___ftpack@exp& (0+255),w,b
 11226  0023FA  1362               	iorwf	(___ftpack@arg+2)& (0+255),f,b
 11227                           
 11228                           ; BSR set to: 0
 11229  0023FC  5164               	movf	___ftpack@sign& (0+255),w,b
 11230  0023FE  E001               	bz	l3186
 11231                           
 11232                           ; BSR set to: 0
 11233  002400  8F62               	bsf	(___ftpack@arg+2)& (0+255),7,b
 11234  002402                     l3186:
 11235                           
 11236                           ; BSR set to: 0
 11237  002402  C060  F060         	movff	___ftpack@arg,?___ftpack
 11238  002406  C061  F061         	movff	___ftpack@arg+1,?___ftpack+1
 11239  00240A  C062  F062         	movff	___ftpack@arg+2,?___ftpack+2
 11240                           
 11241                           ; BSR set to: 0
 11242  00240E  0012               	return		;funcret
 11243  002410                     __end_of___ftpack:
 11244                           	opt stack 0
 11245                           tblptru	equ	0xFF8
 11246                           tblptrh	equ	0xFF7
 11247                           tblptrl	equ	0xFF6
 11248                           tablat	equ	0xFF5
 11249                           prodh	equ	0xFF4
 11250                           prodl	equ	0xFF3
 11251                           intcon	equ	0xFF2
 11252                           postinc0	equ	0xFEE
 11253                           plusw0	equ	0xFEB
 11254                           wreg	equ	0xFE8
 11255                           indf1	equ	0xFE7
 11256                           postinc1	equ	0xFE6
 11257                           postdec1	equ	0xFE5
 11258                           plusw1	equ	0xFE3
 11259                           fsr1h	equ	0xFE2
 11260                           fsr1l	equ	0xFE1
 11261                           indf2	equ	0xFDF
 11262                           postinc2	equ	0xFDE
 11263                           postdec2	equ	0xFDD
 11264                           plusw2	equ	0xFDB
 11265                           fsr2h	equ	0xFDA
 11266                           fsr2l	equ	0xFD9
 11267                           status	equ	0xFD8
 11268                           
 11269 ;; *************** function _InitConnector *****************
 11270 ;; Defined at:
 11271 ;;		line 11 in file "harware.c"
 11272 ;; Parameters:    Size  Location     Type
 11273 ;;  AConnector      2    4[BANK0 ] PTR struct .
 11274 ;;		 -> _DigiPot(17), _Hub(157), _Display(217), 
 11275 ;; Auto vars:     Size  Location     Type
 11276 ;;		None
 11277 ;; Return value:  Size  Location     Type
 11278 ;;                  1    wreg      void 
 11279 ;; Registers used:
 11280 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
 11281 ;; Tracked objects:
 11282 ;;		On entry : 3F/0
 11283 ;;		On exit  : 3F/0
 11284 ;;		Unchanged: 0/0
 11285 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 11286 ;;      Params:         0       2       0       0       0       0       0       0       0
 11287 ;;      Locals:         0       0       0       0       0       0       0       0       0
 11288 ;;      Temps:          0       0       0       0       0       0       0       0       0
 11289 ;;      Totals:         0       2       0       0       0       0       0       0       0
 11290 ;;Total ram usage:        2 bytes
 11291 ;; Hardware stack levels used:    1
 11292 ;; Hardware stack levels required when called:    7
 11293 ;; This function calls:
 11294 ;;		_InitPin
 11295 ;; This function is called by:
 11296 ;;		_Display_Init
 11297 ;;		_Hub_Init
 11298 ;;		_InitDigiPot
 11299 ;; This function uses a non-reentrant model
 11300 ;;
 11301                           
 11302                           	psect	text67
 11303  002FDC                     __ptext67:
 11304                           	opt stack 0
 11305  002FDC                     _InitConnector:
 11306                           	opt stack 21
 11307                           
 11308                           ; BSR set to: 0
 11309                           ;harware.c: 13: InitPin(&AConnector->ClockPin);
 11310                           
 11311                           ; BSR set to: 0
 11312                           ;incstack = 0
 11313  002FDC  C064  F060         	movff	InitConnector@AConnector,InitPin@APin
 11314  002FE0  C065  F061         	movff	InitConnector@AConnector+1,InitPin@APin+1
 11315  002FE4  ECCD  F015         	call	_InitPin	;wreg free
 11316                           
 11317                           ;harware.c: 14: InitPin(&AConnector->DataPin);
 11318  002FE8  0E05               	movlw	5
 11319  002FEA  2564               	addwf	InitConnector@AConnector& (0+255),w,b
 11320  002FEC  6F60               	movwf	InitPin@APin& (0+255),b
 11321  002FEE  0E00               	movlw	0
 11322  002FF0  2165               	addwfc	(InitConnector@AConnector+1)& (0+255),w,b
 11323  002FF2  6F61               	movwf	(InitPin@APin+1)& (0+255),b
 11324  002FF4  ECCD  F015         	call	_InitPin	;wreg free
 11325                           
 11326                           ;harware.c: 15: InitPin(&AConnector->LatchPin);
 11327  002FF8  0E0A               	movlw	10
 11328  002FFA  2564               	addwf	InitConnector@AConnector& (0+255),w,b
 11329  002FFC  6F60               	movwf	InitPin@APin& (0+255),b
 11330  002FFE  0E00               	movlw	0
 11331  003000  2165               	addwfc	(InitConnector@AConnector+1)& (0+255),w,b
 11332  003002  6F61               	movwf	(InitPin@APin+1)& (0+255),b
 11333  003004  EFCD  F015         	goto	_InitPin	;wreg free
 11334  003008                     __end_of_InitConnector:
 11335                           	opt stack 0
 11336                           tblptru	equ	0xFF8
 11337                           tblptrh	equ	0xFF7
 11338                           tblptrl	equ	0xFF6
 11339                           tablat	equ	0xFF5
 11340                           prodh	equ	0xFF4
 11341                           prodl	equ	0xFF3
 11342                           intcon	equ	0xFF2
 11343                           postinc0	equ	0xFEE
 11344                           plusw0	equ	0xFEB
 11345                           wreg	equ	0xFE8
 11346                           indf1	equ	0xFE7
 11347                           postinc1	equ	0xFE6
 11348                           postdec1	equ	0xFE5
 11349                           plusw1	equ	0xFE3
 11350                           fsr1h	equ	0xFE2
 11351                           fsr1l	equ	0xFE1
 11352                           indf2	equ	0xFDF
 11353                           postinc2	equ	0xFDE
 11354                           postdec2	equ	0xFDD
 11355                           plusw2	equ	0xFDB
 11356                           fsr2h	equ	0xFDA
 11357                           fsr2l	equ	0xFD9
 11358                           status	equ	0xFD8
 11359                           
 11360 ;; *************** function _InitPin *****************
 11361 ;; Defined at:
 11362 ;;		line 5 in file "harware.c"
 11363 ;; Parameters:    Size  Location     Type
 11364 ;;  APin            2    0[BANK0 ] PTR struct .
 11365 ;;		 -> _DigiPot(17), _Hub(157), _Display(217), 
 11366 ;; Auto vars:     Size  Location     Type
 11367 ;;		None
 11368 ;; Return value:  Size  Location     Type
 11369 ;;                  1    wreg      void 
 11370 ;; Registers used:
 11371 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0
 11372 ;; Tracked objects:
 11373 ;;		On entry : 3F/0
 11374 ;;		On exit  : 3F/0
 11375 ;;		Unchanged: 0/0
 11376 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 11377 ;;      Params:         0       2       0       0       0       0       0       0       0
 11378 ;;      Locals:         0       0       0       0       0       0       0       0       0
 11379 ;;      Temps:          0       2       0       0       0       0       0       0       0
 11380 ;;      Totals:         0       4       0       0       0       0       0       0       0
 11381 ;;Total ram usage:        4 bytes
 11382 ;; Hardware stack levels used:    1
 11383 ;; Hardware stack levels required when called:    6
 11384 ;; This function calls:
 11385 ;;		Nothing
 11386 ;; This function is called by:
 11387 ;;		_InitConnector
 11388 ;; This function uses a non-reentrant model
 11389 ;;
 11390                           
 11391                           	psect	text68
 11392  002B9A                     __ptext68:
 11393                           	opt stack 0
 11394  002B9A                     _InitPin:
 11395                           	opt stack 21
 11396                           
 11397                           ; BSR set to: 0
 11398                           ;harware.c: 7: APin->NegativeMask = 0x01 << APin->PinNumber;
 11399                           
 11400                           ; BSR set to: 0
 11401                           ;incstack = 0
 11402  002B9A  EE20 F004          	lfsr	2,4
 11403  002B9E  5160               	movf	InitPin@APin& (0+255),w,b
 11404  002BA0  26D9               	addwf	fsr2l,f,c
 11405  002BA2  5161               	movf	(InitPin@APin+1)& (0+255),w,b
 11406  002BA4  22DA               	addwfc	fsr2h,f,c
 11407  002BA6  EE10 F002          	lfsr	1,2
 11408  002BAA  5160               	movf	InitPin@APin& (0+255),w,b
 11409  002BAC  26E1               	addwf	fsr1l,f,c
 11410  002BAE  5161               	movf	(InitPin@APin+1)& (0+255),w,b
 11411  002BB0  22E2               	addwfc	fsr1h,f,c
 11412  002BB2  50E7               	movf	indf1,w,c
 11413  002BB4  6F62               	movwf	??_InitPin& (0+255),b
 11414  002BB6  0E01               	movlw	1
 11415  002BB8  6F63               	movwf	(??_InitPin+1)& (0+255),b
 11416  002BBA  2B62               	incf	??_InitPin& (0+255),f,b
 11417  002BBC  D002               	goto	u3594
 11418  002BBE                     u3595:
 11419  002BBE  90D8               	bcf	status,0,c
 11420  002BC0  3763               	rlcf	(??_InitPin+1)& (0+255),f,b
 11421  002BC2                     u3594:
 11422  002BC2  2F62               	decfsz	??_InitPin& (0+255),f,b
 11423  002BC4  D7FC               	goto	u3595
 11424  002BC6  0100               	movlb	0	; () banked
 11425  002BC8  5163               	movf	(??_InitPin+1)& (0+255),w,b
 11426  002BCA  6EDF               	movwf	indf2,c
 11427                           
 11428                           ;harware.c: 8: APin->Mask = ~APin->NegativeMask;
 11429  002BCC  EE20 F003          	lfsr	2,3
 11430  002BD0  5160               	movf	InitPin@APin& (0+255),w,b
 11431  002BD2  26D9               	addwf	fsr2l,f,c
 11432  002BD4  5161               	movf	(InitPin@APin+1)& (0+255),w,b
 11433  002BD6  22DA               	addwfc	fsr2h,f,c
 11434  002BD8  EE10 F004          	lfsr	1,4
 11435  002BDC  5160               	movf	InitPin@APin& (0+255),w,b
 11436  002BDE  26E1               	addwf	fsr1l,f,c
 11437  002BE0  5161               	movf	(InitPin@APin+1)& (0+255),w,b
 11438  002BE2  22E2               	addwfc	fsr1h,f,c
 11439  002BE4  1CE7               	comf	indf1,w,c
 11440  002BE6  6EDF               	movwf	indf2,c
 11441                           
 11442                           ; BSR set to: 0
 11443  002BE8  0012               	return		;funcret
 11444  002BEA                     __end_of_InitPin:
 11445                           	opt stack 0
 11446                           tblptru	equ	0xFF8
 11447                           tblptrh	equ	0xFF7
 11448                           tblptrl	equ	0xFF6
 11449                           tablat	equ	0xFF5
 11450                           prodh	equ	0xFF4
 11451                           prodl	equ	0xFF3
 11452                           intcon	equ	0xFF2
 11453                           postinc0	equ	0xFEE
 11454                           plusw0	equ	0xFEB
 11455                           wreg	equ	0xFE8
 11456                           indf1	equ	0xFE7
 11457                           postinc1	equ	0xFE6
 11458                           postdec1	equ	0xFE5
 11459                           plusw1	equ	0xFE3
 11460                           fsr1h	equ	0xFE2
 11461                           fsr1l	equ	0xFE1
 11462                           indf2	equ	0xFDF
 11463                           postinc2	equ	0xFDE
 11464                           postdec2	equ	0xFDD
 11465                           plusw2	equ	0xFDB
 11466                           fsr2h	equ	0xFDA
 11467                           fsr2l	equ	0xFD9
 11468                           status	equ	0xFD8
 11469                           
 11470 ;; *************** function _ConfigureOscillator *****************
 11471 ;; Defined at:
 11472 ;;		line 24 in file "system.c"
 11473 ;; Parameters:    Size  Location     Type
 11474 ;;		None
 11475 ;; Auto vars:     Size  Location     Type
 11476 ;;		None
 11477 ;; Return value:  Size  Location     Type
 11478 ;;                  1    wreg      void 
 11479 ;; Registers used:
 11480 ;;		None
 11481 ;; Tracked objects:
 11482 ;;		On entry : 0/0
 11483 ;;		On exit  : 0/0
 11484 ;;		Unchanged: 0/0
 11485 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 11486 ;;      Params:         0       0       0       0       0       0       0       0       0
 11487 ;;      Locals:         0       0       0       0       0       0       0       0       0
 11488 ;;      Temps:          0       0       0       0       0       0       0       0       0
 11489 ;;      Totals:         0       0       0       0       0       0       0       0       0
 11490 ;;Total ram usage:        0 bytes
 11491 ;; Hardware stack levels used:    1
 11492 ;; Hardware stack levels required when called:    6
 11493 ;; This function calls:
 11494 ;;		Nothing
 11495 ;; This function is called by:
 11496 ;;		_main
 11497 ;; This function uses a non-reentrant model
 11498 ;;
 11499                           
 11500                           	psect	text69
 11501  003230                     __ptext69:
 11502                           	opt stack 0
 11503  003230                     _ConfigureOscillator:
 11504                           	opt stack 24
 11505                           
 11506                           ; BSR set to: 0
 11507                           ;incstack = 0
 11508  003230  0012               	return		;funcret
 11509  003232                     __end_of_ConfigureOscillator:
 11510                           	opt stack 0
 11511                           tblptru	equ	0xFF8
 11512                           tblptrh	equ	0xFF7
 11513                           tblptrl	equ	0xFF6
 11514                           tablat	equ	0xFF5
 11515                           prodh	equ	0xFF4
 11516                           prodl	equ	0xFF3
 11517                           intcon	equ	0xFF2
 11518                           postinc0	equ	0xFEE
 11519                           plusw0	equ	0xFEB
 11520                           wreg	equ	0xFE8
 11521                           indf1	equ	0xFE7
 11522                           postinc1	equ	0xFE6
 11523                           postdec1	equ	0xFE5
 11524                           plusw1	equ	0xFE3
 11525                           fsr1h	equ	0xFE2
 11526                           fsr1l	equ	0xFE1
 11527                           indf2	equ	0xFDF
 11528                           postinc2	equ	0xFDE
 11529                           postdec2	equ	0xFDD
 11530                           plusw2	equ	0xFDB
 11531                           fsr2h	equ	0xFDA
 11532                           fsr2l	equ	0xFD9
 11533                           status	equ	0xFD8
 11534                           
 11535 ;; *************** function _Interrupt *****************
 11536 ;; Defined at:
 11537 ;;		line 50 in file "main.c"
 11538 ;; Parameters:    Size  Location     Type
 11539 ;;		None
 11540 ;; Auto vars:     Size  Location     Type
 11541 ;;  LData           1   87[COMRAM] unsigned char 
 11542 ;; Return value:  Size  Location     Type
 11543 ;;                  1    wreg      void 
 11544 ;; Registers used:
 11545 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 11546 ;; Tracked objects:
 11547 ;;		On entry : 0/0
 11548 ;;		On exit  : 0/0
 11549 ;;		Unchanged: 0/0
 11550 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 11551 ;;      Params:         0       0       0       0       0       0       0       0       0
 11552 ;;      Locals:         1       0       0       0       0       0       0       0       0
 11553 ;;      Temps:          9       0       0       0       0       0       0       0       0
 11554 ;;      Totals:        10       0       0       0       0       0       0       0       0
 11555 ;;Total ram usage:       10 bytes
 11556 ;; Hardware stack levels used:    1
 11557 ;; Hardware stack levels required when called:    5
 11558 ;; This function calls:
 11559 ;;		_Display_SwapBuffer
 11560 ;;		_Hub_UpdateValues
 11561 ;;		_Midi_Write
 11562 ;;		_Sequencer_TimerEvent
 11563 ;;		i2_Hub_CopyBuffer
 11564 ;;		i2_Midi_ResetBuffer
 11565 ;;		i2_Sequencer_StopTimer
 11566 ;;		i2_WriteData
 11567 ;; This function is called by:
 11568 ;;		Interrupt level 2
 11569 ;; This function uses a non-reentrant model
 11570 ;;
 11571                           
 11572                           	psect	intcode
 11573  000008                     __pintcode:
 11574                           	opt stack 0
 11575  000008                     _Interrupt:
 11576                           	opt stack 18
 11577                           
 11578                           ;incstack = 0
 11579  000008  825F               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
 11580  00000A  EDD5  F00B         	call	int_func,f	;refresh shadow registers
 11581                           tblptru	equ	0xFF8
 11582                           tblptrh	equ	0xFF7
 11583                           tblptrl	equ	0xFF6
 11584                           tablat	equ	0xFF5
 11585                           prodh	equ	0xFF4
 11586                           prodl	equ	0xFF3
 11587                           intcon	equ	0xFF2
 11588                           postinc0	equ	0xFEE
 11589                           plusw0	equ	0xFEB
 11590                           wreg	equ	0xFE8
 11591                           indf1	equ	0xFE7
 11592                           postinc1	equ	0xFE6
 11593                           postdec1	equ	0xFE5
 11594                           plusw1	equ	0xFE3
 11595                           fsr1h	equ	0xFE2
 11596                           fsr1l	equ	0xFE1
 11597                           indf2	equ	0xFDF
 11598                           postinc2	equ	0xFDE
 11599                           postdec2	equ	0xFDD
 11600                           plusw2	equ	0xFDB
 11601                           fsr2h	equ	0xFDA
 11602                           fsr2l	equ	0xFD9
 11603                           status	equ	0xFD8
 11604                           
 11605                           	psect	intcode_body
 11606  0017AA                     __pintcode_body:
 11607                           	opt stack 18
 11608  0017AA                     int_func:
 11609                           	opt stack 18
 11610  0017AA  0006               	pop		; remove dummy address from shadow register refresh
 11611  0017AC  CFE9 F050          	movff	fsr0l,??_Interrupt+1
 11612  0017B0  CFEA F051          	movff	fsr0h,??_Interrupt+2
 11613  0017B4  CFE1 F052          	movff	fsr1l,??_Interrupt+3
 11614  0017B8  CFE2 F053          	movff	fsr1h,??_Interrupt+4
 11615  0017BC  CFD9 F054          	movff	fsr2l,??_Interrupt+5
 11616  0017C0  CFDA F055          	movff	fsr2h,??_Interrupt+6
 11617  0017C4  CFF3 F056          	movff	prodl,??_Interrupt+7
 11618  0017C8  CFF4 F057          	movff	prodh,??_Interrupt+8
 11619                           
 11620                           ;main.c: 52: if (TMR0IF)
 11621  0017CC  A4F2               	btfss	intcon,2,c	;volatile
 11622  0017CE  D031               	goto	i2l80
 11623                           
 11624                           ;main.c: 53: {
 11625                           ;main.c: 54: TMR0IF = 0;
 11626  0017D0  94F2               	bcf	intcon,2,c	;volatile
 11627                           
 11628                           ;main.c: 56: WriteData(_Display.PrimaryBuffer + _Display.iDisplay * (2 + 8), 2 + 8, _Dis
      +                          play.IO);
 11629  0017D2  0102               	movlb	2	; () banked
 11630  0017D4  51C6               	movf	(__Display+198)& (0+255),w,b
 11631  0017D6  0D0A               	mullw	10
 11632  0017D8  50F3               	movf	prodl,w,c
 11633  0017DA  25B6               	addwf	(__Display+182)& (0+255),w,b
 11634  0017DC  6E25               	movwf	i2WriteData@AData,c
 11635  0017DE  50F4               	movf	prodh,w,c
 11636  0017E0  21B7               	addwfc	(__Display+183)& (0+255),w,b
 11637  0017E2  6E26               	movwf	i2WriteData@AData+1,c
 11638  0017E4  0E0A               	movlw	10
 11639  0017E6  6E27               	movwf	i2WriteData@ASize,c
 11640  0017E8  EE22  F0CA         	lfsr	2,__Display+202
 11641  0017EC  EE00  F028         	lfsr	0,i2WriteData@AIO
 11642  0017F0  0E0E               	movlw	14
 11643  0017F2                     i2u501_41:
 11644  0017F2  CFDB FFEB          	movff	plusw2,plusw0
 11645  0017F6  06E8               	decf	wreg,f,c
 11646  0017F8  E2FC               	bc	i2u501_41
 11647  0017FA  EC5D  F014         	call	i2_WriteData	;wreg free
 11648                           
 11649                           ;main.c: 58: _Display.iDisplay++;
 11650  0017FE  0102               	movlb	2	; () banked
 11651  001800  2BC6               	incf	(__Display+198)& (0+255),f,b
 11652                           
 11653                           ; BSR set to: 2
 11654                           ;main.c: 59: if (_Display.iDisplay >= (char)(((0x01 << 6) - 1 * 1.0f) / (7 * 1.0f)))
 11655  001802  0E08               	movlw	8
 11656  001804  65C6               	cpfsgt	(__Display+198)& (0+255),b
 11657  001806  D005               	goto	i2l4692
 11658                           
 11659                           ; BSR set to: 2
 11660                           ;main.c: 60: {
 11661                           ;main.c: 64: if (_Display.ReadyToRead)
 11662  001808  5100               	movf	__Display& (0+255),w,b
 11663  00180A  E002               	bz	i2l4690
 11664                           
 11665                           ; BSR set to: 2
 11666                           ;main.c: 65: Display_SwapBuffer();
 11667  00180C  EC4F  F018         	call	_Display_SwapBuffer	;wreg free
 11668  001810                     i2l4690:
 11669                           
 11670                           ; BSR set to: 2
 11671                           ;main.c: 66: _Display.iDisplay = 0;
 11672  001810  6BC6               	clrf	(__Display+198)& (0+255),b
 11673  001812                     i2l4692:
 11674                           
 11675                           ; BSR set to: 2
 11676                           ;main.c: 67: }
 11677                           ;main.c: 69: if (_Hub.ReadyToRead)
 11678  001812  0101               	movlb	1	; () banked
 11679  001814  5187               	movf	(__Hub+135)& (0+255),w,b
 11680  001816  E004               	bz	i2l4698
 11681                           
 11682                           ; BSR set to: 1
 11683                           ;main.c: 70: {
 11684                           ;main.c: 71: Hub_UpdateValues();
 11685  001818  EC86  F00E         	call	_Hub_UpdateValues	;wreg free
 11686                           
 11687                           ; BSR set to: 1
 11688                           ;main.c: 72: _Hub.Paused = 0;
 11689  00181C  6B88               	clrf	(__Hub+136)& (0+255),b
 11690                           
 11691                           ;main.c: 73: }
 11692  00181E  D002               	goto	i2l84
 11693  001820                     i2l4698:
 11694                           
 11695                           ; BSR set to: 1
 11696                           ;main.c: 74: else
 11697                           ;main.c: 75: _Hub.Paused = 1;
 11698  001820  0E01               	movlw	1
 11699  001822  6F88               	movwf	(__Hub+136)& (0+255),b
 11700  001824                     i2l84:
 11701                           
 11702                           ; BSR set to: 1
 11703                           ;main.c: 77: if (_Hub.ReadyToWrite)
 11704  001824  5186               	movf	(__Hub+134)& (0+255),w,b
 11705  001826  E002               	bz	i2l4702
 11706                           
 11707                           ; BSR set to: 1
 11708                           ;main.c: 78: Hub_CopyBuffer();
 11709  001828  EC5F  F018         	call	i2_Hub_CopyBuffer	;wreg free
 11710  00182C                     i2l4702:
 11711                           
 11712                           ; BSR set to: 1
 11713                           ;main.c: 80: _DigiPot.Counter++;
 11714  00182C  0100               	movlb	0	; () banked
 11715  00182E  2BE2               	incf	(__DigiPot+1)& (0+255),f,b
 11716                           
 11717                           ;main.c: 81: }
 11718  001830  D037               	goto	i2u512_40
 11719  001832                     i2l80:
 11720                           
 11721                           ;main.c: 82: else if (TMR1IF)
 11722  001832  A09E               	btfss	3998,0,c	;volatile
 11723  001834  D019               	goto	i2l87
 11724                           
 11725                           ;main.c: 83: {
 11726                           ;main.c: 84: TMR1IF = 0;
 11727  001836  909E               	bcf	3998,0,c	;volatile
 11728                           
 11729                           ;main.c: 85: _Timer.Counter++;
 11730  001838  4A5D               	infsnz	__Timer+4,f,c
 11731  00183A  2A5E               	incf	__Timer+5,f,c
 11732                           
 11733                           ;main.c: 86: if (_Timer.Counter >= _Timer.Ticks)
 11734  00183C  505B               	movf	__Timer+2,w,c
 11735  00183E  5C5D               	subwf	__Timer+4,w,c
 11736  001840  505E               	movf	__Timer+5,w,c
 11737  001842  0A80               	xorlw	128
 11738  001844  6E4F               	movwf	??_Interrupt& (0+255),c
 11739  001846  505C               	movf	__Timer+3,w,c
 11740  001848  0A80               	xorlw	128
 11741  00184A  584F               	subwfb	??_Interrupt& (0+255),w,c
 11742  00184C  E329               	bnc	i2u512_40
 11743                           
 11744                           ;main.c: 87: {
 11745                           ;main.c: 88: _Timer.Counter = 0;
 11746  00184E  6A5D               	clrf	__Timer+4,c
 11747  001850  6A5E               	clrf	__Timer+5,c
 11748                           
 11749                           ;main.c: 89: _Timer.Elapsed = 1;
 11750  001852  0E01               	movlw	1
 11751  001854  6E59               	movwf	__Timer,c
 11752                           
 11753                           ;main.c: 90: Sequencer_TimerEvent();
 11754  001856  EC88  F018         	call	_Sequencer_TimerEvent	;wreg free
 11755                           
 11756                           ;main.c: 91: if (_Timer.Loop)
 11757  00185A  505A               	movf	__Timer+1,w,c
 11758  00185C  E002               	bz	i2l4720
 11759                           
 11760                           ;main.c: 92: _Timer.Elapsed = 0;
 11761  00185E  6A59               	clrf	__Timer,c
 11762  001860  D01F               	goto	i2u512_40
 11763  001862                     i2l4720:
 11764                           
 11765                           ;main.c: 93: else
 11766                           ;main.c: 94: Sequencer_StopTimer();
 11767  001862  EC14  F019         	call	i2_Sequencer_StopTimer	;wreg free
 11768  001866  D01C               	goto	i2u512_40
 11769  001868                     i2l87:
 11770                           
 11771                           ;main.c: 97: else if (PIR1bits.RCIF)
 11772  001868  AA9E               	btfss	3998,5,c	;volatile
 11773  00186A  D01A               	goto	i2u512_40
 11774                           
 11775                           ;main.c: 98: {
 11776                           ;main.c: 100: LATB4 = 0;
 11777  00186C  988A               	bcf	3978,4,c	;volatile
 11778                           
 11779                           ;main.c: 102: while (PIR1bits.RCIF)
 11780  00186E  D016               	goto	i2l4734
 11781  001870                     i2l94:
 11782                           
 11783                           ;main.c: 103: {
 11784                           ;main.c: 104: LData = RCREG;
 11785  001870  CFAE F058          	movff	4014,Interrupt@LData	;volatile
 11786                           
 11787                           ;main.c: 105: if (RCSTAbits.FERR || RCSTAbits.OERR)
 11788  001874  B4AB               	btfsc	4011,2,c	;volatile
 11789  001876  D002               	goto	i2u511_40
 11790  001878  A2AB               	btfss	4011,1,c	;volatile
 11791  00187A  D009               	goto	i2l4732
 11792  00187C                     i2u511_40:
 11793                           
 11794                           ;main.c: 106: {
 11795                           ;main.c: 107: Midi_ResetBuffer(&_MidiInput);
 11796  00187C  0E1D               	movlw	low __MidiInput
 11797  00187E  6E01               	movwf	i2Midi_ResetBuffer@AMidiBuffer,c
 11798  001880  0E04               	movlw	high __MidiInput
 11799  001882  6E02               	movwf	i2Midi_ResetBuffer@AMidiBuffer+1,c
 11800  001884  ECA5  F00F         	call	i2_Midi_ResetBuffer	;wreg free
 11801                           
 11802                           ;main.c: 108: CREN = 0;
 11803  001888  98AB               	bcf	4011,4,c	;volatile
 11804                           
 11805                           ;main.c: 109: CREN = 1;
 11806  00188A  88AB               	bsf	4011,4,c	;volatile
 11807                           
 11808                           ;main.c: 110: }
 11809  00188C  D007               	goto	i2l4734
 11810  00188E                     i2l4732:
 11811                           
 11812                           ;main.c: 111: else
 11813                           ;main.c: 112: Midi_Write(LData, &_MidiInput);
 11814  00188E  0E1D               	movlw	low __MidiInput
 11815  001890  6E01               	movwf	Midi_Write@AMidiBuffer,c
 11816  001892  0E04               	movlw	high __MidiInput
 11817  001894  6E02               	movwf	Midi_Write@AMidiBuffer+1,c
 11818  001896  5058               	movf	Interrupt@LData,w,c
 11819  001898  EC2C  F005         	call	_Midi_Write
 11820  00189C                     i2l4734:
 11821  00189C  BA9E               	btfsc	3998,5,c	;volatile
 11822  00189E  D7E8               	goto	i2l94
 11823  0018A0                     i2u512_40:
 11824  0018A0  C057  FFF4         	movff	??_Interrupt+8,prodh
 11825  0018A4  C056  FFF3         	movff	??_Interrupt+7,prodl
 11826  0018A8  C055  FFDA         	movff	??_Interrupt+6,fsr2h
 11827  0018AC  C054  FFD9         	movff	??_Interrupt+5,fsr2l
 11828  0018B0  C053  FFE2         	movff	??_Interrupt+4,fsr1h
 11829  0018B4  C052  FFE1         	movff	??_Interrupt+3,fsr1l
 11830  0018B8  C051  FFEA         	movff	??_Interrupt+2,fsr0h
 11831  0018BC  C050  FFE9         	movff	??_Interrupt+1,fsr0l
 11832  0018C0  925F               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
 11833  0018C2  0011               	retfie		f
 11834  0018C4                     __end_of_Interrupt:
 11835                           	opt stack 0
 11836                           tblptru	equ	0xFF8
 11837                           tblptrh	equ	0xFF7
 11838                           tblptrl	equ	0xFF6
 11839                           tablat	equ	0xFF5
 11840                           prodh	equ	0xFF4
 11841                           prodl	equ	0xFF3
 11842                           intcon	equ	0xFF2
 11843                           postinc0	equ	0xFEE
 11844                           plusw0	equ	0xFEB
 11845                           fsr0h	equ	0xFEA
 11846                           fsr0l	equ	0xFE9
 11847                           wreg	equ	0xFE8
 11848                           indf1	equ	0xFE7
 11849                           postinc1	equ	0xFE6
 11850                           postdec1	equ	0xFE5
 11851                           plusw1	equ	0xFE3
 11852                           fsr1h	equ	0xFE2
 11853                           fsr1l	equ	0xFE1
 11854                           indf2	equ	0xFDF
 11855                           postinc2	equ	0xFDE
 11856                           postdec2	equ	0xFDD
 11857                           plusw2	equ	0xFDB
 11858                           fsr2h	equ	0xFDA
 11859                           fsr2l	equ	0xFD9
 11860                           status	equ	0xFD8
 11861                           
 11862 ;; *************** function i2_WriteData *****************
 11863 ;; Defined at:
 11864 ;;		line 28 in file "harware.c"
 11865 ;; Parameters:    Size  Location     Type
 11866 ;;  AData           2   36[COMRAM] PTR unsigned char 
 11867 ;;		 -> _Display.Buffer2(90), _Display.Buffer1(90), _Hub.SecondaryBuffer(12), _Hub(157), 
 11868 ;;		 -> _Display(217), 
 11869 ;;  ASize           1   38[COMRAM] unsigned char 
 11870 ;;  AIO            15   39[COMRAM] struct .
 11871 ;; Auto vars:     Size  Location     Type
 11872 ;;  WriteData       2   54[COMRAM] int 
 11873 ;; Return value:  Size  Location     Type
 11874 ;;                  1    wreg      void 
 11875 ;; Registers used:
 11876 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, cstack
 11877 ;; Tracked objects:
 11878 ;;		On entry : 3F/2
 11879 ;;		On exit  : 0/0
 11880 ;;		Unchanged: 0/0
 11881 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 11882 ;;      Params:        18       0       0       0       0       0       0       0       0
 11883 ;;      Locals:         2       0       0       0       0       0       0       0       0
 11884 ;;      Temps:          0       0       0       0       0       0       0       0       0
 11885 ;;      Totals:        20       0       0       0       0       0       0       0       0
 11886 ;;Total ram usage:       20 bytes
 11887 ;; Hardware stack levels used:    1
 11888 ;; Hardware stack levels required when called:    2
 11889 ;; This function calls:
 11890 ;;		i2_LatchOff
 11891 ;;		i2_LatchOn
 11892 ;;		i2_WriteChar
 11893 ;; This function is called by:
 11894 ;;		_Interrupt
 11895 ;; This function uses a non-reentrant model
 11896 ;;
 11897                           
 11898                           	psect	text71
 11899  0028BA                     __ptext71:
 11900                           	opt stack 0
 11901  0028BA                     i2_WriteData:
 11902                           	opt stack 20
 11903                           
 11904                           ; BSR set to: 2
 11905                           ;harware.c: 30: LatchOn(AIO);
 11906                           
 11907                           ;incstack = 0
 11908  0028BA  EE20  F028         	lfsr	2,i2WriteData@AIO
 11909  0028BE  EE00  F001         	lfsr	0,i2LatchOn@AIO
 11910  0028C2  0E0E               	movlw	14
 11911  0028C4                     i2u494_41:
 11912  0028C4  CFDB FFEB          	movff	plusw2,plusw0
 11913  0028C8  06E8               	decf	wreg,f,c
 11914  0028CA  E2FC               	bc	i2u494_41
 11915  0028CC  ECEA  F018         	call	i2_LatchOn	;wreg free
 11916                           
 11917                           ;harware.c: 31: for (int i = ASize - 1; i >= 0; i--)
 11918  0028D0  0EFF               	movlw	255
 11919  0028D2  2427               	addwf	i2WriteData@ASize,w,c
 11920  0028D4  6E37               	movwf	i2WriteData@i,c
 11921  0028D6  6A38               	clrf	i2WriteData@i+1,c
 11922  0028D8  0EFF               	movlw	255
 11923  0028DA  2238               	addwfc	i2WriteData@i+1,f,c
 11924  0028DC                     i2l4638:
 11925  0028DC  BE38               	btfsc	i2WriteData@i+1,7,c
 11926  0028DE  D016               	goto	i2l4648
 11927                           
 11928                           ;harware.c: 32: WriteChar(AData[i], AIO);
 11929  0028E0  EE20  F028         	lfsr	2,i2WriteData@AIO
 11930  0028E4  EE00  F010         	lfsr	0,i2WriteChar@AIO
 11931  0028E8  0E0E               	movlw	14
 11932  0028EA                     i2u496_41:
 11933  0028EA  CFDB FFEB          	movff	plusw2,plusw0
 11934  0028EE  06E8               	decf	wreg,f,c
 11935  0028F0  E2FC               	bc	i2u496_41
 11936  0028F2  5037               	movf	i2WriteData@i,w,c
 11937  0028F4  2425               	addwf	i2WriteData@AData,w,c
 11938  0028F6  6ED9               	movwf	fsr2l,c
 11939  0028F8  5038               	movf	i2WriteData@i+1,w,c
 11940  0028FA  2026               	addwfc	i2WriteData@AData+1,w,c
 11941  0028FC  6EDA               	movwf	fsr2h,c
 11942  0028FE  50DF               	movf	indf2,w,c
 11943  002900  EC8E  F012         	call	i2_WriteChar
 11944  002904  0637               	decf	i2WriteData@i,f,c
 11945  002906  A0D8               	btfss	status,0,c
 11946  002908  0638               	decf	i2WriteData@i+1,f,c
 11947  00290A  D7E8               	goto	i2l4638
 11948  00290C                     i2l4648:
 11949                           
 11950                           ;harware.c: 33: LatchOff(AIO);
 11951  00290C  EE20  F028         	lfsr	2,i2WriteData@AIO
 11952  002910  EE00  F001         	lfsr	0,i2LatchOff@AIO
 11953  002914  0E0E               	movlw	14
 11954  002916                     i2u497_41:
 11955  002916  CFDB FFEB          	movff	plusw2,plusw0
 11956  00291A  06E8               	decf	wreg,f,c
 11957  00291C  E2FC               	bc	i2u497_41
 11958  00291E  EFF1  F018         	goto	i2_LatchOff	;wreg free
 11959  002922                     __end_ofi2_WriteData:
 11960                           	opt stack 0
 11961                           tblptru	equ	0xFF8
 11962                           tblptrh	equ	0xFF7
 11963                           tblptrl	equ	0xFF6
 11964                           tablat	equ	0xFF5
 11965                           prodh	equ	0xFF4
 11966                           prodl	equ	0xFF3
 11967                           intcon	equ	0xFF2
 11968                           postinc0	equ	0xFEE
 11969                           plusw0	equ	0xFEB
 11970                           fsr0h	equ	0xFEA
 11971                           fsr0l	equ	0xFE9
 11972                           wreg	equ	0xFE8
 11973                           indf1	equ	0xFE7
 11974                           postinc1	equ	0xFE6
 11975                           postdec1	equ	0xFE5
 11976                           plusw1	equ	0xFE3
 11977                           fsr1h	equ	0xFE2
 11978                           fsr1l	equ	0xFE1
 11979                           indf2	equ	0xFDF
 11980                           postinc2	equ	0xFDE
 11981                           postdec2	equ	0xFDD
 11982                           plusw2	equ	0xFDB
 11983                           fsr2h	equ	0xFDA
 11984                           fsr2l	equ	0xFD9
 11985                           status	equ	0xFD8
 11986                           
 11987 ;; *************** function i2_WriteChar *****************
 11988 ;; Defined at:
 11989 ;;		line 18 in file "harware.c"
 11990 ;; Parameters:    Size  Location     Type
 11991 ;;  AChar           1    wreg     unsigned char 
 11992 ;;  AIO            15   15[COMRAM] struct .
 11993 ;; Auto vars:     Size  Location     Type
 11994 ;;  AChar           1   33[COMRAM] unsigned char 
 11995 ;;  WriteChar       2   34[COMRAM] int 
 11996 ;; Return value:  Size  Location     Type
 11997 ;;                  1    wreg      void 
 11998 ;; Registers used:
 11999 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, cstack
 12000 ;; Tracked objects:
 12001 ;;		On entry : 0/2
 12002 ;;		On exit  : 0/0
 12003 ;;		Unchanged: 0/0
 12004 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 12005 ;;      Params:        15       0       0       0       0       0       0       0       0
 12006 ;;      Locals:         3       0       0       0       0       0       0       0       0
 12007 ;;      Temps:          3       0       0       0       0       0       0       0       0
 12008 ;;      Totals:        21       0       0       0       0       0       0       0       0
 12009 ;;Total ram usage:       21 bytes
 12010 ;; Hardware stack levels used:    1
 12011 ;; Hardware stack levels required when called:    1
 12012 ;; This function calls:
 12013 ;;		i2_ClockDown
 12014 ;;		i2_ClockUp
 12015 ;; This function is called by:
 12016 ;;		i2_WriteData
 12017 ;; This function uses a non-reentrant model
 12018 ;;
 12019                           
 12020                           	psect	text72
 12021  00251C                     __ptext72:
 12022                           	opt stack 0
 12023  00251C                     i2_WriteChar:
 12024                           	opt stack 20
 12025                           
 12026                           ;incstack = 0
 12027                           ;i2WriteChar@AChar stored from wreg
 12028  00251C  6E22               	movwf	i2WriteChar@AChar,c
 12029                           
 12030                           ;harware.c: 20: for (int i = 7; i >= 0; i--)
 12031  00251E  6A24               	clrf	i2WriteChar@i+1,c
 12032  002520  0E07               	movlw	7
 12033  002522  6E23               	movwf	i2WriteChar@i,c
 12034  002524                     i2l4366:
 12035                           
 12036                           ;harware.c: 21: {
 12037                           ;harware.c: 22: ClockUp(AIO);
 12038  002524  EE20  F010         	lfsr	2,i2WriteChar@AIO
 12039  002528  EE00  F001         	lfsr	0,i2ClockUp@AIO
 12040  00252C  0E0E               	movlw	14
 12041  00252E                     i2u464_41:
 12042  00252E  CFDB FFEB          	movff	plusw2,plusw0
 12043  002532  06E8               	decf	wreg,f,c
 12044  002534  E2FC               	bc	i2u464_41
 12045  002536  ECF8  F018         	call	i2_ClockUp	;wreg free
 12046                           
 12047                           ;harware.c: 23: *AIO.DataPin.Port = *AIO.DataPin.Port & AIO.DataPin.Mask | ((AChar >> i)
      +                           & 0x01) << AIO.DataPin.PinNumber;
 12048  00253A  C017  F01F         	movff	i2WriteChar@AIO+7,??i2_WriteChar
 12049  00253E  C023  F020         	movff	i2WriteChar@i,??i2_WriteChar+1
 12050  002542  C022  F021         	movff	i2WriteChar@AChar,??i2_WriteChar+2
 12051  002546  2A20               	incf	??i2_WriteChar+1,f,c
 12052  002548  D002               	goto	i2u465_44
 12053  00254A                     i2u465_45:
 12054  00254A  90D8               	bcf	status,0,c
 12055  00254C  3221               	rrcf	??i2_WriteChar+2,f,c
 12056  00254E                     i2u465_44:
 12057  00254E  2E20               	decfsz	??i2_WriteChar+1,f,c
 12058  002550  D7FC               	goto	i2u465_45
 12059  002552  0E01               	movlw	1
 12060  002554  1621               	andwf	??i2_WriteChar+2,f,c
 12061  002556  2A1F               	incf	??i2_WriteChar,f,c
 12062  002558  D002               	goto	i2u466_44
 12063  00255A                     i2u466_45:
 12064  00255A  90D8               	bcf	status,0,c
 12065  00255C  3621               	rlcf	??i2_WriteChar+2,f,c
 12066  00255E                     i2u466_44:
 12067  00255E  2E1F               	decfsz	??i2_WriteChar,f,c
 12068  002560  D7FC               	goto	i2u466_45
 12069  002562  C015  FFD9         	movff	i2WriteChar@AIO+5,fsr2l
 12070  002566  C016  FFDA         	movff	i2WriteChar@AIO+6,fsr2h
 12071  00256A  50DF               	movf	indf2,w,c
 12072  00256C  1418               	andwf	i2WriteChar@AIO+8,w,c
 12073  00256E  1021               	iorwf	??i2_WriteChar+2,w,c
 12074  002570  C015  FFD9         	movff	i2WriteChar@AIO+5,fsr2l
 12075  002574  C016  FFDA         	movff	i2WriteChar@AIO+6,fsr2h
 12076  002578  6EDF               	movwf	indf2,c
 12077                           
 12078                           ;harware.c: 24: ClockDown(AIO);
 12079  00257A  EE20  F010         	lfsr	2,i2WriteChar@AIO
 12080  00257E  EE00  F001         	lfsr	0,i2ClockDown@AIO
 12081  002582  0E0E               	movlw	14
 12082  002584                     i2u467_41:
 12083  002584  CFDB FFEB          	movff	plusw2,plusw0
 12084  002588  06E8               	decf	wreg,f,c
 12085  00258A  E2FC               	bc	i2u467_41
 12086  00258C  ECFF  F018         	call	i2_ClockDown	;wreg free
 12087  002590  0623               	decf	i2WriteChar@i,f,c
 12088  002592  A0D8               	btfss	status,0,c
 12089  002594  0624               	decf	i2WriteChar@i+1,f,c
 12090  002596  BE24               	btfsc	i2WriteChar@i+1,7,c
 12091  002598  0012               	return		;funcret
 12092  00259A  D7C4               	goto	i2l4366
 12093  00259C                     __end_ofi2_WriteChar:
 12094                           	opt stack 0
 12095                           tblptru	equ	0xFF8
 12096                           tblptrh	equ	0xFF7
 12097                           tblptrl	equ	0xFF6
 12098                           tablat	equ	0xFF5
 12099                           prodh	equ	0xFF4
 12100                           prodl	equ	0xFF3
 12101                           intcon	equ	0xFF2
 12102                           postinc0	equ	0xFEE
 12103                           plusw0	equ	0xFEB
 12104                           fsr0h	equ	0xFEA
 12105                           fsr0l	equ	0xFE9
 12106                           wreg	equ	0xFE8
 12107                           indf1	equ	0xFE7
 12108                           postinc1	equ	0xFE6
 12109                           postdec1	equ	0xFE5
 12110                           plusw1	equ	0xFE3
 12111                           fsr1h	equ	0xFE2
 12112                           fsr1l	equ	0xFE1
 12113                           indf2	equ	0xFDF
 12114                           postinc2	equ	0xFDE
 12115                           postdec2	equ	0xFDD
 12116                           plusw2	equ	0xFDB
 12117                           fsr2h	equ	0xFDA
 12118                           fsr2l	equ	0xFD9
 12119                           status	equ	0xFD8
 12120                           
 12121 ;; *************** function i2_Sequencer_StopTimer *****************
 12122 ;; Defined at:
 12123 ;;		line 21 in file "sequencer.c"
 12124 ;; Parameters:    Size  Location     Type
 12125 ;;		None
 12126 ;; Auto vars:     Size  Location     Type
 12127 ;;		None
 12128 ;; Return value:  Size  Location     Type
 12129 ;;                  1    wreg      void 
 12130 ;; Registers used:
 12131 ;;		None
 12132 ;; Tracked objects:
 12133 ;;		On entry : 3D/0
 12134 ;;		On exit  : 3D/0
 12135 ;;		Unchanged: 3D/0
 12136 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 12137 ;;      Params:         0       0       0       0       0       0       0       0       0
 12138 ;;      Locals:         0       0       0       0       0       0       0       0       0
 12139 ;;      Temps:          0       0       0       0       0       0       0       0       0
 12140 ;;      Totals:         0       0       0       0       0       0       0       0       0
 12141 ;;Total ram usage:        0 bytes
 12142 ;; Hardware stack levels used:    1
 12143 ;; This function calls:
 12144 ;;		Nothing
 12145 ;; This function is called by:
 12146 ;;		_Interrupt
 12147 ;; This function uses a non-reentrant model
 12148 ;;
 12149                           
 12150                           	psect	text73
 12151  003228                     __ptext73:
 12152                           	opt stack 0
 12153  003228                     i2_Sequencer_StopTimer:
 12154                           	opt stack 22
 12155                           
 12156                           ;sequencer.c: 23: TMR1ON = 0;
 12157                           
 12158                           ;incstack = 0
 12159  003228  90CD               	bcf	4045,0,c	;volatile
 12160                           
 12161                           ;sequencer.c: 24: _Timer.Counter = 0;
 12162  00322A  6A5D               	clrf	__Timer+4,c
 12163  00322C  6A5E               	clrf	__Timer+5,c
 12164  00322E  0012               	return		;funcret
 12165  003230                     __end_ofi2_Sequencer_StopTimer:
 12166                           	opt stack 0
 12167                           tblptru	equ	0xFF8
 12168                           tblptrh	equ	0xFF7
 12169                           tblptrl	equ	0xFF6
 12170                           tablat	equ	0xFF5
 12171                           prodh	equ	0xFF4
 12172                           prodl	equ	0xFF3
 12173                           intcon	equ	0xFF2
 12174                           postinc0	equ	0xFEE
 12175                           plusw0	equ	0xFEB
 12176                           fsr0h	equ	0xFEA
 12177                           fsr0l	equ	0xFE9
 12178                           wreg	equ	0xFE8
 12179                           indf1	equ	0xFE7
 12180                           postinc1	equ	0xFE6
 12181                           postdec1	equ	0xFE5
 12182                           plusw1	equ	0xFE3
 12183                           fsr1h	equ	0xFE2
 12184                           fsr1l	equ	0xFE1
 12185                           indf2	equ	0xFDF
 12186                           postinc2	equ	0xFDE
 12187                           postdec2	equ	0xFDD
 12188                           plusw2	equ	0xFDB
 12189                           fsr2h	equ	0xFDA
 12190                           fsr2l	equ	0xFD9
 12191                           status	equ	0xFD8
 12192                           
 12193 ;; *************** function i2_Midi_ResetBuffer *****************
 12194 ;; Defined at:
 12195 ;;		line 41 in file "midi.c"
 12196 ;; Parameters:    Size  Location     Type
 12197 ;;  AMidiBuffer     2    0[COMRAM] PTR struct .
 12198 ;;		 -> _MidiOutput(324), _MidiInput(324), 
 12199 ;; Auto vars:     Size  Location     Type
 12200 ;;  Midi_ResetBu    1    5[COMRAM] unsigned char 
 12201 ;;  Midi_ResetBu    1    4[COMRAM] unsigned char 
 12202 ;; Return value:  Size  Location     Type
 12203 ;;                  1    wreg      void 
 12204 ;; Registers used:
 12205 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 12206 ;; Tracked objects:
 12207 ;;		On entry : 0/0
 12208 ;;		On exit  : 0/0
 12209 ;;		Unchanged: 0/0
 12210 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 12211 ;;      Params:         2       0       0       0       0       0       0       0       0
 12212 ;;      Locals:         2       0       0       0       0       0       0       0       0
 12213 ;;      Temps:          2       0       0       0       0       0       0       0       0
 12214 ;;      Totals:         6       0       0       0       0       0       0       0       0
 12215 ;;Total ram usage:        6 bytes
 12216 ;; Hardware stack levels used:    1
 12217 ;; This function calls:
 12218 ;;		Nothing
 12219 ;; This function is called by:
 12220 ;;		_Interrupt
 12221 ;; This function uses a non-reentrant model
 12222 ;;
 12223                           
 12224                           	psect	text74
 12225  001F4A                     __ptext74:
 12226                           	opt stack 0
 12227  001F4A                     i2_Midi_ResetBuffer:
 12228                           	opt stack 22
 12229                           
 12230                           ;midi.c: 43: AMidiBuffer->iBufferRead = 0;
 12231                           
 12232                           ;incstack = 0
 12233  001F4A  EE21 F040          	lfsr	2,320
 12234  001F4E  5001               	movf	i2Midi_ResetBuffer@AMidiBuffer,w,c
 12235  001F50  26D9               	addwf	fsr2l,f,c
 12236  001F52  5002               	movf	i2Midi_ResetBuffer@AMidiBuffer+1,w,c
 12237  001F54  22DA               	addwfc	fsr2h,f,c
 12238  001F56  6ADF               	clrf	indf2,c
 12239                           
 12240                           ;midi.c: 44: AMidiBuffer->iBufferWrite = 0;
 12241  001F58  EE21 F041          	lfsr	2,321
 12242  001F5C  5001               	movf	i2Midi_ResetBuffer@AMidiBuffer,w,c
 12243  001F5E  26D9               	addwf	fsr2l,f,c
 12244  001F60  5002               	movf	i2Midi_ResetBuffer@AMidiBuffer+1,w,c
 12245  001F62  22DA               	addwfc	fsr2h,f,c
 12246  001F64  6ADF               	clrf	indf2,c
 12247                           
 12248                           ;midi.c: 45: AMidiBuffer->iData = 0;
 12249  001F66  EE21 F042          	lfsr	2,322
 12250  001F6A  5001               	movf	i2Midi_ResetBuffer@AMidiBuffer,w,c
 12251  001F6C  26D9               	addwf	fsr2l,f,c
 12252  001F6E  5002               	movf	i2Midi_ResetBuffer@AMidiBuffer+1,w,c
 12253  001F70  22DA               	addwfc	fsr2h,f,c
 12254  001F72  6ADF               	clrf	indf2,c
 12255                           
 12256                           ;midi.c: 46: AMidiBuffer->Size = 0;
 12257  001F74  EE21 F043          	lfsr	2,323
 12258  001F78  5001               	movf	i2Midi_ResetBuffer@AMidiBuffer,w,c
 12259  001F7A  26D9               	addwf	fsr2l,f,c
 12260  001F7C  5002               	movf	i2Midi_ResetBuffer@AMidiBuffer+1,w,c
 12261  001F7E  22DA               	addwfc	fsr2h,f,c
 12262  001F80  6ADF               	clrf	indf2,c
 12263                           
 12264                           ;midi.c: 47: for (char i = 0; i < 64; i++)
 12265  001F82  6A06               	clrf	i2Midi_ResetBuffer@i,c
 12266  001F84                     i2l4654:
 12267  001F84  0E3F               	movlw	63
 12268  001F86  6406               	cpfsgt	i2Midi_ResetBuffer@i,c
 12269  001F88  D001               	goto	i2l4658
 12270  001F8A  0C3F               	retlw	63
 12271  001F8C                     i2l4658:
 12272                           
 12273                           ;midi.c: 48: {
 12274                           ;midi.c: 49: AMidiBuffer->Buffer[i].Code = 0x00;
 12275  001F8C  5006               	movf	i2Midi_ResetBuffer@i,w,c
 12276  001F8E  0D05               	mullw	5
 12277  001F90  50F3               	movf	prodl,w,c
 12278  001F92  2401               	addwf	i2Midi_ResetBuffer@AMidiBuffer,w,c
 12279  001F94  6ED9               	movwf	fsr2l,c
 12280  001F96  50F4               	movf	prodh,w,c
 12281  001F98  2002               	addwfc	i2Midi_ResetBuffer@AMidiBuffer+1,w,c
 12282  001F9A  6EDA               	movwf	fsr2h,c
 12283  001F9C  6ADF               	clrf	indf2,c
 12284                           
 12285                           ;midi.c: 50: AMidiBuffer->Buffer[i].Channel = 0x00;
 12286  001F9E  5006               	movf	i2Midi_ResetBuffer@i,w,c
 12287  001FA0  0D05               	mullw	5
 12288  001FA2  C001  F003         	movff	i2Midi_ResetBuffer@AMidiBuffer,??i2_Midi_ResetBuffer
 12289  001FA6  C002  F004         	movff	i2Midi_ResetBuffer@AMidiBuffer+1,??i2_Midi_ResetBuffer+1
 12290  001FAA  50F3               	movf	prodl,w,c
 12291  001FAC  2603               	addwf	??i2_Midi_ResetBuffer,f,c
 12292  001FAE  50F4               	movf	prodh,w,c
 12293  001FB0  2204               	addwfc	??i2_Midi_ResetBuffer+1,f,c
 12294  001FB2  2803               	incf	??i2_Midi_ResetBuffer,w,c
 12295  001FB4  6ED9               	movwf	fsr2l,c
 12296  001FB6  0E00               	movlw	0
 12297  001FB8  2004               	addwfc	??i2_Midi_ResetBuffer+1,w,c
 12298  001FBA  6EDA               	movwf	fsr2h,c
 12299  001FBC  6ADF               	clrf	indf2,c
 12300                           
 12301                           ;midi.c: 51: for (char j = 0; j < sizeof(AMidiBuffer->Buffer[i].Data); j++)
 12302  001FBE  6A05               	clrf	i2Midi_ResetBuffer@j,c
 12303  001FC0                     i2l4662:
 12304  001FC0  0E01               	movlw	1
 12305  001FC2  6405               	cpfsgt	i2Midi_ResetBuffer@j,c
 12306  001FC4  D001               	goto	i2l4666
 12307  001FC6  D017               	goto	i2l4672
 12308  001FC8                     i2l4666:
 12309                           
 12310                           ;midi.c: 52: AMidiBuffer->Buffer[i].Data[j] = 0x00;
 12311  001FC8  5006               	movf	i2Midi_ResetBuffer@i,w,c
 12312  001FCA  0D05               	mullw	5
 12313  001FCC  C001  F003         	movff	i2Midi_ResetBuffer@AMidiBuffer,??i2_Midi_ResetBuffer
 12314  001FD0  C002  F004         	movff	i2Midi_ResetBuffer@AMidiBuffer+1,??i2_Midi_ResetBuffer+1
 12315  001FD4  50F3               	movf	prodl,w,c
 12316  001FD6  2603               	addwf	??i2_Midi_ResetBuffer,f,c
 12317  001FD8  50F4               	movf	prodh,w,c
 12318  001FDA  2204               	addwfc	??i2_Midi_ResetBuffer+1,f,c
 12319  001FDC  5005               	movf	i2Midi_ResetBuffer@j,w,c
 12320  001FDE  2603               	addwf	??i2_Midi_ResetBuffer,f,c
 12321  001FE0  0E00               	movlw	0
 12322  001FE2  2204               	addwfc	??i2_Midi_ResetBuffer+1,f,c
 12323  001FE4  0E02               	movlw	2
 12324  001FE6  2403               	addwf	??i2_Midi_ResetBuffer,w,c
 12325  001FE8  6ED9               	movwf	fsr2l,c
 12326  001FEA  0E00               	movlw	0
 12327  001FEC  2004               	addwfc	??i2_Midi_ResetBuffer+1,w,c
 12328  001FEE  6EDA               	movwf	fsr2h,c
 12329  001FF0  6ADF               	clrf	indf2,c
 12330  001FF2  2A05               	incf	i2Midi_ResetBuffer@j,f,c
 12331  001FF4  D7E5               	goto	i2l4662
 12332  001FF6                     i2l4672:
 12333  001FF6  2A06               	incf	i2Midi_ResetBuffer@i,f,c
 12334  001FF8  D7C5               	goto	i2l4654
 12335  001FFA                     __end_ofi2_Midi_ResetBuffer:
 12336                           	opt stack 0
 12337                           tblptru	equ	0xFF8
 12338                           tblptrh	equ	0xFF7
 12339                           tblptrl	equ	0xFF6
 12340                           tablat	equ	0xFF5
 12341                           prodh	equ	0xFF4
 12342                           prodl	equ	0xFF3
 12343                           intcon	equ	0xFF2
 12344                           postinc0	equ	0xFEE
 12345                           plusw0	equ	0xFEB
 12346                           fsr0h	equ	0xFEA
 12347                           fsr0l	equ	0xFE9
 12348                           wreg	equ	0xFE8
 12349                           indf1	equ	0xFE7
 12350                           postinc1	equ	0xFE6
 12351                           postdec1	equ	0xFE5
 12352                           plusw1	equ	0xFE3
 12353                           fsr1h	equ	0xFE2
 12354                           fsr1l	equ	0xFE1
 12355                           indf2	equ	0xFDF
 12356                           postinc2	equ	0xFDE
 12357                           postdec2	equ	0xFDD
 12358                           plusw2	equ	0xFDB
 12359                           fsr2h	equ	0xFDA
 12360                           fsr2l	equ	0xFD9
 12361                           status	equ	0xFD8
 12362                           
 12363 ;; *************** function i2_Hub_CopyBuffer *****************
 12364 ;; Defined at:
 12365 ;;		line 113 in file "hub.c"
 12366 ;; Parameters:    Size  Location     Type
 12367 ;;		None
 12368 ;; Auto vars:     Size  Location     Type
 12369 ;;		None
 12370 ;; Return value:  Size  Location     Type
 12371 ;;                  1    wreg      void 
 12372 ;; Registers used:
 12373 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 12374 ;; Tracked objects:
 12375 ;;		On entry : 3F/1
 12376 ;;		On exit  : 3F/1
 12377 ;;		Unchanged: 0/0
 12378 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 12379 ;;      Params:         0       0       0       0       0       0       0       0       0
 12380 ;;      Locals:         0       0       0       0       0       0       0       0       0
 12381 ;;      Temps:          0       0       0       0       0       0       0       0       0
 12382 ;;      Totals:         0       0       0       0       0       0       0       0       0
 12383 ;;Total ram usage:        0 bytes
 12384 ;; Hardware stack levels used:    1
 12385 ;; Hardware stack levels required when called:    1
 12386 ;; This function calls:
 12387 ;;		i2_memcpy
 12388 ;; This function is called by:
 12389 ;;		_Interrupt
 12390 ;; This function uses a non-reentrant model
 12391 ;;
 12392                           
 12393                           	psect	text75
 12394  0030BE                     __ptext75:
 12395                           	opt stack 0
 12396  0030BE                     i2_Hub_CopyBuffer:
 12397                           	opt stack 21
 12398                           
 12399                           ; BSR set to: 1
 12400                           ;hub.c: 115: memcpy(&_Hub.SecondaryBuffer, &_Hub.PrimaryBuffer, sizeof(DataBuffer));
 12401                           
 12402                           ;incstack = 0
 12403  0030BE  0E6E               	movlw	low (__Hub+110)
 12404  0030C0  6E01               	movwf	i2memcpy@d1,c
 12405  0030C2  0E01               	movlw	high (__Hub+110)
 12406  0030C4  6E02               	movwf	i2memcpy@d1+1,c
 12407  0030C6  0E62               	movlw	low (__Hub+98)
 12408  0030C8  6E03               	movwf	i2memcpy@s1,c
 12409  0030CA  0E01               	movlw	high (__Hub+98)
 12410  0030CC  6E04               	movwf	i2memcpy@s1+1,c
 12411  0030CE  6A06               	clrf	i2memcpy@n+1,c
 12412  0030D0  0E0C               	movlw	12
 12413  0030D2  6E05               	movwf	i2memcpy@n,c
 12414  0030D4  ECCF  F016         	call	i2_memcpy	;wreg free
 12415                           
 12416                           ; BSR set to: 1
 12417                           ;hub.c: 117: _Hub.ReadyToWrite = 0;
 12418  0030D8  6B86               	clrf	(__Hub+134)& (0+255),b
 12419                           
 12420                           ; BSR set to: 1
 12421  0030DA  0012               	return		;funcret
 12422  0030DC                     __end_ofi2_Hub_CopyBuffer:
 12423                           	opt stack 0
 12424                           tblptru	equ	0xFF8
 12425                           tblptrh	equ	0xFF7
 12426                           tblptrl	equ	0xFF6
 12427                           tablat	equ	0xFF5
 12428                           prodh	equ	0xFF4
 12429                           prodl	equ	0xFF3
 12430                           intcon	equ	0xFF2
 12431                           postinc0	equ	0xFEE
 12432                           plusw0	equ	0xFEB
 12433                           fsr0h	equ	0xFEA
 12434                           fsr0l	equ	0xFE9
 12435                           wreg	equ	0xFE8
 12436                           indf1	equ	0xFE7
 12437                           postinc1	equ	0xFE6
 12438                           postdec1	equ	0xFE5
 12439                           plusw1	equ	0xFE3
 12440                           fsr1h	equ	0xFE2
 12441                           fsr1l	equ	0xFE1
 12442                           indf2	equ	0xFDF
 12443                           postinc2	equ	0xFDE
 12444                           postdec2	equ	0xFDD
 12445                           plusw2	equ	0xFDB
 12446                           fsr2h	equ	0xFDA
 12447                           fsr2l	equ	0xFD9
 12448                           status	equ	0xFD8
 12449                           
 12450 ;; *************** function _Sequencer_TimerEvent *****************
 12451 ;; Defined at:
 12452 ;;		line 41 in file "main.c"
 12453 ;; Parameters:    Size  Location     Type
 12454 ;;		None
 12455 ;; Auto vars:     Size  Location     Type
 12456 ;;		None
 12457 ;; Return value:  Size  Location     Type
 12458 ;;                  1    wreg      void 
 12459 ;; Registers used:
 12460 ;;		wreg, status,2, status,0
 12461 ;; Tracked objects:
 12462 ;;		On entry : 0/0
 12463 ;;		On exit  : 3D/0
 12464 ;;		Unchanged: 0/0
 12465 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 12466 ;;      Params:         0       0       0       0       0       0       0       0       0
 12467 ;;      Locals:         0       0       0       0       0       0       0       0       0
 12468 ;;      Temps:          0       0       0       0       0       0       0       0       0
 12469 ;;      Totals:         0       0       0       0       0       0       0       0       0
 12470 ;;Total ram usage:        0 bytes
 12471 ;; Hardware stack levels used:    1
 12472 ;; This function calls:
 12473 ;;		Nothing
 12474 ;; This function is called by:
 12475 ;;		_Interrupt
 12476 ;; This function uses a non-reentrant model
 12477 ;;
 12478                           
 12479                           	psect	text76
 12480  003110                     __ptext76:
 12481                           	opt stack 0
 12482  003110                     _Sequencer_TimerEvent:
 12483                           	opt stack 22
 12484                           
 12485                           ;main.c: 43: if (_Saving)
 12486                           
 12487                           ; BSR set to: 1
 12488                           ;incstack = 0
 12489  003110  0100               	movlb	0	; () banked
 12490  003112  51DF               	movf	__Saving& (0+255),w,b
 12491  003114  E002               	bz	i2l4384
 12492                           
 12493                           ; BSR set to: 0
 12494                           ;main.c: 44: _Display.SavingMask = ~_Display.SavingMask;
 12495  003116  0102               	movlb	2	; () banked
 12496  003118  1FC7               	comf	(__Display+199)& (0+255),f,b
 12497  00311A                     i2l4384:
 12498                           
 12499                           ;main.c: 45: if (_Modified && (2 > 1))
 12500  00311A  0100               	movlb	0	; () banked
 12501  00311C  51E0               	movf	__Modified& (0+255),w,b
 12502  00311E  B4D8               	btfsc	status,2,c
 12503  003120  0012               	return	
 12504                           
 12505                           ; BSR set to: 0
 12506                           ;main.c: 46: _Display.PointMask[1] = ~_Display.PointMask[1];
 12507  003122  0102               	movlb	2	; () banked
 12508  003124  1FC9               	comf	(__Display+201)& (0+255),f,b
 12509  003126  0CFF               	retlw	255	;funcret
 12510  003128                     __end_of_Sequencer_TimerEvent:
 12511                           	opt stack 0
 12512                           tblptru	equ	0xFF8
 12513                           tblptrh	equ	0xFF7
 12514                           tblptrl	equ	0xFF6
 12515                           tablat	equ	0xFF5
 12516                           prodh	equ	0xFF4
 12517                           prodl	equ	0xFF3
 12518                           intcon	equ	0xFF2
 12519                           postinc0	equ	0xFEE
 12520                           plusw0	equ	0xFEB
 12521                           fsr0h	equ	0xFEA
 12522                           fsr0l	equ	0xFE9
 12523                           wreg	equ	0xFE8
 12524                           indf1	equ	0xFE7
 12525                           postinc1	equ	0xFE6
 12526                           postdec1	equ	0xFE5
 12527                           plusw1	equ	0xFE3
 12528                           fsr1h	equ	0xFE2
 12529                           fsr1l	equ	0xFE1
 12530                           indf2	equ	0xFDF
 12531                           postinc2	equ	0xFDE
 12532                           postdec2	equ	0xFDD
 12533                           plusw2	equ	0xFDB
 12534                           fsr2h	equ	0xFDA
 12535                           fsr2l	equ	0xFD9
 12536                           status	equ	0xFD8
 12537                           
 12538 ;; *************** function _Midi_Write *****************
 12539 ;; Defined at:
 12540 ;;		line 56 in file "midi.c"
 12541 ;; Parameters:    Size  Location     Type
 12542 ;;  AData           1    wreg     unsigned char 
 12543 ;;  AMidiBuffer     2    0[COMRAM] PTR struct .
 12544 ;;		 -> _MidiInput(324), 
 12545 ;; Auto vars:     Size  Location     Type
 12546 ;;  AData           1    6[COMRAM] unsigned char 
 12547 ;; Return value:  Size  Location     Type
 12548 ;;                  1    wreg      void 
 12549 ;; Registers used:
 12550 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 12551 ;; Tracked objects:
 12552 ;;		On entry : 0/0
 12553 ;;		On exit  : 0/0
 12554 ;;		Unchanged: 0/0
 12555 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 12556 ;;      Params:         2       0       0       0       0       0       0       0       0
 12557 ;;      Locals:         1       0       0       0       0       0       0       0       0
 12558 ;;      Temps:          4       0       0       0       0       0       0       0       0
 12559 ;;      Totals:         7       0       0       0       0       0       0       0       0
 12560 ;;Total ram usage:        7 bytes
 12561 ;; Hardware stack levels used:    1
 12562 ;; This function calls:
 12563 ;;		Nothing
 12564 ;; This function is called by:
 12565 ;;		_Interrupt
 12566 ;; This function uses a non-reentrant model
 12567 ;;
 12568                           
 12569                           	psect	text77
 12570  000A58                     __ptext77:
 12571                           	opt stack 0
 12572  000A58                     _Midi_Write:
 12573                           	opt stack 22
 12574                           
 12575                           ;incstack = 0
 12576                           ;Midi_Write@AData stored from wreg
 12577  000A58  6E07               	movwf	Midi_Write@AData,c
 12578                           
 12579                           ;midi.c: 58: if (AData & 0x80 == 0x80)
 12580  000A5A  A007               	btfss	Midi_Write@AData,0,c
 12581  000A5C  D08F               	goto	i2l4462
 12582                           
 12583                           ;midi.c: 59: {
 12584                           ;midi.c: 60: AMidiBuffer->Buffer[AMidiBuffer->iBufferWrite].Code = AData & 0xF0;
 12585  000A5E  EE21 F041          	lfsr	2,321
 12586  000A62  5001               	movf	Midi_Write@AMidiBuffer,w,c
 12587  000A64  26D9               	addwf	fsr2l,f,c
 12588  000A66  5002               	movf	Midi_Write@AMidiBuffer+1,w,c
 12589  000A68  22DA               	addwfc	fsr2h,f,c
 12590  000A6A  50DF               	movf	indf2,w,c
 12591  000A6C  0D05               	mullw	5
 12592  000A6E  50F3               	movf	prodl,w,c
 12593  000A70  2401               	addwf	Midi_Write@AMidiBuffer,w,c
 12594  000A72  6ED9               	movwf	fsr2l,c
 12595  000A74  50F4               	movf	prodh,w,c
 12596  000A76  2002               	addwfc	Midi_Write@AMidiBuffer+1,w,c
 12597  000A78  6EDA               	movwf	fsr2h,c
 12598  000A7A  5007               	movf	Midi_Write@AData,w,c
 12599  000A7C  0BF0               	andlw	240
 12600  000A7E  6EDF               	movwf	indf2,c
 12601                           
 12602                           ;midi.c: 61: AMidiBuffer->Buffer[AMidiBuffer->iBufferWrite].Channel = AData & 0x0F;
 12603  000A80  EE21 F041          	lfsr	2,321
 12604  000A84  5001               	movf	Midi_Write@AMidiBuffer,w,c
 12605  000A86  26D9               	addwf	fsr2l,f,c
 12606  000A88  5002               	movf	Midi_Write@AMidiBuffer+1,w,c
 12607  000A8A  22DA               	addwfc	fsr2h,f,c
 12608  000A8C  50DF               	movf	indf2,w,c
 12609  000A8E  0D05               	mullw	5
 12610  000A90  C001  F003         	movff	Midi_Write@AMidiBuffer,??_Midi_Write
 12611  000A94  C002  F004         	movff	Midi_Write@AMidiBuffer+1,??_Midi_Write+1
 12612  000A98  50F3               	movf	prodl,w,c
 12613  000A9A  2603               	addwf	??_Midi_Write,f,c
 12614  000A9C  50F4               	movf	prodh,w,c
 12615  000A9E  2204               	addwfc	??_Midi_Write+1,f,c
 12616  000AA0  2803               	incf	??_Midi_Write,w,c
 12617  000AA2  6ED9               	movwf	fsr2l,c
 12618  000AA4  0E00               	movlw	0
 12619  000AA6  2004               	addwfc	??_Midi_Write+1,w,c
 12620  000AA8  6EDA               	movwf	fsr2h,c
 12621  000AAA  5007               	movf	Midi_Write@AData,w,c
 12622  000AAC  0B0F               	andlw	15
 12623  000AAE  6EDF               	movwf	indf2,c
 12624                           
 12625                           ;midi.c: 62: switch(AMidiBuffer->Buffer[AMidiBuffer->iBufferWrite].Code)
 12626  000AB0  D049               	goto	i2l4458
 12627  000AB2                     i2l4448:
 12628                           
 12629                           ;midi.c: 65: AMidiBuffer->Buffer[AMidiBuffer->iBufferWrite].DataCount = 2;
 12630  000AB2  EE21 F041          	lfsr	2,321
 12631  000AB6  5001               	movf	Midi_Write@AMidiBuffer,w,c
 12632  000AB8  26D9               	addwf	fsr2l,f,c
 12633  000ABA  5002               	movf	Midi_Write@AMidiBuffer+1,w,c
 12634  000ABC  22DA               	addwfc	fsr2h,f,c
 12635  000ABE  50DF               	movf	indf2,w,c
 12636  000AC0  0D05               	mullw	5
 12637  000AC2  C001  F003         	movff	Midi_Write@AMidiBuffer,??_Midi_Write
 12638  000AC6  C002  F004         	movff	Midi_Write@AMidiBuffer+1,??_Midi_Write+1
 12639  000ACA  50F3               	movf	prodl,w,c
 12640  000ACC  2603               	addwf	??_Midi_Write,f,c
 12641  000ACE  50F4               	movf	prodh,w,c
 12642  000AD0  2204               	addwfc	??_Midi_Write+1,f,c
 12643  000AD2  0E04               	movlw	4
 12644  000AD4  2403               	addwf	??_Midi_Write,w,c
 12645  000AD6  6ED9               	movwf	fsr2l,c
 12646  000AD8  0E00               	movlw	0
 12647  000ADA  2004               	addwfc	??_Midi_Write+1,w,c
 12648  000ADC  6EDA               	movwf	fsr2h,c
 12649  000ADE  0E02               	movlw	2
 12650  000AE0  D017               	goto	L2
 12651  000AE2                     i2l4450:
 12652                           
 12653                           ;midi.c: 69: AMidiBuffer->Buffer[AMidiBuffer->iBufferWrite].DataCount = 1;
 12654  000AE2  EE21 F041          	lfsr	2,321
 12655  000AE6  5001               	movf	Midi_Write@AMidiBuffer,w,c
 12656  000AE8  26D9               	addwf	fsr2l,f,c
 12657  000AEA  5002               	movf	Midi_Write@AMidiBuffer+1,w,c
 12658  000AEC  22DA               	addwfc	fsr2h,f,c
 12659  000AEE  50DF               	movf	indf2,w,c
 12660  000AF0  0D05               	mullw	5
 12661  000AF2  C001  F003         	movff	Midi_Write@AMidiBuffer,??_Midi_Write
 12662  000AF6  C002  F004         	movff	Midi_Write@AMidiBuffer+1,??_Midi_Write+1
 12663  000AFA  50F3               	movf	prodl,w,c
 12664  000AFC  2603               	addwf	??_Midi_Write,f,c
 12665  000AFE  50F4               	movf	prodh,w,c
 12666  000B00  2204               	addwfc	??_Midi_Write+1,f,c
 12667  000B02  0E04               	movlw	4
 12668  000B04  2403               	addwf	??_Midi_Write,w,c
 12669  000B06  6ED9               	movwf	fsr2l,c
 12670  000B08  0E00               	movlw	0
 12671  000B0A  2004               	addwfc	??_Midi_Write+1,w,c
 12672  000B0C  6EDA               	movwf	fsr2h,c
 12673  000B0E  0E01               	movlw	1
 12674  000B10                     L2:
 12675  000B10  6EDF               	movwf	indf2,c
 12676                           
 12677                           ;midi.c: 70: break;
 12678  000B12  D02C               	goto	i2l4460
 12679  000B14                     i2l4452:
 12680                           
 12681                           ;midi.c: 73: AMidiBuffer->Buffer[AMidiBuffer->iBufferWrite].DataCount = -1;
 12682  000B14  EE21 F041          	lfsr	2,321
 12683  000B18  5001               	movf	Midi_Write@AMidiBuffer,w,c
 12684  000B1A  26D9               	addwf	fsr2l,f,c
 12685  000B1C  5002               	movf	Midi_Write@AMidiBuffer+1,w,c
 12686  000B1E  22DA               	addwfc	fsr2h,f,c
 12687  000B20  50DF               	movf	indf2,w,c
 12688  000B22  0D05               	mullw	5
 12689  000B24  C001  F003         	movff	Midi_Write@AMidiBuffer,??_Midi_Write
 12690  000B28  C002  F004         	movff	Midi_Write@AMidiBuffer+1,??_Midi_Write+1
 12691  000B2C  50F3               	movf	prodl,w,c
 12692  000B2E  2603               	addwf	??_Midi_Write,f,c
 12693  000B30  50F4               	movf	prodh,w,c
 12694  000B32  2204               	addwfc	??_Midi_Write+1,f,c
 12695  000B34  0E04               	movlw	4
 12696  000B36  2403               	addwf	??_Midi_Write,w,c
 12697  000B38  6ED9               	movwf	fsr2l,c
 12698  000B3A  0E00               	movlw	0
 12699  000B3C  2004               	addwfc	??_Midi_Write+1,w,c
 12700  000B3E  6EDA               	movwf	fsr2h,c
 12701  000B40  68DF               	setf	indf2,c
 12702  000B42  0CFF               	retlw	255
 12703  000B44                     i2l4458:
 12704  000B44  EE21 F041          	lfsr	2,321
 12705  000B48  5001               	movf	Midi_Write@AMidiBuffer,w,c
 12706  000B4A  26D9               	addwf	fsr2l,f,c
 12707  000B4C  5002               	movf	Midi_Write@AMidiBuffer+1,w,c
 12708  000B4E  22DA               	addwfc	fsr2h,f,c
 12709  000B50  50DF               	movf	indf2,w,c
 12710  000B52  0D05               	mullw	5
 12711  000B54  50F3               	movf	prodl,w,c
 12712  000B56  2401               	addwf	Midi_Write@AMidiBuffer,w,c
 12713  000B58  6ED9               	movwf	fsr2l,c
 12714  000B5A  50F4               	movf	prodh,w,c
 12715  000B5C  2002               	addwfc	Midi_Write@AMidiBuffer+1,w,c
 12716  000B5E  6EDA               	movwf	fsr2h,c
 12717  000B60  50DF               	movf	indf2,w,c
 12718                           
 12719                           ; Switch size 1, requested type "speed"
 12720                           ; Number of cases is 2, Range of values is 176 to 192
 12721                           ; switch strategies available:
 12722                           ; Name         Instructions Cycles
 12723                           ; simple_byte            7     4 (average)
 12724                           ;	Chosen strategy is simple_byte
 12725  000B62  0AB0               	xorlw	176	; case 176
 12726  000B64  E0A6               	bz	i2l4448
 12727  000B66  0A70               	xorlw	112	; case 192
 12728  000B68  E0BC               	bz	i2l4450
 12729  000B6A  D7D4               	goto	i2l4452
 12730  000B6C                     i2l4460:
 12731                           
 12732                           ;midi.c: 76: AMidiBuffer->iData = 0;
 12733  000B6C  EE21 F042          	lfsr	2,322
 12734  000B70  5001               	movf	Midi_Write@AMidiBuffer,w,c
 12735  000B72  26D9               	addwf	fsr2l,f,c
 12736  000B74  5002               	movf	Midi_Write@AMidiBuffer+1,w,c
 12737  000B76  22DA               	addwfc	fsr2h,f,c
 12738  000B78  6ADF               	clrf	indf2,c
 12739                           
 12740                           ;midi.c: 77: }
 12741  000B7A  D029               	goto	i2l4466
 12742  000B7C                     i2l4462:
 12743                           
 12744                           ;midi.c: 78: else
 12745                           ;midi.c: 79: {
 12746                           ;midi.c: 80: AMidiBuffer->Buffer[AMidiBuffer->iBufferWrite].Data[AMidiBuffer->iData] = A
      +                          Data;
 12747  000B7C  EE21 F041          	lfsr	2,321
 12748  000B80  5001               	movf	Midi_Write@AMidiBuffer,w,c
 12749  000B82  26D9               	addwf	fsr2l,f,c
 12750  000B84  5002               	movf	Midi_Write@AMidiBuffer+1,w,c
 12751  000B86  22DA               	addwfc	fsr2h,f,c
 12752  000B88  50DF               	movf	indf2,w,c
 12753  000B8A  0D05               	mullw	5
 12754  000B8C  C001  F003         	movff	Midi_Write@AMidiBuffer,??_Midi_Write
 12755  000B90  C002  F004         	movff	Midi_Write@AMidiBuffer+1,??_Midi_Write+1
 12756  000B94  50F3               	movf	prodl,w,c
 12757  000B96  2603               	addwf	??_Midi_Write,f,c
 12758  000B98  50F4               	movf	prodh,w,c
 12759  000B9A  2204               	addwfc	??_Midi_Write+1,f,c
 12760  000B9C  EE21 F042          	lfsr	2,322
 12761  000BA0  5001               	movf	Midi_Write@AMidiBuffer,w,c
 12762  000BA2  26D9               	addwf	fsr2l,f,c
 12763  000BA4  5002               	movf	Midi_Write@AMidiBuffer+1,w,c
 12764  000BA6  22DA               	addwfc	fsr2h,f,c
 12765  000BA8  50DF               	movf	indf2,w,c
 12766  000BAA  2603               	addwf	??_Midi_Write,f,c
 12767  000BAC  0E00               	movlw	0
 12768  000BAE  2204               	addwfc	??_Midi_Write+1,f,c
 12769  000BB0  0E02               	movlw	2
 12770  000BB2  2403               	addwf	??_Midi_Write,w,c
 12771  000BB4  6ED9               	movwf	fsr2l,c
 12772  000BB6  0E00               	movlw	0
 12773  000BB8  2004               	addwfc	??_Midi_Write+1,w,c
 12774  000BBA  6EDA               	movwf	fsr2h,c
 12775  000BBC  C007  FFDF         	movff	Midi_Write@AData,indf2
 12776                           
 12777                           ;midi.c: 81: AMidiBuffer->iData++;
 12778  000BC0  EE21 F042          	lfsr	2,322
 12779  000BC4  5001               	movf	Midi_Write@AMidiBuffer,w,c
 12780  000BC6  26D9               	addwf	fsr2l,f,c
 12781  000BC8  5002               	movf	Midi_Write@AMidiBuffer+1,w,c
 12782  000BCA  22DA               	addwfc	fsr2h,f,c
 12783  000BCC  2ADF               	incf	indf2,f,c
 12784  000BCE                     i2l4466:
 12785                           
 12786                           ;midi.c: 82: }
 12787                           ;midi.c: 84: if (AMidiBuffer->iData == AMidiBuffer->Buffer[AMidiBuffer->iBufferWrite].Da
      +                          taCount && AMidiBuffer->Size <= 64)
 12788  000BCE  EE21 F041          	lfsr	2,321
 12789  000BD2  5001               	movf	Midi_Write@AMidiBuffer,w,c
 12790  000BD4  26D9               	addwf	fsr2l,f,c
 12791  000BD6  5002               	movf	Midi_Write@AMidiBuffer+1,w,c
 12792  000BD8  22DA               	addwfc	fsr2h,f,c
 12793  000BDA  50DF               	movf	indf2,w,c
 12794  000BDC  0D05               	mullw	5
 12795  000BDE  C001  F003         	movff	Midi_Write@AMidiBuffer,??_Midi_Write
 12796  000BE2  C002  F004         	movff	Midi_Write@AMidiBuffer+1,??_Midi_Write+1
 12797  000BE6  50F3               	movf	prodl,w,c
 12798  000BE8  2603               	addwf	??_Midi_Write,f,c
 12799  000BEA  50F4               	movf	prodh,w,c
 12800  000BEC  2204               	addwfc	??_Midi_Write+1,f,c
 12801  000BEE  0E04               	movlw	4
 12802  000BF0  2403               	addwf	??_Midi_Write,w,c
 12803  000BF2  6ED9               	movwf	fsr2l,c
 12804  000BF4  0E00               	movlw	0
 12805  000BF6  2004               	addwfc	??_Midi_Write+1,w,c
 12806  000BF8  6EDA               	movwf	fsr2h,c
 12807  000BFA  50DF               	movf	indf2,w,c
 12808  000BFC  6E05               	movwf	(??_Midi_Write+2)& (0+255),c
 12809  000BFE  6A06               	clrf	(??_Midi_Write+3)& (0+255),c
 12810  000C00  BE05               	btfsc	(??_Midi_Write+2)& (0+255),7,c
 12811  000C02  0606               	decf	(??_Midi_Write+3)& (0+255),f,c
 12812  000C04  EE21 F042          	lfsr	2,322
 12813  000C08  5001               	movf	Midi_Write@AMidiBuffer,w,c
 12814  000C0A  26D9               	addwf	fsr2l,f,c
 12815  000C0C  5002               	movf	Midi_Write@AMidiBuffer+1,w,c
 12816  000C0E  22DA               	addwfc	fsr2h,f,c
 12817  000C10  50DF               	movf	indf2,w,c
 12818  000C12  1805               	xorwf	??_Midi_Write+2,w,c
 12819  000C14  1006               	iorwf	??_Midi_Write+3,w,c
 12820  000C16  A4D8               	btfss	status,2,c
 12821  000C18  0012               	return	
 12822  000C1A  EE21 F043          	lfsr	2,323
 12823  000C1E  5001               	movf	Midi_Write@AMidiBuffer,w,c
 12824  000C20  26D9               	addwf	fsr2l,f,c
 12825  000C22  5002               	movf	Midi_Write@AMidiBuffer+1,w,c
 12826  000C24  22DA               	addwfc	fsr2h,f,c
 12827  000C26  0E41               	movlw	65
 12828  000C28  60DF               	cpfslt	indf2,c
 12829  000C2A  0C41               	retlw	65
 12830                           
 12831                           ;midi.c: 85: {
 12832                           ;midi.c: 86: LATB4 = 1;
 12833  000C2C  888A               	bsf	3978,4,c	;volatile
 12834                           
 12835                           ;midi.c: 87: AMidiBuffer->Size++;
 12836  000C2E  EE21 F043          	lfsr	2,323
 12837  000C32  5001               	movf	Midi_Write@AMidiBuffer,w,c
 12838  000C34  26D9               	addwf	fsr2l,f,c
 12839  000C36  5002               	movf	Midi_Write@AMidiBuffer+1,w,c
 12840  000C38  22DA               	addwfc	fsr2h,f,c
 12841  000C3A  2ADF               	incf	indf2,f,c
 12842                           
 12843                           ;midi.c: 88: AMidiBuffer->iBufferWrite++;
 12844  000C3C  EE21 F041          	lfsr	2,321
 12845  000C40  5001               	movf	Midi_Write@AMidiBuffer,w,c
 12846  000C42  26D9               	addwf	fsr2l,f,c
 12847  000C44  5002               	movf	Midi_Write@AMidiBuffer+1,w,c
 12848  000C46  22DA               	addwfc	fsr2h,f,c
 12849  000C48  2ADF               	incf	indf2,f,c
 12850                           
 12851                           ;midi.c: 89: if (AMidiBuffer->iBufferWrite >= 64)
 12852  000C4A  EE21 F041          	lfsr	2,321
 12853  000C4E  5001               	movf	Midi_Write@AMidiBuffer,w,c
 12854  000C50  26D9               	addwf	fsr2l,f,c
 12855  000C52  5002               	movf	Midi_Write@AMidiBuffer+1,w,c
 12856  000C54  22DA               	addwfc	fsr2h,f,c
 12857  000C56  0E3F               	movlw	63
 12858  000C58  64DF               	cpfsgt	indf2,c
 12859  000C5A  0C3F               	retlw	63
 12860                           
 12861                           ;midi.c: 90: AMidiBuffer->iBufferWrite = 0;
 12862  000C5C  EE21 F041          	lfsr	2,321
 12863  000C60  5001               	movf	Midi_Write@AMidiBuffer,w,c
 12864  000C62  26D9               	addwf	fsr2l,f,c
 12865  000C64  5002               	movf	Midi_Write@AMidiBuffer+1,w,c
 12866  000C66  22DA               	addwfc	fsr2h,f,c
 12867  000C68  6ADF               	clrf	indf2,c
 12868  000C6A  0C00               	retlw	0	;funcret
 12869  000C6C                     __end_of_Midi_Write:
 12870                           	opt stack 0
 12871                           tblptru	equ	0xFF8
 12872                           tblptrh	equ	0xFF7
 12873                           tblptrl	equ	0xFF6
 12874                           tablat	equ	0xFF5
 12875                           prodh	equ	0xFF4
 12876                           prodl	equ	0xFF3
 12877                           intcon	equ	0xFF2
 12878                           postinc0	equ	0xFEE
 12879                           plusw0	equ	0xFEB
 12880                           fsr0h	equ	0xFEA
 12881                           fsr0l	equ	0xFE9
 12882                           wreg	equ	0xFE8
 12883                           indf1	equ	0xFE7
 12884                           postinc1	equ	0xFE6
 12885                           postdec1	equ	0xFE5
 12886                           plusw1	equ	0xFE3
 12887                           fsr1h	equ	0xFE2
 12888                           fsr1l	equ	0xFE1
 12889                           indf2	equ	0xFDF
 12890                           postinc2	equ	0xFDE
 12891                           postdec2	equ	0xFDD
 12892                           plusw2	equ	0xFDB
 12893                           fsr2h	equ	0xFDA
 12894                           fsr2l	equ	0xFD9
 12895                           status	equ	0xFD8
 12896                           
 12897 ;; *************** function _Hub_UpdateValues *****************
 12898 ;; Defined at:
 12899 ;;		line 82 in file "hub.c"
 12900 ;; Parameters:    Size  Location     Type
 12901 ;;		None
 12902 ;; Auto vars:     Size  Location     Type
 12903 ;;  i               2   76[COMRAM] int 
 12904 ;; Return value:  Size  Location     Type
 12905 ;;                  1    wreg      void 
 12906 ;; Registers used:
 12907 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 12908 ;; Tracked objects:
 12909 ;;		On entry : 3F/1
 12910 ;;		On exit  : 3F/1
 12911 ;;		Unchanged: 0/0
 12912 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 12913 ;;      Params:         0       0       0       0       0       0       0       0       0
 12914 ;;      Locals:         2       0       0       0       0       0       0       0       0
 12915 ;;      Temps:          0       0       0       0       0       0       0       0       0
 12916 ;;      Totals:         2       0       0       0       0       0       0       0       0
 12917 ;;Total ram usage:        2 bytes
 12918 ;; Hardware stack levels used:    1
 12919 ;; Hardware stack levels required when called:    4
 12920 ;; This function calls:
 12921 ;;		_Hub_DecodeSwitch
 12922 ;;		_Hub_SetValue
 12923 ;;		i2_Hub_ReadSwitch
 12924 ;;		i2_LatchOff
 12925 ;;		i2_LatchOn
 12926 ;;		i2_memcpy
 12927 ;; This function is called by:
 12928 ;;		_Interrupt
 12929 ;; This function uses a non-reentrant model
 12930 ;;
 12931                           
 12932                           	psect	text78
 12933  001D0C                     __ptext78:
 12934                           	opt stack 0
 12935  001D0C                     _Hub_UpdateValues:
 12936                           	opt stack 18
 12937                           
 12938                           ; BSR set to: 1
 12939                           ;hub.c: 84: if (_Hub.iRead == 0)
 12940                           
 12941                           ;incstack = 0
 12942  001D0C  5161               	movf	(__Hub+97)& (0+255),w,b
 12943  001D0E  E123               	bnz	i2l4418
 12944                           
 12945                           ; BSR set to: 1
 12946                           ;hub.c: 85: {
 12947                           ;hub.c: 86: memcpy(_Hub.SwitchOld, _Hub.Switch, sizeof(_Hub.Switch));
 12948  001D10  0E30               	movlw	low (__Hub+48)
 12949  001D12  6E01               	movwf	i2memcpy@d1,c
 12950  001D14  0E01               	movlw	high (__Hub+48)
 12951  001D16  6E02               	movwf	i2memcpy@d1+1,c
 12952  001D18  0E00               	movlw	low __Hub
 12953  001D1A  6E03               	movwf	i2memcpy@s1,c
 12954  001D1C  0E01               	movlw	high __Hub
 12955  001D1E  6E04               	movwf	i2memcpy@s1+1,c
 12956  001D20  6A06               	clrf	i2memcpy@n+1,c
 12957  001D22  0E30               	movlw	48
 12958  001D24  6E05               	movwf	i2memcpy@n,c
 12959  001D26  ECCF  F016         	call	i2_memcpy	;wreg free
 12960                           
 12961                           ; BSR set to: 1
 12962                           ;hub.c: 89: LatchOn(_Hub.IO);
 12963  001D2A  EE21  F08E         	lfsr	2,__Hub+142
 12964  001D2E  EE00  F001         	lfsr	0,i2LatchOn@AIO
 12965  001D32  0E0E               	movlw	14
 12966  001D34                     i2u476_41:
 12967  001D34  CFDB FFEB          	movff	plusw2,plusw0
 12968  001D38  06E8               	decf	wreg,f,c
 12969  001D3A  E2FC               	bc	i2u476_41
 12970  001D3C  ECEA  F018         	call	i2_LatchOn	;wreg free
 12971                           
 12972                           ;hub.c: 90: LatchOff(_Hub.IO);
 12973  001D40  EE21  F08E         	lfsr	2,__Hub+142
 12974  001D44  EE00  F001         	lfsr	0,i2LatchOff@AIO
 12975  001D48  0E0E               	movlw	14
 12976  001D4A                     i2u477_41:
 12977  001D4A  CFDB FFEB          	movff	plusw2,plusw0
 12978  001D4E  06E8               	decf	wreg,f,c
 12979  001D50  E2FC               	bc	i2u477_41
 12980  001D52  ECF1  F018         	call	i2_LatchOff	;wreg free
 12981  001D56                     i2l4418:
 12982                           
 12983                           ;hub.c: 91: }
 12984                           ;hub.c: 93: if (_Hub.iRead < 6 * 8)
 12985  001D56  0E30               	movlw	48
 12986  001D58  0101               	movlb	1	; () banked
 12987  001D5A  6161               	cpfslt	(__Hub+97)& (0+255),b
 12988  001D5C  D002               	goto	i2l325
 12989  001D5E  EF4F  F017         	goto	i2_Hub_ReadSwitch
 12990  001D62                     i2l325:
 12991                           
 12992                           ; BSR set to: 1
 12993                           ;hub.c: 95: else
 12994                           ;hub.c: 96: {
 12995                           ;hub.c: 97: _Hub.ReadComplete = 0;
 12996  001D62  6B60               	clrf	(__Hub+96)& (0+255),b
 12997                           
 12998                           ;hub.c: 99: _Hub.PrimaryBuffer.ActionButton = _Hub.Switch[2];
 12999  001D64  C102  F162         	movff	__Hub+2,__Hub+98
 13000                           
 13001                           ; BSR set to: 1
 13002                           ;hub.c: 103: Hub_SetValue(&_Hub.PrimaryBuffer.Channel, 0, _Hub.MaxChannel, Hub_DecodeSwi
      +                          tch(0, 1));
 13003  001D68  0E64               	movlw	low (__Hub+100)
 13004  001D6A  6E05               	movwf	Hub_SetValue@ASourceValue,c
 13005  001D6C  0E01               	movlw	high (__Hub+100)
 13006  001D6E  6E06               	movwf	Hub_SetValue@ASourceValue+1,c
 13007  001D70  6A07               	clrf	Hub_SetValue@AMinValue,c
 13008  001D72  C189  F008         	movff	__Hub+137,Hub_SetValue@AMaxValue
 13009  001D76  C18A  F009         	movff	__Hub+138,Hub_SetValue@AMaxValue+1
 13010  001D7A  0E01               	movlw	1
 13011  001D7C  6E01               	movwf	Hub_DecodeSwitch@AIndex2,c
 13012  001D7E  0E00               	movlw	0
 13013  001D80  EC01  F008         	call	_Hub_DecodeSwitch
 13014  001D84  6E0A               	movwf	Hub_SetValue@AIncrement,c
 13015  001D86  ECC4  F014         	call	_Hub_SetValue	;wreg free
 13016                           
 13017                           ;hub.c: 104: for (int i = 0; i < sizeof(_Hub.PrimaryBuffer.Values); i++)
 13018  001D8A  6A4D               	clrf	Hub_UpdateValues@i,c
 13019  001D8C  6A4E               	clrf	Hub_UpdateValues@i+1,c
 13020  001D8E                     i2l4434:
 13021                           
 13022                           ;hub.c: 105: {
 13023                           ;hub.c: 106: Hub_SetValue(&_Hub.PrimaryBuffer.Values[i], 0, (0x01 << 6) - 1, Hub_DecodeS
      +                          witch(i * 3 + 3, i * 3 + 4));
 13024  001D8E  0E66               	movlw	low (__Hub+102)
 13025  001D90  244D               	addwf	Hub_UpdateValues@i,w,c
 13026  001D92  6E05               	movwf	Hub_SetValue@ASourceValue,c
 13027  001D94  0E01               	movlw	high (__Hub+102)
 13028  001D96  204E               	addwfc	Hub_UpdateValues@i+1,w,c
 13029  001D98  6E06               	movwf	Hub_SetValue@ASourceValue+1,c
 13030  001D9A  6A07               	clrf	Hub_SetValue@AMinValue,c
 13031  001D9C  6A09               	clrf	Hub_SetValue@AMaxValue+1,c
 13032  001D9E  0E3F               	movlw	63
 13033  001DA0  6E08               	movwf	Hub_SetValue@AMaxValue,c
 13034  001DA2  504D               	movf	Hub_UpdateValues@i,w,c
 13035  001DA4  0D03               	mullw	3
 13036  001DA6  50F3               	movf	prodl,w,c
 13037  001DA8  0F04               	addlw	4
 13038  001DAA  6E01               	movwf	Hub_DecodeSwitch@AIndex2,c
 13039  001DAC  504D               	movf	Hub_UpdateValues@i,w,c
 13040  001DAE  0D03               	mullw	3
 13041  001DB0  50F3               	movf	prodl,w,c
 13042  001DB2  0F03               	addlw	3
 13043  001DB4  EC01  F008         	call	_Hub_DecodeSwitch
 13044  001DB8  6E0A               	movwf	Hub_SetValue@AIncrement,c
 13045  001DBA  ECC4  F014         	call	_Hub_SetValue	;wreg free
 13046  001DBE  4A4D               	infsnz	Hub_UpdateValues@i,f,c
 13047  001DC0  2A4E               	incf	Hub_UpdateValues@i+1,f,c
 13048  001DC2  504E               	movf	Hub_UpdateValues@i+1,w,c
 13049  001DC4  E103               	bnz	i2u479_40
 13050  001DC6  0E08               	movlw	8
 13051  001DC8  5C4D               	subwf	Hub_UpdateValues@i,w,c
 13052  001DCA  E3E1               	bnc	i2l4434
 13053  001DCC                     i2u479_40:
 13054                           
 13055                           ;hub.c: 107: }
 13056                           ;hub.c: 108: _Hub.iRead = 0;
 13057  001DCC  0101               	movlb	1	; () banked
 13058  001DCE  6B61               	clrf	(__Hub+97)& (0+255),b
 13059                           
 13060                           ; BSR set to: 1
 13061                           ;hub.c: 109: _Hub.ReadComplete = 1;
 13062  001DD0  0E01               	movlw	1
 13063  001DD2  6F60               	movwf	(__Hub+96)& (0+255),b
 13064                           
 13065                           ; BSR set to: 1
 13066  001DD4  0C01               	retlw	1	;funcret
 13067  001DD6                     __end_of_Hub_UpdateValues:
 13068                           	opt stack 0
 13069                           tblptru	equ	0xFF8
 13070                           tblptrh	equ	0xFF7
 13071                           tblptrl	equ	0xFF6
 13072                           tablat	equ	0xFF5
 13073                           prodh	equ	0xFF4
 13074                           prodl	equ	0xFF3
 13075                           intcon	equ	0xFF2
 13076                           postinc0	equ	0xFEE
 13077                           plusw0	equ	0xFEB
 13078                           fsr0h	equ	0xFEA
 13079                           fsr0l	equ	0xFE9
 13080                           wreg	equ	0xFE8
 13081                           indf1	equ	0xFE7
 13082                           postinc1	equ	0xFE6
 13083                           postdec1	equ	0xFE5
 13084                           plusw1	equ	0xFE3
 13085                           fsr1h	equ	0xFE2
 13086                           fsr1l	equ	0xFE1
 13087                           indf2	equ	0xFDF
 13088                           postinc2	equ	0xFDE
 13089                           postdec2	equ	0xFDD
 13090                           plusw2	equ	0xFDB
 13091                           fsr2h	equ	0xFDA
 13092                           fsr2l	equ	0xFD9
 13093                           status	equ	0xFD8
 13094                           
 13095 ;; *************** function i2_LatchOn *****************
 13096 ;; Defined at:
 13097 ;;		line 70 in file "harware.c"
 13098 ;; Parameters:    Size  Location     Type
 13099 ;;  AIO            15    0[COMRAM] struct .
 13100 ;; Auto vars:     Size  Location     Type
 13101 ;;		None
 13102 ;; Return value:  Size  Location     Type
 13103 ;;                  1    wreg      void 
 13104 ;; Registers used:
 13105 ;;		wreg, fsr2l, fsr2h
 13106 ;; Tracked objects:
 13107 ;;		On entry : 3C/2
 13108 ;;		On exit  : 3C/0
 13109 ;;		Unchanged: 3C/0
 13110 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 13111 ;;      Params:        15       0       0       0       0       0       0       0       0
 13112 ;;      Locals:         0       0       0       0       0       0       0       0       0
 13113 ;;      Temps:          0       0       0       0       0       0       0       0       0
 13114 ;;      Totals:        15       0       0       0       0       0       0       0       0
 13115 ;;Total ram usage:       15 bytes
 13116 ;; Hardware stack levels used:    1
 13117 ;; This function calls:
 13118 ;;		Nothing
 13119 ;; This function is called by:
 13120 ;;		_Hub_UpdateValues
 13121 ;;		i2_WriteData
 13122 ;; This function uses a non-reentrant model
 13123 ;;
 13124                           
 13125                           	psect	text79
 13126  0031D4                     __ptext79:
 13127                           	opt stack 0
 13128  0031D4                     i2_LatchOn:
 13129                           	opt stack 21
 13130                           
 13131                           ;harware.c: 72: *AIO.LatchPin.Port &= AIO.LatchPin.Mask;
 13132                           
 13133                           ; BSR set to: 1
 13134                           ;incstack = 0
 13135  0031D4  C00B  FFD9         	movff	i2LatchOn@AIO+10,fsr2l
 13136  0031D8  C00C  FFDA         	movff	i2LatchOn@AIO+11,fsr2h
 13137  0031DC  500E               	movf	i2LatchOn@AIO+13,w,c
 13138  0031DE  16DF               	andwf	indf2,f,c
 13139  0031E0  0012               	return		;funcret
 13140  0031E2                     __end_ofi2_LatchOn:
 13141                           	opt stack 0
 13142                           tblptru	equ	0xFF8
 13143                           tblptrh	equ	0xFF7
 13144                           tblptrl	equ	0xFF6
 13145                           tablat	equ	0xFF5
 13146                           prodh	equ	0xFF4
 13147                           prodl	equ	0xFF3
 13148                           intcon	equ	0xFF2
 13149                           postinc0	equ	0xFEE
 13150                           plusw0	equ	0xFEB
 13151                           fsr0h	equ	0xFEA
 13152                           fsr0l	equ	0xFE9
 13153                           wreg	equ	0xFE8
 13154                           indf1	equ	0xFE7
 13155                           postinc1	equ	0xFE6
 13156                           postdec1	equ	0xFE5
 13157                           plusw1	equ	0xFE3
 13158                           fsr1h	equ	0xFE2
 13159                           fsr1l	equ	0xFE1
 13160                           indf2	equ	0xFDF
 13161                           postinc2	equ	0xFDE
 13162                           postdec2	equ	0xFDD
 13163                           plusw2	equ	0xFDB
 13164                           fsr2h	equ	0xFDA
 13165                           fsr2l	equ	0xFD9
 13166                           status	equ	0xFD8
 13167                           
 13168 ;; *************** function i2_LatchOff *****************
 13169 ;; Defined at:
 13170 ;;		line 75 in file "harware.c"
 13171 ;; Parameters:    Size  Location     Type
 13172 ;;  AIO            15    0[COMRAM] struct .
 13173 ;; Auto vars:     Size  Location     Type
 13174 ;;		None
 13175 ;; Return value:  Size  Location     Type
 13176 ;;                  1    wreg      void 
 13177 ;; Registers used:
 13178 ;;		wreg, fsr2l, fsr2h
 13179 ;; Tracked objects:
 13180 ;;		On entry : 0/2
 13181 ;;		On exit  : 0/0
 13182 ;;		Unchanged: 0/0
 13183 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 13184 ;;      Params:        15       0       0       0       0       0       0       0       0
 13185 ;;      Locals:         0       0       0       0       0       0       0       0       0
 13186 ;;      Temps:          0       0       0       0       0       0       0       0       0
 13187 ;;      Totals:        15       0       0       0       0       0       0       0       0
 13188 ;;Total ram usage:       15 bytes
 13189 ;; Hardware stack levels used:    1
 13190 ;; This function calls:
 13191 ;;		Nothing
 13192 ;; This function is called by:
 13193 ;;		_Hub_UpdateValues
 13194 ;;		i2_WriteData
 13195 ;; This function uses a non-reentrant model
 13196 ;;
 13197                           
 13198                           	psect	text80
 13199  0031E2                     __ptext80:
 13200                           	opt stack 0
 13201  0031E2                     i2_LatchOff:
 13202                           	opt stack 21
 13203                           
 13204                           ;harware.c: 77: *AIO.LatchPin.Port |= AIO.LatchPin.NegativeMask;
 13205                           
 13206                           ;incstack = 0
 13207  0031E2  C00B  FFD9         	movff	i2LatchOff@AIO+10,fsr2l
 13208  0031E6  C00C  FFDA         	movff	i2LatchOff@AIO+11,fsr2h
 13209  0031EA  500F               	movf	i2LatchOff@AIO+14,w,c
 13210  0031EC  12DF               	iorwf	indf2,f,c
 13211  0031EE  0012               	return		;funcret
 13212  0031F0                     __end_ofi2_LatchOff:
 13213                           	opt stack 0
 13214                           tblptru	equ	0xFF8
 13215                           tblptrh	equ	0xFF7
 13216                           tblptrl	equ	0xFF6
 13217                           tablat	equ	0xFF5
 13218                           prodh	equ	0xFF4
 13219                           prodl	equ	0xFF3
 13220                           intcon	equ	0xFF2
 13221                           postinc0	equ	0xFEE
 13222                           plusw0	equ	0xFEB
 13223                           fsr0h	equ	0xFEA
 13224                           fsr0l	equ	0xFE9
 13225                           wreg	equ	0xFE8
 13226                           indf1	equ	0xFE7
 13227                           postinc1	equ	0xFE6
 13228                           postdec1	equ	0xFE5
 13229                           plusw1	equ	0xFE3
 13230                           fsr1h	equ	0xFE2
 13231                           fsr1l	equ	0xFE1
 13232                           indf2	equ	0xFDF
 13233                           postinc2	equ	0xFDE
 13234                           postdec2	equ	0xFDD
 13235                           plusw2	equ	0xFDB
 13236                           fsr2h	equ	0xFDA
 13237                           fsr2l	equ	0xFD9
 13238                           status	equ	0xFD8
 13239                           
 13240 ;; *************** function i2_Hub_ReadSwitch *****************
 13241 ;; Defined at:
 13242 ;;		line 44 in file "hub.c"
 13243 ;; Parameters:    Size  Location     Type
 13244 ;;		None
 13245 ;; Auto vars:     Size  Location     Type
 13246 ;;  Hub_ReadSwit   24   52[COMRAM] unsigned char [24]
 13247 ;; Return value:  Size  Location     Type
 13248 ;;                  1    wreg      void 
 13249 ;; Registers used:
 13250 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, cstack
 13251 ;; Tracked objects:
 13252 ;;		On entry : 3F/1
 13253 ;;		On exit  : 3F/1
 13254 ;;		Unchanged: 0/0
 13255 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 13256 ;;      Params:         0       0       0       0       0       0       0       0       0
 13257 ;;      Locals:        24       0       0       0       0       0       0       0       0
 13258 ;;      Temps:          0       0       0       0       0       0       0       0       0
 13259 ;;      Totals:        24       0       0       0       0       0       0       0       0
 13260 ;;Total ram usage:       24 bytes
 13261 ;; Hardware stack levels used:    1
 13262 ;; Hardware stack levels required when called:    3
 13263 ;; This function calls:
 13264 ;;		i2_ReadBitArray
 13265 ;;		i2_memcpy
 13266 ;; This function is called by:
 13267 ;;		_Hub_UpdateValues
 13268 ;; This function uses a non-reentrant model
 13269 ;;
 13270                           
 13271                           	psect	text81
 13272  002E9E                     __ptext81:
 13273                           	opt stack 0
 13274  002E9E                     i2_Hub_ReadSwitch:
 13275                           	opt stack 18
 13276                           
 13277                           ; BSR set to: 1
 13278                           ;hub.c: 46: bool LBitArray[24];
 13279                           ;hub.c: 47: ReadBitArray(LBitArray, _Hub.IO);
 13280                           
 13281                           ;incstack = 0
 13282  002E9E  0E35               	movlw	low i2Hub_ReadSwitch@LBitArray
 13283  002EA0  6E22               	movwf	i2ReadBitArray@AData,c
 13284  002EA2  EE21  F08E         	lfsr	2,__Hub+142
 13285  002EA6  EE00  F023         	lfsr	0,i2ReadBitArray@AIO
 13286  002EAA  0E0E               	movlw	14
 13287  002EAC                     i2u463_41:
 13288  002EAC  CFDB FFEB          	movff	plusw2,plusw0
 13289  002EB0  06E8               	decf	wreg,f,c
 13290  002EB2  E2FC               	bc	i2u463_41
 13291  002EB4  EC10  F017         	call	i2_ReadBitArray	;wreg free
 13292                           
 13293                           ;hub.c: 48: memcpy(_Hub.Switch + _Hub.iRead, LBitArray, sizeof(LBitArray));
 13294  002EB8  0E00               	movlw	low __Hub
 13295  002EBA  0101               	movlb	1	; () banked
 13296  002EBC  2561               	addwf	(__Hub+97)& (0+255),w,b
 13297  002EBE  6E01               	movwf	i2memcpy@d1,c
 13298  002EC0  6A02               	clrf	i2memcpy@d1+1,c
 13299  002EC2  0E01               	movlw	high __Hub
 13300  002EC4  2202               	addwfc	i2memcpy@d1+1,f,c
 13301  002EC6  0E35               	movlw	low i2Hub_ReadSwitch@LBitArray
 13302  002EC8  6E03               	movwf	i2memcpy@s1,c
 13303  002ECA  6A04               	clrf	i2memcpy@s1+1,c
 13304  002ECC  6A06               	clrf	i2memcpy@n+1,c
 13305  002ECE  0E18               	movlw	24
 13306  002ED0  6E05               	movwf	i2memcpy@n,c
 13307  002ED2  ECCF  F016         	call	i2_memcpy	;wreg free
 13308                           
 13309                           ; BSR set to: 1
 13310                           ;hub.c: 49: _Hub.iRead += 24;
 13311  002ED6  0E18               	movlw	24
 13312  002ED8  2761               	addwf	(__Hub+97)& (0+255),f,b
 13313                           
 13314                           ; BSR set to: 1
 13315  002EDA  0C18               	retlw	24	;funcret
 13316  002EDC                     __end_ofi2_Hub_ReadSwitch:
 13317                           	opt stack 0
 13318                           tblptru	equ	0xFF8
 13319                           tblptrh	equ	0xFF7
 13320                           tblptrl	equ	0xFF6
 13321                           tablat	equ	0xFF5
 13322                           prodh	equ	0xFF4
 13323                           prodl	equ	0xFF3
 13324                           intcon	equ	0xFF2
 13325                           postinc0	equ	0xFEE
 13326                           plusw0	equ	0xFEB
 13327                           fsr0h	equ	0xFEA
 13328                           fsr0l	equ	0xFE9
 13329                           wreg	equ	0xFE8
 13330                           indf1	equ	0xFE7
 13331                           postinc1	equ	0xFE6
 13332                           postdec1	equ	0xFE5
 13333                           plusw1	equ	0xFE3
 13334                           fsr1h	equ	0xFE2
 13335                           fsr1l	equ	0xFE1
 13336                           indf2	equ	0xFDF
 13337                           postinc2	equ	0xFDE
 13338                           postdec2	equ	0xFDD
 13339                           plusw2	equ	0xFDB
 13340                           fsr2h	equ	0xFDA
 13341                           fsr2l	equ	0xFD9
 13342                           status	equ	0xFD8
 13343                           
 13344 ;; *************** function i2_memcpy *****************
 13345 ;; Defined at:
 13346 ;;		line 27 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\memcpy.c"
 13347 ;; Parameters:    Size  Location     Type
 13348 ;;  d1              2    0[COMRAM] PTR void 
 13349 ;;		 -> _Hub.Switch(48), Load@LBuffer(12), _Hub(157), 
 13350 ;;  s1              2    2[COMRAM] PTR const void 
 13351 ;;		 -> Persistant_SaveBuffer@ABuffer(12), _Hub.Switch(48), Hub_ReadSwitch@LBitArray(24), _Config(12), 
 13352 ;;		 -> _Hub.PrimaryBuffer(12), _Hub(157), 
 13353 ;;  n               2    4[COMRAM] unsigned int 
 13354 ;; Auto vars:     Size  Location     Type
 13355 ;;  memcpy          2    8[COMRAM] PTR const unsigned char 
 13356 ;;		 -> Persistant_SaveBuffer@ABuffer(12), _Hub.Switch(48), Hub_ReadSwitch@LBitArray(24), _Config(12), 
 13357 ;;		 -> _Hub.PrimaryBuffer(12), _Hub(157), 
 13358 ;;  memcpy          2    6[COMRAM] PTR unsigned char 
 13359 ;;		 -> _Hub.Switch(48), Load@LBuffer(12), _Hub(157), 
 13360 ;;  memcpy          1   10[COMRAM] unsigned char 
 13361 ;; Return value:  Size  Location     Type
 13362 ;;                  2    0[COMRAM] PTR void 
 13363 ;; Registers used:
 13364 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 13365 ;; Tracked objects:
 13366 ;;		On entry : 3F/1
 13367 ;;		On exit  : 3F/1
 13368 ;;		Unchanged: 3F/0
 13369 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 13370 ;;      Params:         6       0       0       0       0       0       0       0       0
 13371 ;;      Locals:         5       0       0       0       0       0       0       0       0
 13372 ;;      Temps:          0       0       0       0       0       0       0       0       0
 13373 ;;      Totals:        11       0       0       0       0       0       0       0       0
 13374 ;;Total ram usage:       11 bytes
 13375 ;; Hardware stack levels used:    1
 13376 ;; This function calls:
 13377 ;;		Nothing
 13378 ;; This function is called by:
 13379 ;;		_Hub_UpdateValues
 13380 ;;		i2_Hub_ReadSwitch
 13381 ;;		i2_Hub_CopyBuffer
 13382 ;; This function uses a non-reentrant model
 13383 ;;
 13384                           
 13385                           	psect	text82
 13386  002D9E                     __ptext82:
 13387                           	opt stack 0
 13388  002D9E                     i2_memcpy:
 13389                           	opt stack 21
 13390                           
 13391                           ; BSR set to: 1
 13392                           
 13393                           ; BSR set to: 1
 13394                           ;incstack = 0
 13395  002D9E  C003  F009         	movff	i2memcpy@s1,i2memcpy@s
 13396  002DA2  C004  F00A         	movff	i2memcpy@s1+1,i2memcpy@s+1
 13397  002DA6  C001  F007         	movff	i2memcpy@d1,i2memcpy@d
 13398  002DAA  C002  F008         	movff	i2memcpy@d1+1,i2memcpy@d+1
 13399  002DAE  D010               	goto	i2l3936
 13400  002DB0                     i2l3928:
 13401                           
 13402                           ; BSR set to: 1
 13403  002DB0  C009  FFD9         	movff	i2memcpy@s,fsr2l
 13404  002DB4  C00A  FFDA         	movff	i2memcpy@s+1,fsr2h
 13405  002DB8  50DF               	movf	indf2,w,c
 13406  002DBA  6E0B               	movwf	i2memcpy@tmp,c
 13407                           
 13408                           ; BSR set to: 1
 13409  002DBC  4A09               	infsnz	i2memcpy@s,f,c
 13410  002DBE  2A0A               	incf	i2memcpy@s+1,f,c
 13411                           
 13412                           ; BSR set to: 1
 13413  002DC0  C007  FFD9         	movff	i2memcpy@d,fsr2l
 13414  002DC4  C008  FFDA         	movff	i2memcpy@d+1,fsr2h
 13415  002DC8  C00B  FFDF         	movff	i2memcpy@tmp,indf2
 13416                           
 13417                           ; BSR set to: 1
 13418  002DCC  4A07               	infsnz	i2memcpy@d,f,c
 13419  002DCE  2A08               	incf	i2memcpy@d+1,f,c
 13420  002DD0                     i2l3936:
 13421                           
 13422                           ; BSR set to: 1
 13423  002DD0  0605               	decf	i2memcpy@n,f,c
 13424  002DD2  A0D8               	btfss	status,0,c
 13425  002DD4  0606               	decf	i2memcpy@n+1,f,c
 13426  002DD6  2805               	incf	i2memcpy@n,w,c
 13427  002DD8  E1EB               	bnz	i2l3928
 13428  002DDA  2806               	incf	i2memcpy@n+1,w,c
 13429  002DDC  E1E9               	bnz	i2l3928
 13430                           
 13431                           ; BSR set to: 1
 13432  002DDE  0012               	return		;funcret
 13433  002DE0                     __end_ofi2_memcpy:
 13434                           	opt stack 0
 13435                           tblptru	equ	0xFF8
 13436                           tblptrh	equ	0xFF7
 13437                           tblptrl	equ	0xFF6
 13438                           tablat	equ	0xFF5
 13439                           prodh	equ	0xFF4
 13440                           prodl	equ	0xFF3
 13441                           intcon	equ	0xFF2
 13442                           postinc0	equ	0xFEE
 13443                           plusw0	equ	0xFEB
 13444                           fsr0h	equ	0xFEA
 13445                           fsr0l	equ	0xFE9
 13446                           wreg	equ	0xFE8
 13447                           indf1	equ	0xFE7
 13448                           postinc1	equ	0xFE6
 13449                           postdec1	equ	0xFE5
 13450                           plusw1	equ	0xFE3
 13451                           fsr1h	equ	0xFE2
 13452                           fsr1l	equ	0xFE1
 13453                           indf2	equ	0xFDF
 13454                           postinc2	equ	0xFDE
 13455                           postdec2	equ	0xFDD
 13456                           plusw2	equ	0xFDB
 13457                           fsr2h	equ	0xFDA
 13458                           fsr2l	equ	0xFD9
 13459                           status	equ	0xFD8
 13460                           
 13461 ;; *************** function i2_ReadBitArray *****************
 13462 ;; Defined at:
 13463 ;;		line 62 in file "harware.c"
 13464 ;; Parameters:    Size  Location     Type
 13465 ;;  AData           1   33[COMRAM] PTR unsigned char 
 13466 ;;		 -> Hub_ReadSwitch@LBitArray(24), 
 13467 ;;  AIO            15   34[COMRAM] struct .
 13468 ;; Auto vars:     Size  Location     Type
 13469 ;;  ReadBitArray    2   50[COMRAM] int 
 13470 ;; Return value:  Size  Location     Type
 13471 ;;                  1    wreg      void 
 13472 ;; Registers used:
 13473 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, cstack
 13474 ;; Tracked objects:
 13475 ;;		On entry : 3F/1
 13476 ;;		On exit  : 0/0
 13477 ;;		Unchanged: 0/0
 13478 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 13479 ;;      Params:        16       0       0       0       0       0       0       0       0
 13480 ;;      Locals:         2       0       0       0       0       0       0       0       0
 13481 ;;      Temps:          1       0       0       0       0       0       0       0       0
 13482 ;;      Totals:        19       0       0       0       0       0       0       0       0
 13483 ;;Total ram usage:       19 bytes
 13484 ;; Hardware stack levels used:    1
 13485 ;; Hardware stack levels required when called:    2
 13486 ;; This function calls:
 13487 ;;		i2_ReadBit
 13488 ;; This function is called by:
 13489 ;;		i2_Hub_ReadSwitch
 13490 ;; This function uses a non-reentrant model
 13491 ;;
 13492                           
 13493                           	psect	text83
 13494  002E20                     __ptext83:
 13495                           	opt stack 0
 13496  002E20                     i2_ReadBitArray:
 13497                           	opt stack 18
 13498                           
 13499                           ; BSR set to: 1
 13500                           ;harware.c: 66: for (int i = 0; i < 24; i++)
 13501                           
 13502                           ; BSR set to: 1
 13503                           ;incstack = 0
 13504  002E20  6A33               	clrf	i2ReadBitArray@i,c
 13505  002E22  6A34               	clrf	i2ReadBitArray@i+1,c
 13506  002E24                     i2l3920:
 13507                           
 13508                           ;harware.c: 67: AData[i] = ReadBit(AIO);
 13509  002E24  EE20  F023         	lfsr	2,i2ReadBitArray@AIO
 13510  002E28  EE00  F010         	lfsr	0,i2ReadBit@AIO
 13511  002E2C  0E0E               	movlw	14
 13512  002E2E                     i2u398_41:
 13513  002E2E  CFDB FFEB          	movff	plusw2,plusw0
 13514  002E32  06E8               	decf	wreg,f,c
 13515  002E34  E2FC               	bc	i2u398_41
 13516  002E36  ECA4  F015         	call	i2_ReadBit	;wreg free
 13517  002E3A  6E32               	movwf	??i2_ReadBitArray& (0+255),c
 13518  002E3C  5022               	movf	i2ReadBitArray@AData,w,c
 13519  002E3E  2433               	addwf	i2ReadBitArray@i,w,c
 13520  002E40  6ED9               	movwf	fsr2l,c
 13521  002E42  6ADA               	clrf	fsr2h,c
 13522  002E44  C032  FFDF         	movff	??i2_ReadBitArray,indf2
 13523  002E48  4A33               	infsnz	i2ReadBitArray@i,f,c
 13524  002E4A  2A34               	incf	i2ReadBitArray@i+1,f,c
 13525  002E4C  BE34               	btfsc	i2ReadBitArray@i+1,7,c
 13526  002E4E  D7EA               	goto	i2l3920
 13527  002E50  5034               	movf	i2ReadBitArray@i+1,w,c
 13528  002E52  E105               	bnz	i2u399_40
 13529  002E54  0E18               	movlw	24
 13530  002E56  5C33               	subwf	i2ReadBitArray@i,w,c
 13531  002E58  B0D8               	btfsc	status,0,c
 13532  002E5A  0012               	return	
 13533  002E5C  D7E3               	goto	i2l3920
 13534  002E5E                     i2u399_40:
 13535  002E5E  0012               	return		;funcret
 13536  002E60                     __end_ofi2_ReadBitArray:
 13537                           	opt stack 0
 13538                           tblptru	equ	0xFF8
 13539                           tblptrh	equ	0xFF7
 13540                           tblptrl	equ	0xFF6
 13541                           tablat	equ	0xFF5
 13542                           prodh	equ	0xFF4
 13543                           prodl	equ	0xFF3
 13544                           intcon	equ	0xFF2
 13545                           postinc0	equ	0xFEE
 13546                           plusw0	equ	0xFEB
 13547                           fsr0h	equ	0xFEA
 13548                           fsr0l	equ	0xFE9
 13549                           wreg	equ	0xFE8
 13550                           indf1	equ	0xFE7
 13551                           postinc1	equ	0xFE6
 13552                           postdec1	equ	0xFE5
 13553                           plusw1	equ	0xFE3
 13554                           fsr1h	equ	0xFE2
 13555                           fsr1l	equ	0xFE1
 13556                           indf2	equ	0xFDF
 13557                           postinc2	equ	0xFDE
 13558                           postdec2	equ	0xFDD
 13559                           plusw2	equ	0xFDB
 13560                           fsr2h	equ	0xFDA
 13561                           fsr2l	equ	0xFD9
 13562                           status	equ	0xFD8
 13563                           
 13564 ;; *************** function i2_ReadBit *****************
 13565 ;; Defined at:
 13566 ;;		line 36 in file "harware.c"
 13567 ;; Parameters:    Size  Location     Type
 13568 ;;  AIO            15   15[COMRAM] struct .
 13569 ;; Auto vars:     Size  Location     Type
 13570 ;;  ReadBit         1   32[COMRAM] unsigned char 
 13571 ;; Return value:  Size  Location     Type
 13572 ;;                  1    wreg      unsigned char 
 13573 ;; Registers used:
 13574 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, cstack
 13575 ;; Tracked objects:
 13576 ;;		On entry : 0/1
 13577 ;;		On exit  : 0/0
 13578 ;;		Unchanged: 0/0
 13579 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 13580 ;;      Params:        15       0       0       0       0       0       0       0       0
 13581 ;;      Locals:         1       0       0       0       0       0       0       0       0
 13582 ;;      Temps:          2       0       0       0       0       0       0       0       0
 13583 ;;      Totals:        18       0       0       0       0       0       0       0       0
 13584 ;;Total ram usage:       18 bytes
 13585 ;; Hardware stack levels used:    1
 13586 ;; Hardware stack levels required when called:    1
 13587 ;; This function calls:
 13588 ;;		i2_ClockDown
 13589 ;;		i2_ClockUp
 13590 ;; This function is called by:
 13591 ;;		i2_ReadBitArray
 13592 ;; This function uses a non-reentrant model
 13593 ;;
 13594                           
 13595                           	psect	text84
 13596  002B48                     __ptext84:
 13597                           	opt stack 0
 13598  002B48                     i2_ReadBit:
 13599                           	opt stack 18
 13600                           
 13601                           ;harware.c: 38: bool LBit = (*AIO.DataPin.Port >> AIO.DataPin.PinNumber) & 0x01;
 13602                           
 13603                           ;incstack = 0
 13604  002B48  C017  F01F         	movff	i2ReadBit@AIO+7,??i2_ReadBit
 13605  002B4C  C015  FFD9         	movff	i2ReadBit@AIO+5,fsr2l
 13606  002B50  C016  FFDA         	movff	i2ReadBit@AIO+6,fsr2h
 13607  002B54  50DF               	movf	indf2,w,c
 13608  002B56  6E20               	movwf	(??i2_ReadBit+1)& (0+255),c
 13609  002B58  2A1F               	incf	??i2_ReadBit,f,c
 13610  002B5A  D002               	goto	i2u371_44
 13611  002B5C                     i2u371_45:
 13612  002B5C  90D8               	bcf	status,0,c
 13613  002B5E  3220               	rrcf	??i2_ReadBit+1,f,c
 13614  002B60                     i2u371_44:
 13615  002B60  2E1F               	decfsz	??i2_ReadBit,f,c
 13616  002B62  D7FC               	goto	i2u371_45
 13617  002B64  5020               	movf	??i2_ReadBit+1,w,c
 13618  002B66  0B01               	andlw	1
 13619  002B68  6E21               	movwf	i2ReadBit@LBit,c
 13620                           
 13621                           ;harware.c: 39: ClockUp(AIO);
 13622  002B6A  EE20  F010         	lfsr	2,i2ReadBit@AIO
 13623  002B6E  EE00  F001         	lfsr	0,i2ClockUp@AIO
 13624  002B72  0E0E               	movlw	14
 13625  002B74                     i2u372_41:
 13626  002B74  CFDB FFEB          	movff	plusw2,plusw0
 13627  002B78  06E8               	decf	wreg,f,c
 13628  002B7A  E2FC               	bc	i2u372_41
 13629  002B7C  ECF8  F018         	call	i2_ClockUp	;wreg free
 13630                           
 13631                           ;harware.c: 40: ClockDown(AIO);
 13632  002B80  EE20  F010         	lfsr	2,i2ReadBit@AIO
 13633  002B84  EE00  F001         	lfsr	0,i2ClockDown@AIO
 13634  002B88  0E0E               	movlw	14
 13635  002B8A                     i2u373_41:
 13636  002B8A  CFDB FFEB          	movff	plusw2,plusw0
 13637  002B8E  06E8               	decf	wreg,f,c
 13638  002B90  E2FC               	bc	i2u373_41
 13639  002B92  ECFF  F018         	call	i2_ClockDown	;wreg free
 13640                           
 13641                           ;harware.c: 41: return LBit;
 13642  002B96  5021               	movf	i2ReadBit@LBit,w,c
 13643  002B98  0012               	return		;funcret
 13644  002B9A                     __end_ofi2_ReadBit:
 13645                           	opt stack 0
 13646                           tblptru	equ	0xFF8
 13647                           tblptrh	equ	0xFF7
 13648                           tblptrl	equ	0xFF6
 13649                           tablat	equ	0xFF5
 13650                           prodh	equ	0xFF4
 13651                           prodl	equ	0xFF3
 13652                           intcon	equ	0xFF2
 13653                           postinc0	equ	0xFEE
 13654                           plusw0	equ	0xFEB
 13655                           fsr0h	equ	0xFEA
 13656                           fsr0l	equ	0xFE9
 13657                           wreg	equ	0xFE8
 13658                           indf1	equ	0xFE7
 13659                           postinc1	equ	0xFE6
 13660                           postdec1	equ	0xFE5
 13661                           plusw1	equ	0xFE3
 13662                           fsr1h	equ	0xFE2
 13663                           fsr1l	equ	0xFE1
 13664                           indf2	equ	0xFDF
 13665                           postinc2	equ	0xFDE
 13666                           postdec2	equ	0xFDD
 13667                           plusw2	equ	0xFDB
 13668                           fsr2h	equ	0xFDA
 13669                           fsr2l	equ	0xFD9
 13670                           status	equ	0xFD8
 13671                           
 13672 ;; *************** function i2_ClockUp *****************
 13673 ;; Defined at:
 13674 ;;		line 80 in file "harware.c"
 13675 ;; Parameters:    Size  Location     Type
 13676 ;;  AIO            15    0[COMRAM] struct .
 13677 ;; Auto vars:     Size  Location     Type
 13678 ;;		None
 13679 ;; Return value:  Size  Location     Type
 13680 ;;                  1    wreg      void 
 13681 ;; Registers used:
 13682 ;;		wreg, fsr2l, fsr2h
 13683 ;; Tracked objects:
 13684 ;;		On entry : 0/2
 13685 ;;		On exit  : 0/0
 13686 ;;		Unchanged: 0/0
 13687 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 13688 ;;      Params:        15       0       0       0       0       0       0       0       0
 13689 ;;      Locals:         0       0       0       0       0       0       0       0       0
 13690 ;;      Temps:          0       0       0       0       0       0       0       0       0
 13691 ;;      Totals:        15       0       0       0       0       0       0       0       0
 13692 ;;Total ram usage:       15 bytes
 13693 ;; Hardware stack levels used:    1
 13694 ;; This function calls:
 13695 ;;		Nothing
 13696 ;; This function is called by:
 13697 ;;		i2_WriteChar
 13698 ;;		i2_ReadBit
 13699 ;; This function uses a non-reentrant model
 13700 ;;
 13701                           
 13702                           	psect	text85
 13703  0031F0                     __ptext85:
 13704                           	opt stack 0
 13705  0031F0                     i2_ClockUp:
 13706                           	opt stack 20
 13707                           
 13708                           ;harware.c: 82: *AIO.ClockPin.Port &= AIO.ClockPin.Mask;
 13709                           
 13710                           ;incstack = 0
 13711  0031F0  C001  FFD9         	movff	i2ClockUp@AIO,fsr2l
 13712  0031F4  C002  FFDA         	movff	i2ClockUp@AIO+1,fsr2h
 13713  0031F8  5004               	movf	i2ClockUp@AIO+3,w,c
 13714  0031FA  16DF               	andwf	indf2,f,c
 13715  0031FC  0012               	return		;funcret
 13716  0031FE                     __end_ofi2_ClockUp:
 13717                           	opt stack 0
 13718                           tblptru	equ	0xFF8
 13719                           tblptrh	equ	0xFF7
 13720                           tblptrl	equ	0xFF6
 13721                           tablat	equ	0xFF5
 13722                           prodh	equ	0xFF4
 13723                           prodl	equ	0xFF3
 13724                           intcon	equ	0xFF2
 13725                           postinc0	equ	0xFEE
 13726                           plusw0	equ	0xFEB
 13727                           fsr0h	equ	0xFEA
 13728                           fsr0l	equ	0xFE9
 13729                           wreg	equ	0xFE8
 13730                           indf1	equ	0xFE7
 13731                           postinc1	equ	0xFE6
 13732                           postdec1	equ	0xFE5
 13733                           plusw1	equ	0xFE3
 13734                           fsr1h	equ	0xFE2
 13735                           fsr1l	equ	0xFE1
 13736                           indf2	equ	0xFDF
 13737                           postinc2	equ	0xFDE
 13738                           postdec2	equ	0xFDD
 13739                           plusw2	equ	0xFDB
 13740                           fsr2h	equ	0xFDA
 13741                           fsr2l	equ	0xFD9
 13742                           status	equ	0xFD8
 13743                           
 13744 ;; *************** function i2_ClockDown *****************
 13745 ;; Defined at:
 13746 ;;		line 85 in file "harware.c"
 13747 ;; Parameters:    Size  Location     Type
 13748 ;;  AIO            15    0[COMRAM] struct .
 13749 ;; Auto vars:     Size  Location     Type
 13750 ;;		None
 13751 ;; Return value:  Size  Location     Type
 13752 ;;                  1    wreg      void 
 13753 ;; Registers used:
 13754 ;;		wreg, fsr2l, fsr2h
 13755 ;; Tracked objects:
 13756 ;;		On entry : 0/2
 13757 ;;		On exit  : 0/0
 13758 ;;		Unchanged: 0/0
 13759 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 13760 ;;      Params:        15       0       0       0       0       0       0       0       0
 13761 ;;      Locals:         0       0       0       0       0       0       0       0       0
 13762 ;;      Temps:          0       0       0       0       0       0       0       0       0
 13763 ;;      Totals:        15       0       0       0       0       0       0       0       0
 13764 ;;Total ram usage:       15 bytes
 13765 ;; Hardware stack levels used:    1
 13766 ;; This function calls:
 13767 ;;		Nothing
 13768 ;; This function is called by:
 13769 ;;		i2_WriteChar
 13770 ;;		i2_ReadBit
 13771 ;; This function uses a non-reentrant model
 13772 ;;
 13773                           
 13774                           	psect	text86
 13775  0031FE                     __ptext86:
 13776                           	opt stack 0
 13777  0031FE                     i2_ClockDown:
 13778                           	opt stack 20
 13779                           
 13780                           ;harware.c: 87: *AIO.ClockPin.Port |= AIO.ClockPin.NegativeMask;
 13781                           
 13782                           ;incstack = 0
 13783  0031FE  C001  FFD9         	movff	i2ClockDown@AIO,fsr2l
 13784  003202  C002  FFDA         	movff	i2ClockDown@AIO+1,fsr2h
 13785  003206  5005               	movf	i2ClockDown@AIO+4,w,c
 13786  003208  12DF               	iorwf	indf2,f,c
 13787  00320A  0012               	return		;funcret
 13788  00320C                     __end_ofi2_ClockDown:
 13789                           	opt stack 0
 13790                           tblptru	equ	0xFF8
 13791                           tblptrh	equ	0xFF7
 13792                           tblptrl	equ	0xFF6
 13793                           tablat	equ	0xFF5
 13794                           prodh	equ	0xFF4
 13795                           prodl	equ	0xFF3
 13796                           intcon	equ	0xFF2
 13797                           postinc0	equ	0xFEE
 13798                           plusw0	equ	0xFEB
 13799                           fsr0h	equ	0xFEA
 13800                           fsr0l	equ	0xFE9
 13801                           wreg	equ	0xFE8
 13802                           indf1	equ	0xFE7
 13803                           postinc1	equ	0xFE6
 13804                           postdec1	equ	0xFE5
 13805                           plusw1	equ	0xFE3
 13806                           fsr1h	equ	0xFE2
 13807                           fsr1l	equ	0xFE1
 13808                           indf2	equ	0xFDF
 13809                           postinc2	equ	0xFDE
 13810                           postdec2	equ	0xFDD
 13811                           plusw2	equ	0xFDB
 13812                           fsr2h	equ	0xFDA
 13813                           fsr2l	equ	0xFD9
 13814                           status	equ	0xFD8
 13815                           
 13816 ;; *************** function _Hub_SetValue *****************
 13817 ;; Defined at:
 13818 ;;		line 73 in file "hub.c"
 13819 ;; Parameters:    Size  Location     Type
 13820 ;;  ASourceValue    2    4[COMRAM] PTR unsigned char 
 13821 ;;		 -> _Hub.PrimaryBuffer.Values(8), _Hub.PrimaryBuffer(12), _Hub(157), 
 13822 ;;  AMinValue       1    6[COMRAM] char 
 13823 ;;  AMaxValue       2    7[COMRAM] int 
 13824 ;;  AIncrement      1    9[COMRAM] char 
 13825 ;; Auto vars:     Size  Location     Type
 13826 ;;  LValue          2   11[COMRAM] int 
 13827 ;; Return value:  Size  Location     Type
 13828 ;;                  1    wreg      void 
 13829 ;; Registers used:
 13830 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 13831 ;; Tracked objects:
 13832 ;;		On entry : 0/1
 13833 ;;		On exit  : 0/0
 13834 ;;		Unchanged: 0/0
 13835 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 13836 ;;      Params:         6       0       0       0       0       0       0       0       0
 13837 ;;      Locals:         2       0       0       0       0       0       0       0       0
 13838 ;;      Temps:          1       0       0       0       0       0       0       0       0
 13839 ;;      Totals:         9       0       0       0       0       0       0       0       0
 13840 ;;Total ram usage:        9 bytes
 13841 ;; Hardware stack levels used:    1
 13842 ;; This function calls:
 13843 ;;		Nothing
 13844 ;; This function is called by:
 13845 ;;		_Hub_UpdateValues
 13846 ;; This function uses a non-reentrant model
 13847 ;;
 13848                           
 13849                           	psect	text87
 13850  002988                     __ptext87:
 13851                           	opt stack 0
 13852  002988                     _Hub_SetValue:
 13853                           	opt stack 21
 13854                           
 13855                           ;hub.c: 75: signed int LValue = *ASourceValue;
 13856                           
 13857                           ;incstack = 0
 13858  002988  C005  FFD9         	movff	Hub_SetValue@ASourceValue,fsr2l
 13859  00298C  C006  FFDA         	movff	Hub_SetValue@ASourceValue+1,fsr2h
 13860  002990  50DF               	movf	indf2,w,c
 13861  002992  6E0C               	movwf	Hub_SetValue@LValue,c
 13862  002994  6A0D               	clrf	Hub_SetValue@LValue+1,c
 13863                           
 13864                           ;hub.c: 76: LValue += AIncrement;
 13865  002996  500A               	movf	Hub_SetValue@AIncrement,w,c
 13866  002998  260C               	addwf	Hub_SetValue@LValue,f,c
 13867  00299A  0E00               	movlw	0
 13868  00299C  BE0A               	btfsc	Hub_SetValue@AIncrement,7,c
 13869  00299E  0EFF               	movlw	255
 13870  0029A0  220D               	addwfc	Hub_SetValue@LValue+1,f,c
 13871                           
 13872                           ;hub.c: 77: if (LValue < AMinValue) LValue = AMinValue;
 13873  0029A2  500D               	movf	Hub_SetValue@LValue+1,w,c
 13874  0029A4  0A80               	xorlw	128
 13875  0029A6  6E0B               	movwf	??_Hub_SetValue& (0+255),c
 13876  0029A8  5007               	movf	Hub_SetValue@AMinValue,w,c
 13877  0029AA  5C0C               	subwf	Hub_SetValue@LValue,w,c
 13878  0029AC  0E80               	movlw	128
 13879  0029AE  BE07               	btfsc	Hub_SetValue@AMinValue,7,c
 13880  0029B0  0E7F               	movlw	127
 13881  0029B2  580B               	subwfb	??_Hub_SetValue& (0+255),w,c
 13882  0029B4  E205               	bc	i2l4296
 13883  0029B6  5007               	movf	Hub_SetValue@AMinValue,w,c
 13884  0029B8  6E0C               	movwf	Hub_SetValue@LValue,c
 13885  0029BA  6A0D               	clrf	Hub_SetValue@LValue+1,c
 13886  0029BC  BE0C               	btfsc	Hub_SetValue@LValue,7,c
 13887  0029BE  060D               	decf	Hub_SetValue@LValue+1,f,c
 13888  0029C0                     i2l4296:
 13889                           
 13890                           ;hub.c: 78: if (LValue > AMaxValue) LValue = AMaxValue;
 13891  0029C0  500C               	movf	Hub_SetValue@LValue,w,c
 13892  0029C2  5C08               	subwf	Hub_SetValue@AMaxValue,w,c
 13893  0029C4  5009               	movf	Hub_SetValue@AMaxValue+1,w,c
 13894  0029C6  0A80               	xorlw	128
 13895  0029C8  6E0B               	movwf	??_Hub_SetValue& (0+255),c
 13896  0029CA  500D               	movf	Hub_SetValue@LValue+1,w,c
 13897  0029CC  0A80               	xorlw	128
 13898  0029CE  580B               	subwfb	??_Hub_SetValue& (0+255),w,c
 13899  0029D0  E204               	bc	i2l4300
 13900  0029D2  C008  F00C         	movff	Hub_SetValue@AMaxValue,Hub_SetValue@LValue
 13901  0029D6  C009  F00D         	movff	Hub_SetValue@AMaxValue+1,Hub_SetValue@LValue+1
 13902  0029DA                     i2l4300:
 13903                           
 13904                           ;hub.c: 79: *ASourceValue = LValue;
 13905  0029DA  C005  FFD9         	movff	Hub_SetValue@ASourceValue,fsr2l
 13906  0029DE  C006  FFDA         	movff	Hub_SetValue@ASourceValue+1,fsr2h
 13907  0029E2  C00C  FFDF         	movff	Hub_SetValue@LValue,indf2
 13908  0029E6  0012               	return		;funcret
 13909  0029E8                     __end_of_Hub_SetValue:
 13910                           	opt stack 0
 13911                           tblptru	equ	0xFF8
 13912                           tblptrh	equ	0xFF7
 13913                           tblptrl	equ	0xFF6
 13914                           tablat	equ	0xFF5
 13915                           prodh	equ	0xFF4
 13916                           prodl	equ	0xFF3
 13917                           intcon	equ	0xFF2
 13918                           postinc0	equ	0xFEE
 13919                           plusw0	equ	0xFEB
 13920                           fsr0h	equ	0xFEA
 13921                           fsr0l	equ	0xFE9
 13922                           wreg	equ	0xFE8
 13923                           indf1	equ	0xFE7
 13924                           postinc1	equ	0xFE6
 13925                           postdec1	equ	0xFE5
 13926                           plusw1	equ	0xFE3
 13927                           fsr1h	equ	0xFE2
 13928                           fsr1l	equ	0xFE1
 13929                           indf2	equ	0xFDF
 13930                           postinc2	equ	0xFDE
 13931                           postdec2	equ	0xFDD
 13932                           plusw2	equ	0xFDB
 13933                           fsr2h	equ	0xFDA
 13934                           fsr2l	equ	0xFD9
 13935                           status	equ	0xFD8
 13936                           
 13937 ;; *************** function _Hub_DecodeSwitch *****************
 13938 ;; Defined at:
 13939 ;;		line 52 in file "hub.c"
 13940 ;; Parameters:    Size  Location     Type
 13941 ;;  AIndex1         1    wreg     unsigned char 
 13942 ;;  AIndex2         1    0[COMRAM] unsigned char 
 13943 ;; Auto vars:     Size  Location     Type
 13944 ;;  AIndex1         1    3[COMRAM] unsigned char 
 13945 ;; Return value:  Size  Location     Type
 13946 ;;                  1    wreg      char 
 13947 ;; Registers used:
 13948 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0
 13949 ;; Tracked objects:
 13950 ;;		On entry : 0/1
 13951 ;;		On exit  : 0/0
 13952 ;;		Unchanged: 0/0
 13953 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 13954 ;;      Params:         1       0       0       0       0       0       0       0       0
 13955 ;;      Locals:         1       0       0       0       0       0       0       0       0
 13956 ;;      Temps:          2       0       0       0       0       0       0       0       0
 13957 ;;      Totals:         4       0       0       0       0       0       0       0       0
 13958 ;;Total ram usage:        4 bytes
 13959 ;; Hardware stack levels used:    1
 13960 ;; This function calls:
 13961 ;;		Nothing
 13962 ;; This function is called by:
 13963 ;;		_Hub_UpdateValues
 13964 ;; This function uses a non-reentrant model
 13965 ;;
 13966                           
 13967                           	psect	text88
 13968  001002                     __ptext88:
 13969                           	opt stack 0
 13970  001002                     _Hub_DecodeSwitch:
 13971                           	opt stack 21
 13972                           
 13973                           ;incstack = 0
 13974                           ;Hub_DecodeSwitch@AIndex1 stored from wreg
 13975  001002  6E04               	movwf	Hub_DecodeSwitch@AIndex1,c
 13976                           
 13977                           ;hub.c: 56: if (_Hub.Switch[AIndex1] == _Hub.SwitchOld[AIndex1] && _Hub.Switch[AIndex1] 
      +                          == _Hub.SwitchOld[AIndex2] && _Hub.SwitchOld[AIndex2] == !_Hub.Switch[AIndex2] ||
 13978                           ;hub.c: 57: _Hub.Switch[AIndex2] == _Hub.SwitchOld[AIndex2] && _Hub.Switch[AIndex2] == _
      +                          Hub.Switch[AIndex1] && _Hub.Switch[AIndex2] == !_Hub.SwitchOld[AIndex1])
 13979  001004  0E30               	movlw	low (__Hub+48)
 13980  001006  2404               	addwf	Hub_DecodeSwitch@AIndex1,w,c
 13981  001008  6ED9               	movwf	fsr2l,c
 13982  00100A  6ADA               	clrf	fsr2h,c
 13983  00100C  0E01               	movlw	high (__Hub+48)
 13984  00100E  22DA               	addwfc	fsr2h,f,c
 13985  001010  0E00               	movlw	low __Hub
 13986  001012  2404               	addwf	Hub_DecodeSwitch@AIndex1,w,c
 13987  001014  6EE1               	movwf	fsr1l,c
 13988  001016  6AE2               	clrf	fsr1h,c
 13989  001018  0E01               	movlw	high __Hub
 13990  00101A  22E2               	addwfc	fsr1h,f,c
 13991  00101C  50DE               	movf	postinc2,w,c
 13992  00101E  18E6               	xorwf	postinc1,w,c
 13993  001020  E125               	bnz	i2u435_40
 13994  001022  0E30               	movlw	low (__Hub+48)
 13995  001024  2401               	addwf	Hub_DecodeSwitch@AIndex2,w,c
 13996  001026  6ED9               	movwf	fsr2l,c
 13997  001028  6ADA               	clrf	fsr2h,c
 13998  00102A  0E01               	movlw	high (__Hub+48)
 13999  00102C  22DA               	addwfc	fsr2h,f,c
 14000  00102E  0E00               	movlw	low __Hub
 14001  001030  2404               	addwf	Hub_DecodeSwitch@AIndex1,w,c
 14002  001032  6EE1               	movwf	fsr1l,c
 14003  001034  6AE2               	clrf	fsr1h,c
 14004  001036  0E01               	movlw	high __Hub
 14005  001038  22E2               	addwfc	fsr1h,f,c
 14006  00103A  50DE               	movf	postinc2,w,c
 14007  00103C  18E6               	xorwf	postinc1,w,c
 14008  00103E  E116               	bnz	i2u435_40
 14009  001040  0E30               	movlw	low (__Hub+48)
 14010  001042  2401               	addwf	Hub_DecodeSwitch@AIndex2,w,c
 14011  001044  6ED9               	movwf	fsr2l,c
 14012  001046  6ADA               	clrf	fsr2h,c
 14013  001048  0E01               	movlw	high (__Hub+48)
 14014  00104A  22DA               	addwfc	fsr2h,f,c
 14015  00104C  0E00               	movlw	low __Hub
 14016  00104E  2401               	addwf	Hub_DecodeSwitch@AIndex2,w,c
 14017  001050  6EE1               	movwf	fsr1l,c
 14018  001052  6AE2               	clrf	fsr1h,c
 14019  001054  0E01               	movlw	high __Hub
 14020  001056  22E2               	addwfc	fsr1h,f,c
 14021  001058  50E7               	movf	indf1,w,c
 14022  00105A  E103               	bnz	i2u433_40
 14023  00105C  6A03               	clrf	(??_Hub_DecodeSwitch+1)& (0+255),c
 14024  00105E  2A03               	incf	(??_Hub_DecodeSwitch+1)& (0+255),f,c
 14025  001060  D001               	goto	i2u434_48
 14026  001062                     i2u433_40:
 14027  001062  6A03               	clrf	(??_Hub_DecodeSwitch+1)& (0+255),c
 14028  001064                     i2u434_48:
 14029  001064  50DE               	movf	postinc2,w,c
 14030  001066  1803               	xorwf	??_Hub_DecodeSwitch+1,w,c
 14031  001068  B4D8               	btfsc	status,2,c
 14032  00106A  0C01               	retlw	1
 14033  00106C                     i2u435_40:
 14034  00106C  0E30               	movlw	low (__Hub+48)
 14035  00106E  2401               	addwf	Hub_DecodeSwitch@AIndex2,w,c
 14036  001070  6ED9               	movwf	fsr2l,c
 14037  001072  6ADA               	clrf	fsr2h,c
 14038  001074  0E01               	movlw	high (__Hub+48)
 14039  001076  22DA               	addwfc	fsr2h,f,c
 14040  001078  0E00               	movlw	low __Hub
 14041  00107A  2401               	addwf	Hub_DecodeSwitch@AIndex2,w,c
 14042  00107C  6EE1               	movwf	fsr1l,c
 14043  00107E  6AE2               	clrf	fsr1h,c
 14044  001080  0E01               	movlw	high __Hub
 14045  001082  22E2               	addwfc	fsr1h,f,c
 14046  001084  50DE               	movf	postinc2,w,c
 14047  001086  18E6               	xorwf	postinc1,w,c
 14048  001088  E125               	bnz	i2l4268
 14049  00108A  0E00               	movlw	low __Hub
 14050  00108C  2404               	addwf	Hub_DecodeSwitch@AIndex1,w,c
 14051  00108E  6ED9               	movwf	fsr2l,c
 14052  001090  6ADA               	clrf	fsr2h,c
 14053  001092  0E01               	movlw	high __Hub
 14054  001094  22DA               	addwfc	fsr2h,f,c
 14055  001096  0E00               	movlw	low __Hub
 14056  001098  2401               	addwf	Hub_DecodeSwitch@AIndex2,w,c
 14057  00109A  6EE1               	movwf	fsr1l,c
 14058  00109C  6AE2               	clrf	fsr1h,c
 14059  00109E  0E01               	movlw	high __Hub
 14060  0010A0  22E2               	addwfc	fsr1h,f,c
 14061  0010A2  50DE               	movf	postinc2,w,c
 14062  0010A4  18E6               	xorwf	postinc1,w,c
 14063  0010A6  E116               	bnz	i2l4268
 14064  0010A8  0E00               	movlw	low __Hub
 14065  0010AA  2401               	addwf	Hub_DecodeSwitch@AIndex2,w,c
 14066  0010AC  6ED9               	movwf	fsr2l,c
 14067  0010AE  6ADA               	clrf	fsr2h,c
 14068  0010B0  0E01               	movlw	high __Hub
 14069  0010B2  22DA               	addwfc	fsr2h,f,c
 14070  0010B4  0E30               	movlw	low (__Hub+48)
 14071  0010B6  2404               	addwf	Hub_DecodeSwitch@AIndex1,w,c
 14072  0010B8  6EE1               	movwf	fsr1l,c
 14073  0010BA  6AE2               	clrf	fsr1h,c
 14074  0010BC  0E01               	movlw	high (__Hub+48)
 14075  0010BE  22E2               	addwfc	fsr1h,f,c
 14076  0010C0  50E7               	movf	indf1,w,c
 14077  0010C2  E103               	bnz	i2u438_40
 14078  0010C4  6A03               	clrf	(??_Hub_DecodeSwitch+1)& (0+255),c
 14079  0010C6  2A03               	incf	(??_Hub_DecodeSwitch+1)& (0+255),f,c
 14080  0010C8  D001               	goto	i2u439_48
 14081  0010CA                     i2u438_40:
 14082  0010CA  6A03               	clrf	(??_Hub_DecodeSwitch+1)& (0+255),c
 14083  0010CC                     i2u439_48:
 14084  0010CC  50DE               	movf	postinc2,w,c
 14085  0010CE  1803               	xorwf	??_Hub_DecodeSwitch+1,w,c
 14086  0010D0  E101               	bnz	i2l4268
 14087                           
 14088                           ;hub.c: 58: {
 14089                           ;hub.c: 59: return 1;
 14090  0010D2  0C01               	retlw	1
 14091  0010D4                     i2l4268:
 14092                           
 14093                           ;hub.c: 60: }
 14094                           ;hub.c: 64: if (_Hub.Switch[AIndex2] == _Hub.SwitchOld[AIndex2] && _Hub.Switch[AIndex2] 
      +                          == _Hub.SwitchOld[AIndex1] && _Hub.SwitchOld[AIndex1] == !_Hub.Switch[AIndex1] ||
 14095                           ;hub.c: 65: _Hub.Switch[AIndex1] == _Hub.SwitchOld[AIndex1] && _Hub.Switch[AIndex1] == _
      +                          Hub.Switch[AIndex2] && _Hub.Switch[AIndex1] == !_Hub.SwitchOld[AIndex2])
 14096  0010D4  0E30               	movlw	low (__Hub+48)
 14097  0010D6  2401               	addwf	Hub_DecodeSwitch@AIndex2,w,c
 14098  0010D8  6ED9               	movwf	fsr2l,c
 14099  0010DA  6ADA               	clrf	fsr2h,c
 14100  0010DC  0E01               	movlw	high (__Hub+48)
 14101  0010DE  22DA               	addwfc	fsr2h,f,c
 14102  0010E0  0E00               	movlw	low __Hub
 14103  0010E2  2401               	addwf	Hub_DecodeSwitch@AIndex2,w,c
 14104  0010E4  6EE1               	movwf	fsr1l,c
 14105  0010E6  6AE2               	clrf	fsr1h,c
 14106  0010E8  0E01               	movlw	high __Hub
 14107  0010EA  22E2               	addwfc	fsr1h,f,c
 14108  0010EC  50DE               	movf	postinc2,w,c
 14109  0010EE  18E6               	xorwf	postinc1,w,c
 14110  0010F0  E125               	bnz	i2u445_40
 14111  0010F2  0E30               	movlw	low (__Hub+48)
 14112  0010F4  2404               	addwf	Hub_DecodeSwitch@AIndex1,w,c
 14113  0010F6  6ED9               	movwf	fsr2l,c
 14114  0010F8  6ADA               	clrf	fsr2h,c
 14115  0010FA  0E01               	movlw	high (__Hub+48)
 14116  0010FC  22DA               	addwfc	fsr2h,f,c
 14117  0010FE  0E00               	movlw	low __Hub
 14118  001100  2401               	addwf	Hub_DecodeSwitch@AIndex2,w,c
 14119  001102  6EE1               	movwf	fsr1l,c
 14120  001104  6AE2               	clrf	fsr1h,c
 14121  001106  0E01               	movlw	high __Hub
 14122  001108  22E2               	addwfc	fsr1h,f,c
 14123  00110A  50DE               	movf	postinc2,w,c
 14124  00110C  18E6               	xorwf	postinc1,w,c
 14125  00110E  E116               	bnz	i2u445_40
 14126  001110  0E30               	movlw	low (__Hub+48)
 14127  001112  2404               	addwf	Hub_DecodeSwitch@AIndex1,w,c
 14128  001114  6ED9               	movwf	fsr2l,c
 14129  001116  6ADA               	clrf	fsr2h,c
 14130  001118  0E01               	movlw	high (__Hub+48)
 14131  00111A  22DA               	addwfc	fsr2h,f,c
 14132  00111C  0E00               	movlw	low __Hub
 14133  00111E  2404               	addwf	Hub_DecodeSwitch@AIndex1,w,c
 14134  001120  6EE1               	movwf	fsr1l,c
 14135  001122  6AE2               	clrf	fsr1h,c
 14136  001124  0E01               	movlw	high __Hub
 14137  001126  22E2               	addwfc	fsr1h,f,c
 14138  001128  50E7               	movf	indf1,w,c
 14139  00112A  E103               	bnz	i2u443_40
 14140  00112C  6A03               	clrf	(??_Hub_DecodeSwitch+1)& (0+255),c
 14141  00112E  2A03               	incf	(??_Hub_DecodeSwitch+1)& (0+255),f,c
 14142  001130  D001               	goto	i2u444_48
 14143  001132                     i2u443_40:
 14144  001132  6A03               	clrf	(??_Hub_DecodeSwitch+1)& (0+255),c
 14145  001134                     i2u444_48:
 14146  001134  50DE               	movf	postinc2,w,c
 14147  001136  1803               	xorwf	??_Hub_DecodeSwitch+1,w,c
 14148  001138  B4D8               	btfsc	status,2,c
 14149  00113A  0CFF               	retlw	255
 14150  00113C                     i2u445_40:
 14151  00113C  0E30               	movlw	low (__Hub+48)
 14152  00113E  2404               	addwf	Hub_DecodeSwitch@AIndex1,w,c
 14153  001140  6ED9               	movwf	fsr2l,c
 14154  001142  6ADA               	clrf	fsr2h,c
 14155  001144  0E01               	movlw	high (__Hub+48)
 14156  001146  22DA               	addwfc	fsr2h,f,c
 14157  001148  0E00               	movlw	low __Hub
 14158  00114A  2404               	addwf	Hub_DecodeSwitch@AIndex1,w,c
 14159  00114C  6EE1               	movwf	fsr1l,c
 14160  00114E  6AE2               	clrf	fsr1h,c
 14161  001150  0E01               	movlw	high __Hub
 14162  001152  22E2               	addwfc	fsr1h,f,c
 14163  001154  50DE               	movf	postinc2,w,c
 14164  001156  18E6               	xorwf	postinc1,w,c
 14165  001158  E125               	bnz	i2l4284
 14166  00115A  0E00               	movlw	low __Hub
 14167  00115C  2401               	addwf	Hub_DecodeSwitch@AIndex2,w,c
 14168  00115E  6ED9               	movwf	fsr2l,c
 14169  001160  6ADA               	clrf	fsr2h,c
 14170  001162  0E01               	movlw	high __Hub
 14171  001164  22DA               	addwfc	fsr2h,f,c
 14172  001166  0E00               	movlw	low __Hub
 14173  001168  2404               	addwf	Hub_DecodeSwitch@AIndex1,w,c
 14174  00116A  6EE1               	movwf	fsr1l,c
 14175  00116C  6AE2               	clrf	fsr1h,c
 14176  00116E  0E01               	movlw	high __Hub
 14177  001170  22E2               	addwfc	fsr1h,f,c
 14178  001172  50DE               	movf	postinc2,w,c
 14179  001174  18E6               	xorwf	postinc1,w,c
 14180  001176  E116               	bnz	i2l4284
 14181  001178  0E00               	movlw	low __Hub
 14182  00117A  2404               	addwf	Hub_DecodeSwitch@AIndex1,w,c
 14183  00117C  6ED9               	movwf	fsr2l,c
 14184  00117E  6ADA               	clrf	fsr2h,c
 14185  001180  0E01               	movlw	high __Hub
 14186  001182  22DA               	addwfc	fsr2h,f,c
 14187  001184  0E30               	movlw	low (__Hub+48)
 14188  001186  2401               	addwf	Hub_DecodeSwitch@AIndex2,w,c
 14189  001188  6EE1               	movwf	fsr1l,c
 14190  00118A  6AE2               	clrf	fsr1h,c
 14191  00118C  0E01               	movlw	high (__Hub+48)
 14192  00118E  22E2               	addwfc	fsr1h,f,c
 14193  001190  50E7               	movf	indf1,w,c
 14194  001192  E103               	bnz	i2u448_40
 14195  001194  6A03               	clrf	(??_Hub_DecodeSwitch+1)& (0+255),c
 14196  001196  2A03               	incf	(??_Hub_DecodeSwitch+1)& (0+255),f,c
 14197  001198  D001               	goto	i2u449_48
 14198  00119A                     i2u448_40:
 14199  00119A  6A03               	clrf	(??_Hub_DecodeSwitch+1)& (0+255),c
 14200  00119C                     i2u449_48:
 14201  00119C  50DE               	movf	postinc2,w,c
 14202  00119E  1803               	xorwf	??_Hub_DecodeSwitch+1,w,c
 14203  0011A0  E101               	bnz	i2l4284
 14204                           
 14205                           ;hub.c: 66: {
 14206                           ;hub.c: 67: return -1;
 14207  0011A2  0CFF               	retlw	255
 14208  0011A4                     i2l4284:
 14209                           
 14210                           ;hub.c: 68: }
 14211                           ;hub.c: 70: return 0;
 14212  0011A4  0C00               	retlw	0	;funcret
 14213  0011A6                     __end_of_Hub_DecodeSwitch:
 14214                           	opt stack 0
 14215                           tblptru	equ	0xFF8
 14216                           tblptrh	equ	0xFF7
 14217                           tblptrl	equ	0xFF6
 14218                           tablat	equ	0xFF5
 14219                           prodh	equ	0xFF4
 14220                           prodl	equ	0xFF3
 14221                           intcon	equ	0xFF2
 14222                           postinc0	equ	0xFEE
 14223                           plusw0	equ	0xFEB
 14224                           fsr0h	equ	0xFEA
 14225                           fsr0l	equ	0xFE9
 14226                           wreg	equ	0xFE8
 14227                           indf1	equ	0xFE7
 14228                           postinc1	equ	0xFE6
 14229                           postdec1	equ	0xFE5
 14230                           plusw1	equ	0xFE3
 14231                           fsr1h	equ	0xFE2
 14232                           fsr1l	equ	0xFE1
 14233                           indf2	equ	0xFDF
 14234                           postinc2	equ	0xFDE
 14235                           postdec2	equ	0xFDD
 14236                           plusw2	equ	0xFDB
 14237                           fsr2h	equ	0xFDA
 14238                           fsr2l	equ	0xFD9
 14239                           status	equ	0xFD8
 14240                           
 14241 ;; *************** function _Display_SwapBuffer *****************
 14242 ;; Defined at:
 14243 ;;		line 94 in file "display.c"
 14244 ;; Parameters:    Size  Location     Type
 14245 ;;		None
 14246 ;; Auto vars:     Size  Location     Type
 14247 ;;  LSwap           2    0[COMRAM] PTR unsigned char 
 14248 ;;		 -> _Display.Buffer2(90), _Display.Buffer1(90), _Display(217), 
 14249 ;; Return value:  Size  Location     Type
 14250 ;;                  1    wreg      void 
 14251 ;; Registers used:
 14252 ;;		wreg, status,2, status,0
 14253 ;; Tracked objects:
 14254 ;;		On entry : 3F/2
 14255 ;;		On exit  : 3F/2
 14256 ;;		Unchanged: 0/0
 14257 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 14258 ;;      Params:         0       0       0       0       0       0       0       0       0
 14259 ;;      Locals:         2       0       0       0       0       0       0       0       0
 14260 ;;      Temps:          0       0       0       0       0       0       0       0       0
 14261 ;;      Totals:         2       0       0       0       0       0       0       0       0
 14262 ;;Total ram usage:        2 bytes
 14263 ;; Hardware stack levels used:    1
 14264 ;; This function calls:
 14265 ;;		Nothing
 14266 ;; This function is called by:
 14267 ;;		_Interrupt
 14268 ;; This function uses a non-reentrant model
 14269 ;;
 14270                           
 14271                           	psect	text89
 14272  00309E                     __ptext89:
 14273                           	opt stack 0
 14274  00309E                     _Display_SwapBuffer:
 14275                           	opt stack 22
 14276                           
 14277                           ; BSR set to: 2
 14278                           ;display.c: 96: unsigned char *LSwap = _Display.PrimaryBuffer;
 14279                           
 14280                           ;incstack = 0
 14281  00309E  C2B6  F001         	movff	__Display+182,Display_SwapBuffer@LSwap
 14282  0030A2  C2B7  F002         	movff	__Display+183,Display_SwapBuffer@LSwap+1
 14283                           
 14284                           ;display.c: 97: _Display.PrimaryBuffer = _Display.SecondaryBuffer;
 14285  0030A6  C2B8  F2B6         	movff	__Display+184,__Display+182
 14286  0030AA  C2B9  F2B7         	movff	__Display+185,__Display+183
 14287                           
 14288                           ;display.c: 98: _Display.SecondaryBuffer = LSwap;
 14289  0030AE  C001  F2B8         	movff	Display_SwapBuffer@LSwap,__Display+184
 14290  0030B2  C002  F2B9         	movff	Display_SwapBuffer@LSwap+1,__Display+185
 14291                           
 14292                           ; BSR set to: 2
 14293                           ;display.c: 100: _Display.ReadyToWrite = 1;
 14294  0030B6  0E01               	movlw	1
 14295  0030B8  6F01               	movwf	(__Display+1)& (0+255),b
 14296                           
 14297                           ; BSR set to: 2
 14298                           ;display.c: 101: _Display.ReadyToRead = 0;
 14299  0030BA  6B00               	clrf	__Display& (0+255),b
 14300                           
 14301                           ; BSR set to: 2
 14302  0030BC  0012               	return		;funcret
 14303  0030BE                     __end_of_Display_SwapBuffer:
 14304                           	opt stack 0
 14305                           tblptru	equ	0xFF8
 14306                           tblptrh	equ	0xFF7
 14307                           tblptrl	equ	0xFF6
 14308                           tablat	equ	0xFF5
 14309                           prodh	equ	0xFF4
 14310                           prodl	equ	0xFF3
 14311                           intcon	equ	0xFF2
 14312                           postinc0	equ	0xFEE
 14313                           plusw0	equ	0xFEB
 14314                           fsr0h	equ	0xFEA
 14315                           fsr0l	equ	0xFE9
 14316                           wreg	equ	0xFE8
 14317                           indf1	equ	0xFE7
 14318                           postinc1	equ	0xFE6
 14319                           postdec1	equ	0xFE5
 14320                           plusw1	equ	0xFE3
 14321                           fsr1h	equ	0xFE2
 14322                           fsr1l	equ	0xFE1
 14323                           indf2	equ	0xFDF
 14324                           postinc2	equ	0xFDE
 14325                           postdec2	equ	0xFDD
 14326                           plusw2	equ	0xFDB
 14327                           fsr2h	equ	0xFDA
 14328                           fsr2l	equ	0xFD9
 14329                           status	equ	0xFD8
 14330                           tblptru	equ	0xFF8
 14331                           tblptrh	equ	0xFF7
 14332                           tblptrl	equ	0xFF6
 14333                           tablat	equ	0xFF5
 14334                           prodh	equ	0xFF4
 14335                           prodl	equ	0xFF3
 14336                           intcon	equ	0xFF2
 14337                           postinc0	equ	0xFEE
 14338                           plusw0	equ	0xFEB
 14339                           fsr0h	equ	0xFEA
 14340                           fsr0l	equ	0xFE9
 14341                           wreg	equ	0xFE8
 14342                           indf1	equ	0xFE7
 14343                           postinc1	equ	0xFE6
 14344                           postdec1	equ	0xFE5
 14345                           plusw1	equ	0xFE3
 14346                           fsr1h	equ	0xFE2
 14347                           fsr1l	equ	0xFE1
 14348                           indf2	equ	0xFDF
 14349                           postinc2	equ	0xFDE
 14350                           postdec2	equ	0xFDD
 14351                           plusw2	equ	0xFDB
 14352                           fsr2h	equ	0xFDA
 14353                           fsr2l	equ	0xFD9
 14354                           status	equ	0xFD8
 14355                           
 14356                           	psect	rparam
 14357  0000                     tblptru	equ	0xFF8
 14358                           tblptrh	equ	0xFF7
 14359                           tblptrl	equ	0xFF6
 14360                           tablat	equ	0xFF5
 14361                           prodh	equ	0xFF4
 14362                           prodl	equ	0xFF3
 14363                           intcon	equ	0xFF2
 14364                           postinc0	equ	0xFEE
 14365                           plusw0	equ	0xFEB
 14366                           fsr0h	equ	0xFEA
 14367                           fsr0l	equ	0xFE9
 14368                           wreg	equ	0xFE8
 14369                           indf1	equ	0xFE7
 14370                           postinc1	equ	0xFE6
 14371                           postdec1	equ	0xFE5
 14372                           plusw1	equ	0xFE3
 14373                           fsr1h	equ	0xFE2
 14374                           fsr1l	equ	0xFE1
 14375                           indf2	equ	0xFDF
 14376                           postinc2	equ	0xFDE
 14377                           postdec2	equ	0xFDD
 14378                           plusw2	equ	0xFDB
 14379                           fsr2h	equ	0xFDA
 14380                           fsr2l	equ	0xFD9
 14381                           status	equ	0xFD8
 14382                           
 14383                           	psect	temp
 14384  00005F                     btemp:
 14385                           	opt stack 0
 14386  00005F                     	ds	1
 14387  0000                     int$flags	set	btemp
 14388  0000                     wtemp6	set	btemp+1
 14389                           tblptru	equ	0xFF8
 14390                           tblptrh	equ	0xFF7
 14391                           tblptrl	equ	0xFF6
 14392                           tablat	equ	0xFF5
 14393                           prodh	equ	0xFF4
 14394                           prodl	equ	0xFF3
 14395                           intcon	equ	0xFF2
 14396                           postinc0	equ	0xFEE
 14397                           plusw0	equ	0xFEB
 14398                           fsr0h	equ	0xFEA
 14399                           fsr0l	equ	0xFE9
 14400                           wreg	equ	0xFE8
 14401                           indf1	equ	0xFE7
 14402                           postinc1	equ	0xFE6
 14403                           postdec1	equ	0xFE5
 14404                           plusw1	equ	0xFE3
 14405                           fsr1h	equ	0xFE2
 14406                           fsr1l	equ	0xFE1
 14407                           indf2	equ	0xFDF
 14408                           postinc2	equ	0xFDE
 14409                           postdec2	equ	0xFDD
 14410                           plusw2	equ	0xFDB
 14411                           fsr2h	equ	0xFDA
 14412                           fsr2l	equ	0xFD9
 14413                           status	equ	0xFD8


Data Sizes:
    Strings     0
    Constant    57
    Data        10
    BSS         1059
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     88      94
    BANK0           160    127     156
    BANK1           256      0     169
    BANK2           256      0     217
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0

Pointer List with Targets:

    _Display.LatchPin.Port	PTR volatile unsigned char  size(2) Largest target is 0
		 -> PORTB(SFR[1]), LATC(SFR[1]), LATA(SFR[1]), LATB(SFR[1]), 

    _Display.DataPin.Port	PTR volatile unsigned char  size(2) Largest target is 0
		 -> PORTB(SFR[1]), LATC(SFR[1]), LATA(SFR[1]), LATB(SFR[1]), 

    _Display.ClockPin.Port	PTR volatile unsigned char  size(2) Largest target is 0
		 -> PORTB(SFR[1]), LATC(SFR[1]), LATA(SFR[1]), LATB(SFR[1]), 

    _Hub.LatchPin.Port	PTR volatile unsigned char  size(2) Largest target is 0
		 -> PORTB(SFR[1]), LATC(SFR[1]), LATA(SFR[1]), LATB(SFR[1]), 

    _Hub.DataPin.Port	PTR volatile unsigned char  size(2) Largest target is 0
		 -> PORTB(SFR[1]), LATC(SFR[1]), LATA(SFR[1]), LATB(SFR[1]), 

    _Hub.ClockPin.Port	PTR volatile unsigned char  size(2) Largest target is 0
		 -> PORTB(SFR[1]), LATC(SFR[1]), LATA(SFR[1]), LATB(SFR[1]), 

    _DigiPot.LatchPin.Port	PTR volatile unsigned char  size(2) Largest target is 0
		 -> PORTB(SFR[1]), LATC(SFR[1]), LATA(SFR[1]), LATB(SFR[1]), 

    _DigiPot.DataPin.Port	PTR volatile unsigned char  size(2) Largest target is 0
		 -> PORTB(SFR[1]), LATC(SFR[1]), LATA(SFR[1]), LATB(SFR[1]), 

    _DigiPot.ClockPin.Port	PTR volatile unsigned char  size(2) Largest target is 0
		 -> PORTB(SFR[1]), LATC(SFR[1]), LATA(SFR[1]), LATB(SFR[1]), 

    _Display.Port	PTR volatile unsigned char  size(2) Largest target is 0
		 -> PORTB(SFR[1]), LATC(SFR[1]), LATA(SFR[1]), LATB(SFR[1]), 

    _Hub.Port	PTR volatile unsigned char  size(2) Largest target is 0
		 -> PORTB(SFR[1]), LATC(SFR[1]), LATA(SFR[1]), LATB(SFR[1]), 

    _DigiPot.Port	PTR volatile unsigned char  size(2) Largest target is 0
		 -> PORTB(SFR[1]), LATC(SFR[1]), LATA(SFR[1]), LATB(SFR[1]), 

    eval_poly@d	PTR const  size(1) Largest target is 30
		 -> log@coeff(CODE[27]), exp@coeff(CODE[30]), 

    frexp@eptr	PTR int  size(1) Largest target is 2
		 -> log@exponent(BANK0[2]), floor@expon(BANK0[2]), 

    memcpy@d1	PTR void  size(2) Largest target is 160
		 -> _Hub.Switch(BANK1[48]), Load@LBuffer(BANK0[12]), _Hub(BANK1[157]), 

    memcpy@d	PTR unsigned char  size(2) Largest target is 160
		 -> _Hub.Switch(BANK1[48]), Load@LBuffer(BANK0[12]), _Hub(BANK1[157]), 

    memcpy@s1	PTR const void  size(2) Largest target is 160
		 -> Persistant_SaveBuffer@ABuffer(BANK0[12]), _Hub.Switch(BANK1[48]), Hub_ReadSwitch@LBitArray(BANK0[24]), _Config(BANK1[12]), 
		 -> _Hub.PrimaryBuffer(BANK1[12]), _Hub(BANK1[157]), 

    memcpy@s	PTR const unsigned char  size(2) Largest target is 160
		 -> Persistant_SaveBuffer@ABuffer(BANK0[12]), _Hub.Switch(BANK1[48]), Hub_ReadSwitch@LBitArray(BANK0[24]), _Config(BANK1[12]), 
		 -> _Hub.PrimaryBuffer(BANK1[12]), _Hub(BANK1[157]), 

    memcmp@s2	PTR const void  size(2) Largest target is 12
		 -> _Hub.BackupBuffer.Values(BANK1[8]), _Hub.BackupBuffer(BANK1[12]), 

    memcmp@s1	PTR const void  size(2) Largest target is 12
		 -> _Hub.SecondaryBuffer.Values(BANK1[8]), _Hub.SecondaryBuffer(BANK1[12]), 

    UnZip@AZip.Buffer	PTR struct . size(2) Largest target is 160
		 -> Persistant_SaveBuffer@ABuffer(BANK0[12]), _Hub(BANK1[157]), 

    UnZip@AZip	PTR struct . size(1) Largest target is 11
		 -> Persistant_LoadBuffer@LZip(BANK0[10]), 

    Zip@AZip.Buffer	PTR struct . size(2) Largest target is 160
		 -> Persistant_SaveBuffer@ABuffer(BANK0[12]), _Hub(BANK1[157]), 

    Zip@AZip	PTR struct . size(1) Largest target is 11
		 -> Persistant_SaveBuffer@LZip(BANK0[10]), 

    Zip@LBytes	PTR unsigned char  size(1) Largest target is 11
		 -> LZip.Bytes(COMRAM[8]), Persistant_SaveBuffer@LZip(BANK0[10]), 

    Midi_Read@AData	PTR struct . size(1) Largest target is 5
		 -> main@LMidiData(BANK0[5]), 

    Midi_Read@AMidiBuffer	PTR struct . size(2) Largest target is 324
		 -> _MidiInput(BIGRAM[324]), 

    Midi_Write@AMidiBuffer	PTR struct . size(2) Largest target is 324
		 -> _MidiInput(BIGRAM[324]), 

    Midi_ResetBuffer@AMidiBuffer	PTR struct . size(2) Largest target is 324
		 -> _MidiOutput(BIGRAM[324]), _MidiInput(BIGRAM[324]), 

    AIO.LatchPin.Port	PTR volatile unsigned char  size(2) Largest target is 1
		 -> PORTB(SFR[1]), LATC(SFR[1]), LATA(SFR[1]), LATB(SFR[1]), 

    AIO.DataPin.Port	PTR volatile unsigned char  size(2) Largest target is 1
		 -> PORTB(SFR[1]), LATC(SFR[1]), LATA(SFR[1]), LATB(SFR[1]), 

    AIO.ClockPin.Port	PTR volatile unsigned char  size(2) Largest target is 1
		 -> PORTB(SFR[1]), LATC(SFR[1]), LATA(SFR[1]), LATB(SFR[1]), 

    AIO.LatchPin.Port	PTR volatile unsigned char  size(2) Largest target is 1
		 -> PORTB(SFR[1]), LATC(SFR[1]), LATA(SFR[1]), LATB(SFR[1]), 

    AIO.DataPin.Port	PTR volatile unsigned char  size(2) Largest target is 1
		 -> PORTB(SFR[1]), LATC(SFR[1]), LATA(SFR[1]), LATB(SFR[1]), 

    AIO.ClockPin.Port	PTR volatile unsigned char  size(2) Largest target is 1
		 -> PORTB(SFR[1]), LATC(SFR[1]), LATA(SFR[1]), LATB(SFR[1]), 

    AIO.LatchPin.Port	PTR volatile unsigned char  size(2) Largest target is 1
		 -> PORTB(SFR[1]), LATC(SFR[1]), LATA(SFR[1]), LATB(SFR[1]), 

    AIO.DataPin.Port	PTR volatile unsigned char  size(2) Largest target is 1
		 -> PORTB(SFR[1]), LATC(SFR[1]), LATA(SFR[1]), LATB(SFR[1]), 

    AIO.ClockPin.Port	PTR volatile unsigned char  size(2) Largest target is 1
		 -> PORTB(SFR[1]), LATC(SFR[1]), LATA(SFR[1]), LATB(SFR[1]), 

    AIO.LatchPin.Port	PTR volatile unsigned char  size(2) Largest target is 1
		 -> PORTB(SFR[1]), LATC(SFR[1]), LATA(SFR[1]), LATB(SFR[1]), 

    AIO.DataPin.Port	PTR volatile unsigned char  size(2) Largest target is 1
		 -> PORTB(SFR[1]), LATC(SFR[1]), LATA(SFR[1]), LATB(SFR[1]), 

    AIO.ClockPin.Port	PTR volatile unsigned char  size(2) Largest target is 1
		 -> PORTB(SFR[1]), LATC(SFR[1]), LATA(SFR[1]), LATB(SFR[1]), 

    ReadBitArray@AData	PTR unsigned char  size(1) Largest target is 24
		 -> Hub_ReadSwitch@LBitArray(BANK0[24]), 

    AIO.LatchPin.Port	PTR volatile unsigned char  size(2) Largest target is 1
		 -> PORTB(SFR[1]), LATC(SFR[1]), LATA(SFR[1]), LATB(SFR[1]), 

    AIO.DataPin.Port	PTR volatile unsigned char  size(2) Largest target is 1
		 -> PORTB(SFR[1]), LATC(SFR[1]), LATA(SFR[1]), LATB(SFR[1]), 

    AIO.ClockPin.Port	PTR volatile unsigned char  size(2) Largest target is 1
		 -> PORTB(SFR[1]), LATC(SFR[1]), LATA(SFR[1]), LATB(SFR[1]), 

    sp__ReadData	PTR unsigned char  size(2) Largest target is 0

    AIO.LatchPin.Port	PTR volatile unsigned char  size(2) Largest target is 1
		 -> PORTB(SFR[1]), LATC(SFR[1]), LATA(SFR[1]), LATB(SFR[1]), 

    AIO.DataPin.Port	PTR volatile unsigned char  size(2) Largest target is 1
		 -> PORTB(SFR[1]), LATC(SFR[1]), LATA(SFR[1]), LATB(SFR[1]), 

    AIO.ClockPin.Port	PTR volatile unsigned char  size(2) Largest target is 1
		 -> PORTB(SFR[1]), LATC(SFR[1]), LATA(SFR[1]), LATB(SFR[1]), 

    AIO.LatchPin.Port	PTR volatile unsigned char  size(2) Largest target is 1
		 -> PORTB(SFR[1]), LATC(SFR[1]), LATA(SFR[1]), LATB(SFR[1]), 

    AIO.DataPin.Port	PTR volatile unsigned char  size(2) Largest target is 1
		 -> PORTB(SFR[1]), LATC(SFR[1]), LATA(SFR[1]), LATB(SFR[1]), 

    AIO.ClockPin.Port	PTR volatile unsigned char  size(2) Largest target is 1
		 -> PORTB(SFR[1]), LATC(SFR[1]), LATA(SFR[1]), LATB(SFR[1]), 

    AIO.LatchPin.Port	PTR volatile unsigned char  size(2) Largest target is 1
		 -> PORTB(SFR[1]), LATC(SFR[1]), LATA(SFR[1]), LATB(SFR[1]), 

    AIO.DataPin.Port	PTR volatile unsigned char  size(2) Largest target is 1
		 -> PORTB(SFR[1]), LATC(SFR[1]), LATA(SFR[1]), LATB(SFR[1]), 

    AIO.ClockPin.Port	PTR volatile unsigned char  size(2) Largest target is 1
		 -> PORTB(SFR[1]), LATC(SFR[1]), LATA(SFR[1]), LATB(SFR[1]), 

    WriteData@AData	PTR unsigned char  size(2) Largest target is 222
		 -> _Display.Buffer2(BANK2[90]), _Display.Buffer1(BANK2[90]), _Hub.SecondaryBuffer(BANK1[12]), _Hub(BANK1[157]), 
		 -> _Display(BANK2[217]), 

    AIO.LatchPin.Port	PTR volatile unsigned char  size(2) Largest target is 1
		 -> PORTB(SFR[1]), LATC(SFR[1]), LATA(SFR[1]), LATB(SFR[1]), 

    AIO.DataPin.Port	PTR volatile unsigned char  size(2) Largest target is 1
		 -> PORTB(SFR[1]), LATC(SFR[1]), LATA(SFR[1]), LATB(SFR[1]), 

    AIO.ClockPin.Port	PTR volatile unsigned char  size(2) Largest target is 1
		 -> PORTB(SFR[1]), LATC(SFR[1]), LATA(SFR[1]), LATB(SFR[1]), 

    AIO.LatchPin.Port	PTR volatile unsigned char  size(2) Largest target is 1
		 -> PORTB(SFR[1]), LATC(SFR[1]), LATA(SFR[1]), LATB(SFR[1]), 

    AIO.DataPin.Port	PTR volatile unsigned char  size(2) Largest target is 1
		 -> PORTB(SFR[1]), LATC(SFR[1]), LATA(SFR[1]), LATB(SFR[1]), 

    AIO.ClockPin.Port	PTR volatile unsigned char  size(2) Largest target is 1
		 -> PORTB(SFR[1]), LATC(SFR[1]), LATA(SFR[1]), LATB(SFR[1]), 

    InitConnector@AConnector.LatchPin.Port	PTR volatile unsigned char  size(2) Largest target is 1
		 -> PORTB(SFR[1]), LATC(SFR[1]), LATA(SFR[1]), LATB(SFR[1]), 

    InitConnector@AConnector.DataPin.Port	PTR volatile unsigned char  size(2) Largest target is 1
		 -> PORTB(SFR[1]), LATC(SFR[1]), LATA(SFR[1]), LATB(SFR[1]), 

    InitConnector@AConnector.ClockPin.Port	PTR volatile unsigned char  size(2) Largest target is 1
		 -> PORTB(SFR[1]), LATC(SFR[1]), LATA(SFR[1]), LATB(SFR[1]), 

    InitConnector@AConnector	PTR struct . size(2) Largest target is 222
		 -> _DigiPot(BANK0[17]), _Hub(BANK1[157]), _Display(BANK2[217]), 

    InitPin@APin.Port	PTR volatile unsigned char  size(2) Largest target is 1
		 -> PORTB(SFR[1]), LATC(SFR[1]), LATA(SFR[1]), LATB(SFR[1]), 

    InitPin@APin	PTR struct . size(2) Largest target is 222
		 -> _DigiPot(BANK0[17]), _Hub(BANK1[157]), _Display(BANK2[217]), 

    LZip.Buffer	PTR struct . size(2) Largest target is 160
		 -> Persistant_SaveBuffer@ABuffer(BANK0[12]), _Hub(BANK1[157]), 

    Persistant_LoadBuffer@ABuffer	PTR struct . size(2) Largest target is 160
		 -> _Hub(BANK1[157]), 

    S897$Buffer	PTR struct . size(2) Largest target is 160
		 -> Persistant_SaveBuffer@ABuffer(BANK0[12]), _Hub(BANK1[157]), 

    LZip.Buffer	PTR struct . size(2) Largest target is 160
		 -> Persistant_SaveBuffer@ABuffer(BANK0[12]), _Hub(BANK1[157]), 

    Hub_SetValue@ASourceValue	PTR unsigned char  size(2) Largest target is 160
		 -> _Hub.PrimaryBuffer.Values(BANK1[8]), _Hub.PrimaryBuffer(BANK1[12]), _Hub(BANK1[157]), 

    Display_SwapBuffer@LSwap	PTR unsigned char  size(2) Largest target is 222
		 -> _Display.Buffer2(BANK2[90]), _Display.Buffer1(BANK2[90]), _Display(BANK2[217]), 

    Display_ProcessData@AValues	PTR unsigned char  size(2) Largest target is 160
		 -> _Hub.SecondaryBuffer(BANK1[12]), _Hub.PrimaryBuffer(BANK1[12]), _Hub(BANK1[157]), 

    sp__memcpy	PTR void  size(2) Largest target is 160
		 -> _Hub.Switch(BANK1[48]), Load@LBuffer(BANK0[12]), _Hub(BANK1[157]), 

    _DigiPot.IO.LatchPin.Port	PTR volatile unsigned char  size(2) Largest target is 1
		 -> PORTB(SFR[1]), LATC(SFR[1]), LATA(SFR[1]), LATB(SFR[1]), 

    _DigiPot.IO.DataPin.Port	PTR volatile unsigned char  size(2) Largest target is 1
		 -> PORTB(SFR[1]), LATC(SFR[1]), LATA(SFR[1]), LATB(SFR[1]), 

    _DigiPot.IO.ClockPin.Port	PTR volatile unsigned char  size(2) Largest target is 1
		 -> PORTB(SFR[1]), LATC(SFR[1]), LATA(SFR[1]), LATB(SFR[1]), 

    _Display.IO.LatchPin.Port	PTR volatile unsigned char  size(2) Largest target is 1
		 -> PORTB(SFR[1]), LATC(SFR[1]), LATA(SFR[1]), LATB(SFR[1]), 

    _Display.IO.DataPin.Port	PTR volatile unsigned char  size(2) Largest target is 1
		 -> PORTB(SFR[1]), LATC(SFR[1]), LATA(SFR[1]), LATB(SFR[1]), 

    _Display.IO.ClockPin.Port	PTR volatile unsigned char  size(2) Largest target is 1
		 -> PORTB(SFR[1]), LATC(SFR[1]), LATA(SFR[1]), LATB(SFR[1]), 

    S54$SecondaryBuffer	PTR unsigned char  size(2) Largest target is 222
		 -> _Display(BANK2[217]), 

    _Display.SecondaryBuffer	PTR unsigned char  size(2) Largest target is 222
		 -> _Display.Buffer2(BANK2[90]), _Display.Buffer1(BANK2[90]), _Display(BANK2[217]), 

    S54$PrimaryBuffer	PTR unsigned char  size(2) Largest target is 222
		 -> _Display(BANK2[217]), 

    _Display.PrimaryBuffer	PTR unsigned char  size(2) Largest target is 222
		 -> _Display.Buffer2(BANK2[90]), _Display.Buffer1(BANK2[90]), _Display(BANK2[217]), 

    _Hub.IO.LatchPin.Port	PTR volatile unsigned char  size(2) Largest target is 1
		 -> PORTB(SFR[1]), LATC(SFR[1]), LATA(SFR[1]), LATB(SFR[1]), 

    _Hub.IO.DataPin.Port	PTR volatile unsigned char  size(2) Largest target is 1
		 -> PORTB(SFR[1]), LATC(SFR[1]), LATA(SFR[1]), LATB(SFR[1]), 

    S27$Port	PTR volatile unsigned char  size(2) Largest target is 1
		 -> PORTB(SFR[1]), LATC(SFR[1]), LATA(SFR[1]), LATB(SFR[1]), 

    _Hub.IO.ClockPin.Port	PTR volatile unsigned char  size(2) Largest target is 1
		 -> PORTB(SFR[1]), LATC(SFR[1]), LATA(SFR[1]), LATB(SFR[1]), 


Critical Paths under _main in COMRAM

    None.

Critical Paths under _Interrupt in COMRAM

    _Interrupt->_Hub_UpdateValues
    i2_WriteData->i2_WriteChar
    i2_WriteChar->i2_ClockDown
    i2_WriteChar->i2_ClockUp
    i2_Hub_CopyBuffer->i2_memcpy
    _Hub_UpdateValues->i2_Hub_ReadSwitch
    i2_Hub_ReadSwitch->i2_ReadBitArray
    i2_ReadBitArray->i2_ReadBit
    i2_ReadBit->i2_ClockDown
    i2_ReadBit->i2_ClockUp
    _Hub_SetValue->_Hub_DecodeSwitch

Critical Paths under _main in BANK0

    _main->_InitApp
    _WriteData->_WriteChar
    _WriteChar->_ClockDown
    _WriteChar->_ClockUp
    _Sequencer_StartTimer->___fttol
    _Persistant_SaveBuffer->_Zip
    _Zip->___fttol
    _Load->_Persistant_LoadBuffer
    _Persistant_WriteInternalMemory->_Persistant_ReadInternalMemory
    _InitApp->_InitDigiPot
    _Persistant_WriteExternalMemory->_Persistant_ReadExternalMemory
    _Persistant_LoadBuffer->_UnZip
    _UnZip->___fttol
    _Persistant_ReadExternalMemory->_Persistant_Address
    _Persistant_Address->_Persistant_ControlByte
    _Persistant_ControlByte->_I2C_Ack
    _Persistant_ControlByte->_I2C_Write
    _I2C_Write->_I2C_Wait
    _I2C_Start->_I2C_Wait
    _I2C_Stop->_I2C_Wait
    _I2C_Read->_I2C_Ack
    _I2C_Ack->_I2C_Wait
    _Persistant_Init->_I2C_Init
    _I2C_Init->___fttol
    _Midi_Init->___lldiv
    _InitDigiPot->_pow
    ___lbtoft->___ftpack
    _Hub_Init->_Hub_ReadSwitch
    _Hub_ReadSwitch->_ReadBitArray
    _ReadBitArray->_ReadBit
    _ReadBit->_ClockDown
    _ReadBit->_ClockUp
    _Hub_CopyBuffer->_memcpy
    _Display_ProcessData->___lbmod
    ___lbmod->___lbdiv
    _Display_Init->_pow
    _pow->_exp
    _log->_eval_poly
    _exp->_ldexp
    _ldexp->_eval_poly
    _floor->___fttol
    ___fttol->___ftdiv
    ___altoft->___ftpack
    _eval_poly->___ftadd
    ___ftmul->___altoft
    ___ftsub->___ftadd
    ___ftadd->___ftdiv
    ___ftdiv->___ftmul
    ___awtoft->___ftpack
    ___lltoft->___ftpack
    _InitConnector->_InitPin

Critical Paths under _Interrupt in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _Interrupt in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _Interrupt in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _Interrupt in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _Interrupt in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _Interrupt in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _Interrupt in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _Interrupt in BANK7

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                13    13      0  248862
                                            114 BANK0     13    13      0
                _ConfigureOscillator
                _Display_ProcessData
                            _InitApp
                               _Load
                          _Midi_Read
                           _PauseHub
              _Persistant_SaveBuffer
                             _RunHub
               _Sequencer_StartTimer
                _Sequencer_StopTimer
                          _WriteData
                             _memcmp
 ---------------------------------------------------------------------------------
 (1) _memcmp                                               8     2      6     340
                                              0 BANK0      8     2      6
 ---------------------------------------------------------------------------------
 (1) _WriteData                                           20     2     18    1732
                                             36 BANK0     20     2     18
                           _LatchOff
                            _LatchOn
                          _WriteChar
 ---------------------------------------------------------------------------------
 (2) _WriteChar                                           21     6     15     702
                                             15 BANK0     21     6     15
                          _ClockDown
                            _ClockUp
 ---------------------------------------------------------------------------------
 (2) _LatchOn                                             15     0     15     237
                                              0 BANK0     15     0     15
 ---------------------------------------------------------------------------------
 (2) _LatchOff                                            15     0     15     237
                                              0 BANK0     15     0     15
 ---------------------------------------------------------------------------------
 (1) _Sequencer_StopTimer                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Sequencer_StartTimer                                 4     0      4    5567
                                             62 BANK0      4     0      4
                            ___ftdiv
                            ___fttol
 ---------------------------------------------------------------------------------
 (1) _RunHub                                               0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Persistant_SaveBuffer                               27    15     12   14923
                                             76 BANK0     27    15     12
     _Persistant_WriteExternalMemory
                                _Zip
                             _memcpy
 ---------------------------------------------------------------------------------
 (2) _Zip                                                 14    13      1    8131
                                             62 BANK0     14    13      1
                            ___ftdiv
                            ___fttol
                           ___lbtoft
 ---------------------------------------------------------------------------------
 (1) _PauseHub                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Midi_Read                                            4     1      3     328
                                              0 BANK0      4     1      3
 ---------------------------------------------------------------------------------
 (1) _Load                                                17    17      0   16282
                                             90 BANK0     17    17      0
                     _Hub_CopyBuffer
              _Persistant_LoadBuffer
     _Persistant_WriteInternalMemory
                             _memcpy
 ---------------------------------------------------------------------------------
 (2) _Persistant_WriteInternalMemory                       4     1      3     345
                                              2 BANK0      4     1      3
      _Persistant_ReadInternalMemory
 ---------------------------------------------------------------------------------
 (3) _Persistant_ReadInternalMemory                        2     0      2      98
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (1) _InitApp                                              2     2      0  207526
                                            113 BANK0      1     1      0
                       _Display_Init
                _Display_ProcessData
                     _Hub_CopyBuffer
                           _Hub_Init
                        _InitDigiPot
                          _Midi_Init
                    _Persistant_Init
              _Persistant_LoadBuffer
      _Persistant_ReadExternalMemory
     _Persistant_WriteExternalMemory
                    _Sequencer_Start
 ---------------------------------------------------------------------------------
 (2) _Sequencer_Start                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _Persistant_WriteExternalMemory                       3     0      3    5062
                                             18 BANK0      3     0      3
                            _I2C_Ack
                           _I2C_Stop
                          _I2C_Write
                 _Persistant_Address
      _Persistant_ReadExternalMemory
 ---------------------------------------------------------------------------------
 (2) _Persistant_LoadBuffer                               18    16      2   12843
                                             72 BANK0     18    16      2
      _Persistant_ReadExternalMemory
                              _UnZip
                             _memcpy
 ---------------------------------------------------------------------------------
 (3) _UnZip                                               10     9      1    8041
                                             62 BANK0     10     9      1
                            ___ftdiv
                            ___fttol
                           ___lbtoft
 ---------------------------------------------------------------------------------
 (3) _Persistant_ReadExternalMemory                        3     1      2    2916
                                             15 BANK0      3     1      2
                            _I2C_Ack
                           _I2C_Read
                          _I2C_Start
                           _I2C_Stop
                 _Persistant_Address
             _Persistant_ControlByte
 ---------------------------------------------------------------------------------
 (4) _Persistant_Address                                   3     0      3    1371
                                             12 BANK0      3     0      3
                            _I2C_Ack
                          _I2C_Start
                          _I2C_Write
             _Persistant_ControlByte
 ---------------------------------------------------------------------------------
 (4) _Persistant_ControlByte                               6     3      3     618
                                              6 BANK0      6     3      3
                            _I2C_Ack
                          _I2C_Write
 ---------------------------------------------------------------------------------
 (5) _I2C_Write                                            1     1      0     135
                                              5 BANK0      1     1      0
                           _I2C_Wait
 ---------------------------------------------------------------------------------
 (5) _I2C_Start                                            0     0      0     113
                           _I2C_Wait
 ---------------------------------------------------------------------------------
 (4) _I2C_Stop                                             0     0      0     113
                           _I2C_Wait
 ---------------------------------------------------------------------------------
 (4) _I2C_Read                                             1     1      0     271
                                              6 BANK0      1     1      0
                            _I2C_Ack
                           _I2C_Wait
 ---------------------------------------------------------------------------------
 (5) _I2C_Ack                                              1     1      0     135
                                              5 BANK0      1     1      0
                           _I2C_Wait
 ---------------------------------------------------------------------------------
 (6) _I2C_Wait                                             5     5      0     113
                                              0 BANK0      5     5      0
 ---------------------------------------------------------------------------------
 (2) _Persistant_Init                                      0     0      0   17070
                           _I2C_Init
 ---------------------------------------------------------------------------------
 (3) _I2C_Init                                             7     3      4   17070
                                             62 BANK0      7     3      4
                           ___altoft
                            ___ftadd
                            ___ftdiv
                            ___ftmul
                            ___fttol
 ---------------------------------------------------------------------------------
 (2) _Midi_Init                                           12    12      0    1115
                                             13 BANK0     12    12      0
                   _Midi_ResetBuffer
                            ___lldiv
 ---------------------------------------------------------------------------------
 (3) ___lldiv                                             13     5      8     466
                                              0 BANK0     13     5      8
 ---------------------------------------------------------------------------------
 (3) _Midi_ResetBuffer                                     6     4      2     536
                                              0 BANK0      6     4      2
 ---------------------------------------------------------------------------------
 (2) _InitDigiPot                                         11    11      0   86630
                                            102 BANK0     11    11      0
                      _InitConnector
                           ___altoft
                            ___ftdiv
                            ___ftmul
                            ___fttol
                           ___lbtoft
                                _pow
 ---------------------------------------------------------------------------------
 (3) ___lbtoft                                             4     1      3    2605
                                              8 BANK0      4     1      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (2) _Hub_Init                                             2     2      0    3075
                                             76 BANK0      2     2      0
                     _Hub_ReadSwitch
                      _InitConnector
 ---------------------------------------------------------------------------------
 (3) _Hub_ReadSwitch                                      24    24      0    2397
                                             52 BANK0     24    24      0
                       _ReadBitArray
                             _memcpy
 ---------------------------------------------------------------------------------
 (4) _ReadBitArray                                        19     3     16     914
                                             33 BANK0     19     3     16
                            _ReadBit
 ---------------------------------------------------------------------------------
 (5) _ReadBit                                             18     3     15     650
                                             15 BANK0     18     3     15
                          _ClockDown
                            _ClockUp
 ---------------------------------------------------------------------------------
 (3) _ClockUp                                             15     0     15     198
                                              0 BANK0     15     0     15
 ---------------------------------------------------------------------------------
 (3) _ClockDown                                           15     0     15     198
                                              0 BANK0     15     0     15
 ---------------------------------------------------------------------------------
 (2) _Hub_CopyBuffer                                       0     0      0    1433
                             _memcpy
 ---------------------------------------------------------------------------------
 (2) _memcpy                                              11     5      6    1433
                                              0 BANK0     11     5      6
 ---------------------------------------------------------------------------------
 (2) _Display_ProcessData                                 27    23      4    1774
                                              8 BANK0     27    23      4
                            ___lbdiv
                            ___lbmod
 ---------------------------------------------------------------------------------
 (3) ___lbmod                                              4     3      1     311
                                              4 BANK0      4     3      1
                            ___lbdiv (ARG)
 ---------------------------------------------------------------------------------
 (3) ___lbdiv                                              4     3      1     238
                                              0 BANK0      4     3      1
 ---------------------------------------------------------------------------------
 (2) _Display_Init                                        10    10      0   75585
                                            102 BANK0     10    10      0
                      _InitConnector
                           ___awtoft
                            ___fttol
                                _pow
 ---------------------------------------------------------------------------------
 (3) _pow                                                 17    11      6   70835
                                             85 BANK0     17    11      6
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___fttol
                           ___lbtoft (ARG)
                           ___lltoft
                                _exp
                                _log
 ---------------------------------------------------------------------------------
 (4) _log                                                  5     2      3   22234
                                             69 BANK0      5     2      3
                           ___awtoft
                            ___ftadd
                            ___ftmul
                          _eval_poly
                              _frexp
 ---------------------------------------------------------------------------------
 (4) _exp                                                  9     6      3   38709
                                             76 BANK0      9     6      3
                           ___awtoft
                            ___ftdiv
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___ftsub
                            ___fttol
                          _eval_poly
                              _floor
                              _ldexp
                                _log (ARG)
 ---------------------------------------------------------------------------------
 (5) _ldexp                                                7     2      5     400
                                             69 BANK0      7     2      5
                          _eval_poly (ARG)
 ---------------------------------------------------------------------------------
 (5) _floor                                                8     5      3   10021
                                             62 BANK0      8     5      3
                           ___altoft
                            ___ftadd
                             ___ftge
                            ___fttol
                              _frexp
 ---------------------------------------------------------------------------------
 (5) _frexp                                                6     2      4     528
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (2) ___fttol                                             15    11      4    1012
                                             47 BANK0     15    11      4
                           ___altoft (ARG)
                           ___awtoft (ARG)
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
                           ___lbtoft (ARG)
 ---------------------------------------------------------------------------------
 (6) ___ftge                                               9     3      6     744
                                              0 BANK0      9     3      6
 ---------------------------------------------------------------------------------
 (4) ___altoft                                            10     6      4    2949
                                              8 BANK0     10     6      4
                           ___ftpack
 ---------------------------------------------------------------------------------
 (5) _eval_poly                                           10     4      6    9567
                                             59 BANK0     10     4      6
                            ___ftadd
                            ___ftmul
 ---------------------------------------------------------------------------------
 (4) ___ftmul                                             15     9      6    4472
                                             18 BANK0     14     8      6
                           ___altoft (ARG)
                           ___awtoft (ARG)
                           ___ftpack
                           ___lbtoft (ARG)
                              _frexp (ARG)
 ---------------------------------------------------------------------------------
 (5) ___ftsub                                              6     0      6    4806
                                             59 BANK0      6     0      6
                           ___awtoft (ARG)
                            ___ftadd
 ---------------------------------------------------------------------------------
 (4) ___ftadd                                             12     6      6    4461
                                             47 BANK0     12     6      6
                           ___altoft (ARG)
                           ___awtoft (ARG)
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
                           ___ftpack
                              _frexp (ARG)
 ---------------------------------------------------------------------------------
 (5) ___ftneg                                              3     0      3     273
                                              0 BANK0      3     0      3
 ---------------------------------------------------------------------------------
 (2) ___ftdiv                                             15     9      6    4055
                                             32 BANK0     15     9      6
                           ___altoft (ARG)
                            ___ftmul (ARG)
                           ___ftpack
                           ___lbtoft (ARG)
 ---------------------------------------------------------------------------------
 (5) ___awtoft                                             4     1      3    2902
                                              8 BANK0      4     1      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (4) ___lltoft                                             9     5      4    2728
                                              8 BANK0      9     5      4
                           ___ftpack
 ---------------------------------------------------------------------------------
 (3) ___ftpack                                             8     3      5    2583
                                              0 BANK0      8     3      5
 ---------------------------------------------------------------------------------
 (3) _InitConnector                                        2     0      2     610
                                              4 BANK0      2     0      2
                            _InitPin
 ---------------------------------------------------------------------------------
 (4) _InitPin                                              4     2      2     316
                                              0 BANK0      4     2      2
 ---------------------------------------------------------------------------------
 (1) _ConfigureOscillator                                  0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (8) _Interrupt                                           10    10      0    5493
                                             78 COMRAM    10    10      0
                 _Display_SwapBuffer
                   _Hub_UpdateValues
                         _Midi_Write
               _Sequencer_TimerEvent
                   i2_Hub_CopyBuffer
                 i2_Midi_ResetBuffer
              i2_Sequencer_StopTimer
                        i2_WriteData
 ---------------------------------------------------------------------------------
 (9) i2_WriteData                                         20     2     18     888
                                             36 COMRAM    20     2     18
                         i2_LatchOff
                          i2_LatchOn
                        i2_WriteChar
 ---------------------------------------------------------------------------------
 (10) i2_WriteChar                                        21     6     15     440
                                             15 COMRAM    21     6     15
                        i2_ClockDown
                          i2_ClockUp
 ---------------------------------------------------------------------------------
 (9) i2_Sequencer_StopTimer                                0     0      0       0
 ---------------------------------------------------------------------------------
 (9) i2_Midi_ResetBuffer                                   6     4      2     360
                                              0 COMRAM     6     4      2
 ---------------------------------------------------------------------------------
 (9) i2_Hub_CopyBuffer                                     0     0      0     377
                           i2_memcpy
 ---------------------------------------------------------------------------------
 (9) _Sequencer_TimerEvent                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (9) _Midi_Write                                           7     5      2     714
                                              0 COMRAM     7     5      2
 ---------------------------------------------------------------------------------
 (9) _Hub_UpdateValues                                     2     2      0    3107
                                             76 COMRAM     2     2      0
                   _Hub_DecodeSwitch
                       _Hub_SetValue
                   i2_Hub_ReadSwitch
                         i2_LatchOff
                          i2_LatchOn
                           i2_memcpy
 ---------------------------------------------------------------------------------
 (10) i2_LatchOn                                          15     0     15      96
                                              0 COMRAM    15     0     15
 ---------------------------------------------------------------------------------
 (10) i2_LatchOff                                         15     0     15      96
                                              0 COMRAM    15     0     15
 ---------------------------------------------------------------------------------
 (10) i2_Hub_ReadSwitch                                   24    24      0     914
                                             52 COMRAM    24    24      0
                     i2_ReadBitArray
                           i2_memcpy
 ---------------------------------------------------------------------------------
 (10) i2_memcpy                                           11     5      6     377
                                              0 COMRAM    11     5      6
 ---------------------------------------------------------------------------------
 (11) i2_ReadBitArray                                     19     3     16     493
                                             33 COMRAM    19     3     16
                          i2_ReadBit
 ---------------------------------------------------------------------------------
 (12) i2_ReadBit                                          18     3     15     329
                                             15 COMRAM    18     3     15
                        i2_ClockDown
                          i2_ClockUp
 ---------------------------------------------------------------------------------
 (11) i2_ClockUp                                          15     0     15      96
                                              0 COMRAM    15     0     15
 ---------------------------------------------------------------------------------
 (11) i2_ClockDown                                        15     0     15      96
                                              0 COMRAM    15     0     15
 ---------------------------------------------------------------------------------
 (10) _Hub_SetValue                                        9     3      6     832
                                              4 COMRAM     9     3      6
                   _Hub_DecodeSwitch (ARG)
 ---------------------------------------------------------------------------------
 (10) _Hub_DecodeSwitch                                    4     3      1     680
                                              0 COMRAM     4     3      1
 ---------------------------------------------------------------------------------
 (9) _Display_SwapBuffer                                   2     2      0      23
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 12
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ConfigureOscillator
   _Display_ProcessData
     ___lbdiv
     ___lbmod
       ___lbdiv (ARG)
   _InitApp
     _Display_Init
       _InitConnector
         _InitPin
       ___awtoft
         ___ftpack
       ___fttol
         ___altoft (ARG)
           ___ftpack
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___altoft (ARG)
               ___ftpack
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             _frexp (ARG)
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
         ___ftmul (ARG)
           ___altoft (ARG)
             ___ftpack
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           _frexp (ARG)
         ___lbtoft (ARG)
           ___ftpack
       _pow
         ___ftge
         ___ftmul
           ___altoft (ARG)
             ___ftpack
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           _frexp (ARG)
         ___ftneg
         ___fttol
           ___altoft (ARG)
             ___ftpack
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               _frexp (ARG)
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
           ___ftmul (ARG)
             ___altoft (ARG)
               ___ftpack
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             _frexp (ARG)
           ___lbtoft (ARG)
             ___ftpack
         ___lbtoft (ARG)
           ___ftpack
         ___lltoft (ARG)
           ___ftpack
         _exp (ARG)
           ___awtoft
             ___ftpack
           ___ftdiv
             ___altoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               _frexp (ARG)
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
           ___ftge
           ___ftmul
             ___altoft (ARG)
               ___ftpack
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             _frexp (ARG)
           ___ftneg
           ___ftsub
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___altoft (ARG)
                     ___ftpack
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___lbtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
               ___ftmul (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 _frexp (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
           ___fttol
             ___altoft (ARG)
               ___ftpack
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 _frexp (ARG)
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
             ___ftmul (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               _frexp (ARG)
             ___lbtoft (ARG)
               ___ftpack
           _eval_poly
             ___ftadd
               ___altoft (ARG)
                 ___ftpack
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___altoft (ARG)
                     ___ftpack
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___lbtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
               ___ftmul (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 _frexp (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftmul
               ___altoft (ARG)
                 ___ftpack
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               _frexp (ARG)
           _floor
             ___altoft
               ___ftpack
             ___ftadd
               ___altoft (ARG)
                 ___ftpack
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___altoft (ARG)
                     ___ftpack
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___lbtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
               ___ftmul (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 _frexp (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftge
             ___fttol
               ___altoft (ARG)
                 ___ftpack
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___altoft (ARG)
                     ___ftpack
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___lbtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
               ___ftmul (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 _frexp (ARG)
               ___lbtoft (ARG)
                 ___ftpack
             _frexp
           _ldexp
             _eval_poly (ARG)
               ___ftadd
                 ___altoft (ARG)
                   ___ftpack
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___altoft (ARG)
                       ___ftpack
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___lbtoft (ARG)
                       ___ftpack
                     _frexp (ARG)
                   ___ftpack (ARG)
                   ___lbtoft (ARG)
                     ___ftpack
                 ___ftmul (ARG)
                   ___altoft (ARG)
                     ___ftpack
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___lbtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftmul
                 ___altoft (ARG)
                   ___ftpack
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 _frexp (ARG)
           _log (ARG)
             ___awtoft
               ___ftpack
             ___ftadd
               ___altoft (ARG)
                 ___ftpack
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___altoft (ARG)
                     ___ftpack
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___lbtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
               ___ftmul (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 _frexp (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftmul
               ___altoft (ARG)
                 ___ftpack
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               _frexp (ARG)
             _eval_poly
               ___ftadd
                 ___altoft (ARG)
                   ___ftpack
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___altoft (ARG)
                       ___ftpack
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___lbtoft (ARG)
                       ___ftpack
                     _frexp (ARG)
                   ___ftpack (ARG)
                   ___lbtoft (ARG)
                     ___ftpack
                 ___ftmul (ARG)
                   ___altoft (ARG)
                     ___ftpack
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___lbtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftmul
                 ___altoft (ARG)
                   ___ftpack
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 _frexp (ARG)
             _frexp
         _log (ARG)
           ___awtoft
             ___ftpack
           ___ftadd
             ___altoft (ARG)
               ___ftpack
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 _frexp (ARG)
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
             ___ftmul (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               _frexp (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftmul
             ___altoft (ARG)
               ___ftpack
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             _frexp (ARG)
           _eval_poly
             ___ftadd
               ___altoft (ARG)
                 ___ftpack
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___altoft (ARG)
                     ___ftpack
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___lbtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
               ___ftmul (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 _frexp (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftmul
               ___altoft (ARG)
                 ___ftpack
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               _frexp (ARG)
           _frexp
     _Display_ProcessData
       ___lbdiv
       ___lbmod
         ___lbdiv (ARG)
     _Hub_CopyBuffer
       _memcpy
     _Hub_Init
       _Hub_ReadSwitch
         _ReadBitArray
           _ReadBit
             _ClockDown
             _ClockUp
         _memcpy
       _InitConnector
         _InitPin
     _InitDigiPot
       _InitConnector
         _InitPin
       ___altoft
         ___ftpack
       ___ftdiv
         ___altoft (ARG)
           ___ftpack
         ___ftmul (ARG)
           ___altoft (ARG)
             ___ftpack
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           _frexp (ARG)
         ___ftpack (ARG)
         ___lbtoft (ARG)
           ___ftpack
       ___ftmul
         ___altoft (ARG)
           ___ftpack
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___lbtoft (ARG)
           ___ftpack
         _frexp (ARG)
       ___fttol
         ___altoft (ARG)
           ___ftpack
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___altoft (ARG)
               ___ftpack
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             _frexp (ARG)
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
         ___ftmul (ARG)
           ___altoft (ARG)
             ___ftpack
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           _frexp (ARG)
         ___lbtoft (ARG)
           ___ftpack
       ___lbtoft
         ___ftpack
       _pow
         ___ftge
         ___ftmul
           ___altoft (ARG)
             ___ftpack
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           _frexp (ARG)
         ___ftneg
         ___fttol
           ___altoft (ARG)
             ___ftpack
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               _frexp (ARG)
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
           ___ftmul (ARG)
             ___altoft (ARG)
               ___ftpack
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             _frexp (ARG)
           ___lbtoft (ARG)
             ___ftpack
         ___lbtoft (ARG)
           ___ftpack
         ___lltoft (ARG)
           ___ftpack
         _exp (ARG)
           ___awtoft
             ___ftpack
           ___ftdiv
             ___altoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               _frexp (ARG)
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
           ___ftge
           ___ftmul
             ___altoft (ARG)
               ___ftpack
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             _frexp (ARG)
           ___ftneg
           ___ftsub
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___altoft (ARG)
                     ___ftpack
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___lbtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
               ___ftmul (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 _frexp (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
           ___fttol
             ___altoft (ARG)
               ___ftpack
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 _frexp (ARG)
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
             ___ftmul (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               _frexp (ARG)
             ___lbtoft (ARG)
               ___ftpack
           _eval_poly
             ___ftadd
               ___altoft (ARG)
                 ___ftpack
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___altoft (ARG)
                     ___ftpack
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___lbtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
               ___ftmul (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 _frexp (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftmul
               ___altoft (ARG)
                 ___ftpack
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               _frexp (ARG)
           _floor
             ___altoft
               ___ftpack
             ___ftadd
               ___altoft (ARG)
                 ___ftpack
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___altoft (ARG)
                     ___ftpack
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___lbtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
               ___ftmul (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 _frexp (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftge
             ___fttol
               ___altoft (ARG)
                 ___ftpack
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___altoft (ARG)
                     ___ftpack
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___lbtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
               ___ftmul (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 _frexp (ARG)
               ___lbtoft (ARG)
                 ___ftpack
             _frexp
           _ldexp
             _eval_poly (ARG)
               ___ftadd
                 ___altoft (ARG)
                   ___ftpack
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___altoft (ARG)
                       ___ftpack
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___lbtoft (ARG)
                       ___ftpack
                     _frexp (ARG)
                   ___ftpack (ARG)
                   ___lbtoft (ARG)
                     ___ftpack
                 ___ftmul (ARG)
                   ___altoft (ARG)
                     ___ftpack
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___lbtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftmul
                 ___altoft (ARG)
                   ___ftpack
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 _frexp (ARG)
           _log (ARG)
             ___awtoft
               ___ftpack
             ___ftadd
               ___altoft (ARG)
                 ___ftpack
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___altoft (ARG)
                     ___ftpack
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___lbtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
               ___ftmul (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 _frexp (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftmul
               ___altoft (ARG)
                 ___ftpack
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               _frexp (ARG)
             _eval_poly
               ___ftadd
                 ___altoft (ARG)
                   ___ftpack
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___altoft (ARG)
                       ___ftpack
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___lbtoft (ARG)
                       ___ftpack
                     _frexp (ARG)
                   ___ftpack (ARG)
                   ___lbtoft (ARG)
                     ___ftpack
                 ___ftmul (ARG)
                   ___altoft (ARG)
                     ___ftpack
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___lbtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftmul
                 ___altoft (ARG)
                   ___ftpack
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 _frexp (ARG)
             _frexp
         _log (ARG)
           ___awtoft
             ___ftpack
           ___ftadd
             ___altoft (ARG)
               ___ftpack
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 _frexp (ARG)
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
             ___ftmul (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               _frexp (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftmul
             ___altoft (ARG)
               ___ftpack
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             _frexp (ARG)
           _eval_poly
             ___ftadd
               ___altoft (ARG)
                 ___ftpack
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___altoft (ARG)
                     ___ftpack
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___lbtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
               ___ftmul (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 _frexp (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftmul
               ___altoft (ARG)
                 ___ftpack
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               _frexp (ARG)
           _frexp
     _Midi_Init
       _Midi_ResetBuffer
       ___lldiv
     _Persistant_Init
       _I2C_Init
         ___altoft
           ___ftpack
         ___ftadd
           ___altoft (ARG)
             ___ftpack
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               _frexp (ARG)
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
           ___ftmul (ARG)
             ___altoft (ARG)
               ___ftpack
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             _frexp (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftdiv
           ___altoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___altoft (ARG)
               ___ftpack
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             _frexp (ARG)
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
         ___ftmul
           ___altoft (ARG)
             ___ftpack
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           _frexp (ARG)
         ___fttol
           ___altoft (ARG)
             ___ftpack
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               _frexp (ARG)
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
           ___ftmul (ARG)
             ___altoft (ARG)
               ___ftpack
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             _frexp (ARG)
           ___lbtoft (ARG)
             ___ftpack
     _Persistant_LoadBuffer
       _Persistant_ReadExternalMemory
         _I2C_Ack
           _I2C_Wait
         _I2C_Read
           _I2C_Ack
             _I2C_Wait
           _I2C_Wait
         _I2C_Start
           _I2C_Wait
         _I2C_Stop
           _I2C_Wait
         _Persistant_Address
           _I2C_Ack
             _I2C_Wait
           _I2C_Start
             _I2C_Wait
           _I2C_Write
             _I2C_Wait
           _Persistant_ControlByte
             _I2C_Ack
               _I2C_Wait
             _I2C_Write
               _I2C_Wait
         _Persistant_ControlByte
           _I2C_Ack
             _I2C_Wait
           _I2C_Write
             _I2C_Wait
       _UnZip
         ___ftdiv
           ___altoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___altoft (ARG)
               ___ftpack
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             _frexp (ARG)
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
         ___fttol
           ___altoft (ARG)
             ___ftpack
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               _frexp (ARG)
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
           ___ftmul (ARG)
             ___altoft (ARG)
               ___ftpack
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             _frexp (ARG)
           ___lbtoft (ARG)
             ___ftpack
         ___lbtoft
           ___ftpack
       _memcpy
     _Persistant_ReadExternalMemory
       _I2C_Ack
         _I2C_Wait
       _I2C_Read
         _I2C_Ack
           _I2C_Wait
         _I2C_Wait
       _I2C_Start
         _I2C_Wait
       _I2C_Stop
         _I2C_Wait
       _Persistant_Address
         _I2C_Ack
           _I2C_Wait
         _I2C_Start
           _I2C_Wait
         _I2C_Write
           _I2C_Wait
         _Persistant_ControlByte
           _I2C_Ack
             _I2C_Wait
           _I2C_Write
             _I2C_Wait
       _Persistant_ControlByte
         _I2C_Ack
           _I2C_Wait
         _I2C_Write
           _I2C_Wait
     _Persistant_WriteExternalMemory
       _I2C_Ack
         _I2C_Wait
       _I2C_Stop
         _I2C_Wait
       _I2C_Write
         _I2C_Wait
       _Persistant_Address
         _I2C_Ack
           _I2C_Wait
         _I2C_Start
           _I2C_Wait
         _I2C_Write
           _I2C_Wait
         _Persistant_ControlByte
           _I2C_Ack
             _I2C_Wait
           _I2C_Write
             _I2C_Wait
       _Persistant_ReadExternalMemory
         _I2C_Ack
           _I2C_Wait
         _I2C_Read
           _I2C_Ack
             _I2C_Wait
           _I2C_Wait
         _I2C_Start
           _I2C_Wait
         _I2C_Stop
           _I2C_Wait
         _Persistant_Address
           _I2C_Ack
             _I2C_Wait
           _I2C_Start
             _I2C_Wait
           _I2C_Write
             _I2C_Wait
           _Persistant_ControlByte
             _I2C_Ack
               _I2C_Wait
             _I2C_Write
               _I2C_Wait
         _Persistant_ControlByte
           _I2C_Ack
             _I2C_Wait
           _I2C_Write
             _I2C_Wait
     _Sequencer_Start
   _Load
     _Hub_CopyBuffer
       _memcpy
     _Persistant_LoadBuffer
       _Persistant_ReadExternalMemory
         _I2C_Ack
           _I2C_Wait
         _I2C_Read
           _I2C_Ack
             _I2C_Wait
           _I2C_Wait
         _I2C_Start
           _I2C_Wait
         _I2C_Stop
           _I2C_Wait
         _Persistant_Address
           _I2C_Ack
             _I2C_Wait
           _I2C_Start
             _I2C_Wait
           _I2C_Write
             _I2C_Wait
           _Persistant_ControlByte
             _I2C_Ack
               _I2C_Wait
             _I2C_Write
               _I2C_Wait
         _Persistant_ControlByte
           _I2C_Ack
             _I2C_Wait
           _I2C_Write
             _I2C_Wait
       _UnZip
         ___ftdiv
           ___altoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___altoft (ARG)
               ___ftpack
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             _frexp (ARG)
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
         ___fttol
           ___altoft (ARG)
             ___ftpack
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               _frexp (ARG)
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
           ___ftmul (ARG)
             ___altoft (ARG)
               ___ftpack
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             _frexp (ARG)
           ___lbtoft (ARG)
             ___ftpack
         ___lbtoft
           ___ftpack
       _memcpy
     _Persistant_WriteInternalMemory
       _Persistant_ReadInternalMemory
     _memcpy
   _Midi_Read
   _PauseHub
   _Persistant_SaveBuffer
     _Persistant_WriteExternalMemory
       _I2C_Ack
         _I2C_Wait
       _I2C_Stop
         _I2C_Wait
       _I2C_Write
         _I2C_Wait
       _Persistant_Address
         _I2C_Ack
           _I2C_Wait
         _I2C_Start
           _I2C_Wait
         _I2C_Write
           _I2C_Wait
         _Persistant_ControlByte
           _I2C_Ack
             _I2C_Wait
           _I2C_Write
             _I2C_Wait
       _Persistant_ReadExternalMemory
         _I2C_Ack
           _I2C_Wait
         _I2C_Read
           _I2C_Ack
             _I2C_Wait
           _I2C_Wait
         _I2C_Start
           _I2C_Wait
         _I2C_Stop
           _I2C_Wait
         _Persistant_Address
           _I2C_Ack
             _I2C_Wait
           _I2C_Start
             _I2C_Wait
           _I2C_Write
             _I2C_Wait
           _Persistant_ControlByte
             _I2C_Ack
               _I2C_Wait
             _I2C_Write
               _I2C_Wait
         _Persistant_ControlByte
           _I2C_Ack
             _I2C_Wait
           _I2C_Write
             _I2C_Wait
     _Zip
       ___ftdiv
         ___altoft (ARG)
           ___ftpack
         ___ftmul (ARG)
           ___altoft (ARG)
             ___ftpack
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           _frexp (ARG)
         ___ftpack (ARG)
         ___lbtoft (ARG)
           ___ftpack
       ___fttol
         ___altoft (ARG)
           ___ftpack
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___altoft (ARG)
               ___ftpack
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             _frexp (ARG)
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
         ___ftmul (ARG)
           ___altoft (ARG)
             ___ftpack
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           _frexp (ARG)
         ___lbtoft (ARG)
           ___ftpack
       ___lbtoft
         ___ftpack
     _memcpy
   _RunHub
   _Sequencer_StartTimer
     ___ftdiv
       ___altoft (ARG)
         ___ftpack
       ___ftmul (ARG)
         ___altoft (ARG)
           ___ftpack
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___lbtoft (ARG)
           ___ftpack
         _frexp (ARG)
       ___ftpack (ARG)
       ___lbtoft (ARG)
         ___ftpack
     ___fttol
       ___altoft (ARG)
         ___ftpack
       ___awtoft (ARG)
         ___ftpack
       ___ftdiv (ARG)
         ___altoft (ARG)
           ___ftpack
         ___ftmul (ARG)
           ___altoft (ARG)
             ___ftpack
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           _frexp (ARG)
         ___ftpack (ARG)
         ___lbtoft (ARG)
           ___ftpack
       ___ftmul (ARG)
         ___altoft (ARG)
           ___ftpack
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___lbtoft (ARG)
           ___ftpack
         _frexp (ARG)
       ___lbtoft (ARG)
         ___ftpack
   _Sequencer_StopTimer
   _WriteData
     _LatchOff
     _LatchOn
     _WriteChar
       _ClockDown
       _ClockUp
   _memcmp

 _Interrupt (ROOT)
   _Display_SwapBuffer
   _Hub_UpdateValues
     _Hub_DecodeSwitch
     _Hub_SetValue
       _Hub_DecodeSwitch (ARG)
     i2_Hub_ReadSwitch
       i2_ReadBitArray
         i2_ReadBit
           i2_ClockDown
           i2_ClockUp
       i2_memcpy
     i2_LatchOff
     i2_LatchOn
     i2_memcpy
   _Midi_Write
   _Sequencer_TimerEvent
   i2_Hub_CopyBuffer
     i2_memcpy
   i2_Midi_ResetBuffer
   i2_Sequencer_StopTimer
   i2_WriteData
     i2_LatchOff
     i2_LatchOn
     i2_WriteChar
       i2_ClockDown
       i2_ClockUp

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             7FF      0     288      21       31.7%
EEDATA             100      0       0       0        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0      D9       9       84.8%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0      A9       7       66.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     7F      9C       5       97.5%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     58      5E       1      100.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     27C      20        0.0%
DATA                 0      0     504       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.44 build -154322312 
Symbol Table                                                                                   Sat Oct 21 16:21:44 2017

                            main@LResult 00D2                              Load@LBuffer 00BA  
                           ___altoft@exp 0070                               LatchOn@AIO 0060  
                          ?_Hub_SetValue 0005                       __size_of_I2C_Start 000E  
                          ___altoft@sign 0071                       __size_of_I2C_Write 0012  
                     main@LChannelSwitch 00D8                                       _RW 007E3A  
                            __CFG_BOR$ON 000000                              __CFG_BORV$3 000000  
            __end_of_Sequencer_StopTimer 3228                  Persistant_Address@ARead 006E  
                           __CFG_CP0$OFF 000000             __end_of_Sequencer_StartTimer 2C38  
                           __CFG_CP1$OFF 000000                             __CFG_CP2$OFF 000000  
                            LatchOff@AIO 0060                             __CFG_CP3$OFF 000000  
                           ___ftadd@exp1 009A                             ___ftadd@exp2 0099  
                           ___ftadd@sign 0098                                      l134 0CD0  
                                    l144 0D4E                                      l154 0DFC  
                                    l146 0D54                                      l147 0D5A  
                                    l148 0D60                                      l253 08F8  
                                    l149 0D66                                      l257 093A  
                                    l259 0940                                      l624 1B72  
                                    l617 19D8                                      l388 2C84  
                                    l396 2D18                                      l583 17A8  
                                    l668 2A0C                                      l975 12A6  
                                    l984 1ED0                                      l976 12B8  
                                    l986 1F18                                      _GIE 007F97  
                           __CFG_CPB$OFF 000000                                      _PEN 007E2A  
                           __CFG_CPD$OFF 000000                                      _SEN 007E28  
                                    _PSA 007EAB                                      _RX9 007D5E  
                                    _TX9 007D66                                      _Zip 19B0  
                        __end_of_I2C_Ack 30F6                                      _exp 0E58  
                                    _log 18C4                                      _pow 1302  
               __end_of_Hub_UpdateValues 1DD6                                      wreg 000FE8  
                            i2_WriteChar 251C                              i2_WriteData 28BA  
                          _InitConnector 2FDC                             __CFG_LVP$OFF 000000  
                             ReadBit@AIO 006F                             ___ftdiv@cntr 0089  
                           ___ftdiv@sign 008E                                     ?_Zip 009E  
                           __CFG_WDT$OFF 000000                                     l1000 1B40  
                                   l1003 3102                                     l1310 0FF4  
                                   l1151 1434                                     l1320 1CFE  
                                   l1048 26F2                                     l1317 1C68  
                                   l4010 08B8                                     l3210 30F4  
                                   l3230 294E                                     l4014 08BE  
                                   l4006 08AA                                     l3160 239A  
                                   l3304 1AB8                                     l3170 23DC  
                                   l3162 23A4                                     l3250 1216  
                                   l3138 29F4                                     l3172 23E6  
                                   l3164 23B8                                     l3500 2F5A  
                                   l3244 11F2                                     l3308 1AD8  
                                   l3228 2942                                     l3404 2792  
                                   l4052 09E6                                     l4028 08FC  
                                   l3342 2A64                                     l4118 24F6  
                                   l3422 2FDA                                     l3168 23CA  
                                   l3272 124E                                     l3352 2A9A  
                                   l3360 1DF8                                     l4048 0986  
                                   l4312 19BA                                     l3186 2402  
                                   l3274 1258                                     l3530 20CA  
                                   l3346 2A82                                     l3522 1C88  
                                   l3434 31B6                                     l3602 2FAC  
                                   l4402 28A4                                     l3452 1EB0  
                                   l3284 1284                                     l3276 1260  
                                   l3532 212C                                     l3380 1E52  
                                   l3620 302E                                     l3470 1EF4  
                                   l3286 128E                                     l3518 1C70  
                                   l4158 15CC                                     l3198 315E  
                                   l4502 2360                                     l4510 321A  
                                   l4326 19DC                                     l3296 12DC  
                                   l3392 1E7E                                     l3384 1E5A  
                                   l3376 1E42                                     l3544 2214  
                                   l4168 1610                                     l4248 1780  
                                   l3632 31C4                                     l4344 241A  
                                   l3386 1E66                                     l3554 222A  
                                   l3538 21E6                                     l3570 2D6E  
                                   l3730 2034                                     l4514 3166  
                                   l3644 2C8C                                     l3708 0FCC  
                                   l3660 18E0                                     l3900 26B2  
                                   l4612 2616                                     l3646 2C98  
                                   l3558 2234                                     l3910 26E4  
                                   l3488 2F1E                                     l3656 18D0  
                                   l4560 262C                                     l4392 2874  
                                   l4624 2AD8                                     l4800 0D3E  
                                   l3682 0E94                                     l3578 2D8E  
                                   l3586 2DE4                                     l3738 2068  
                                   l3834 1B78                                     l4618 2AA0  
                                   l4626 2AE0                                     l4802 0D46  
                                   l4810 0D84                                     l3692 0EE2  
                                   l3676 0E6C                                     l3780 133E  
                                   l4492 233C                                     l4812 0D90  
                                   l3686 0EBA                                     l3790 13B2  
                                   l3774 132A                                     l3854 2EEC  
                                   l3870 2F0E                                     l4830 0DF0  
                                   l4806 0D6C                                     l4814 0D94  
                                   l4752 0C92                                     l4744 0C7A  
                                   l3786 1390                                     l3866 2F06  
                                   l3858 2EF2                                     l3954 215A  
                                   l4842 0E52                                     l4746 0C80  
                                   l4764 0CBC                                     ?_exp 00AC  
                                   ?_log 00A5                                     l3886 3050  
                                   l3878 303A                                     l4782 0CEE  
                                   l4784 0CF8                                     l3898 26A6  
                                   l3996 0854                                     l4796 0D22  
                                   ?_pow 00B5                                     _BRGH 007D62  
                                   _CREN 007D5C                                     _T0CS 007EAD  
                                   u3000 1266                                     _LATA 000F89  
                                   u3030 1294                                     _LATB 000F8A  
                                   _LATC 000F8B                                     u3210 1E6A  
                                   u3301 2B38                                     u3311 1EA0  
                                   u3071 1AA8                                     u3151 1DE6  
                                   u3160 1DEE                                     u4200 168E  
                                   u4120 09E4                                     u4025 2E8A  
                                   u3170 1E16                                     u3410 1C7A  
                                   u4050 089E                                     u4026 2E8C  
                                   u3331 1EC0                                     u3091 1AC8  
                                   u4300 1792                                     u2700 2A3E  
                                   u3501 2DEE                                     u2701 2A3A  
                                   u4150 0A12                                     u3510 2E1E  
                                   u2710 2A40                                     u3175 1E0E  
                                   u3255 2FBA                                     u4160 0A3A  
                                   u4144 09F6                                     u4080 08F4  
                                   u4145 09F2                                     u2730 2392  
                                   u4170 0A4E                                     u4090 0936  
                                   u3291 2B22                                     u2900 11E4  
                                   u3284 2B0C                                     u2820 30EE  
                                   u3285 2B08                                     u5301 0E44  
                                   u4190 160C                                     u4280 1724  
                                   u5161 0CA6                                     u2770 23F0  
                                   u2930 1208                                     u2690 2A2E  
                                   u4530 19D4                                     u5250 0DCA  
                                   u4275 16DC                                     u2835 30F0  
                                   u4611 247E                                     _PEIE 007F96  
                                   u3900 1C3E                                     u4604 2456  
                                   u2861 11B6                                     u5317 29FC  
                                   u4605 2452                                     u2871 11CA  
                                   u4295 1744                                     u4711 285C  
                                   u2960 1230                                     u3840 1388  
                                   u3920 2EF6                                     u4560 1A84  
                                   u4544 1A20                                     u4545 1A1C  
                                   u3594 2BC2                                     u4570 1A96  
                                   u4554 1A32                                     u3595 2BBE  
                                   u4555 1A2E                                     u4731 2882  
                                   _RCIE 007CED                                     _RCIF 007CF5  
                                   _RCEN 007E2B                                     u3861 2D28  
                                   u4901 25D0                                     u4581 2424  
                                   u4741 28AE                                     u3960 26B6  
                                   u4840 235C                                     u3890 1C02  
                                   u3874 1BD4                                     u4850 2382  
                                   u4594 2444                                     u3875 1BD0  
                                   u4595 2440                                     u3884 1BE6  
                                   u3885 1BE2                                     _RCIP 007CFD  
                                   i2l80 1832                                     i2l84 1824  
                                   i2l94 1870                                     i2l87 1868  
                                   _SPEN 007D5F                                     _TXEN 007D65  
                                   _SYNC 007D64                                     _Load 22FC  
                                   __Hub 0100                                     Zip@i 00A6  
                                   Zip@j 00AA                            ??_InitDigiPot 00C6  
                          ?_ReadBitArray 0081                                     _main 0C6C  
                           ___ftpack@arg 0060                             ___ftpack@exp 0063  
                       __end_of_I2C_Init 22FC                         __end_of_I2C_Read 3030  
                       _Hub_DecodeSwitch 1002                                     fsr0h 000FEA  
                                   fsr1h 000FE2                                     fsr2h 000FDA  
                                   fsr0l 000FE9                                     indf1 000FE7  
                                   indf2 000FDF                                     fsr1l 000FE1  
                                   fsr2l 000FD9                                     btemp 005F  
                       __end_of_I2C_Wait 2A46                                     exp@x 00AC  
                                   log@x 00A5                         __end_of_I2C_Stop 31C6  
         __size_ofi2_Sequencer_StopTimer 0008                                     pow@x 00B5  
                                   pow@y 00B8                         Midi_Init@LPeriod 0075  
                                   prodh 000FF4                                     prodl 000FF3  
          __end_ofi2_Sequencer_StopTimer 3230                                     start 000E  
                          __CFG_IESO$OFF 000000                          __end_of_ClockUp 3180  
                          __CFG_MCLRE$ON 000000                             ___param_bank 000000  
                           ___ftmul@sign 007C                          __end_of_LatchOn 318E  
                         ??_Hub_SetValue 000B                          __end_of_InitApp 2852  
                        __end_of_ReadBit 2B48                          __end_of_InitPin 2BEA  
                            InitApp@test 00D1                             ___fttol@exp1 009D  
                                  ??_Zip 009F                                    ??_exp 00AF  
                                  ??_log 00A8                             ___fttol@lval 0099  
                                  ??_pow 00BB                              ReadBit@LBit 0080  
                          __CFG_PLLDIV$5 000000                                    ?_Load 0001  
                         __CFG_CCP2MX$ON 000000                                    ?_main 0001  
                                  _ACKEN 007E2C                                    _ACKDT 007E2D  
                      i2ReadBitArray@AIO 0023                          __end_of___lbdiv 2F12  
                                  _EEADR 000FA9                          __end_of___ftadd 1302  
                        __end_of___lbmod 3058                          __end_of___ftdiv 1F4A  
                        __end_of___ftneg 3110                          __end_of___lldiv 2704  
                        __end_of___ftmul 1B6E                          __end_of___ftsub 2F48  
                        __end_of___fttol 1E90                                    _LATB4 007C54  
                                  _T0PS0 007EA8                                    _T0PS1 007EA9  
                                  _T0PS2 007EAA                              InitPin@APin 0060  
                                  i2l325 1D62                          _Persistant_Init 3128  
                                  _RCREG 000FAE                                    _TMR1H 000FCF  
                                  _TMR1L 000FCE                                    _SPBRG 000FAF  
                                  _PORTB 000F81                    main@LChannelSwitchOld 00D6  
                          __CFG_USBDIV$2 000000              __size_of_Persistant_Address 0030  
                       _Midi_ResetBuffer 1FFA                                    Load@i 00C7  
                    _ConfigureOscillator 3230                            __CFG_PWRT$OFF 000000  
                       _InitDigiPot$2165 00CD                            __CFG_WRT0$OFF 000000  
                          __CFG_WRT1$OFF 000000                            __CFG_WRT2$OFF 000000  
                          __CFG_WRT3$OFF 000000                             ___lltoft@exp 0070  
   Persistant_WriteInternalMemory@LState 0065                               i2memcpy@d1 0001  
                         __CFG_EBTR0$OFF 000000                           __CFG_FCMEN$OFF 000000  
                         __CFG_EBTR1$OFF 000000                               i2memcpy@s1 0003  
                         __CFG_EBTR2$OFF 000000                           __CFG_EBTR3$OFF 000000  
                                  _UnZip 1B6E                            __CFG_WRTB$OFF 000000  
                         ?_InitConnector 0064                            __CFG_WRTC$OFF 000000  
                          __CFG_WRTD$OFF 000000                           __CFG_EBTRB$OFF 000000  
                          ___awtoft@sign 006B                       __size_ofi2_ClockUp 000E  
                                  _floor 1C40                                    _ldexp 21D6  
                                  _frexp 2776                       __size_ofi2_LatchOn 000E  
                       ??i2_ReadBitArray 0032                            ___ftpack@sign 0064  
                     __size_ofi2_ReadBit 0052                        __end_of_I2C_Start 31B8  
                            ?i2_LatchOff 0001                        __end_of_I2C_Write 3160  
                                  tablat 000FF5                           ??_ReadBitArray 0091  
                                  pow@yi 00C2                                    plusw0 000FEB  
                                  plusw1 000FE3                                    plusw2 000FDB  
                                  status 000FD8                                    wtemp6 0060  
                        ___lbdiv@divisor 0060                         __end_ofi2_memcpy 2DE0  
                        ___lbdiv@counter 0062                             i2WriteChar@i 0023  
                           i2WriteData@i 0037                           __CFG_PBADEN$ON 000000  
                      Display_Init@i_638 00CE                              exp@exponent 00B2  
                   ?_ConfigureOscillator 0001                               _Midi_Write 0A58  
                            ldexp@newexp 00A8                          __initialization 2704  
                           __end_of_Load 2386                              log@exponent 00A8  
                    __end_of_InitDigiPot 1570                             __end_of_main 0E58  
                       __end_of_LatchOff 319C                         __end_of_Hub_Init 251C  
                              ??_I2C_Ack 0065                                   ??_Load 00BA  
                Hub_ReadSwitch@LBitArray 0094               __end_ofi2_Midi_ResetBuffer 1FFA  
                       __end_of_PauseHub 3220                                   ??_main 00D2  
                          ___fttol@sign1 0098                           WriteChar@AChar 0081  
                         WriteData@AData 0084                            __activetblptr 000002  
                     __size_of_ClockDown 000E                           WriteData@ASize 0086  
                   _Sequencer_TimerEvent 3110                        ?i2_Hub_CopyBuffer 0001  
                                 ?_UnZip 009E                  ??_Persistant_LoadBuffer 00AA  
                   __end_of_Display_Init 1690                               __MidiInput 041D  
                                 _ADCON1 000FC1                       ??i2_Hub_CopyBuffer 000C  
                                 ?_floor 009E                                   ?_ldexp 00A5  
                                 ?_frexp 0060                         __end_of___altoft 2988  
                                 _EEDATA 000FA8                                   _EECON2 000FA7  
                                 _T08BIT 007EAE                         __end_of___awtoft 2F7E  
                       __end_of___ftpack 2410                         __end_of___lbtoft 307E  
                       __end_of___lltoft 2CD2                                   _T1SYNC 007E6A  
                                 i2l4300 29DA                                   i2l4434 1D8E  
                                 i2l4418 1D56                                   i2l4450 0AE2  
                                 i2l4284 11A4                                   i2l4268 10D4  
                                 i2l4452 0B14                                   i2l4460 0B6C  
                                 i2l4462 0B7C                                   i2l4366 2524  
                                 i2l4702 182C                                   i2l4296 29C0  
                                 i2l3920 2E24                                   i2l4448 0AB2  
                                 i2l4384 311A                                   i2l4720 1862  
                                 i2l4466 0BCE                                   i2l4458 0B44  
                                 i2l4732 188E                                   i2l4662 1FC0  
                                 i2l4654 1F84                                   i2l4638 28DC  
                                 i2l4734 189C                                   i2l3928 2DB0  
                                 i2l3936 2DD0                                   i2l4672 1FF6  
                                 i2l4648 290C                                   i2l4666 1FC8  
                                 i2l4658 1F8C                                   i2l4690 1810  
                                 i2l4692 1812                                   i2l4698 1820  
                     __size_of_Midi_Init 011A                       __size_of_Midi_Read 007C  
                                 _TMR0IE 007F95                                   _TMR0IF 007F92  
                                 _TMR1IE 007CE8                                   _TMR1IF 007CF0  
                                 _TMR1CS 007E69                                ??_ClockUp 006F  
                                 _TMR0ON 007EAF                                   _TMR1ON 007E68  
                                 _SSPADD 000FC8                                   _TRISA2 007C92  
                                 _TRISB0 007C98                                   _TRISA3 007C93  
                                 _TRISB1 007C99                                   _TRISB2 007C9A  
                                 _TRISA4 007C94                                   _TRISA5 007C95  
                                 _TRISB3 007C9B                                   _TRISC2 007CA2  
                                 _TRISB4 007C9C                                   _TRISC6 007CA6  
                                 _TRISC7 007CA7                                   _SSPBUF 000FC9  
                   _Sequencer_StartTimer 2BEA                                ??_LatchOn 006F  
          Display_ProcessData@iDataIndex 0076                                ??_InitApp 00D1  
                  ??_ConfigureOscillator 0060                                ??_ReadBit 007E  
                              ??_InitPin 0062                       Midi_Init@LBaudRate 0071  
                         __CFG_XINST$OFF 000000                                   UnZip@i 00A4  
                                 UnZip@j 00A6                                   __Timer 0059  
                     __size_of_Interrupt 18BC                              i2memcpy@tmp 000B  
                       ??_Hub_CopyBuffer 006B                                   _RunHub 3160  
                                 ___ftge 2A46                             ?i2_ClockDown 0001  
                      __end_ofi2_ClockUp 31FE                        ?i2_Hub_ReadSwitch 0001  
                              ??___lbdiv 0061                                ??___ftadd 0095  
                         __CFG_STVREN$ON 000000                                ??___lbmod 0065  
                              ??___ftdiv 0086                  __end_of_Persistant_Init 313C  
                              ??___ftneg 0063                                ??___lldiv 0068  
                              ??___ftmul 0078                                ??___ftsub 00A1  
                              ??___fttol 0093            Persistant_LoadBuffer@LChannel 00B8  
                      __end_ofi2_LatchOn 31E2                        __end_ofi2_ReadBit 2B9A  
                                 _memcmp 2A9E    Persistant_ReadInternalMemory@AAddress 0060  
                                 _memcpy 2D5C                  ??_Persistant_SaveBuffer 00B8  
                     ??i2_Hub_ReadSwitch 0035                                   clear_0 272C  
                                 clear_1 273E                                   clear_2 274A  
                                 clear_3 2756                      __size_ofi2_LatchOff 000E  
               Hub_SetValue@ASourceValue 0005                                   floor@i 00A1  
                                 floor@x 009E                    ___ftmul@f3_as_product 007D  
                  ?_Sequencer_TimerEvent 0001              __end_of_Display_ProcessData 0A58  
                              ?_I2C_Init 009E                                ?_I2C_Read 0001  
                        ??_InitConnector 0066                                ?_I2C_Wait 0001  
                              ?_I2C_Stop 0001                             __mediumconst 0000  
                                 tblptrh 000FF7                                   tblptrl 000FF6  
                                 tblptru 000FF8                     __end_of_Hub_SetValue 29E8  
                       ??_Hub_ReadSwitch 0094                         ___lbdiv@dividend 0061  
                       __end_ofexp@coeff 081F                         __end_oflog@coeff 083A  
                        ___lbmod@divisor 0064                               __accesstop 0060  
                __end_of__initialization 2768                               ___altoft@c 0068  
                        ___lbmod@counter 0066                    ?_Sequencer_StartTimer 009E  
                             ___ftadd@f1 008F                               ___ftadd@f2 0092  
                            _InitDigiPot 1442                       __size_of_WriteChar 0086  
                     __size_of_WriteData 0068                               ___ftge@ff1 0060  
                             ___ftge@ff2 0063                             eval_poly@res 00A2  
                          ___rparam_used 000001                        __end_of_ClockDown 31D4  
            Persistant_ControlByte@ARead 0068                               ___ftdiv@f1 0080  
                             ___ftdiv@f2 0083                               ___ftdiv@f3 008A  
                             ___ftneg@f1 0060                              ?_Midi_Write 0001  
                             ___awtoft@c 0068                               ___lbtoft@c 006B  
                             ___ftmul@f1 0072                               ___ftmul@f2 0075  
                             ___ftsub@f1 009B                               ___ftsub@f2 009E  
                             ___fttol@f1 008F                           __pcstackCOMRAM 0001  
                          __end_of_UnZip 1C40                             __pidataBANK0 320C  
                             ___lltoft@c 0068                            __end_of_floor 1D0C  
                          __end_of_ldexp 226A                            __end_of_frexp 27E6  
                       ___lbdiv@quotient 0063                        __end_of_Midi_Init 17AA  
                      __end_of_Midi_Read 2618                    InitDigiPot@LTickCount 00C6  
                   __end_of_ReadBitArray 2E20                             WriteChar@AIO 006F  
                           WriteData@AIO 0087                 __end_of_Hub_DecodeSwitch 11A6  
                             ??_I2C_Init 00A2                               ??_I2C_Read 0066  
                             ??_I2C_Wait 0060                  Display_SwapBuffer@LSwap 0001  
                             ??_I2C_Stop 0065                                ?i2_memcpy 0001  
   Persistant_ReadExternalMemory@LResult 0071                    InitDigiPot@LPrescaler 00D0  
                      ?_Hub_UpdateValues 0001                                  ??_UnZip 009F  
           Persistant_LoadBuffer@ABuffer 00A8              __size_of_Display_SwapBuffer 0020  
                           ?i2_WriteChar 0010                             ?i2_WriteData 0025  
                      __end_of_Interrupt 18C4               Persistant_Address@AAddress 006C  
                                ??_floor 00A1                                  ??_ldexp 00AA  
                                ??_frexp 0064                       ??_Hub_UpdateValues 004D  
                         I2C_Init@LRatio 00A2                                ?_LatchOff 0060  
                             __pbssBANK0 00DF                               __pbssBANK1 0100  
                             __pbssBANK2 0200                                ?_Hub_Init 0001  
                     __size_of_eval_poly 009C                 ??_Persistant_ControlByte 0069  
                             WriteChar@i 0082                               WriteData@i 0096  
                        Midi_Write@AData 0007                                ?_PauseHub 0001  
               __end_of_Midi_ResetBuffer 20A4                 __size_of_Sequencer_Start 0012  
                                ?_RunHub 0001                                  ?___ftge 0060  
                            UnZip@LIndex 00A3                              UnZip@LValue 00A2  
                       ?_Persistant_Init 0001   Persistant_WriteInternalMemory@AAddress 0062  
                                _I2C_Ack 30DC                              __MidiOutput 02D9  
                                ?_memcmp 0060                                ?___altoft 0068  
                                ?_memcpy 0060                      i2ReadBitArray@AData 0022  
                              ?___awtoft 0068                                ?___ftpack 0060  
                              ?___lbtoft 0068                   ??_Sequencer_TimerEvent 0001  
                             I2C_Write@b 0065                                ?___lltoft 0068  
                          ReadBitArray@i 0092                                  _T1CKPS0 007E6C  
                  __size_of_Display_Init 0120                        __end_of_WriteChar 2496  
                      __end_of_WriteData 28BA                                  _T1OSCEN 007E6B  
                             ??i2_memcpy 0007                      __size_of_Midi_Write 0214  
           __size_of_Sequencer_StopTimer 0008         ??_Persistant_WriteInternalMemory 0065  
        ?_Persistant_WriteInternalMemory 0062                                  _SSPCON1 000FC6  
                                _SSPCON2 000FC5                                  _SSPSTAT 000FC7  
                           ??i2_LatchOff 0010                               ??_LatchOff 006F  
                             ??_Hub_Init 00AC                   ??_Sequencer_StartTimer 00A2  
                Hub_DecodeSwitch@AIndex1 0004                  Hub_DecodeSwitch@AIndex2 0001  
                        __CFG_VREGEN$OFF 000000                                  _ClockUp 3170  
                                _LatchOn 3180                                _I2C_Start 31AA  
                                _InitApp 27E6                               ??_PauseHub 0060  
                                _ReadBit 2AF4                                  _InitPin 2B9A  
                              _I2C_Write 314E                                  __Digits 00F2  
                                __Config 019D                                  __Hparam 0000  
                    i2Midi_ResetBuffer@i 0006                      i2Midi_ResetBuffer@j 0005  
                                __Lparam 0000                                  Zip@AZip 009E  
              Persistant_SaveBuffer@LZip 00BC                                  __Saving 00DF  
                  i2_Sequencer_StopTimer 3228                             _Display_Init 1570  
                        __size_of_RunHub 0010                          __size_of___ftge 0058  
                                ___lbdiv 2EDC                                  ___ftadd 11A6  
                                ___lbmod 3030                                  ___ftdiv 1E90  
                                ___ftneg 30F6                                  ___lldiv 268E  
                                ___ftmul 1A98                                  ___ftsub 2F12  
                                ___fttol 1DD6                             __psmallconst 0800  
                        ReadBitArray@AIO 0082                               ??___altoft 006C  
                   __size_ofi2_ClockDown 000E                                  __pcinit 2704  
    Persistant_WriteExternalMemory@AData 0074                          __size_of_memcmp 0056  
                        __size_of_memcpy 0042                               ??___awtoft 006B  
                             ??___ftpack 0065                               ??___lbtoft 006B  
                      __end_of_eval_poly 2140                                  __ramtop 0800  
             __end_of_Persistant_Address 2FAE                               ??___lltoft 006C  
                                __ptext0 0C6C                                  __ptext1 2A9E  
                                __ptext2 2852                                  __ptext3 2410  
                                __ptext4 3180                                  __ptext5 318E  
                                __ptext6 3220                                  __ptext7 2BEA  
                                __ptext8 3160                                  __ptext9 2618  
                 Persistant_LoadBuffer@i 00B9                       __end_ofi2_LatchOff 31F0  
                           __size_of_Zip 00E8                    __size_of_Hub_SetValue 0060  
                           __size_of_exp 01AA                             __size_of_log 00EC  
                           __size_of_pow 0140           __size_of_Persistant_LoadBuffer 0096  
                         __pintcode_body 17AA            __end_of_Persistant_LoadBuffer 21D6  
                   end_of_initialization 2768                       i2_Midi_ResetBuffer 1F4A  
                                exp@sign 00B4                                  memcmp@n 0064  
                                memcpy@d 0066                                  memcpy@n 0064  
                                memcpy@s 0068                            __Lmediumconst 0000  
                Display_ProcessData@LBit 0075                                  int_func 17AA  
        __size_of_Persistant_ControlByte 002E                               ?_I2C_Start 0001  
                             ?_I2C_Write 0001                      ?i2_Midi_ResetBuffer 0001  
              __size_ofi2_Hub_CopyBuffer 001E                          ___lldiv@divisor 0064  
                                pow@sign 00C1                          ___lldiv@counter 006C  
                              _RCSTAbits 000FAB                                  postdec1 000FE5  
                                postdec2 000FDD                    __size_of_ReadBitArray 0040  
                                postinc0 000FEE                                  postinc1 000FE6  
                                postinc2 000FDE                             _Hub_SetValue 2988  
                      ??_Sequencer_Start 0060                                i2_ClockUp 31F0  
         __size_of_Persistant_SaveBuffer 0076            __end_of_Persistant_SaveBuffer 268E  
                              i2_LatchOn 31D4                                i2_ReadBit 2B48  
                     Hub_SetValue@LValue 000C                     ??i2_Midi_ResetBuffer 0003  
                       ___lbmod@dividend 0065                           i2WriteChar@AIO 0010  
                         i2WriteData@AIO 0028                               main@LValue 00D9  
              __size_ofi2_Hub_ReadSwitch 003E                        Hub_UpdateValues@i 004D  
                      __size_of_I2C_Init 0092                        __size_of_I2C_Read 0028  
                      __size_of_I2C_Wait 005E                        __size_of_I2C_Stop 000E  
                              Load@i_420 00C9         ??_Persistant_WriteExternalMemory 0075  
        ?_Persistant_WriteExternalMemory 0072                                Hub_Init@i 00AC  
            __end_of_ConfigureOscillator 3232                     __size_ofi2_WriteChar 0080  
                   __size_ofi2_WriteData 0068                           Midi_Read@AData 0060  
                            ___lbmod@rem 0067                i2Hub_ReadSwitch@LBitArray 0035  
                           ?_InitDigiPot 0001                              ___ftdiv@exp 008D  
                           _ReadBitArray 2DE0                             ??_Midi_Write 0003  
                 ?i2_Sequencer_StopTimer 0001                  __size_ofi2_ReadBitArray 0040  
                            ___ftmul@exp 007B                       InitDigiPot@LPeriod 00CA  
        ??_Persistant_ReadInternalMemory 0062                                _ClockDown 31C6  
                         __end_of_RunHub 3170                           __end_of___ftge 2A9E  
  Persistant_ReadExternalMemory@AAddress 006F                                i2memcpy@d 0007  
                              i2memcpy@n 0005                                i2memcpy@s 0009  
                             ?i2_ClockUp 0001                   _Persistant_ControlByte 2FAE  
                         __end_of_memcmp 2AF4                           __end_of_memcpy 2D9E  
                             ?i2_LatchOn 0001                               floor@expon 00A4  
                             ?i2_ReadBit 0010                        ?_Hub_DecodeSwitch 0001  
                              _Midi_Init 1690                                _Midi_Read 259C  
                    start_initialization 2704                               eval_poly@d 009E  
                             eval_poly@n 009F                               eval_poly@x 009B  
                     ??_Hub_DecodeSwitch 0002                               ldexp@value 00A5  
                  __end_of_InitConnector 3008                              __end_of_Zip 1A98  
                            __end_of_exp 1002                              __end_of_log 19B0  
                            __end_of_pow 1442                       __end_of_Midi_Write 0C6C  
                      __size_ofi2_memcpy 0042             __size_of_Display_ProcessData 021C  
          i2Midi_ResetBuffer@AMidiBuffer 0001                                _Interrupt 0008  
                             frexp@value 0060                                UnZip@AZip 009E  
                      __size_of_LatchOff 000E                        __size_of_Hub_Init 0086  
                            ??_I2C_Start 0065                              ??_I2C_Write 0065  
                              __Modified 00E0                __size_of_Hub_UpdateValues 00CA  
         Persistant_ControlByte@AAddress 0066                        ?_Midi_ResetBuffer 0060  
                              Zip@LIndex 00A5                                Zip@LBytes 00A4  
                      __size_of_PauseHub 000A                                 ??_RunHub 0060  
                 Persistant_SaveBuffer@i 00C6                      _Sequencer_StopTimer 3220  
                               ??___ftge 0066                               ?_ClockDown 0060  
                              Zip@i_1425 00A8                       ??_Midi_ResetBuffer 0062  
                            __pdataBANK0 00F2                         __CFG_LPT1OSC$OFF 000000  
                               ?_I2C_Ack 0001                                 ??_memcmp 0066  
                               ??_memcpy 0066                              I2C_Ack@AAck 0065  
                      __size_of___altoft 0066                            i2LatchOff@AIO 0001  
             __end_of_Display_SwapBuffer 30BE                        __size_of___awtoft 0036  
                      __size_of___ftpack 008A                  __size_of_Hub_CopyBuffer 0020  
                      __size_of___lbtoft 0026                              __pbssBIGRAM 02D9  
                      __size_of___lltoft 004C                               ?_Midi_Init 0001  
                             ?_Midi_Read 0060                              __pbssCOMRAM 0059  
                          __pcstackBANK0 0060                     ?_Sequencer_StopTimer 0001  
                              _WriteChar 2410                                _WriteData 2852  
                      ReadBitArray@AData 0081                               ?_Interrupt 0001  
                               ?_ClockUp 0060                                 ?_LatchOn 0060  
                          I2C_Read@LData 0066                                 ?_InitApp 0001  
                               ?_ReadBit 006F                                 ?_InitPin 0060  
                       i2_Hub_CopyBuffer 30BE   __end_of_Persistant_WriteInternalMemory 2E9E  
__size_of_Persistant_WriteInternalMemory 003E           _Persistant_WriteInternalMemory 2E60  
                __size_of_Hub_ReadSwitch 0042                                __pintcode 0008  
        ??_Persistant_ReadExternalMemory 0071                                 ?___lbdiv 0060  
                               ?___ftadd 008F                                 ?___lbmod 0064  
                               ?___ftdiv 0080                                 ?___ftneg 0060  
                               ?___lldiv 0060                                 ?___ftmul 0072  
                               ?___ftsub 009B                                 ?___fttol 008F  
 Persistant_WriteExternalMemory@AAddress 0072                              ??i2_ClockUp 0010  
  __end_of_Persistant_ReadInternalMemory 31AA   __size_of_Persistant_ReadInternalMemory 000E  
          _Persistant_ReadInternalMemory 319C                            i2ReadBit@LBit 0021  
                            ??i2_LatchOn 0010                              ??i2_ReadBit 001F  
                            __smallconst 0800            __size_of_Sequencer_TimerEvent 0018  
                               _I2C_Init 226A                                 _I2C_Read 3008  
                               _I2C_Wait 29E8                                _eval_poly 20A4  
                               _I2C_Stop 31B8                 __size_of_Persistant_Init 0014  
                      Midi_ResetBuffer@i 0065                        Midi_ResetBuffer@j 0064  
                  ??_Sequencer_StopTimer 0060                           __size_of_UnZip 00D2  
                             ?_WriteChar 006F                               ?_WriteData 0084  
                       i2_Hub_ReadSwitch 2E9E                           __size_of_floor 00CC  
                         __size_of_ldexp 0094                           __size_of_frexp 0070  
                     _Persistant_Address 2F7E            __size_of_Sequencer_StartTimer 004E  
            Midi_ResetBuffer@AMidiBuffer 0060                          _Sequencer_Start 313C  
                               _PIE1bits 000F9D                      ?_Persistant_Address 006C  
                   __size_of_InitDigiPot 012E                           i2_ReadBitArray 2E20  
                               i2u501_41 17F2                                 i2u511_40 187C  
                               i2u512_40 18A0                                 i2u433_40 1062  
                               _PIR1bits 000F9E                                 i2u443_40 1132  
                               i2u435_40 106C                                 i2u434_48 1064  
                               i2u371_44 2B60                                 i2u371_45 2B5C  
                               i2u372_41 2B74                                 i2u445_40 113C  
                               i2u444_48 1134                                 i2u373_41 2B8A  
                               i2u438_40 10CA                                 i2u463_41 2EAC  
                               i2u448_40 119A                                 i2u439_48 10CC  
                               i2u464_41 252E                                 i2u465_44 254E  
                               i2u465_45 254A                                 i2u449_48 119C  
                               i2u466_44 255E                                 i2u466_45 255A  
                               i2u467_41 2584                                 i2u476_41 1D34  
                               i2u477_41 1D4A                                 i2u398_41 2E2E  
                               i2u494_41 28C4                                 i2u399_40 2E5E  
                               i2u479_40 1DCC                                 i2u496_41 28EA  
                           ClockDown@AIO 0060                                 i2u497_41 2916  
                           i2ClockUp@AIO 0001                            ??i2_ClockDown 0010  
                       __CFG_WDTPS$32768 000000                              ??_ClockDown 006F  
                 Hub_SetValue@AIncrement 000A                         I2C_Wait@LTimeOut 0062  
    Persistant_WriteInternalMemory@AData 0064                         __size_of_I2C_Ack 001A  
                   ??_Persistant_Address 006F                              ??_Midi_Init 006D  
                             ?_eval_poly 009B                              ??_Midi_Read 0063  
                               i2_memcpy 2D9E                           Interrupt@LData 0058  
                        i2ReadBitArray@i 0033                                copy_data0 2718  
                  Midi_Write@AMidiBuffer 0001                                 _LatchOff 318E  
                               _Hub_Init 2496                              ??_Interrupt 004F  
                               __DigiPot 00E1                  ??i2_Sequencer_StopTimer 0001  
                  _Persistant_LoadBuffer 2140                   __end_ofi2_ReadBitArray 2E60  
                       __size_of_ClockUp 0010                                 __Display 0200  
                              frexp@eptr 0063                               _EECON1bits 000FA6  
                               _PauseHub 3216                         __size_of_LatchOn 000E  
             Display_ProcessData@ALoaded 006A                         __size_of_InitApp 006C  
                       _Hub_UpdateValues 1D0C                                 __Hrparam 0000  
                       __size_of_ReadBit 0054                         __size_of_InitPin 0050  
             Display_ProcessData@AValues 0068                                memcpy@tmp 006A  
                               __Lrparam 0000               Display_ProcessData@APushed 006B  
 __end_of_Persistant_WriteExternalMemory 2D1A  __size_of_Persistant_WriteExternalMemory 0048  
         _Persistant_WriteExternalMemory 2CD2                     Display_ProcessData@i 007B  
                   Display_ProcessData@j 007F                     Display_ProcessData@k 0077  
                ?_Persistant_ControlByte 0066                             i2LatchOn@AIO 0001  
                    _Display_ProcessData 083C                         __size_of___lbdiv 0036  
                       __size_of___ftadd 015C                         __size_of___lbmod 0028  
                       __size_of___ftdiv 00BA                         __size_of___ftneg 001A  
                       __size_of___lldiv 0076                                 ___altoft 2922  
                       __size_of___ftmul 00D6                         __size_of___ftsub 0036  
                       __size_of___fttol 00BA                                 ___awtoft 2F48  
                               ___ftpack 2386                                 ___lbtoft 3058  
                               ___lltoft 2C86    __end_of_Persistant_ReadExternalMemory 2C86  
 __size_of_Persistant_ReadExternalMemory 004E            _Persistant_ReadExternalMemory 2C38  
                    __end_ofi2_ClockDown 320C                           _Hub_CopyBuffer 307E  
                     I2C_Init@AFrequency 009E                                 _exp$2168 00AF  
            __size_ofi2_Midi_ResetBuffer 00B0                    _Persistant_SaveBuffer 2618  
                               _main$441 00D4           ?_Persistant_ReadInternalMemory 0060  
                          ??i2_WriteChar 001F                            ??i2_WriteData 0037  
                            ??_WriteChar 007E                              ??_WriteData 0096  
                               __ptext10 19B0                                 __ptext11 3216  
                               __ptext20 1B6E                                 __ptext12 259C  
                               __ptext21 2C38                                 __ptext13 22FC  
                               __ptext30 3128                                 __ptext22 2F7E  
                               __ptext14 2E60                                 __ptext31 226A  
                               __ptext23 2FAE                                 __ptext15 319C  
                               __ptext40 2AF4                                 __ptext32 1690  
                               __ptext24 314E                                 __ptext16 27E6  
                               __ptext41 3170                                 __ptext33 268E  
                               __ptext25 31AA                                 __ptext17 313C  
                               __ptext50 18C4                                 __ptext42 31C6  
                               __ptext34 1FFA                                 __ptext26 31B8  
                               __ptext18 2CD2                                 __ptext51 0E58  
                               __ptext43 307E                                 __ptext35 1442  
                               __ptext27 3008                                 __ptext19 2140  
                               __ptext60 2F12                                 __ptext52 21D6  
                               __ptext44 2D5C                                 __ptext36 3058  
                               __ptext28 30DC                                 __ptext61 11A6  
                               __ptext53 1C40                                 __ptext45 083C  
                               __ptext37 2496                                 __ptext29 29E8  
                               __ptext62 30F6                                 __ptext54 2776  
                               __ptext46 3030                                 __ptext38 2D1A  
                               __ptext71 28BA                                 __ptext63 1E90  
                               __ptext55 1DD6                                 __ptext47 2EDC  
                               __ptext39 2DE0                                 __ptext80 31E2  
                               __ptext72 251C                                 __ptext64 2F48  
                               __ptext56 2A46                                 __ptext48 1570  
                               __ptext81 2E9E                                 __ptext73 3228  
                               __ptext65 2C86                                 __ptext57 2922  
                               __ptext49 1302                                 __ptext82 2D9E  
                               __ptext74 1F4A                                 __ptext66 2386  
                               __ptext58 20A4                                 __ptext83 2E20  
                               __ptext75 30BE                                 __ptext67 2FDC  
                               __ptext59 1A98                                 __ptext84 2B48  
                               __ptext76 3110                                 __ptext68 2B9A  
                               __ptext85 31F0                                 __ptext77 0A58  
                               __ptext69 3230                                 __ptext86 31FE  
                               __ptext78 1D0C                                 __ptext87 2988  
                               __ptext79 31D4                                 __ptext88 1002  
                               __ptext89 309E                     ?_Display_ProcessData 0068  
                           i2ReadBit@AIO 0010                  __end_of_Sequencer_Start 314E  
                               _pow$2166 00BB                                 _pow$2167 00BE  
                      ??_Persistant_Init 00A5                            __size_of_Load 008A  
                   main@LEncSwitchPushed 00D7                            __size_of_main 01EC  
              __size_of_Hub_DecodeSwitch 01A4                          ?i2_ReadBitArray 0022  
           __size_of_ConfigureOscillator 0002                           _Hub_ReadSwitch 2D1A  
         __end_of_Persistant_ControlByte 2FDC                    Hub_SetValue@AMaxValue 0008  
                  Hub_SetValue@AMinValue 0007                                 int$flags 005F  
                        I2C_Wait@LResult 0064                  InitConnector@AConnector 0064  
                 __end_of_Hub_CopyBuffer 309E                            Display_Init@i 00CC  
                      _Display_Init$2163 00C6                        _Display_Init$2164 00C9  
                  __CFG_CPUDIV$OSC1_PLL2 000000                                 exp@coeff 0801  
                               log@coeff 081F                               _INTCONbits 000FF2  
               __end_ofi2_Hub_CopyBuffer 30DC                              ??_eval_poly 00A1  
              __size_of_Midi_ResetBuffer 00AA                                 memcmp@s1 0060  
                               memcmp@s2 0062                                 memcpy@d1 0060  
                               memcpy@s1 0062                 Display_ProcessData@LData 0074  
                  ??_Display_ProcessData 006C                 Display_ProcessData@i_652 0081  
               Display_ProcessData@i_646 007D                 Display_ProcessData@i_648 0079  
                               intlevel2 0000                   ?_Persistant_LoadBuffer 00A8  
              Sequencer_StartTimer@ALoop 00A1                Sequencer_StartTimer@ATime 009E  
                     _Display_SwapBuffer 309E                      __end_ofi2_WriteChar 259C  
                    __end_ofi2_WriteData 2922                         ___lldiv@dividend 0060  
                 __end_of_Hub_ReadSwitch 2D5C                               ClockUp@AIO 0060  
                    ?_Display_SwapBuffer 0001                            ?_Display_Init 0001  
               __end_ofi2_Hub_ReadSwitch 2EDC                              i2_ClockDown 31FE  
                 __size_of_InitConnector 002C                           i2ClockDown@AIO 0001  
              Persistant_LoadBuffer@LZip 00AE             Persistant_SaveBuffer@ABuffer 00AC  
                        ?_Hub_CopyBuffer 0001         Display_ProcessData@ADigitalValue 0073  
                 ?_Persistant_SaveBuffer 00AC                         ___lldiv@quotient 0068  
                   Midi_Read@AMidiBuffer 0061                     ??_Display_SwapBuffer 0001  
           Persistant_SaveBuffer@LResult 00BB           ?_Persistant_ReadExternalMemory 006F  
                       ?_Sequencer_Start 0001                       __CFG_FOSC$HSPLL_HS 000000  
                             i2_LatchOff 31E2                             Load@AChannel 00C6  
                          main@LMidiData 00DA             __end_of_Sequencer_TimerEvent 3128  
                        ?_Hub_ReadSwitch 0001                         i2WriteChar@AChar 0022  
                       i2WriteData@AData 0025                         i2WriteData@ASize 0027  
                         ??_Display_Init 00C6  
