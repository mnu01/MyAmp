

Microchip Technology PIC18 PRO Macro Assembler V1.44 build -154322312 
                                                                                               Sun Oct 22 22:14:12 2017

Microchip Technology Omniscient Code Generator v1.44 (PRO mode) build 201709140600
     1                           	processor	18F2550
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	pm
     5                           	psect	idataBANK0,global,class=CODE,delta=1,noexec
     6                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     9                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    10                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    11                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    12                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1,lowdata,noexec
    13                           	psect	bssBIGRAM,global,class=BIGRAM,space=1,delta=1,lowdata,noexec
    14                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    15                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    16                           	psect	text0,global,reloc=2,class=CODE,delta=1
    17                           	psect	text1,global,reloc=2,class=CODE,delta=1,group=1
    18                           	psect	text2,global,reloc=2,class=CODE,delta=1
    19                           	psect	text3,global,reloc=2,class=CODE,delta=1
    20                           	psect	text4,global,reloc=2,class=CODE,delta=1
    21                           	psect	text5,global,reloc=2,class=CODE,delta=1
    22                           	psect	text6,global,reloc=2,class=CODE,delta=1
    23                           	psect	text7,global,reloc=2,class=CODE,delta=1
    24                           	psect	text8,global,reloc=2,class=CODE,delta=1
    25                           	psect	text9,global,reloc=2,class=CODE,delta=1
    26                           	psect	text10,global,reloc=2,class=CODE,delta=1
    27                           	psect	text11,global,reloc=2,class=CODE,delta=1
    28                           	psect	text12,global,reloc=2,class=CODE,delta=1
    29                           	psect	text13,global,reloc=2,class=CODE,delta=1
    30                           	psect	text14,global,reloc=2,class=CODE,delta=1
    31                           	psect	text15,global,reloc=2,class=CODE,delta=1
    32                           	psect	text16,global,reloc=2,class=CODE,delta=1
    33                           	psect	text17,global,reloc=2,class=CODE,delta=1
    34                           	psect	text18,global,reloc=2,class=CODE,delta=1
    35                           	psect	text19,global,reloc=2,class=CODE,delta=1
    36                           	psect	text20,global,reloc=2,class=CODE,delta=1
    37                           	psect	text21,global,reloc=2,class=CODE,delta=1
    38                           	psect	text22,global,reloc=2,class=CODE,delta=1
    39                           	psect	text23,global,reloc=2,class=CODE,delta=1
    40                           	psect	text24,global,reloc=2,class=CODE,delta=1
    41                           	psect	text25,global,reloc=2,class=CODE,delta=1
    42                           	psect	text26,global,reloc=2,class=CODE,delta=1
    43                           	psect	text27,global,reloc=2,class=CODE,delta=1
    44                           	psect	text28,global,reloc=2,class=CODE,delta=1
    45                           	psect	text29,global,reloc=2,class=CODE,delta=1
    46                           	psect	text30,global,reloc=2,class=CODE,delta=1
    47                           	psect	text31,global,reloc=2,class=CODE,delta=1
    48                           	psect	text32,global,reloc=2,class=CODE,delta=1
    49                           	psect	text33,global,reloc=2,class=CODE,delta=1,group=1
    50                           	psect	text34,global,reloc=2,class=CODE,delta=1
    51                           	psect	text35,global,reloc=2,class=CODE,delta=1
    52                           	psect	text36,global,reloc=2,class=CODE,delta=1,group=1
    53                           	psect	text37,global,reloc=2,class=CODE,delta=1
    54                           	psect	text38,global,reloc=2,class=CODE,delta=1
    55                           	psect	text39,global,reloc=2,class=CODE,delta=1
    56                           	psect	text40,global,reloc=2,class=CODE,delta=1
    57                           	psect	text41,global,reloc=2,class=CODE,delta=1
    58                           	psect	text42,global,reloc=2,class=CODE,delta=1
    59                           	psect	text43,global,reloc=2,class=CODE,delta=1
    60                           	psect	text44,global,reloc=2,class=CODE,delta=1,group=1
    61                           	psect	text45,global,reloc=2,class=CODE,delta=1
    62                           	psect	text46,global,reloc=2,class=CODE,delta=1,group=1
    63                           	psect	text47,global,reloc=2,class=CODE,delta=1,group=1
    64                           	psect	text48,global,reloc=2,class=CODE,delta=1
    65                           	psect	text49,global,reloc=2,class=CODE,delta=1,group=1
    66                           	psect	text50,global,reloc=2,class=CODE,delta=1,group=1
    67                           	psect	text51,global,reloc=2,class=CODE,delta=1,group=1
    68                           	psect	text52,global,reloc=2,class=CODE,delta=1,group=1
    69                           	psect	text53,global,reloc=2,class=CODE,delta=1,group=1
    70                           	psect	text54,global,reloc=2,class=CODE,delta=1,group=1
    71                           	psect	text55,global,reloc=2,class=CODE,delta=1,group=1
    72                           	psect	text56,global,reloc=2,class=CODE,delta=1,group=1
    73                           	psect	text57,global,reloc=2,class=CODE,delta=1,group=1
    74                           	psect	text58,global,reloc=2,class=CODE,delta=1,group=1
    75                           	psect	text59,global,reloc=2,class=CODE,delta=1,group=1
    76                           	psect	text60,global,reloc=2,class=CODE,delta=1,group=1
    77                           	psect	text61,global,reloc=2,class=CODE,delta=1,group=1
    78                           	psect	text62,global,reloc=2,class=CODE,delta=1,group=1
    79                           	psect	text63,global,reloc=2,class=CODE,delta=1,group=1
    80                           	psect	text64,global,reloc=2,class=CODE,delta=1,group=1
    81                           	psect	text65,global,reloc=2,class=CODE,delta=1,group=1
    82                           	psect	text66,global,reloc=2,class=CODE,delta=1,group=1
    83                           	psect	text67,global,reloc=2,class=CODE,delta=1
    84                           	psect	text68,global,reloc=2,class=CODE,delta=1
    85                           	psect	text69,global,reloc=2,class=CODE,delta=1
    86                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    87                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    88                           	psect	text71,global,reloc=2,class=CODE,delta=1
    89                           	psect	text72,global,reloc=2,class=CODE,delta=1
    90                           	psect	text73,global,reloc=2,class=CODE,delta=1
    91                           	psect	text74,global,reloc=2,class=CODE,delta=1
    92                           	psect	text75,global,reloc=2,class=CODE,delta=1
    93                           	psect	text76,global,reloc=2,class=CODE,delta=1
    94                           	psect	text77,global,reloc=2,class=CODE,delta=1
    95                           	psect	text78,global,reloc=2,class=CODE,delta=1
    96                           	psect	text79,global,reloc=2,class=CODE,delta=1
    97                           	psect	text80,global,reloc=2,class=CODE,delta=1
    98                           	psect	text81,global,reloc=2,class=CODE,delta=1
    99                           	psect	text82,global,reloc=2,class=CODE,delta=1
   100                           	psect	text83,global,reloc=2,class=CODE,delta=1
   101                           	psect	text84,global,reloc=2,class=CODE,delta=1
   102                           	psect	text85,global,reloc=2,class=CODE,delta=1
   103                           	psect	text86,global,reloc=2,class=CODE,delta=1
   104                           	psect	text87,global,reloc=2,class=CODE,delta=1
   105                           	psect	text88,global,reloc=2,class=CODE,delta=1
   106                           	psect	text89,global,reloc=2,class=CODE,delta=1
   107                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
   108                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
   109                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
   110  0000                     
   111                           ; Version 1.44
   112                           ; Generated 14/09/2017 GMT
   113                           ; 
   114                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
   115                           ; All rights reserved.
   116                           ; 
   117                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
   118                           ; 
   119                           ; Redistribution and use in source and binary forms, with or without modification, are
   120                           ; permitted provided that the following conditions are met:
   121                           ; 
   122                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
   123                           ;        conditions and the following disclaimer.
   124                           ; 
   125                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
   126                           ;        of conditions and the following disclaimer in the documentation and/or other
   127                           ;        materials provided with the distribution.
   128                           ; 
   129                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   130                           ;        software without specific prior written permission.
   131                           ; 
   132                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   133                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   134                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   135                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   136                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   137                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   138                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   139                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   140                           ; 
   141                           ; 
   142                           ; Code-generator required, PIC18F2550 Definitions
   143                           ; 
   144                           ; SFR Addresses
   145  0000                     
   146                           	psect	idataBANK0
   147  00322C                     __pidataBANK0:
   148                           	opt stack 0
   149                           
   150                           ;initializer for __Digits
   151  00322C  77                 	db	119
   152  00322D  06                 	db	6
   153  00322E  B3                 	db	179
   154  00322F  97                 	db	151
   155  003230  C6                 	db	198
   156  003231  D5                 	db	213
   157  003232  F5                 	db	245
   158  003233  07                 	db	7
   159  003234  F7                 	db	247
   160  003235  D7                 	db	215
   161                           
   162                           	psect	smallconst
   163  000800                     __psmallconst:
   164                           	opt stack 0
   165  000800  00                 	db	0
   166  000801                     exp@coeff:
   167                           	opt stack 0
   168  000801  00                 	db	0
   169  000802  80                 	db	128
   170  000803  3F                 	db	63
   171  000804  72                 	db	114
   172  000805  31                 	db	49
   173  000806  3F                 	db	63
   174  000807  FE                 	db	254
   175  000808  75                 	db	117
   176  000809  3E                 	db	62
   177  00080A  58                 	db	88
   178  00080B  63                 	db	99
   179  00080C  3D                 	db	61
   180  00080D  95                 	db	149
   181  00080E  1D                 	db	29
   182  00080F  3C                 	db	60
   183  000810  C5                 	db	197
   184  000811  AE                 	db	174
   185  000812  3A                 	db	58
   186  000813  79                 	db	121
   187  000814  21                 	db	33
   188  000815  39                 	db	57
   189  000816  94                 	db	148
   190  000817  80                 	db	128
   191  000818  37                 	db	55
   192  000819  93                 	db	147
   193  00081A  A7                 	db	167
   194  00081B  35                 	db	53
   195  00081C  56                 	db	86
   196  00081D  15                 	db	21
   197  00081E  34                 	db	52
   198  00081F                     __end_ofexp@coeff:
   199                           	opt stack 0
   200  00081F                     log@coeff:
   201                           	opt stack 0
   202  00081F  00                 	db	0
   203  000820  00                 	db	0
   204  000821  00                 	db	0
   205  000822  00                 	db	0
   206  000823  80                 	db	128
   207  000824  3F                 	db	63
   208  000825  F0                 	db	240
   209  000826  FF                 	db	255
   210  000827  BE                 	db	190
   211  000828  E2                 	db	226
   212  000829  A9                 	db	169
   213  00082A  3E                 	db	62
   214  00082B  83                 	db	131
   215  00082C  76                 	db	118
   216  00082D  BE                 	db	190
   217  00082E  AE                 	db	174
   218  00082F  2B                 	db	43
   219  000830  3E                 	db	62
   220  000831  3C                 	db	60
   221  000832  C3                 	db	195
   222  000833  BD                 	db	189
   223  000834  D2                 	db	210
   224  000835  13                 	db	19
   225  000836  3D                 	db	61
   226  000837  78                 	db	120
   227  000838  D3                 	db	211
   228  000839  BB                 	db	187
   229  00083A                     __end_oflog@coeff:
   230                           	opt stack 0
   231  0000                     _SSPBUF	set	4041
   232  0000                     _SSPCON2	set	4037
   233  0000                     _SSPADD	set	4040
   234  0000                     _SSPCON1	set	4038
   235  0000                     _SSPSTAT	set	4039
   236  0000                     _PIE1bits	set	3997
   237  0000                     _SPBRG	set	4015
   238  0000                     _TMR1L	set	4046
   239  0000                     _TMR1H	set	4047
   240  0000                     _EECON2	set	4007
   241  0000                     _INTCONbits	set	4082
   242  0000                     _EEDATA	set	4008
   243  0000                     _EECON1bits	set	4006
   244  0000                     _EEADR	set	4009
   245  0000                     _ADCON1	set	4033
   246  0000                     _RCSTAbits	set	4011
   247  0000                     _RCREG	set	4014
   248  0000                     _PIR1bits	set	3998
   249  0000                     _PORTB	set	3969
   250  0000                     _LATC	set	3979
   251  0000                     _LATA	set	3977
   252  0000                     _LATB	set	3978
   253  0000                     _RCEN	set	32299
   254  0000                     _ACKEN	set	32300
   255  0000                     _ACKDT	set	32301
   256  0000                     _PEN	set	32298
   257  0000                     _SEN	set	32296
   258  0000                     _RW	set	32314
   259  0000                     _TRISB1	set	31897
   260  0000                     _TRISB0	set	31896
   261  0000                     _TX9	set	32102
   262  0000                     _TXEN	set	32101
   263  0000                     _RX9	set	32094
   264  0000                     _SPEN	set	32095
   265  0000                     _SYNC	set	32100
   266  0000                     _TRISC6	set	31910
   267  0000                     _TRISC7	set	31911
   268  0000                     _BRGH	set	32098
   269  0000                     _RCIE	set	31981
   270  0000                     _RCIP	set	31997
   271  0000                     _RCIF	set	31989
   272  0000                     _TRISA4	set	31892
   273  0000                     _TRISA3	set	31891
   274  0000                     _TRISA2	set	31890
   275  0000                     _TMR1IE	set	31976
   276  0000                     _TMR1CS	set	32361
   277  0000                     _T1SYNC	set	32362
   278  0000                     _T1OSCEN	set	32363
   279  0000                     _T1CKPS0	set	32364
   280  0000                     _TMR1ON	set	32360
   281  0000                     _TMR0ON	set	32431
   282  0000                     _TMR0IE	set	32661
   283  0000                     _T08BIT	set	32430
   284  0000                     _T0CS	set	32429
   285  0000                     _PSA	set	32427
   286  0000                     _T0PS2	set	32426
   287  0000                     _T0PS1	set	32425
   288  0000                     _T0PS0	set	32424
   289  0000                     _TRISB3	set	31899
   290  0000                     _TRISB2	set	31898
   291  0000                     _TRISB4	set	31900
   292  0000                     _TRISC2	set	31906
   293  0000                     _TRISA5	set	31893
   294  0000                     _GIE	set	32663
   295  0000                     _PEIE	set	32662
   296  0000                     _CREN	set	32092
   297  0000                     _LATB4	set	31828
   298  0000                     _TMR1IF	set	31984
   299  0000                     _TMR0IF	set	32658
   300                           
   301                           ; #config settings
   302  00083A  00                 	db	0	; dummy byte at the end
   303  0000                     
   304                           	psect	cinit
   305  002704                     __pcinit:
   306                           	opt stack 0
   307  002704                     start_initialization:
   308                           	opt stack 0
   309  002704                     __initialization:
   310                           	opt stack 0
   311                           
   312                           ; Initialize objects allocated to BANK0 (10 bytes)
   313                           ; load TBLPTR registers with __pidataBANK0
   314  002704  0E2C               	movlw	low __pidataBANK0
   315  002706  6EF6               	movwf	tblptrl,c
   316  002708  0E32               	movlw	high __pidataBANK0
   317  00270A  6EF7               	movwf	tblptrh,c
   318  00270C  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   319  00270E  6EF8               	movwf	tblptru,c
   320  002710  EE00  F0F2         	lfsr	0,__pdataBANK0
   321  002714  EE10 F00A          	lfsr	1,10
   322  002718                     copy_data0:
   323  002718  0009               	tblrd		*+
   324  00271A  CFF5 FFEE          	movff	tablat,postinc0
   325  00271E  50E5               	movf	postdec1,w,c
   326  002720  50E1               	movf	fsr1l,w,c
   327  002722  E1FA               	bnz	copy_data0
   328                           
   329                           ; Clear objects allocated to BIGRAM (648 bytes)
   330  002724  EE02  F0D9         	lfsr	0,__pbssBIGRAM
   331  002728  EE12 F088          	lfsr	1,648
   332  00272C                     clear_0:
   333  00272C  6AEE               	clrf	postinc0,c
   334  00272E  50E5               	movf	postdec1,w,c
   335  002730  50E1               	movf	fsr1l,w,c
   336  002732  E1FC               	bnz	clear_0
   337  002734  50E2               	movf	fsr1h,w,c
   338  002736  E1FA               	bnz	clear_0
   339                           
   340                           ; Clear objects allocated to BANK2 (217 bytes)
   341  002738  EE02  F000         	lfsr	0,__pbssBANK2
   342  00273C  0ED9               	movlw	217
   343  00273E                     clear_1:
   344  00273E  6AEE               	clrf	postinc0,c
   345  002740  06E8               	decf	wreg,f,c
   346  002742  E1FD               	bnz	clear_1
   347                           
   348                           ; Clear objects allocated to BANK1 (169 bytes)
   349  002744  EE01  F000         	lfsr	0,__pbssBANK1
   350  002748  0EA9               	movlw	169
   351  00274A                     clear_2:
   352  00274A  6AEE               	clrf	postinc0,c
   353  00274C  06E8               	decf	wreg,f,c
   354  00274E  E1FD               	bnz	clear_2
   355                           
   356                           ; Clear objects allocated to BANK0 (19 bytes)
   357  002750  EE00  F0DF         	lfsr	0,__pbssBANK0
   358  002754  0E13               	movlw	19
   359  002756                     clear_3:
   360  002756  6AEE               	clrf	postinc0,c
   361  002758  06E8               	decf	wreg,f,c
   362  00275A  E1FD               	bnz	clear_3
   363                           
   364                           ; Clear objects allocated to COMRAM (6 bytes)
   365  00275C  6A5E               	clrf	(__pbssCOMRAM+5)& (0+255),c
   366  00275E  6A5D               	clrf	(__pbssCOMRAM+4)& (0+255),c
   367  002760  6A5C               	clrf	(__pbssCOMRAM+3)& (0+255),c
   368  002762  6A5B               	clrf	(__pbssCOMRAM+2)& (0+255),c
   369  002764  6A5A               	clrf	(__pbssCOMRAM+1)& (0+255),c
   370  002766  6A59               	clrf	__pbssCOMRAM& (0+255),c
   371  002768                     end_of_initialization:
   372                           	opt stack 0
   373  002768                     __end_of__initialization:
   374                           	opt stack 0
   375  002768  905F               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   376  00276A  925F               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   377  00276C  0E00               	movlw	low (__Lmediumconst shr (0+16))
   378  00276E  6EF8               	movwf	tblptru,c
   379  002770  0100               	movlb	0
   380  002772  EF36  F006         	goto	_main	;jump to C main() function
   381                           tblptru	equ	0xFF8
   382                           tblptrh	equ	0xFF7
   383                           tblptrl	equ	0xFF6
   384                           tablat	equ	0xFF5
   385                           postinc0	equ	0xFEE
   386                           wreg	equ	0xFE8
   387                           postdec1	equ	0xFE5
   388                           fsr1h	equ	0xFE2
   389                           fsr1l	equ	0xFE1
   390                           
   391                           	psect	bssCOMRAM
   392  000059                     __pbssCOMRAM:
   393                           	opt stack 0
   394  000059                     __Timer:
   395                           	opt stack 0
   396  000059                     	ds	6
   397                           tblptru	equ	0xFF8
   398                           tblptrh	equ	0xFF7
   399                           tblptrl	equ	0xFF6
   400                           tablat	equ	0xFF5
   401                           postinc0	equ	0xFEE
   402                           wreg	equ	0xFE8
   403                           postdec1	equ	0xFE5
   404                           fsr1h	equ	0xFE2
   405                           fsr1l	equ	0xFE1
   406                           
   407                           	psect	bssBANK0
   408  0000DF                     __pbssBANK0:
   409                           	opt stack 0
   410  0000DF                     __Saving:
   411                           	opt stack 0
   412  0000DF                     	ds	1
   413  0000E0                     __Modified:
   414                           	opt stack 0
   415  0000E0                     	ds	1
   416  0000E1                     __DigiPot:
   417                           	opt stack 0
   418  0000E1                     	ds	17
   419                           tblptru	equ	0xFF8
   420                           tblptrh	equ	0xFF7
   421                           tblptrl	equ	0xFF6
   422                           tablat	equ	0xFF5
   423                           postinc0	equ	0xFEE
   424                           wreg	equ	0xFE8
   425                           postdec1	equ	0xFE5
   426                           fsr1h	equ	0xFE2
   427                           fsr1l	equ	0xFE1
   428                           
   429                           	psect	dataBANK0
   430  0000F2                     __pdataBANK0:
   431                           	opt stack 0
   432  0000F2                     __Digits:
   433                           	opt stack 0
   434  0000F2                     	ds	10
   435                           tblptru	equ	0xFF8
   436                           tblptrh	equ	0xFF7
   437                           tblptrl	equ	0xFF6
   438                           tablat	equ	0xFF5
   439                           postinc0	equ	0xFEE
   440                           wreg	equ	0xFE8
   441                           postdec1	equ	0xFE5
   442                           fsr1h	equ	0xFE2
   443                           fsr1l	equ	0xFE1
   444                           
   445                           	psect	bssBANK1
   446  000100                     __pbssBANK1:
   447                           	opt stack 0
   448  000100                     __Hub:
   449                           	opt stack 0
   450  000100                     	ds	157
   451  00019D                     __Config:
   452                           	opt stack 0
   453  00019D                     	ds	12
   454                           tblptru	equ	0xFF8
   455                           tblptrh	equ	0xFF7
   456                           tblptrl	equ	0xFF6
   457                           tablat	equ	0xFF5
   458                           postinc0	equ	0xFEE
   459                           wreg	equ	0xFE8
   460                           postdec1	equ	0xFE5
   461                           fsr1h	equ	0xFE2
   462                           fsr1l	equ	0xFE1
   463                           
   464                           	psect	bssBANK2
   465  000200                     __pbssBANK2:
   466                           	opt stack 0
   467  000200                     __Display:
   468                           	opt stack 0
   469  000200                     	ds	217
   470                           tblptru	equ	0xFF8
   471                           tblptrh	equ	0xFF7
   472                           tblptrl	equ	0xFF6
   473                           tablat	equ	0xFF5
   474                           postinc0	equ	0xFEE
   475                           wreg	equ	0xFE8
   476                           postdec1	equ	0xFE5
   477                           fsr1h	equ	0xFE2
   478                           fsr1l	equ	0xFE1
   479                           
   480                           	psect	bssBIGRAM
   481  0002D9                     __pbssBIGRAM:
   482                           	opt stack 0
   483  0002D9                     __MidiOutput:
   484                           	opt stack 0
   485  0002D9                     	ds	324
   486  00041D                     __MidiInput:
   487                           	opt stack 0
   488  00041D                     	ds	324
   489                           tblptru	equ	0xFF8
   490                           tblptrh	equ	0xFF7
   491                           tblptrl	equ	0xFF6
   492                           tablat	equ	0xFF5
   493                           postinc0	equ	0xFEE
   494                           wreg	equ	0xFE8
   495                           postdec1	equ	0xFE5
   496                           fsr1h	equ	0xFE2
   497                           fsr1l	equ	0xFE1
   498                           
   499                           	psect	cstackBANK0
   500  000060                     __pcstackBANK0:
   501                           	opt stack 0
   502  000060                     ??_I2C_Wait:
   503  000060                     ?_memcmp:
   504                           	opt stack 0
   505  000060                     ?___ftpack:
   506                           	opt stack 0
   507  000060                     ?_frexp:
   508                           	opt stack 0
   509  000060                     ?___ftneg:
   510                           	opt stack 0
   511  000060                     ?___lldiv:
   512                           	opt stack 0
   513  000060                     Midi_Read@AData:
   514                           	opt stack 0
   515  000060                     ___lbdiv@divisor:
   516                           	opt stack 0
   517  000060                     Persistant_ReadInternalMemory@AAddress:
   518                           	opt stack 0
   519  000060                     InitPin@APin:
   520                           	opt stack 0
   521  000060                     Midi_ResetBuffer@AMidiBuffer:
   522                           	opt stack 0
   523  000060                     memcmp@s1:
   524                           	opt stack 0
   525  000060                     memcpy@d1:
   526                           	opt stack 0
   527  000060                     ___ftpack@arg:
   528                           	opt stack 0
   529  000060                     ___ftge@ff1:
   530                           	opt stack 0
   531  000060                     ___ftneg@f1:
   532                           	opt stack 0
   533  000060                     frexp@value:
   534                           	opt stack 0
   535  000060                     ___lldiv@dividend:
   536                           	opt stack 0
   537  000060                     LatchOn@AIO:
   538                           	opt stack 0
   539  000060                     LatchOff@AIO:
   540                           	opt stack 0
   541  000060                     ClockUp@AIO:
   542                           	opt stack 0
   543  000060                     ClockDown@AIO:
   544                           	opt stack 0
   545                           
   546                           ; 15 bytes @ 0x0
   547  000060                     	ds	1
   548  000061                     ___lbdiv@dividend:
   549                           	opt stack 0
   550  000061                     Midi_Read@AMidiBuffer:
   551                           	opt stack 0
   552                           
   553                           ; 2 bytes @ 0x1
   554  000061                     	ds	1
   555  000062                     ??_Midi_ResetBuffer:
   556  000062                     ??_InitPin:
   557  000062                     ___lbdiv@counter:
   558                           	opt stack 0
   559  000062                     Persistant_WriteInternalMemory@AAddress:
   560                           	opt stack 0
   561  000062                     I2C_Wait@LTimeOut:
   562                           	opt stack 0
   563  000062                     memcmp@s2:
   564                           	opt stack 0
   565  000062                     memcpy@s1:
   566                           	opt stack 0
   567                           
   568                           ; 2 bytes @ 0x2
   569  000062                     	ds	1
   570  000063                     ___ftpack@exp:
   571                           	opt stack 0
   572  000063                     ___lbdiv@quotient:
   573                           	opt stack 0
   574  000063                     frexp@eptr:
   575                           	opt stack 0
   576  000063                     ___ftge@ff2:
   577                           	opt stack 0
   578                           
   579                           ; 3 bytes @ 0x3
   580  000063                     	ds	1
   581  000064                     ??_frexp:
   582  000064                     Persistant_WriteInternalMemory@AData:
   583                           	opt stack 0
   584  000064                     Midi_ResetBuffer@j:
   585                           	opt stack 0
   586  000064                     I2C_Wait@LResult:
   587                           	opt stack 0
   588  000064                     ___ftpack@sign:
   589                           	opt stack 0
   590  000064                     ___lbmod@divisor:
   591                           	opt stack 0
   592  000064                     InitConnector@AConnector:
   593                           	opt stack 0
   594  000064                     memcmp@n:
   595                           	opt stack 0
   596  000064                     memcpy@n:
   597                           	opt stack 0
   598  000064                     ___lldiv@divisor:
   599                           	opt stack 0
   600                           
   601                           ; 4 bytes @ 0x4
   602  000064                     	ds	1
   603  000065                     ??_I2C_Write:
   604  000065                     ??___ftpack:
   605  000065                     Persistant_WriteInternalMemory@LState:
   606                           	opt stack 0
   607  000065                     Midi_ResetBuffer@i:
   608                           	opt stack 0
   609  000065                     I2C_Ack@AAck:
   610                           	opt stack 0
   611  000065                     ___lbmod@dividend:
   612                           	opt stack 0
   613                           
   614                           ; 1 bytes @ 0x5
   615  000065                     	ds	1
   616  000066                     ??_memcmp:
   617  000066                     ??___ftge:
   618  000066                     I2C_Read@LData:
   619                           	opt stack 0
   620  000066                     ___lbmod@counter:
   621                           	opt stack 0
   622  000066                     memcpy@d:
   623                           	opt stack 0
   624                           
   625                           ; 2 bytes @ 0x6
   626  000066                     	ds	1
   627  000067                     I2C_Write@b:
   628                           	opt stack 0
   629  000067                     ___lbmod@rem:
   630                           	opt stack 0
   631                           
   632                           ; 1 bytes @ 0x7
   633  000067                     	ds	1
   634  000068                     ?___altoft:
   635                           	opt stack 0
   636  000068                     ?___awtoft:
   637                           	opt stack 0
   638  000068                     ?___lbtoft:
   639                           	opt stack 0
   640  000068                     ?___lltoft:
   641                           	opt stack 0
   642  000068                     Display_ProcessData@AValues:
   643                           	opt stack 0
   644  000068                     Persistant_ControlByte@AAddress:
   645                           	opt stack 0
   646  000068                     ___awtoft@c:
   647                           	opt stack 0
   648  000068                     memcpy@s:
   649                           	opt stack 0
   650  000068                     ___altoft@c:
   651                           	opt stack 0
   652  000068                     ___lldiv@quotient:
   653                           	opt stack 0
   654  000068                     ___lltoft@c:
   655                           	opt stack 0
   656                           
   657                           ; 4 bytes @ 0x8
   658  000068                     	ds	2
   659  00006A                     Display_ProcessData@ALoaded:
   660                           	opt stack 0
   661  00006A                     Persistant_ControlByte@ARead:
   662                           	opt stack 0
   663  00006A                     memcpy@tmp:
   664                           	opt stack 0
   665                           
   666                           ; 1 bytes @ 0xA
   667  00006A                     	ds	1
   668  00006B                     ??_Persistant_ControlByte:
   669  00006B                     Display_ProcessData@APushed:
   670                           	opt stack 0
   671  00006B                     ___awtoft@sign:
   672                           	opt stack 0
   673  00006B                     ___lbtoft@c:
   674                           	opt stack 0
   675                           
   676                           ; 1 bytes @ 0xB
   677  00006B                     	ds	1
   678  00006C                     ??_Display_ProcessData:
   679  00006C                     ??___altoft:
   680  00006C                     ??___lltoft:
   681  00006C                     ___lldiv@counter:
   682                           	opt stack 0
   683                           
   684                           ; 1 bytes @ 0xC
   685  00006C                     	ds	1
   686  00006D                     ??_Midi_Init:
   687                           
   688                           ; 1 bytes @ 0xD
   689  00006D                     	ds	1
   690  00006E                     Persistant_Address@AAddress:
   691                           	opt stack 0
   692                           
   693                           ; 2 bytes @ 0xE
   694  00006E                     	ds	1
   695  00006F                     WriteChar@AIO:
   696                           	opt stack 0
   697  00006F                     ReadBit@AIO:
   698                           	opt stack 0
   699                           
   700                           ; 15 bytes @ 0xF
   701  00006F                     	ds	1
   702  000070                     Persistant_Address@ARead:
   703                           	opt stack 0
   704  000070                     ___altoft@exp:
   705                           	opt stack 0
   706  000070                     ___lltoft@exp:
   707                           	opt stack 0
   708                           
   709                           ; 1 bytes @ 0x10
   710  000070                     	ds	1
   711  000071                     ___altoft@sign:
   712                           	opt stack 0
   713  000071                     Persistant_ReadExternalMemory@AAddress:
   714                           	opt stack 0
   715  000071                     Midi_Init@LBaudRate:
   716                           	opt stack 0
   717                           
   718                           ; 4 bytes @ 0x11
   719  000071                     	ds	1
   720  000072                     ?___ftmul:
   721                           	opt stack 0
   722  000072                     ___ftmul@f1:
   723                           	opt stack 0
   724                           
   725                           ; 3 bytes @ 0x12
   726  000072                     	ds	1
   727  000073                     Display_ProcessData@ADigitalValue:
   728                           	opt stack 0
   729  000073                     Persistant_ReadExternalMemory@LResult:
   730                           	opt stack 0
   731                           
   732                           ; 1 bytes @ 0x13
   733  000073                     	ds	1
   734  000074                     Display_ProcessData@LData:
   735                           	opt stack 0
   736  000074                     Persistant_WriteExternalMemory@AAddress:
   737                           	opt stack 0
   738                           
   739                           ; 2 bytes @ 0x14
   740  000074                     	ds	1
   741  000075                     Display_ProcessData@LBit:
   742                           	opt stack 0
   743  000075                     ___ftmul@f2:
   744                           	opt stack 0
   745  000075                     Midi_Init@LPeriod:
   746                           	opt stack 0
   747                           
   748                           ; 4 bytes @ 0x15
   749  000075                     	ds	1
   750  000076                     Display_ProcessData@iDataIndex:
   751                           	opt stack 0
   752  000076                     Persistant_WriteExternalMemory@AData:
   753                           	opt stack 0
   754                           
   755                           ; 1 bytes @ 0x16
   756  000076                     	ds	1
   757  000077                     Display_ProcessData@k:
   758                           	opt stack 0
   759                           
   760                           ; 2 bytes @ 0x17
   761  000077                     	ds	1
   762  000078                     ??___ftmul:
   763                           
   764                           ; 1 bytes @ 0x18
   765  000078                     	ds	1
   766  000079                     Display_ProcessData@i_648:
   767                           	opt stack 0
   768                           
   769                           ; 2 bytes @ 0x19
   770  000079                     	ds	2
   771  00007B                     ___ftmul@exp:
   772                           	opt stack 0
   773  00007B                     Display_ProcessData@i:
   774                           	opt stack 0
   775                           
   776                           ; 2 bytes @ 0x1B
   777  00007B                     	ds	1
   778  00007C                     ___ftmul@sign:
   779                           	opt stack 0
   780                           
   781                           ; 1 bytes @ 0x1C
   782  00007C                     	ds	1
   783  00007D                     Display_ProcessData@i_646:
   784                           	opt stack 0
   785  00007D                     ___ftmul@f3_as_product:
   786                           	opt stack 0
   787                           
   788                           ; 3 bytes @ 0x1D
   789  00007D                     	ds	1
   790  00007E                     ??_WriteChar:
   791  00007E                     ??_ReadBit:
   792                           
   793                           ; 1 bytes @ 0x1E
   794  00007E                     	ds	1
   795  00007F                     Display_ProcessData@j:
   796                           	opt stack 0
   797                           
   798                           ; 2 bytes @ 0x1F
   799  00007F                     	ds	1
   800  000080                     ?___ftdiv:
   801                           	opt stack 0
   802  000080                     ReadBit@LBit:
   803                           	opt stack 0
   804  000080                     ___ftdiv@f1:
   805                           	opt stack 0
   806                           
   807                           ; 3 bytes @ 0x20
   808  000080                     	ds	1
   809  000081                     WriteChar@AChar:
   810                           	opt stack 0
   811  000081                     ReadBitArray@AData:
   812                           	opt stack 0
   813  000081                     Display_ProcessData@i_652:
   814                           	opt stack 0
   815                           
   816                           ; 2 bytes @ 0x21
   817  000081                     	ds	1
   818  000082                     WriteChar@i:
   819                           	opt stack 0
   820  000082                     ReadBitArray@AIO:
   821                           	opt stack 0
   822                           
   823                           ; 15 bytes @ 0x22
   824  000082                     	ds	1
   825  000083                     ___ftdiv@f2:
   826                           	opt stack 0
   827                           
   828                           ; 3 bytes @ 0x23
   829  000083                     	ds	1
   830  000084                     WriteData@AData:
   831                           	opt stack 0
   832                           
   833                           ; 2 bytes @ 0x24
   834  000084                     	ds	2
   835  000086                     ??___ftdiv:
   836  000086                     WriteData@ASize:
   837                           	opt stack 0
   838                           
   839                           ; 1 bytes @ 0x26
   840  000086                     	ds	1
   841  000087                     WriteData@AIO:
   842                           	opt stack 0
   843                           
   844                           ; 15 bytes @ 0x27
   845  000087                     	ds	2
   846  000089                     ___ftdiv@cntr:
   847                           	opt stack 0
   848                           
   849                           ; 1 bytes @ 0x29
   850  000089                     	ds	1
   851  00008A                     ___ftdiv@f3:
   852                           	opt stack 0
   853                           
   854                           ; 3 bytes @ 0x2A
   855  00008A                     	ds	3
   856  00008D                     ___ftdiv@exp:
   857                           	opt stack 0
   858                           
   859                           ; 1 bytes @ 0x2D
   860  00008D                     	ds	1
   861  00008E                     ___ftdiv@sign:
   862                           	opt stack 0
   863                           
   864                           ; 1 bytes @ 0x2E
   865  00008E                     	ds	1
   866  00008F                     ?___ftadd:
   867                           	opt stack 0
   868  00008F                     ?___fttol:
   869                           	opt stack 0
   870  00008F                     ___ftadd@f1:
   871                           	opt stack 0
   872  00008F                     ___fttol@f1:
   873                           	opt stack 0
   874                           
   875                           ; 3 bytes @ 0x2F
   876  00008F                     	ds	2
   877  000091                     ??_ReadBitArray:
   878                           
   879                           ; 1 bytes @ 0x31
   880  000091                     	ds	1
   881  000092                     ReadBitArray@i:
   882                           	opt stack 0
   883  000092                     ___ftadd@f2:
   884                           	opt stack 0
   885                           
   886                           ; 3 bytes @ 0x32
   887  000092                     	ds	1
   888  000093                     ??___fttol:
   889                           
   890                           ; 1 bytes @ 0x33
   891  000093                     	ds	1
   892  000094                     Hub_ReadSwitch@LBitArray:
   893                           	opt stack 0
   894                           
   895                           ; 24 bytes @ 0x34
   896  000094                     	ds	1
   897  000095                     ??___ftadd:
   898                           
   899                           ; 1 bytes @ 0x35
   900  000095                     	ds	1
   901  000096                     WriteData@i:
   902                           	opt stack 0
   903                           
   904                           ; 2 bytes @ 0x36
   905  000096                     	ds	2
   906  000098                     ___ftadd@sign:
   907                           	opt stack 0
   908  000098                     ___fttol@sign1:
   909                           	opt stack 0
   910                           
   911                           ; 1 bytes @ 0x38
   912  000098                     	ds	1
   913  000099                     ___ftadd@exp2:
   914                           	opt stack 0
   915  000099                     ___fttol@lval:
   916                           	opt stack 0
   917                           
   918                           ; 4 bytes @ 0x39
   919  000099                     	ds	1
   920  00009A                     ___ftadd@exp1:
   921                           	opt stack 0
   922                           
   923                           ; 1 bytes @ 0x3A
   924  00009A                     	ds	1
   925  00009B                     ?___ftsub:
   926                           	opt stack 0
   927  00009B                     ?_eval_poly:
   928                           	opt stack 0
   929  00009B                     ___ftsub@f1:
   930                           	opt stack 0
   931  00009B                     eval_poly@x:
   932                           	opt stack 0
   933                           
   934                           ; 3 bytes @ 0x3B
   935  00009B                     	ds	2
   936  00009D                     ___fttol@exp1:
   937                           	opt stack 0
   938                           
   939                           ; 1 bytes @ 0x3D
   940  00009D                     	ds	1
   941  00009E                     ?_floor:
   942                           	opt stack 0
   943  00009E                     Zip@AZip:
   944                           	opt stack 0
   945  00009E                     UnZip@AZip:
   946                           	opt stack 0
   947  00009E                     eval_poly@d:
   948                           	opt stack 0
   949  00009E                     Sequencer_StartTimer@ATime:
   950                           	opt stack 0
   951  00009E                     ___ftsub@f2:
   952                           	opt stack 0
   953  00009E                     floor@x:
   954                           	opt stack 0
   955  00009E                     I2C_Init@AFrequency:
   956                           	opt stack 0
   957                           
   958                           ; 4 bytes @ 0x3E
   959  00009E                     	ds	1
   960  00009F                     ??_Zip:
   961  00009F                     ??_UnZip:
   962  00009F                     eval_poly@n:
   963                           	opt stack 0
   964                           
   965                           ; 2 bytes @ 0x3F
   966  00009F                     	ds	2
   967  0000A1                     ??_eval_poly:
   968  0000A1                     Sequencer_StartTimer@ALoop:
   969                           	opt stack 0
   970  0000A1                     floor@i:
   971                           	opt stack 0
   972                           
   973                           ; 3 bytes @ 0x41
   974  0000A1                     	ds	1
   975  0000A2                     UnZip@LValue:
   976                           	opt stack 0
   977  0000A2                     I2C_Init@LRatio:
   978                           	opt stack 0
   979  0000A2                     eval_poly@res:
   980                           	opt stack 0
   981                           
   982                           ; 3 bytes @ 0x42
   983  0000A2                     	ds	1
   984  0000A3                     UnZip@LIndex:
   985                           	opt stack 0
   986                           
   987                           ; 1 bytes @ 0x43
   988  0000A3                     	ds	1
   989  0000A4                     Zip@LBytes:
   990                           	opt stack 0
   991  0000A4                     UnZip@i:
   992                           	opt stack 0
   993  0000A4                     floor@expon:
   994                           	opt stack 0
   995                           
   996                           ; 2 bytes @ 0x44
   997  0000A4                     	ds	1
   998  0000A5                     ?_log:
   999                           	opt stack 0
  1000  0000A5                     ?_ldexp:
  1001                           	opt stack 0
  1002  0000A5                     Zip@LIndex:
  1003                           	opt stack 0
  1004  0000A5                     ldexp@value:
  1005                           	opt stack 0
  1006  0000A5                     log@x:
  1007                           	opt stack 0
  1008                           
  1009                           ; 3 bytes @ 0x45
  1010  0000A5                     	ds	1
  1011  0000A6                     Zip@i:
  1012                           	opt stack 0
  1013  0000A6                     UnZip@j:
  1014                           	opt stack 0
  1015                           
  1016                           ; 2 bytes @ 0x46
  1017  0000A6                     	ds	2
  1018  0000A8                     Persistant_LoadBuffer@ABuffer:
  1019                           	opt stack 0
  1020  0000A8                     Zip@i_1425:
  1021                           	opt stack 0
  1022  0000A8                     ldexp@newexp:
  1023                           	opt stack 0
  1024  0000A8                     log@exponent:
  1025                           	opt stack 0
  1026                           
  1027                           ; 2 bytes @ 0x48
  1028  0000A8                     	ds	2
  1029  0000AA                     ??_Persistant_LoadBuffer:
  1030  0000AA                     ??_ldexp:
  1031  0000AA                     Zip@j:
  1032                           	opt stack 0
  1033                           
  1034                           ; 2 bytes @ 0x4A
  1035  0000AA                     	ds	2
  1036  0000AC                     ?_exp:
  1037                           	opt stack 0
  1038  0000AC                     Hub_Init@i:
  1039                           	opt stack 0
  1040  0000AC                     exp@x:
  1041                           	opt stack 0
  1042  0000AC                     Persistant_SaveBuffer@ABuffer:
  1043                           	opt stack 0
  1044                           
  1045                           ; 12 bytes @ 0x4C
  1046  0000AC                     	ds	2
  1047  0000AE                     Persistant_LoadBuffer@LZip:
  1048                           	opt stack 0
  1049                           
  1050                           ; 10 bytes @ 0x4E
  1051  0000AE                     	ds	1
  1052  0000AF                     _exp$2168:
  1053                           	opt stack 0
  1054                           
  1055                           ; 3 bytes @ 0x4F
  1056  0000AF                     	ds	3
  1057  0000B2                     exp@exponent:
  1058                           	opt stack 0
  1059                           
  1060                           ; 2 bytes @ 0x52
  1061  0000B2                     	ds	2
  1062  0000B4                     exp@sign:
  1063                           	opt stack 0
  1064                           
  1065                           ; 1 bytes @ 0x54
  1066  0000B4                     	ds	1
  1067  0000B5                     ?_pow:
  1068                           	opt stack 0
  1069  0000B5                     pow@x:
  1070                           	opt stack 0
  1071                           
  1072                           ; 3 bytes @ 0x55
  1073  0000B5                     	ds	3
  1074  0000B8                     ??_Persistant_SaveBuffer:
  1075  0000B8                     Persistant_LoadBuffer@LChannel:
  1076                           	opt stack 0
  1077  0000B8                     pow@y:
  1078                           	opt stack 0
  1079                           
  1080                           ; 3 bytes @ 0x58
  1081  0000B8                     	ds	1
  1082  0000B9                     Persistant_LoadBuffer@i:
  1083                           	opt stack 0
  1084                           
  1085                           ; 1 bytes @ 0x59
  1086  0000B9                     	ds	1
  1087  0000BA                     Load@LBuffer:
  1088                           	opt stack 0
  1089                           
  1090                           ; 12 bytes @ 0x5A
  1091  0000BA                     	ds	1
  1092  0000BB                     Persistant_SaveBuffer@LResult:
  1093                           	opt stack 0
  1094  0000BB                     _pow$2166:
  1095                           	opt stack 0
  1096                           
  1097                           ; 3 bytes @ 0x5B
  1098  0000BB                     	ds	1
  1099  0000BC                     Persistant_SaveBuffer@LZip:
  1100                           	opt stack 0
  1101                           
  1102                           ; 10 bytes @ 0x5C
  1103  0000BC                     	ds	2
  1104  0000BE                     _pow$2167:
  1105                           	opt stack 0
  1106                           
  1107                           ; 3 bytes @ 0x5E
  1108  0000BE                     	ds	3
  1109  0000C1                     pow@sign:
  1110                           	opt stack 0
  1111                           
  1112                           ; 1 bytes @ 0x61
  1113  0000C1                     	ds	1
  1114  0000C2                     pow@yi:
  1115                           	opt stack 0
  1116                           
  1117                           ; 4 bytes @ 0x62
  1118  0000C2                     	ds	4
  1119  0000C6                     Load@AChannel:
  1120                           	opt stack 0
  1121  0000C6                     Persistant_SaveBuffer@i:
  1122                           	opt stack 0
  1123  0000C6                     _Display_Init$2163:
  1124                           	opt stack 0
  1125  0000C6                     InitDigiPot@LTickCount:
  1126                           	opt stack 0
  1127                           
  1128                           ; 4 bytes @ 0x66
  1129  0000C6                     	ds	1
  1130  0000C7                     Load@i:
  1131                           	opt stack 0
  1132                           
  1133                           ; 2 bytes @ 0x67
  1134  0000C7                     	ds	2
  1135  0000C9                     Load@i_420:
  1136                           	opt stack 0
  1137  0000C9                     _Display_Init$2164:
  1138                           	opt stack 0
  1139                           
  1140                           ; 3 bytes @ 0x69
  1141  0000C9                     	ds	1
  1142  0000CA                     InitDigiPot@LPeriod:
  1143                           	opt stack 0
  1144                           
  1145                           ; 3 bytes @ 0x6A
  1146  0000CA                     	ds	2
  1147  0000CC                     Display_Init@i:
  1148                           	opt stack 0
  1149                           
  1150                           ; 2 bytes @ 0x6C
  1151  0000CC                     	ds	1
  1152  0000CD                     _InitDigiPot$2165:
  1153                           	opt stack 0
  1154                           
  1155                           ; 3 bytes @ 0x6D
  1156  0000CD                     	ds	1
  1157  0000CE                     Display_Init@i_638:
  1158                           	opt stack 0
  1159                           
  1160                           ; 2 bytes @ 0x6E
  1161  0000CE                     	ds	2
  1162  0000D0                     InitDigiPot@LPrescaler:
  1163                           	opt stack 0
  1164                           
  1165                           ; 1 bytes @ 0x70
  1166  0000D0                     	ds	1
  1167  0000D1                     InitApp@test:
  1168                           	opt stack 0
  1169                           
  1170                           ; 1 bytes @ 0x71
  1171  0000D1                     	ds	1
  1172  0000D2                     main@LResult:
  1173                           	opt stack 0
  1174                           
  1175                           ; 2 bytes @ 0x72
  1176  0000D2                     	ds	2
  1177  0000D4                     _main$441:
  1178                           	opt stack 0
  1179                           
  1180                           ; 2 bytes @ 0x74
  1181  0000D4                     	ds	2
  1182  0000D6                     main@LChannelSwitchOld:
  1183                           	opt stack 0
  1184                           
  1185                           ; 1 bytes @ 0x76
  1186  0000D6                     	ds	1
  1187  0000D7                     main@LEncSwitchPushed:
  1188                           	opt stack 0
  1189                           
  1190                           ; 1 bytes @ 0x77
  1191  0000D7                     	ds	1
  1192  0000D8                     main@LChannelSwitch:
  1193                           	opt stack 0
  1194                           
  1195                           ; 1 bytes @ 0x78
  1196  0000D8                     	ds	1
  1197  0000D9                     main@LValue:
  1198                           	opt stack 0
  1199                           
  1200                           ; 1 bytes @ 0x79
  1201  0000D9                     	ds	1
  1202  0000DA                     main@LMidiData:
  1203                           	opt stack 0
  1204                           
  1205                           ; 5 bytes @ 0x7A
  1206  0000DA                     	ds	5
  1207                           tblptru	equ	0xFF8
  1208                           tblptrh	equ	0xFF7
  1209                           tblptrl	equ	0xFF6
  1210                           tablat	equ	0xFF5
  1211                           postinc0	equ	0xFEE
  1212                           wreg	equ	0xFE8
  1213                           postdec1	equ	0xFE5
  1214                           fsr1h	equ	0xFE2
  1215                           fsr1l	equ	0xFE1
  1216                           
  1217                           	psect	cstackCOMRAM
  1218  000001                     __pcstackCOMRAM:
  1219                           	opt stack 0
  1220  000001                     Hub_DecodeSwitch@AIndex2:
  1221                           	opt stack 0
  1222  000001                     Display_SwapBuffer@LSwap:
  1223                           	opt stack 0
  1224  000001                     Midi_Write@AMidiBuffer:
  1225                           	opt stack 0
  1226  000001                     i2Midi_ResetBuffer@AMidiBuffer:
  1227                           	opt stack 0
  1228  000001                     i2memcpy@d1:
  1229                           	opt stack 0
  1230  000001                     i2LatchOn@AIO:
  1231                           	opt stack 0
  1232  000001                     i2LatchOff@AIO:
  1233                           	opt stack 0
  1234  000001                     i2ClockUp@AIO:
  1235                           	opt stack 0
  1236  000001                     i2ClockDown@AIO:
  1237                           	opt stack 0
  1238                           
  1239                           ; 15 bytes @ 0x0
  1240  000001                     	ds	1
  1241  000002                     ??_Hub_DecodeSwitch:
  1242                           
  1243                           ; 1 bytes @ 0x1
  1244  000002                     	ds	1
  1245  000003                     ??_Midi_Write:
  1246  000003                     ??i2_Midi_ResetBuffer:
  1247  000003                     i2memcpy@s1:
  1248                           	opt stack 0
  1249                           
  1250                           ; 2 bytes @ 0x2
  1251  000003                     	ds	1
  1252  000004                     Hub_DecodeSwitch@AIndex1:
  1253                           	opt stack 0
  1254                           
  1255                           ; 1 bytes @ 0x3
  1256  000004                     	ds	1
  1257  000005                     i2Midi_ResetBuffer@j:
  1258                           	opt stack 0
  1259  000005                     Hub_SetValue@ASourceValue:
  1260                           	opt stack 0
  1261  000005                     i2memcpy@n:
  1262                           	opt stack 0
  1263                           
  1264                           ; 2 bytes @ 0x4
  1265  000005                     	ds	1
  1266  000006                     i2Midi_ResetBuffer@i:
  1267                           	opt stack 0
  1268                           
  1269                           ; 1 bytes @ 0x5
  1270  000006                     	ds	1
  1271  000007                     Hub_SetValue@AMinValue:
  1272                           	opt stack 0
  1273  000007                     Midi_Write@AData:
  1274                           	opt stack 0
  1275  000007                     i2memcpy@d:
  1276                           	opt stack 0
  1277                           
  1278                           ; 2 bytes @ 0x6
  1279  000007                     	ds	1
  1280  000008                     Hub_SetValue@AMaxValue:
  1281                           	opt stack 0
  1282                           
  1283                           ; 2 bytes @ 0x7
  1284  000008                     	ds	1
  1285  000009                     i2memcpy@s:
  1286                           	opt stack 0
  1287                           
  1288                           ; 2 bytes @ 0x8
  1289  000009                     	ds	1
  1290  00000A                     Hub_SetValue@AIncrement:
  1291                           	opt stack 0
  1292                           
  1293                           ; 1 bytes @ 0x9
  1294  00000A                     	ds	1
  1295  00000B                     ??_Hub_SetValue:
  1296  00000B                     i2memcpy@tmp:
  1297                           	opt stack 0
  1298                           
  1299                           ; 1 bytes @ 0xA
  1300  00000B                     	ds	1
  1301  00000C                     Hub_SetValue@LValue:
  1302                           	opt stack 0
  1303                           
  1304                           ; 2 bytes @ 0xB
  1305  00000C                     	ds	4
  1306  000010                     i2WriteChar@AIO:
  1307                           	opt stack 0
  1308  000010                     i2ReadBit@AIO:
  1309                           	opt stack 0
  1310                           
  1311                           ; 15 bytes @ 0xF
  1312  000010                     	ds	15
  1313  00001F                     ??i2_WriteChar:
  1314  00001F                     ??i2_ReadBit:
  1315                           
  1316                           ; 1 bytes @ 0x1E
  1317  00001F                     	ds	2
  1318  000021                     i2ReadBit@LBit:
  1319                           	opt stack 0
  1320                           
  1321                           ; 1 bytes @ 0x20
  1322  000021                     	ds	1
  1323  000022                     i2WriteChar@AChar:
  1324                           	opt stack 0
  1325  000022                     i2ReadBitArray@AData:
  1326                           	opt stack 0
  1327                           
  1328                           ; 1 bytes @ 0x21
  1329  000022                     	ds	1
  1330  000023                     i2WriteChar@i:
  1331                           	opt stack 0
  1332  000023                     i2ReadBitArray@AIO:
  1333                           	opt stack 0
  1334                           
  1335                           ; 15 bytes @ 0x22
  1336  000023                     	ds	2
  1337  000025                     i2WriteData@AData:
  1338                           	opt stack 0
  1339                           
  1340                           ; 2 bytes @ 0x24
  1341  000025                     	ds	2
  1342  000027                     i2WriteData@ASize:
  1343                           	opt stack 0
  1344                           
  1345                           ; 1 bytes @ 0x26
  1346  000027                     	ds	1
  1347  000028                     i2WriteData@AIO:
  1348                           	opt stack 0
  1349                           
  1350                           ; 15 bytes @ 0x27
  1351  000028                     	ds	10
  1352  000032                     ??i2_ReadBitArray:
  1353                           
  1354                           ; 1 bytes @ 0x31
  1355  000032                     	ds	1
  1356  000033                     i2ReadBitArray@i:
  1357                           	opt stack 0
  1358                           
  1359                           ; 2 bytes @ 0x32
  1360  000033                     	ds	2
  1361  000035                     i2Hub_ReadSwitch@LBitArray:
  1362                           	opt stack 0
  1363                           
  1364                           ; 24 bytes @ 0x34
  1365  000035                     	ds	2
  1366  000037                     i2WriteData@i:
  1367                           	opt stack 0
  1368                           
  1369                           ; 2 bytes @ 0x36
  1370  000037                     	ds	22
  1371  00004D                     Hub_UpdateValues@i:
  1372                           	opt stack 0
  1373                           
  1374                           ; 2 bytes @ 0x4C
  1375  00004D                     	ds	2
  1376  00004F                     ??_Interrupt:
  1377                           
  1378                           ; 1 bytes @ 0x4E
  1379  00004F                     	ds	9
  1380  000058                     Interrupt@LData:
  1381                           	opt stack 0
  1382                           
  1383                           ; 1 bytes @ 0x57
  1384  000058                     	ds	1
  1385                           tblptru	equ	0xFF8
  1386                           tblptrh	equ	0xFF7
  1387                           tblptrl	equ	0xFF6
  1388                           tablat	equ	0xFF5
  1389                           postinc0	equ	0xFEE
  1390                           wreg	equ	0xFE8
  1391                           postdec1	equ	0xFE5
  1392                           fsr1h	equ	0xFE2
  1393                           fsr1l	equ	0xFE1
  1394                           
  1395 ;;
  1396 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  1397 ;;
  1398 ;; *************** function _main *****************
  1399 ;; Defined at:
  1400 ;;		line 150 in file "main.c"
  1401 ;; Parameters:    Size  Location     Type
  1402 ;;		None
  1403 ;; Auto vars:     Size  Location     Type
  1404 ;;  LValue          1  121[BANK0 ] unsigned char 
  1405 ;;  LMidiData       5  122[BANK0 ] struct .
  1406 ;;  LResult         2  114[BANK0 ] int 
  1407 ;;  LChannelSwit    1  120[BANK0 ] unsigned char 
  1408 ;;  LEncSwitchPu    1  119[BANK0 ] unsigned char 
  1409 ;;  LChannelSwit    1  118[BANK0 ] unsigned char 
  1410 ;; Return value:  Size  Location     Type
  1411 ;;                  1    wreg      void 
  1412 ;; Registers used:
  1413 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1414 ;; Tracked objects:
  1415 ;;		On entry : 0/0
  1416 ;;		On exit  : 3F/0
  1417 ;;		Unchanged: 0/0
  1418 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1419 ;;      Params:         0       0       0       0       0       0       0       0       0
  1420 ;;      Locals:         0      13       0       0       0       0       0       0       0
  1421 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1422 ;;      Totals:         0      13       0       0       0       0       0       0       0
  1423 ;;Total ram usage:       13 bytes
  1424 ;; Hardware stack levels required when called:   13
  1425 ;; This function calls:
  1426 ;;		_ConfigureOscillator
  1427 ;;		_Display_ProcessData
  1428 ;;		_InitApp
  1429 ;;		_Load
  1430 ;;		_Midi_Read
  1431 ;;		_PauseHub
  1432 ;;		_Persistant_SaveBuffer
  1433 ;;		_RunHub
  1434 ;;		_Sequencer_StartTimer
  1435 ;;		_Sequencer_StopTimer
  1436 ;;		_WriteData
  1437 ;;		_memcmp
  1438 ;; This function is called by:
  1439 ;;		Startup code after reset
  1440 ;; This function uses a non-reentrant model
  1441 ;;
  1442                           
  1443                           	psect	text0
  1444  000C6C                     __ptext0:
  1445                           	opt stack 0
  1446  000C6C                     _main:
  1447                           	opt stack 18
  1448                           
  1449                           ;main.c: 153: ConfigureOscillator();
  1450                           
  1451                           ;incstack = 0
  1452  000C6C  EC28  F019         	call	_ConfigureOscillator	;wreg free
  1453                           
  1454                           ;main.c: 156: InitApp();
  1455  000C70  ECBB  F013         	call	_InitApp	;wreg free
  1456                           
  1457                           ; BSR set to: 0
  1458                           ;main.c: 160: bool LEncSwitchPushed = 0;
  1459  000C74  6BD7               	clrf	main@LEncSwitchPushed& (0+255),b
  1460                           
  1461                           ; BSR set to: 0
  1462                           ;main.c: 161: bool LChannelSwitch;
  1463                           ;main.c: 162: bool LChannelSwitchOld = _Hub.SecondaryBuffer.ActionButton;
  1464  000C76  C16E  F0D6         	movff	__Hub+110,main@LChannelSwitchOld
  1465  000C7A                     l4744:
  1466                           
  1467                           ; BSR set to: 0
  1468                           ;main.c: 164: {
  1469                           ;main.c: 165: _Hub.ReadyToWrite = 1;
  1470  000C7A  0E01               	movlw	1
  1471  000C7C  0101               	movlb	1	; () banked
  1472  000C7E  6F86               	movwf	(__Hub+134)& (0+255),b
  1473  000C80                     l4746:
  1474                           
  1475                           ; BSR set to: 1
  1476  000C80  5186               	movf	(__Hub+134)& (0+255),w,b
  1477  000C82  E1FE               	bnz	l4746
  1478                           
  1479                           ; BSR set to: 1
  1480                           ;main.c: 168: LChannelSwitch = _Hub.SecondaryBuffer.ActionButton;
  1481  000C84  C16E  F0D8         	movff	__Hub+110,main@LChannelSwitch
  1482                           
  1483                           ; BSR set to: 1
  1484                           ;main.c: 170: if (LChannelSwitch != LChannelSwitchOld)
  1485  000C88  0100               	movlb	0	; () banked
  1486  000C8A  51D6               	movf	main@LChannelSwitchOld& (0+255),w,b
  1487  000C8C  19D8               	xorwf	main@LChannelSwitch& (0+255),w,b
  1488  000C8E  E12F               	bnz	l4782
  1489  000C90  D033               	goto	l4784
  1490  000C92                     l4752:
  1491                           
  1492                           ; BSR set to: 0
  1493                           ;main.c: 175: Sequencer_StopTimer();
  1494  000C92  EC20  F019         	call	_Sequencer_StopTimer	;wreg free
  1495                           
  1496                           ;main.c: 176: if (_Saving)
  1497  000C96  0100               	movlb	0	; () banked
  1498  000C98  51DF               	movf	__Saving& (0+255),w,b
  1499  000C9A  E010               	bz	l4764
  1500                           
  1501                           ; BSR set to: 0
  1502                           ;main.c: 177: {
  1503                           ;main.c: 179: Persistant_SaveBuffer(_Hub.SecondaryBuffer);
  1504  000C9C  EE21  F06E         	lfsr	2,__Hub+110
  1505  000CA0  EE00  F0AC         	lfsr	0,Persistant_SaveBuffer@ABuffer
  1506  000CA4  0E0B               	movlw	11
  1507  000CA6                     u5161:
  1508  000CA6  CFDB FFEB          	movff	plusw2,plusw0
  1509  000CAA  06E8               	decf	wreg,f,c
  1510  000CAC  E2FC               	bc	u5161
  1511  000CAE  EC0C  F013         	call	_Persistant_SaveBuffer	;wreg free
  1512                           
  1513                           ; BSR set to: 0
  1514                           ;main.c: 182: _Modified = 0;
  1515  000CB2  6BE0               	clrf	__Modified& (0+255),b
  1516                           
  1517                           ; BSR set to: 0
  1518                           ;main.c: 183: _Saving = 0;
  1519  000CB4  6BDF               	clrf	__Saving& (0+255),b
  1520                           
  1521                           ; BSR set to: 0
  1522                           ;main.c: 184: _Display.SavingMask = 0xFF;
  1523  000CB6  0102               	movlb	2	; () banked
  1524  000CB8  69C7               	setf	(__Display+199)& (0+255),b
  1525                           
  1526                           ;main.c: 185: }
  1527  000CBA  D033               	goto	l4796
  1528  000CBC                     l4764:
  1529                           
  1530                           ; BSR set to: 0
  1531                           ;main.c: 186: else
  1532                           ;main.c: 187: {
  1533                           ;main.c: 189: LEncSwitchPushed = 1;
  1534  000CBC  0E01               	movlw	1
  1535  000CBE  6FD7               	movwf	main@LEncSwitchPushed& (0+255),b
  1536                           
  1537                           ; BSR set to: 0
  1538                           ;main.c: 190: Sequencer_StartTimer(2.0f, 0);
  1539  000CC0  6B9E               	clrf	Sequencer_StartTimer@ATime& (0+255),b
  1540  000CC2  6B9F               	clrf	(Sequencer_StartTimer@ATime+1)& (0+255),b
  1541  000CC4  0E40               	movlw	64
  1542  000CC6  6FA0               	movwf	(Sequencer_StartTimer@ATime+2)& (0+255),b
  1543  000CC8  6BA1               	clrf	Sequencer_StartTimer@ALoop& (0+255),b
  1544  000CCA  ECF7  F015         	call	_Sequencer_StartTimer	;wreg free
  1545  000CCE  D029               	goto	l4796
  1546  000CD0                     l134:
  1547                           
  1548                           ; BSR set to: 0
  1549                           ;main.c: 194: LEncSwitchPushed = 0;
  1550  000CD0  6BD7               	clrf	main@LEncSwitchPushed& (0+255),b
  1551                           
  1552                           ; BSR set to: 0
  1553                           ;main.c: 195: if (!_Saving && !_Timer.Elapsed)
  1554  000CD2  51DF               	movf	__Saving& (0+255),w,b
  1555  000CD4  E126               	bnz	l4796
  1556                           
  1557                           ; BSR set to: 0
  1558  000CD6  5059               	movf	__Timer,w,c
  1559  000CD8  E124               	bnz	l4796
  1560                           
  1561                           ; BSR set to: 0
  1562                           ;main.c: 196: {
  1563                           ;main.c: 198: Sequencer_StopTimer();
  1564  000CDA  EC20  F019         	call	_Sequencer_StopTimer	;wreg free
  1565                           
  1566                           ;main.c: 199: PauseHub();
  1567  000CDE  EC1B  F019         	call	_PauseHub	;wreg free
  1568                           
  1569                           ; BSR set to: 1
  1570                           ;main.c: 200: Load(_Hub.PrimaryBuffer.Channel);
  1571  000CE2  5164               	movf	(__Hub+100)& (0+255),w,b
  1572  000CE4  EC7E  F011         	call	_Load
  1573                           
  1574                           ; BSR set to: 0
  1575                           ;main.c: 201: RunHub();
  1576  000CE8  ECC0  F018         	call	_RunHub	;wreg free
  1577  000CEC  D01A               	goto	l4796
  1578  000CEE                     l4782:
  1579                           
  1580                           ; BSR set to: 0
  1581  000CEE  51D8               	movf	main@LChannelSwitch& (0+255),w,b
  1582                           
  1583                           ; Switch size 1, requested type "speed"
  1584                           ; Number of cases is 2, Range of values is 0 to 1
  1585                           ; switch strategies available:
  1586                           ; Name         Instructions Cycles
  1587                           ; simple_byte            7     4 (average)
  1588                           ;	Chosen strategy is simple_byte
  1589  000CF0  E0D0               	bz	l4752
  1590  000CF2  0A01               	xorlw	1	; case 1
  1591  000CF4  E0ED               	bz	l134
  1592  000CF6  D015               	goto	l4796
  1593  000CF8                     l4784:
  1594                           
  1595                           ; BSR set to: 0
  1596                           ;main.c: 206: else
  1597                           ;main.c: 207: {
  1598                           ;main.c: 209: if (LEncSwitchPushed && _Timer.Elapsed && !_Saving)
  1599  000CF8  51D7               	movf	main@LEncSwitchPushed& (0+255),w,b
  1600  000CFA  E013               	bz	l4796
  1601                           
  1602                           ; BSR set to: 0
  1603  000CFC  5059               	movf	__Timer,w,c
  1604  000CFE  E011               	bz	l4796
  1605                           
  1606                           ; BSR set to: 0
  1607  000D00  51DF               	movf	__Saving& (0+255),w,b
  1608  000D02  E10F               	bnz	l4796
  1609                           
  1610                           ; BSR set to: 0
  1611                           ;main.c: 210: {
  1612                           ;main.c: 211: Sequencer_StopTimer();
  1613  000D04  EC20  F019         	call	_Sequencer_StopTimer	;wreg free
  1614                           
  1615                           ;main.c: 212: _Saving = 1;
  1616  000D08  0E01               	movlw	1
  1617  000D0A  0100               	movlb	0	; () banked
  1618  000D0C  6FDF               	movwf	__Saving& (0+255),b
  1619                           
  1620                           ; BSR set to: 0
  1621                           ;main.c: 213: Sequencer_StartTimer(0.3f, 1);
  1622  000D0E  0E9A               	movlw	154
  1623  000D10  6F9E               	movwf	Sequencer_StartTimer@ATime& (0+255),b
  1624  000D12  0E99               	movlw	153
  1625  000D14  6F9F               	movwf	(Sequencer_StartTimer@ATime+1)& (0+255),b
  1626  000D16  0E3E               	movlw	62
  1627  000D18  6FA0               	movwf	(Sequencer_StartTimer@ATime+2)& (0+255),b
  1628  000D1A  0E01               	movlw	1
  1629  000D1C  6FA1               	movwf	Sequencer_StartTimer@ALoop& (0+255),b
  1630  000D1E  ECF7  F015         	call	_Sequencer_StartTimer	;wreg free
  1631  000D22                     l4796:
  1632                           
  1633                           ;main.c: 214: }
  1634                           ;main.c: 215: }
  1635                           ;main.c: 217: MidiData LMidiData;
  1636                           ;main.c: 218: if (Midi_Read(&LMidiData, &_MidiInput))
  1637  000D22  0EDA               	movlw	low main@LMidiData
  1638  000D24  0100               	movlb	0	; () banked
  1639  000D26  6F60               	movwf	Midi_Read@AData& (0+255),b
  1640  000D28  0E1D               	movlw	low __MidiInput
  1641  000D2A  6F61               	movwf	Midi_Read@AMidiBuffer& (0+255),b
  1642  000D2C  0E04               	movlw	high __MidiInput
  1643  000D2E  6F62               	movwf	(Midi_Read@AMidiBuffer+1)& (0+255),b
  1644  000D30  ECCE  F012         	call	_Midi_Read	;wreg free
  1645  000D34  0900               	iorlw	0
  1646  000D36  E02E               	bz	l4814
  1647                           
  1648                           ; BSR set to: 0
  1649                           ;main.c: 219: {
  1650                           ;main.c: 220: PauseHub();
  1651  000D38  EC1B  F019         	call	_PauseHub	;wreg free
  1652                           
  1653                           ;main.c: 221: switch(LMidiData.Code)
  1654  000D3C  D023               	goto	l4810
  1655  000D3E                     l4800:
  1656                           
  1657                           ; BSR set to: 0
  1658                           ;main.c: 224: Load(LMidiData.Data[0]);
  1659  000D3E  51DC               	movf	(main@LMidiData+2)& (0+255),w,b
  1660  000D40  EC7E  F011         	call	_Load
  1661                           
  1662                           ;main.c: 225: break;
  1663  000D44  D025               	goto	l4812
  1664  000D46                     l4802:
  1665                           
  1666                           ; BSR set to: 0
  1667                           ;main.c: 227: {
  1668                           ;main.c: 228: unsigned char LValue = LMidiData.Data[1] / 2;
  1669  000D46  90D8               	bcf	status,0,c
  1670  000D48  31DD               	rrcf	(main@LMidiData+3)& (0+255),w,b
  1671  000D4A  6FD9               	movwf	main@LValue& (0+255),b
  1672                           
  1673                           ;main.c: 229: switch(LMidiData.Data[0])
  1674  000D4C  D00F               	goto	l4806
  1675  000D4E                     l144:
  1676                           
  1677                           ; BSR set to: 0
  1678                           ;main.c: 232: _Hub.PrimaryBuffer.Values[4] = LValue;
  1679  000D4E  C0D9  F16A         	movff	main@LValue,__Hub+106
  1680                           
  1681                           ;main.c: 233: break;
  1682  000D52  D01E               	goto	l4812
  1683  000D54                     l146:
  1684                           
  1685                           ; BSR set to: 0
  1686                           ;main.c: 235: _Hub.PrimaryBuffer.Values[0] = LValue;
  1687  000D54  C0D9  F166         	movff	main@LValue,__Hub+102
  1688                           
  1689                           ;main.c: 236: break;
  1690  000D58  D01B               	goto	l4812
  1691  000D5A                     l147:
  1692                           
  1693                           ; BSR set to: 0
  1694                           ;main.c: 238: _Hub.PrimaryBuffer.Values[1] = LValue;
  1695  000D5A  C0D9  F167         	movff	main@LValue,__Hub+103
  1696                           
  1697                           ;main.c: 239: break;
  1698  000D5E  D018               	goto	l4812
  1699  000D60                     l148:
  1700                           
  1701                           ; BSR set to: 0
  1702                           ;main.c: 241: _Hub.PrimaryBuffer.Values[2] = LValue;
  1703  000D60  C0D9  F168         	movff	main@LValue,__Hub+104
  1704                           
  1705                           ;main.c: 242: break;
  1706  000D64  D015               	goto	l4812
  1707  000D66                     l149:
  1708                           
  1709                           ; BSR set to: 0
  1710                           ;main.c: 244: _Hub.PrimaryBuffer.Values[3] = LValue;
  1711  000D66  C0D9  F169         	movff	main@LValue,__Hub+105
  1712                           
  1713                           ;main.c: 245: break;
  1714  000D6A  D012               	goto	l4812
  1715  000D6C                     l4806:
  1716                           
  1717                           ; BSR set to: 0
  1718  000D6C  51DC               	movf	(main@LMidiData+2)& (0+255),w,b
  1719                           
  1720                           ; Switch size 1, requested type "speed"
  1721                           ; Number of cases is 5, Range of values is 7 to 78
  1722                           ; switch strategies available:
  1723                           ; Name         Instructions Cycles
  1724                           ; simple_byte           16     9 (average)
  1725                           ;	Chosen strategy is simple_byte
  1726  000D6E  0A07               	xorlw	7	; case 7
  1727  000D70  E0EE               	bz	l144
  1728  000D72  0A4C               	xorlw	76	; case 75
  1729  000D74  E0EF               	bz	l146
  1730  000D76  0A07               	xorlw	7	; case 76
  1731  000D78  E0F0               	bz	l147
  1732  000D7A  0A01               	xorlw	1	; case 77
  1733  000D7C  E0F1               	bz	l148
  1734  000D7E  0A03               	xorlw	3	; case 78
  1735  000D80  E0F2               	bz	l149
  1736  000D82  D006               	goto	l4812
  1737  000D84                     l4810:
  1738                           
  1739                           ; BSR set to: 1
  1740  000D84  0100               	movlb	0	; () banked
  1741  000D86  51DA               	movf	main@LMidiData& (0+255),w,b
  1742                           
  1743                           ; Switch size 1, requested type "speed"
  1744                           ; Number of cases is 2, Range of values is 176 to 192
  1745                           ; switch strategies available:
  1746                           ; Name         Instructions Cycles
  1747                           ; simple_byte            7     4 (average)
  1748                           ;	Chosen strategy is simple_byte
  1749  000D88  0AB0               	xorlw	176	; case 176
  1750  000D8A  E0DD               	bz	l4802
  1751  000D8C  0A70               	xorlw	112	; case 192
  1752  000D8E  E0D7               	bz	l4800
  1753  000D90                     l4812:
  1754                           
  1755                           ; BSR set to: 0
  1756                           ;main.c: 250: RunHub();
  1757  000D90  ECC0  F018         	call	_RunHub	;wreg free
  1758  000D94                     l4814:
  1759                           
  1760                           ;main.c: 251: }
  1761                           ;main.c: 257: signed int LResult = memcmp(_Hub.SecondaryBuffer.Values, _Hub.BackupBuffer
      +                          .Values, sizeof(_Hub.SecondaryBuffer.Values));
  1762  000D94  0E72               	movlw	low (__Hub+114)
  1763  000D96  0100               	movlb	0	; () banked
  1764  000D98  6F60               	movwf	memcmp@s1& (0+255),b
  1765  000D9A  0E01               	movlw	high (__Hub+114)
  1766  000D9C  6F61               	movwf	(memcmp@s1+1)& (0+255),b
  1767  000D9E  0E7E               	movlw	low (__Hub+126)
  1768  000DA0  6F62               	movwf	memcmp@s2& (0+255),b
  1769  000DA2  0E01               	movlw	high (__Hub+126)
  1770  000DA4  6F63               	movwf	(memcmp@s2+1)& (0+255),b
  1771  000DA6  6B65               	clrf	(memcmp@n+1)& (0+255),b
  1772  000DA8  0E08               	movlw	8
  1773  000DAA  6F64               	movwf	memcmp@n& (0+255),b
  1774  000DAC  EC51  F015         	call	_memcmp	;wreg free
  1775  000DB0  C060  F0D2         	movff	?_memcmp,main@LResult
  1776  000DB4  C061  F0D3         	movff	?_memcmp+1,main@LResult+1
  1777                           
  1778                           ; BSR set to: 0
  1779                           ;main.c: 259: if (!_Modified && (2 > 1) && ((LResult != 0) || (_Hub.SecondaryBuffer.Push
      +                          edButton != _Hub.BackupBuffer.PushedButton)))
  1780  000DB8  51E0               	movf	__Modified& (0+255),w,b
  1781  000DBA  E11A               	bnz	l4830
  1782                           
  1783                           ; BSR set to: 0
  1784  000DBC  51D2               	movf	main@LResult& (0+255),w,b
  1785  000DBE  11D3               	iorwf	(main@LResult+1)& (0+255),w,b
  1786  000DC0  E104               	bnz	u5250
  1787                           
  1788                           ; BSR set to: 0
  1789  000DC2  0101               	movlb	1	; () banked
  1790  000DC4  517B               	movf	(__Hub+123)& (0+255),w,b
  1791  000DC6  196F               	xorwf	(__Hub+111)& (0+255),w,b
  1792  000DC8  E013               	bz	l4830
  1793  000DCA                     u5250:
  1794                           
  1795                           ;main.c: 260: {
  1796                           ;main.c: 261: Sequencer_StopTimer();
  1797  000DCA  EC20  F019         	call	_Sequencer_StopTimer	;wreg free
  1798                           
  1799                           ;main.c: 262: _Modified = 1;
  1800  000DCE  0E01               	movlw	1
  1801  000DD0  0100               	movlb	0	; () banked
  1802  000DD2  6FE0               	movwf	__Modified& (0+255),b
  1803                           
  1804                           ; BSR set to: 0
  1805                           ;main.c: 263: _Display.PointMask[1] = 0x08;
  1806  000DD4  0E08               	movlw	8
  1807  000DD6  0102               	movlb	2	; () banked
  1808  000DD8  6FC9               	movwf	(__Display+201)& (0+255),b
  1809                           
  1810                           ; BSR set to: 2
  1811                           ;main.c: 264: Sequencer_StartTimer(0.3f, 1);
  1812  000DDA  0E9A               	movlw	154
  1813  000DDC  0100               	movlb	0	; () banked
  1814  000DDE  6F9E               	movwf	Sequencer_StartTimer@ATime& (0+255),b
  1815  000DE0  0E99               	movlw	153
  1816  000DE2  6F9F               	movwf	(Sequencer_StartTimer@ATime+1)& (0+255),b
  1817  000DE4  0E3E               	movlw	62
  1818  000DE6  6FA0               	movwf	(Sequencer_StartTimer@ATime+2)& (0+255),b
  1819  000DE8  0E01               	movlw	1
  1820  000DEA  6FA1               	movwf	Sequencer_StartTimer@ALoop& (0+255),b
  1821  000DEC  ECF7  F015         	call	_Sequencer_StartTimer	;wreg free
  1822  000DF0                     l4830:
  1823                           
  1824                           ;main.c: 265: }
  1825                           ;main.c: 267: Display_ProcessData(_Hub.SecondaryBuffer.PushedButton ? _Hub.SecondaryBuff
      +                          er.Sound : _Hub.SecondaryBuffer.Channel, _Hub.SecondaryBuffer.Values, _Hub.CurrentChanne
      +                          l == _Hub.SecondaryBuffer.Channel, _Hub.SecondaryBuffer.PushedButton);
  1826  000DF0  0101               	movlb	1	; () banked
  1827  000DF2  516F               	movf	(__Hub+111)& (0+255),w,b
  1828  000DF4  E103               	bnz	l154
  1829                           
  1830                           ; BSR set to: 1
  1831  000DF6  C170  F0D4         	movff	__Hub+112,_main$441
  1832  000DFA  D002               	goto	L1
  1833  000DFC                     l154:
  1834                           
  1835                           ; BSR set to: 1
  1836  000DFC  C171  F0D4         	movff	__Hub+113,_main$441
  1837  000E00                     L1:
  1838  000E00  0100               	movlb	0	; () banked
  1839  000E02  6BD5               	clrf	(_main$441+1)& (0+255),b
  1840                           
  1841                           ; BSR set to: 0
  1842  000E04  0E72               	movlw	low (__Hub+114)
  1843  000E06  6F68               	movwf	Display_ProcessData@AValues& (0+255),b
  1844  000E08  0E01               	movlw	high (__Hub+114)
  1845  000E0A  6F69               	movwf	(Display_ProcessData@AValues+1)& (0+255),b
  1846  000E0C  0101               	movlb	1	; () banked
  1847  000E0E  5170               	movf	(__Hub+112)& (0+255),w,b
  1848  000E10  198C               	xorwf	(__Hub+140)& (0+255),w,b
  1849  000E12  0E01               	movlw	1
  1850  000E14  A4D8               	btfss	status,2,c
  1851  000E16  0E00               	movlw	0
  1852  000E18  0100               	movlb	0	; () banked
  1853  000E1A  6F6A               	movwf	Display_ProcessData@ALoaded& (0+255),b
  1854  000E1C  C16F  F06B         	movff	__Hub+111,Display_ProcessData@APushed
  1855  000E20  51D4               	movf	_main$441& (0+255),w,b
  1856  000E22  EC1E  F004         	call	_Display_ProcessData
  1857                           
  1858                           ; BSR set to: 2
  1859                           ;main.c: 269: if (_DigiPot.Counter >= _DigiPot.CounterRef)
  1860  000E26  0100               	movlb	0	; () banked
  1861  000E28  51E1               	movf	__DigiPot& (0+255),w,b
  1862  000E2A  5DE2               	subwf	(__DigiPot+1)& (0+255),w,b
  1863  000E2C  E312               	bnc	l4842
  1864                           
  1865                           ; BSR set to: 0
  1866                           ;main.c: 270: {
  1867                           ;main.c: 271: WriteData(_Hub.SecondaryBuffer.Values, 8, _DigiPot.IO);
  1868  000E2E  0E72               	movlw	low (__Hub+114)
  1869  000E30  6F84               	movwf	WriteData@AData& (0+255),b
  1870  000E32  0E01               	movlw	high (__Hub+114)
  1871  000E34  6F85               	movwf	(WriteData@AData+1)& (0+255),b
  1872  000E36  0E08               	movlw	8
  1873  000E38  6F86               	movwf	WriteData@ASize& (0+255),b
  1874  000E3A  EE20  F0E3         	lfsr	2,__DigiPot+2
  1875  000E3E  EE00  F087         	lfsr	0,WriteData@AIO
  1876  000E42  0E0E               	movlw	14
  1877  000E44                     u5301:
  1878  000E44  CFDB FFEB          	movff	plusw2,plusw0
  1879  000E48  06E8               	decf	wreg,f,c
  1880  000E4A  E2FC               	bc	u5301
  1881  000E4C  EC2B  F014         	call	_WriteData	;wreg free
  1882                           
  1883                           ; BSR set to: 0
  1884                           ;main.c: 272: _DigiPot.Counter = 0;
  1885  000E50  6BE2               	clrf	(__DigiPot+1)& (0+255),b
  1886  000E52                     l4842:
  1887                           
  1888                           ; BSR set to: 0
  1889                           ;main.c: 273: }
  1890                           ;main.c: 275: LChannelSwitchOld = LChannelSwitch;
  1891  000E52  C0D8  F0D6         	movff	main@LChannelSwitch,main@LChannelSwitchOld
  1892  000E56  D711               	goto	l4744
  1893  000E58                     __end_of_main:
  1894                           	opt stack 0
  1895                           tblptru	equ	0xFF8
  1896                           tblptrh	equ	0xFF7
  1897                           tblptrl	equ	0xFF6
  1898                           tablat	equ	0xFF5
  1899                           postinc0	equ	0xFEE
  1900                           plusw0	equ	0xFEB
  1901                           wreg	equ	0xFE8
  1902                           postdec1	equ	0xFE5
  1903                           fsr1h	equ	0xFE2
  1904                           fsr1l	equ	0xFE1
  1905                           plusw2	equ	0xFDB
  1906                           status	equ	0xFD8
  1907                           
  1908 ;; *************** function _memcmp *****************
  1909 ;; Defined at:
  1910 ;;		line 3 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\memcmp.c"
  1911 ;; Parameters:    Size  Location     Type
  1912 ;;  s1              2    0[BANK0 ] PTR const void 
  1913 ;;		 -> _Hub.SecondaryBuffer.Values(8), _Hub.SecondaryBuffer(12), 
  1914 ;;  s2              2    2[BANK0 ] PTR const void 
  1915 ;;		 -> _Hub.BackupBuffer.Values(8), _Hub.BackupBuffer(12), 
  1916 ;;  n               2    4[BANK0 ] unsigned int 
  1917 ;; Auto vars:     Size  Location     Type
  1918 ;;		None
  1919 ;; Return value:  Size  Location     Type
  1920 ;;                  2    0[BANK0 ] int 
  1921 ;; Registers used:
  1922 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0
  1923 ;; Tracked objects:
  1924 ;;		On entry : 3F/0
  1925 ;;		On exit  : 3F/0
  1926 ;;		Unchanged: 0/0
  1927 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1928 ;;      Params:         0       6       0       0       0       0       0       0       0
  1929 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1930 ;;      Temps:          0       2       0       0       0       0       0       0       0
  1931 ;;      Totals:         0       8       0       0       0       0       0       0       0
  1932 ;;Total ram usage:        8 bytes
  1933 ;; Hardware stack levels used:    1
  1934 ;; Hardware stack levels required when called:    6
  1935 ;; This function calls:
  1936 ;;		Nothing
  1937 ;; This function is called by:
  1938 ;;		_main
  1939 ;; This function uses a non-reentrant model
  1940 ;;
  1941                           
  1942                           	psect	text1
  1943  002AA2                     __ptext1:
  1944                           	opt stack 0
  1945  002AA2                     _memcmp:
  1946                           	opt stack 24
  1947                           
  1948                           ; BSR set to: 0
  1949                           
  1950                           ; BSR set to: 0
  1951                           ;incstack = 0
  1952  002AA2  D020               	goto	l4626
  1953  002AA4                     l4618:
  1954                           
  1955                           ; BSR set to: 0
  1956  002AA4  C062  FFD9         	movff	memcmp@s2,fsr2l
  1957  002AA8  C063  FFDA         	movff	memcmp@s2+1,fsr2h
  1958  002AAC  C060  FFE1         	movff	memcmp@s1,fsr1l
  1959  002AB0  C061  FFE2         	movff	memcmp@s1+1,fsr1h
  1960  002AB4  50DE               	movf	postinc2,w,c
  1961  002AB6  18E6               	xorwf	postinc1,w,c
  1962  002AB8  E011               	bz	l4624
  1963                           
  1964                           ; BSR set to: 0
  1965  002ABA  C060  FFD9         	movff	memcmp@s1,fsr2l
  1966  002ABE  C061  FFDA         	movff	memcmp@s1+1,fsr2h
  1967  002AC2  50DF               	movf	indf2,w,c
  1968  002AC4  6F66               	movwf	??_memcmp& (0+255),b
  1969  002AC6  C062  FFD9         	movff	memcmp@s2,fsr2l
  1970  002ACA  C063  FFDA         	movff	memcmp@s2+1,fsr2h
  1971  002ACE  50DF               	movf	indf2,w,c
  1972  002AD0  5D66               	subwf	??_memcmp& (0+255),w,b
  1973  002AD2  6F60               	movwf	?_memcmp& (0+255),b
  1974  002AD4  6B61               	clrf	(?_memcmp+1)& (0+255),b
  1975  002AD6  A0D8               	btfss	status,0,c
  1976  002AD8  0761               	decf	(?_memcmp+1)& (0+255),f,b
  1977  002ADA  0012               	return	
  1978  002ADC                     l4624:
  1979                           
  1980                           ; BSR set to: 0
  1981  002ADC  4B60               	infsnz	memcmp@s1& (0+255),f,b
  1982  002ADE  2B61               	incf	(memcmp@s1+1)& (0+255),f,b
  1983  002AE0  4B62               	infsnz	memcmp@s2& (0+255),f,b
  1984  002AE2  2B63               	incf	(memcmp@s2+1)& (0+255),f,b
  1985  002AE4                     l4626:
  1986                           
  1987                           ; BSR set to: 0
  1988  002AE4  0764               	decf	memcmp@n& (0+255),f,b
  1989  002AE6  A0D8               	btfss	status,0,c
  1990  002AE8  0765               	decf	(memcmp@n+1)& (0+255),f,b
  1991  002AEA  2964               	incf	memcmp@n& (0+255),w,b
  1992  002AEC  E1DB               	bnz	l4618
  1993  002AEE  2965               	incf	(memcmp@n+1)& (0+255),w,b
  1994  002AF0  E1D9               	bnz	l4618
  1995                           
  1996                           ; BSR set to: 0
  1997  002AF2  6B60               	clrf	?_memcmp& (0+255),b
  1998  002AF4  6B61               	clrf	(?_memcmp+1)& (0+255),b
  1999                           
  2000                           ; BSR set to: 0
  2001  002AF6  0012               	return		;funcret
  2002  002AF8                     __end_of_memcmp:
  2003                           	opt stack 0
  2004                           tblptru	equ	0xFF8
  2005                           tblptrh	equ	0xFF7
  2006                           tblptrl	equ	0xFF6
  2007                           tablat	equ	0xFF5
  2008                           postinc0	equ	0xFEE
  2009                           plusw0	equ	0xFEB
  2010                           wreg	equ	0xFE8
  2011                           postinc1	equ	0xFE6
  2012                           postdec1	equ	0xFE5
  2013                           fsr1h	equ	0xFE2
  2014                           fsr1l	equ	0xFE1
  2015                           indf2	equ	0xFDF
  2016                           postinc2	equ	0xFDE
  2017                           plusw2	equ	0xFDB
  2018                           fsr2h	equ	0xFDA
  2019                           fsr2l	equ	0xFD9
  2020                           status	equ	0xFD8
  2021                           
  2022 ;; *************** function _WriteData *****************
  2023 ;; Defined at:
  2024 ;;		line 28 in file "harware.c"
  2025 ;; Parameters:    Size  Location     Type
  2026 ;;  AData           2   36[BANK0 ] PTR unsigned char 
  2027 ;;		 -> _Display.Buffer2(90), _Display.Buffer1(90), _Hub.SecondaryBuffer(12), _Hub(157), 
  2028 ;;		 -> _Display(217), 
  2029 ;;  ASize           1   38[BANK0 ] unsigned char 
  2030 ;;  AIO            15   39[BANK0 ] struct .
  2031 ;; Auto vars:     Size  Location     Type
  2032 ;;  i               2   54[BANK0 ] int 
  2033 ;; Return value:  Size  Location     Type
  2034 ;;                  1    wreg      void 
  2035 ;; Registers used:
  2036 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, cstack
  2037 ;; Tracked objects:
  2038 ;;		On entry : 3F/0
  2039 ;;		On exit  : 3F/0
  2040 ;;		Unchanged: 0/0
  2041 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2042 ;;      Params:         0      18       0       0       0       0       0       0       0
  2043 ;;      Locals:         0       2       0       0       0       0       0       0       0
  2044 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2045 ;;      Totals:         0      20       0       0       0       0       0       0       0
  2046 ;;Total ram usage:       20 bytes
  2047 ;; Hardware stack levels used:    1
  2048 ;; Hardware stack levels required when called:    8
  2049 ;; This function calls:
  2050 ;;		_LatchOff
  2051 ;;		_LatchOn
  2052 ;;		_WriteChar
  2053 ;; This function is called by:
  2054 ;;		_main
  2055 ;; This function uses a non-reentrant model
  2056 ;;
  2057                           
  2058                           	psect	text2
  2059  002856                     __ptext2:
  2060                           	opt stack 0
  2061  002856                     _WriteData:
  2062                           	opt stack 22
  2063                           
  2064                           ; BSR set to: 0
  2065                           ;harware.c: 30: LatchOn(AIO);
  2066                           
  2067                           ; BSR set to: 0
  2068                           ;incstack = 0
  2069  002856  EE20  F087         	lfsr	2,WriteData@AIO
  2070  00285A  EE00  F060         	lfsr	0,LatchOn@AIO
  2071  00285E  0E0E               	movlw	14
  2072  002860                     u4711:
  2073  002860  CFDB FFEB          	movff	plusw2,plusw0
  2074  002864  06E8               	decf	wreg,f,c
  2075  002866  E2FC               	bc	u4711
  2076  002868  ECD0  F018         	call	_LatchOn	;wreg free
  2077                           
  2078                           ; BSR set to: 0
  2079                           ;harware.c: 31: for (int i = ASize - 1; i >= 0; i--)
  2080  00286C  0EFF               	movlw	255
  2081  00286E  2586               	addwf	WriteData@ASize& (0+255),w,b
  2082  002870  6F96               	movwf	WriteData@i& (0+255),b
  2083  002872  6B97               	clrf	(WriteData@i+1)& (0+255),b
  2084  002874  0EFF               	movlw	255
  2085  002876  2397               	addwfc	(WriteData@i+1)& (0+255),f,b
  2086  002878                     l4392:
  2087                           
  2088                           ; BSR set to: 0
  2089  002878  BF97               	btfsc	(WriteData@i+1)& (0+255),7,b
  2090  00287A  D016               	goto	l4402
  2091                           
  2092                           ; BSR set to: 0
  2093                           ;harware.c: 32: WriteChar(AData[i], AIO);
  2094  00287C  EE20  F087         	lfsr	2,WriteData@AIO
  2095  002880  EE00  F06F         	lfsr	0,WriteChar@AIO
  2096  002884  0E0E               	movlw	14
  2097  002886                     u4731:
  2098  002886  CFDB FFEB          	movff	plusw2,plusw0
  2099  00288A  06E8               	decf	wreg,f,c
  2100  00288C  E2FC               	bc	u4731
  2101  00288E  5196               	movf	WriteData@i& (0+255),w,b
  2102  002890  2584               	addwf	WriteData@AData& (0+255),w,b
  2103  002892  6ED9               	movwf	fsr2l,c
  2104  002894  5197               	movf	(WriteData@i+1)& (0+255),w,b
  2105  002896  2185               	addwfc	(WriteData@AData+1)& (0+255),w,b
  2106  002898  6EDA               	movwf	fsr2h,c
  2107  00289A  50DF               	movf	indf2,w,c
  2108  00289C  EC08  F012         	call	_WriteChar
  2109                           
  2110                           ; BSR set to: 0
  2111  0028A0  0796               	decf	WriteData@i& (0+255),f,b
  2112  0028A2  A0D8               	btfss	status,0,c
  2113  0028A4  0797               	decf	(WriteData@i+1)& (0+255),f,b
  2114  0028A6  D7E8               	goto	l4392
  2115  0028A8                     l4402:
  2116                           
  2117                           ; BSR set to: 0
  2118                           ;harware.c: 33: LatchOff(AIO);
  2119  0028A8  EE20  F087         	lfsr	2,WriteData@AIO
  2120  0028AC  EE00  F060         	lfsr	0,LatchOff@AIO
  2121  0028B0  0E0E               	movlw	14
  2122  0028B2                     u4741:
  2123  0028B2  CFDB FFEB          	movff	plusw2,plusw0
  2124  0028B6  06E8               	decf	wreg,f,c
  2125  0028B8  E2FC               	bc	u4741
  2126  0028BA  EFD7  F018         	goto	_LatchOff	;wreg free
  2127  0028BE                     __end_of_WriteData:
  2128                           	opt stack 0
  2129                           tblptru	equ	0xFF8
  2130                           tblptrh	equ	0xFF7
  2131                           tblptrl	equ	0xFF6
  2132                           tablat	equ	0xFF5
  2133                           postinc0	equ	0xFEE
  2134                           plusw0	equ	0xFEB
  2135                           wreg	equ	0xFE8
  2136                           postinc1	equ	0xFE6
  2137                           postdec1	equ	0xFE5
  2138                           fsr1h	equ	0xFE2
  2139                           fsr1l	equ	0xFE1
  2140                           indf2	equ	0xFDF
  2141                           postinc2	equ	0xFDE
  2142                           plusw2	equ	0xFDB
  2143                           fsr2h	equ	0xFDA
  2144                           fsr2l	equ	0xFD9
  2145                           status	equ	0xFD8
  2146                           
  2147 ;; *************** function _WriteChar *****************
  2148 ;; Defined at:
  2149 ;;		line 18 in file "harware.c"
  2150 ;; Parameters:    Size  Location     Type
  2151 ;;  AChar           1    wreg     unsigned char 
  2152 ;;  AIO            15   15[BANK0 ] struct .
  2153 ;; Auto vars:     Size  Location     Type
  2154 ;;  AChar           1   33[BANK0 ] unsigned char 
  2155 ;;  i               2   34[BANK0 ] int 
  2156 ;; Return value:  Size  Location     Type
  2157 ;;                  1    wreg      void 
  2158 ;; Registers used:
  2159 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, cstack
  2160 ;; Tracked objects:
  2161 ;;		On entry : 3F/0
  2162 ;;		On exit  : 3F/0
  2163 ;;		Unchanged: 0/0
  2164 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2165 ;;      Params:         0      15       0       0       0       0       0       0       0
  2166 ;;      Locals:         0       3       0       0       0       0       0       0       0
  2167 ;;      Temps:          0       3       0       0       0       0       0       0       0
  2168 ;;      Totals:         0      21       0       0       0       0       0       0       0
  2169 ;;Total ram usage:       21 bytes
  2170 ;; Hardware stack levels used:    1
  2171 ;; Hardware stack levels required when called:    7
  2172 ;; This function calls:
  2173 ;;		_ClockDown
  2174 ;;		_ClockUp
  2175 ;; This function is called by:
  2176 ;;		_WriteData
  2177 ;; This function uses a non-reentrant model
  2178 ;;
  2179                           
  2180                           	psect	text3
  2181  002410                     __ptext3:
  2182                           	opt stack 0
  2183  002410                     _WriteChar:
  2184                           	opt stack 22
  2185                           
  2186                           ; BSR set to: 0
  2187                           ;incstack = 0
  2188                           ;WriteChar@AChar stored from wreg
  2189  002410  6F81               	movwf	WriteChar@AChar& (0+255),b
  2190                           
  2191                           ;harware.c: 20: for (int i = 7; i >= 0; i--)
  2192  002412  0100               	movlb	0	; () banked
  2193  002414  6B83               	clrf	(WriteChar@i+1)& (0+255),b
  2194  002416  0E07               	movlw	7
  2195  002418  6F82               	movwf	WriteChar@i& (0+255),b
  2196  00241A                     l4344:
  2197                           
  2198                           ; BSR set to: 0
  2199                           ;harware.c: 21: {
  2200                           ;harware.c: 22: ClockUp(AIO);
  2201  00241A  EE20  F06F         	lfsr	2,WriteChar@AIO
  2202  00241E  EE00  F060         	lfsr	0,ClockUp@AIO
  2203  002422  0E0E               	movlw	14
  2204  002424                     u4581:
  2205  002424  CFDB FFEB          	movff	plusw2,plusw0
  2206  002428  06E8               	decf	wreg,f,c
  2207  00242A  E2FC               	bc	u4581
  2208  00242C  ECC8  F018         	call	_ClockUp	;wreg free
  2209                           
  2210                           ; BSR set to: 0
  2211                           ;harware.c: 23: *AIO.DataPin.Port = *AIO.DataPin.Port & AIO.DataPin.Mask | ((AChar >> i)
      +                           & 0x01) << AIO.DataPin.PinNumber;
  2212  002430  C076  F07E         	movff	WriteChar@AIO+7,??_WriteChar
  2213  002434  C082  F07F         	movff	WriteChar@i,??_WriteChar+1
  2214  002438  C081  F080         	movff	WriteChar@AChar,??_WriteChar+2
  2215  00243C  2B7F               	incf	(??_WriteChar+1)& (0+255),f,b
  2216  00243E  D002               	goto	u4594
  2217  002440                     u4595:
  2218  002440  90D8               	bcf	status,0,c
  2219  002442  3380               	rrcf	(??_WriteChar+2)& (0+255),f,b
  2220  002444                     u4594:
  2221  002444  2F7F               	decfsz	(??_WriteChar+1)& (0+255),f,b
  2222  002446  D7FC               	goto	u4595
  2223  002448  0E01               	movlw	1
  2224  00244A  0100               	movlb	0	; () banked
  2225  00244C  1780               	andwf	(??_WriteChar+2)& (0+255),f,b
  2226  00244E  2B7E               	incf	??_WriteChar& (0+255),f,b
  2227  002450  D002               	goto	u4604
  2228  002452                     u4605:
  2229  002452  90D8               	bcf	status,0,c
  2230  002454  3780               	rlcf	(??_WriteChar+2)& (0+255),f,b
  2231  002456                     u4604:
  2232  002456  2F7E               	decfsz	??_WriteChar& (0+255),f,b
  2233  002458  D7FC               	goto	u4605
  2234  00245A  C074  FFD9         	movff	WriteChar@AIO+5,fsr2l
  2235  00245E  C075  FFDA         	movff	WriteChar@AIO+6,fsr2h
  2236  002462  50DF               	movf	indf2,w,c
  2237  002464  0100               	movlb	0	; () banked
  2238  002466  1577               	andwf	(WriteChar@AIO+8)& (0+255),w,b
  2239  002468  1180               	iorwf	(??_WriteChar+2)& (0+255),w,b
  2240  00246A  C074  FFD9         	movff	WriteChar@AIO+5,fsr2l
  2241  00246E  C075  FFDA         	movff	WriteChar@AIO+6,fsr2h
  2242  002472  6EDF               	movwf	indf2,c
  2243                           
  2244                           ; BSR set to: 0
  2245                           ;harware.c: 24: ClockDown(AIO);
  2246  002474  EE20  F06F         	lfsr	2,WriteChar@AIO
  2247  002478  EE00  F060         	lfsr	0,ClockDown@AIO
  2248  00247C  0E0E               	movlw	14
  2249  00247E                     u4611:
  2250  00247E  CFDB FFEB          	movff	plusw2,plusw0
  2251  002482  06E8               	decf	wreg,f,c
  2252  002484  E2FC               	bc	u4611
  2253  002486  ECF3  F018         	call	_ClockDown	;wreg free
  2254                           
  2255                           ; BSR set to: 0
  2256  00248A  0782               	decf	WriteChar@i& (0+255),f,b
  2257  00248C  A0D8               	btfss	status,0,c
  2258  00248E  0783               	decf	(WriteChar@i+1)& (0+255),f,b
  2259                           
  2260                           ; BSR set to: 0
  2261  002490  BF83               	btfsc	(WriteChar@i+1)& (0+255),7,b
  2262                           
  2263                           ; BSR set to: 0
  2264  002492  0012               	return		;funcret
  2265  002494  D7C2               	goto	l4344
  2266  002496                     __end_of_WriteChar:
  2267                           	opt stack 0
  2268                           tblptru	equ	0xFF8
  2269                           tblptrh	equ	0xFF7
  2270                           tblptrl	equ	0xFF6
  2271                           tablat	equ	0xFF5
  2272                           postinc0	equ	0xFEE
  2273                           plusw0	equ	0xFEB
  2274                           wreg	equ	0xFE8
  2275                           postinc1	equ	0xFE6
  2276                           postdec1	equ	0xFE5
  2277                           fsr1h	equ	0xFE2
  2278                           fsr1l	equ	0xFE1
  2279                           indf2	equ	0xFDF
  2280                           postinc2	equ	0xFDE
  2281                           plusw2	equ	0xFDB
  2282                           fsr2h	equ	0xFDA
  2283                           fsr2l	equ	0xFD9
  2284                           status	equ	0xFD8
  2285                           
  2286 ;; *************** function _LatchOn *****************
  2287 ;; Defined at:
  2288 ;;		line 70 in file "harware.c"
  2289 ;; Parameters:    Size  Location     Type
  2290 ;;  AIO            15    0[BANK0 ] struct .
  2291 ;; Auto vars:     Size  Location     Type
  2292 ;;		None
  2293 ;; Return value:  Size  Location     Type
  2294 ;;                  1    wreg      void 
  2295 ;; Registers used:
  2296 ;;		wreg, fsr2l, fsr2h
  2297 ;; Tracked objects:
  2298 ;;		On entry : 3F/0
  2299 ;;		On exit  : 3F/0
  2300 ;;		Unchanged: 0/0
  2301 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2302 ;;      Params:         0      15       0       0       0       0       0       0       0
  2303 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2304 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2305 ;;      Totals:         0      15       0       0       0       0       0       0       0
  2306 ;;Total ram usage:       15 bytes
  2307 ;; Hardware stack levels used:    1
  2308 ;; Hardware stack levels required when called:    6
  2309 ;; This function calls:
  2310 ;;		Nothing
  2311 ;; This function is called by:
  2312 ;;		_WriteData
  2313 ;; This function uses a non-reentrant model
  2314 ;;
  2315                           
  2316                           	psect	text4
  2317  0031A0                     __ptext4:
  2318                           	opt stack 0
  2319  0031A0                     _LatchOn:
  2320                           	opt stack 23
  2321                           
  2322                           ; BSR set to: 0
  2323                           ;harware.c: 72: *AIO.LatchPin.Port &= AIO.LatchPin.Mask;
  2324                           
  2325                           ; BSR set to: 0
  2326                           ;incstack = 0
  2327  0031A0  C06A  FFD9         	movff	LatchOn@AIO+10,fsr2l
  2328  0031A4  C06B  FFDA         	movff	LatchOn@AIO+11,fsr2h
  2329  0031A8  516D               	movf	(LatchOn@AIO+13)& (0+255),w,b
  2330  0031AA  16DF               	andwf	indf2,f,c
  2331                           
  2332                           ; BSR set to: 0
  2333  0031AC  0012               	return		;funcret
  2334  0031AE                     __end_of_LatchOn:
  2335                           	opt stack 0
  2336                           tblptru	equ	0xFF8
  2337                           tblptrh	equ	0xFF7
  2338                           tblptrl	equ	0xFF6
  2339                           tablat	equ	0xFF5
  2340                           postinc0	equ	0xFEE
  2341                           plusw0	equ	0xFEB
  2342                           wreg	equ	0xFE8
  2343                           postinc1	equ	0xFE6
  2344                           postdec1	equ	0xFE5
  2345                           fsr1h	equ	0xFE2
  2346                           fsr1l	equ	0xFE1
  2347                           indf2	equ	0xFDF
  2348                           postinc2	equ	0xFDE
  2349                           plusw2	equ	0xFDB
  2350                           fsr2h	equ	0xFDA
  2351                           fsr2l	equ	0xFD9
  2352                           status	equ	0xFD8
  2353                           
  2354 ;; *************** function _LatchOff *****************
  2355 ;; Defined at:
  2356 ;;		line 75 in file "harware.c"
  2357 ;; Parameters:    Size  Location     Type
  2358 ;;  AIO            15    0[BANK0 ] struct .
  2359 ;; Auto vars:     Size  Location     Type
  2360 ;;		None
  2361 ;; Return value:  Size  Location     Type
  2362 ;;                  1    wreg      void 
  2363 ;; Registers used:
  2364 ;;		wreg, fsr2l, fsr2h
  2365 ;; Tracked objects:
  2366 ;;		On entry : 3F/0
  2367 ;;		On exit  : 3F/0
  2368 ;;		Unchanged: 0/0
  2369 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2370 ;;      Params:         0      15       0       0       0       0       0       0       0
  2371 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2372 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2373 ;;      Totals:         0      15       0       0       0       0       0       0       0
  2374 ;;Total ram usage:       15 bytes
  2375 ;; Hardware stack levels used:    1
  2376 ;; Hardware stack levels required when called:    6
  2377 ;; This function calls:
  2378 ;;		Nothing
  2379 ;; This function is called by:
  2380 ;;		_WriteData
  2381 ;; This function uses a non-reentrant model
  2382 ;;
  2383                           
  2384                           	psect	text5
  2385  0031AE                     __ptext5:
  2386                           	opt stack 0
  2387  0031AE                     _LatchOff:
  2388                           	opt stack 23
  2389                           
  2390                           ; BSR set to: 0
  2391                           ;harware.c: 77: *AIO.LatchPin.Port |= AIO.LatchPin.NegativeMask;
  2392                           
  2393                           ; BSR set to: 0
  2394                           ;incstack = 0
  2395  0031AE  C06A  FFD9         	movff	LatchOff@AIO+10,fsr2l
  2396  0031B2  C06B  FFDA         	movff	LatchOff@AIO+11,fsr2h
  2397  0031B6  516E               	movf	(LatchOff@AIO+14)& (0+255),w,b
  2398  0031B8  12DF               	iorwf	indf2,f,c
  2399                           
  2400                           ; BSR set to: 0
  2401  0031BA  0012               	return		;funcret
  2402  0031BC                     __end_of_LatchOff:
  2403                           	opt stack 0
  2404                           tblptru	equ	0xFF8
  2405                           tblptrh	equ	0xFF7
  2406                           tblptrl	equ	0xFF6
  2407                           tablat	equ	0xFF5
  2408                           postinc0	equ	0xFEE
  2409                           plusw0	equ	0xFEB
  2410                           wreg	equ	0xFE8
  2411                           postinc1	equ	0xFE6
  2412                           postdec1	equ	0xFE5
  2413                           fsr1h	equ	0xFE2
  2414                           fsr1l	equ	0xFE1
  2415                           indf2	equ	0xFDF
  2416                           postinc2	equ	0xFDE
  2417                           plusw2	equ	0xFDB
  2418                           fsr2h	equ	0xFDA
  2419                           fsr2l	equ	0xFD9
  2420                           status	equ	0xFD8
  2421                           
  2422 ;; *************** function _Sequencer_StopTimer *****************
  2423 ;; Defined at:
  2424 ;;		line 21 in file "sequencer.c"
  2425 ;; Parameters:    Size  Location     Type
  2426 ;;		None
  2427 ;; Auto vars:     Size  Location     Type
  2428 ;;		None
  2429 ;; Return value:  Size  Location     Type
  2430 ;;                  1    wreg      void 
  2431 ;; Registers used:
  2432 ;;		None
  2433 ;; Tracked objects:
  2434 ;;		On entry : 0/0
  2435 ;;		On exit  : 0/0
  2436 ;;		Unchanged: 0/0
  2437 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2438 ;;      Params:         0       0       0       0       0       0       0       0       0
  2439 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2440 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2441 ;;      Totals:         0       0       0       0       0       0       0       0       0
  2442 ;;Total ram usage:        0 bytes
  2443 ;; Hardware stack levels used:    1
  2444 ;; Hardware stack levels required when called:    6
  2445 ;; This function calls:
  2446 ;;		Nothing
  2447 ;; This function is called by:
  2448 ;;		_main
  2449 ;; This function uses a non-reentrant model
  2450 ;;
  2451                           
  2452                           	psect	text6
  2453  003240                     __ptext6:
  2454                           	opt stack 0
  2455  003240                     _Sequencer_StopTimer:
  2456                           	opt stack 24
  2457                           
  2458                           ;sequencer.c: 23: TMR1ON = 0;
  2459                           
  2460                           ; BSR set to: 0
  2461                           ;incstack = 0
  2462  003240  90CD               	bcf	4045,0,c	;volatile
  2463                           
  2464                           ;sequencer.c: 24: _Timer.Counter = 0;
  2465  003242  6A5D               	clrf	__Timer+4,c
  2466  003244  6A5E               	clrf	__Timer+5,c
  2467  003246  0012               	return		;funcret
  2468  003248                     __end_of_Sequencer_StopTimer:
  2469                           	opt stack 0
  2470                           tblptru	equ	0xFF8
  2471                           tblptrh	equ	0xFF7
  2472                           tblptrl	equ	0xFF6
  2473                           tablat	equ	0xFF5
  2474                           postinc0	equ	0xFEE
  2475                           plusw0	equ	0xFEB
  2476                           wreg	equ	0xFE8
  2477                           postinc1	equ	0xFE6
  2478                           postdec1	equ	0xFE5
  2479                           fsr1h	equ	0xFE2
  2480                           fsr1l	equ	0xFE1
  2481                           indf2	equ	0xFDF
  2482                           postinc2	equ	0xFDE
  2483                           plusw2	equ	0xFDB
  2484                           fsr2h	equ	0xFDA
  2485                           fsr2l	equ	0xFD9
  2486                           status	equ	0xFD8
  2487                           
  2488 ;; *************** function _Sequencer_StartTimer *****************
  2489 ;; Defined at:
  2490 ;;		line 27 in file "sequencer.c"
  2491 ;; Parameters:    Size  Location     Type
  2492 ;;  ATime           3   62[BANK0 ] float 
  2493 ;;  ALoop           1   65[BANK0 ] unsigned char 
  2494 ;; Auto vars:     Size  Location     Type
  2495 ;;		None
  2496 ;; Return value:  Size  Location     Type
  2497 ;;                  1    wreg      void 
  2498 ;; Registers used:
  2499 ;;		wreg, status,2, status,0, cstack
  2500 ;; Tracked objects:
  2501 ;;		On entry : 3F/0
  2502 ;;		On exit  : 3F/0
  2503 ;;		Unchanged: 0/0
  2504 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2505 ;;      Params:         0       4       0       0       0       0       0       0       0
  2506 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2507 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2508 ;;      Totals:         0       4       0       0       0       0       0       0       0
  2509 ;;Total ram usage:        4 bytes
  2510 ;; Hardware stack levels used:    1
  2511 ;; Hardware stack levels required when called:    8
  2512 ;; This function calls:
  2513 ;;		___ftdiv
  2514 ;;		___fttol
  2515 ;; This function is called by:
  2516 ;;		_main
  2517 ;; This function uses a non-reentrant model
  2518 ;;
  2519                           
  2520                           	psect	text7
  2521  002BEE                     __ptext7:
  2522                           	opt stack 0
  2523  002BEE                     _Sequencer_StartTimer:
  2524                           	opt stack 22
  2525                           
  2526                           ; BSR set to: 0
  2527                           ;sequencer.c: 29: _Timer.Loop = ALoop;
  2528                           
  2529                           ;incstack = 0
  2530  002BEE  C0A1  F05A         	movff	Sequencer_StartTimer@ALoop,__Timer+1
  2531                           
  2532                           ; BSR set to: 0
  2533                           ;sequencer.c: 30: _Timer.Ticks = ATime / ((4.0f / 48000000L) * 1 * 65535);
  2534  002BF2  0EF4               	movlw	244
  2535  002BF4  6F83               	movwf	___ftdiv@f2& (0+255),b
  2536  002BF6  0EB2               	movlw	178
  2537  002BF8  6F84               	movwf	(___ftdiv@f2+1)& (0+255),b
  2538  002BFA  0E3B               	movlw	59
  2539  002BFC  6F85               	movwf	(___ftdiv@f2+2)& (0+255),b
  2540  002BFE  C09E  F080         	movff	Sequencer_StartTimer@ATime,___ftdiv@f1
  2541  002C02  C09F  F081         	movff	Sequencer_StartTimer@ATime+1,___ftdiv@f1+1
  2542  002C06  C0A0  F082         	movff	Sequencer_StartTimer@ATime+2,___ftdiv@f1+2
  2543  002C0A  EC48  F00F         	call	___ftdiv	;wreg free
  2544  002C0E  C080  F08F         	movff	?___ftdiv,___fttol@f1
  2545  002C12  C081  F090         	movff	?___ftdiv+1,___fttol@f1+1
  2546  002C16  C082  F091         	movff	?___ftdiv+2,___fttol@f1+2
  2547  002C1A  ECEB  F00E         	call	___fttol	;wreg free
  2548  002C1E  C08F  F05B         	movff	?___fttol,__Timer+2
  2549  002C22  C090  F05C         	movff	?___fttol+1,__Timer+3
  2550                           
  2551                           ; BSR set to: 0
  2552                           ;sequencer.c: 32: T1CKPS0 = 0;
  2553  002C26  98CD               	bcf	4045,4,c	;volatile
  2554                           
  2555                           ; BSR set to: 0
  2556                           ;sequencer.c: 33: T1CKPS0 = 0;
  2557  002C28  98CD               	bcf	4045,4,c	;volatile
  2558                           
  2559                           ; BSR set to: 0
  2560                           ;sequencer.c: 34: T1OSCEN = 1;
  2561  002C2A  86CD               	bsf	4045,3,c	;volatile
  2562                           
  2563                           ; BSR set to: 0
  2564                           ;sequencer.c: 35: T1SYNC = 1;
  2565  002C2C  84CD               	bsf	4045,2,c	;volatile
  2566                           
  2567                           ; BSR set to: 0
  2568                           ;sequencer.c: 36: TMR1CS = 0;
  2569  002C2E  92CD               	bcf	4045,1,c	;volatile
  2570                           
  2571                           ; BSR set to: 0
  2572                           ;sequencer.c: 37: TMR1H = 0;
  2573  002C30  6ACF               	clrf	4047,c	;volatile
  2574                           
  2575                           ; BSR set to: 0
  2576                           ;sequencer.c: 38: TMR1L = 0;
  2577  002C32  6ACE               	clrf	4046,c	;volatile
  2578                           
  2579                           ; BSR set to: 0
  2580                           ;sequencer.c: 41: TMR1IE = 1;
  2581  002C34  809D               	bsf	3997,0,c	;volatile
  2582                           
  2583                           ; BSR set to: 0
  2584                           ;sequencer.c: 42: TMR1IF = 0;
  2585  002C36  909E               	bcf	3998,0,c	;volatile
  2586                           
  2587                           ; BSR set to: 0
  2588                           ;sequencer.c: 43: TMR1ON = 1;
  2589  002C38  80CD               	bsf	4045,0,c	;volatile
  2590                           
  2591                           ; BSR set to: 0
  2592  002C3A  0012               	return		;funcret
  2593  002C3C                     __end_of_Sequencer_StartTimer:
  2594                           	opt stack 0
  2595                           tblptru	equ	0xFF8
  2596                           tblptrh	equ	0xFF7
  2597                           tblptrl	equ	0xFF6
  2598                           tablat	equ	0xFF5
  2599                           postinc0	equ	0xFEE
  2600                           plusw0	equ	0xFEB
  2601                           wreg	equ	0xFE8
  2602                           postinc1	equ	0xFE6
  2603                           postdec1	equ	0xFE5
  2604                           fsr1h	equ	0xFE2
  2605                           fsr1l	equ	0xFE1
  2606                           indf2	equ	0xFDF
  2607                           postinc2	equ	0xFDE
  2608                           plusw2	equ	0xFDB
  2609                           fsr2h	equ	0xFDA
  2610                           fsr2l	equ	0xFD9
  2611                           status	equ	0xFD8
  2612                           
  2613 ;; *************** function _RunHub *****************
  2614 ;; Defined at:
  2615 ;;		line 142 in file "main.c"
  2616 ;; Parameters:    Size  Location     Type
  2617 ;;		None
  2618 ;; Auto vars:     Size  Location     Type
  2619 ;;		None
  2620 ;; Return value:  Size  Location     Type
  2621 ;;                  1    wreg      void 
  2622 ;; Registers used:
  2623 ;;		wreg, status,2
  2624 ;; Tracked objects:
  2625 ;;		On entry : 0/0
  2626 ;;		On exit  : 3F/1
  2627 ;;		Unchanged: 0/0
  2628 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2629 ;;      Params:         0       0       0       0       0       0       0       0       0
  2630 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2631 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2632 ;;      Totals:         0       0       0       0       0       0       0       0       0
  2633 ;;Total ram usage:        0 bytes
  2634 ;; Hardware stack levels used:    1
  2635 ;; Hardware stack levels required when called:    6
  2636 ;; This function calls:
  2637 ;;		Nothing
  2638 ;; This function is called by:
  2639 ;;		_main
  2640 ;; This function uses a non-reentrant model
  2641 ;;
  2642                           
  2643                           	psect	text8
  2644  003180                     __ptext8:
  2645                           	opt stack 0
  2646  003180                     _RunHub:
  2647                           	opt stack 24
  2648                           
  2649                           ;main.c: 145: _Hub.ReadyToWrite = 1;
  2650                           
  2651                           ; BSR set to: 0
  2652                           ;incstack = 0
  2653  003180  0E01               	movlw	1
  2654  003182  0101               	movlb	1	; () banked
  2655  003184  6F86               	movwf	(__Hub+134)& (0+255),b
  2656  003186                     l4514:
  2657                           
  2658                           ; BSR set to: 1
  2659  003186  5186               	movf	(__Hub+134)& (0+255),w,b
  2660  003188  E1FE               	bnz	l4514
  2661                           
  2662                           ; BSR set to: 1
  2663                           ;main.c: 147: _Hub.ReadyToRead = 1;
  2664  00318A  0E01               	movlw	1
  2665  00318C  6F87               	movwf	(__Hub+135)& (0+255),b
  2666                           
  2667                           ; BSR set to: 1
  2668  00318E  0C01               	retlw	1	;funcret
  2669  003190                     __end_of_RunHub:
  2670                           	opt stack 0
  2671                           tblptru	equ	0xFF8
  2672                           tblptrh	equ	0xFF7
  2673                           tblptrl	equ	0xFF6
  2674                           tablat	equ	0xFF5
  2675                           postinc0	equ	0xFEE
  2676                           plusw0	equ	0xFEB
  2677                           wreg	equ	0xFE8
  2678                           postinc1	equ	0xFE6
  2679                           postdec1	equ	0xFE5
  2680                           fsr1h	equ	0xFE2
  2681                           fsr1l	equ	0xFE1
  2682                           indf2	equ	0xFDF
  2683                           postinc2	equ	0xFDE
  2684                           plusw2	equ	0xFDB
  2685                           fsr2h	equ	0xFDA
  2686                           fsr2l	equ	0xFD9
  2687                           status	equ	0xFD8
  2688                           
  2689 ;; *************** function _Persistant_SaveBuffer *****************
  2690 ;; Defined at:
  2691 ;;		line 102 in file "persistant.c"
  2692 ;; Parameters:    Size  Location     Type
  2693 ;;  ABuffer        12   76[BANK0 ] struct .
  2694 ;; Auto vars:     Size  Location     Type
  2695 ;;  i               1  102[BANK0 ] unsigned char 
  2696 ;;  LZip           10   92[BANK0 ] struct .
  2697 ;;  LResult         1   91[BANK0 ] unsigned char 
  2698 ;; Return value:  Size  Location     Type
  2699 ;;                  1    wreg      unsigned char 
  2700 ;; Registers used:
  2701 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2702 ;; Tracked objects:
  2703 ;;		On entry : 3F/0
  2704 ;;		On exit  : 3F/0
  2705 ;;		Unchanged: 0/0
  2706 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2707 ;;      Params:         0      12       0       0       0       0       0       0       0
  2708 ;;      Locals:         0      12       0       0       0       0       0       0       0
  2709 ;;      Temps:          0       3       0       0       0       0       0       0       0
  2710 ;;      Totals:         0      27       0       0       0       0       0       0       0
  2711 ;;Total ram usage:       27 bytes
  2712 ;; Hardware stack levels used:    1
  2713 ;; Hardware stack levels required when called:   12
  2714 ;; This function calls:
  2715 ;;		_Persistant_WriteExternalMemory
  2716 ;;		_Zip
  2717 ;;		_memcpy
  2718 ;; This function is called by:
  2719 ;;		_main
  2720 ;; This function uses a non-reentrant model
  2721 ;;
  2722                           
  2723                           	psect	text9
  2724  002618                     __ptext9:
  2725                           	opt stack 0
  2726  002618                     _Persistant_SaveBuffer:
  2727                           	opt stack 18
  2728                           
  2729                           ; BSR set to: 0
  2730                           ;persistant.c: 104: bool LResult = 1;
  2731                           
  2732                           ; BSR set to: 1
  2733                           ;incstack = 0
  2734  002618  0E01               	movlw	1
  2735  00261A  6FBB               	movwf	Persistant_SaveBuffer@LResult& (0+255),b
  2736                           
  2737                           ; BSR set to: 0
  2738                           ;persistant.c: 105: ZipContainer LZip;
  2739                           ;persistant.c: 106: LZip.Buffer = &ABuffer;
  2740  00261C  0EAC               	movlw	low Persistant_SaveBuffer@ABuffer
  2741  00261E  6FBC               	movwf	Persistant_SaveBuffer@LZip& (0+255),b
  2742  002620  6BBD               	clrf	(Persistant_SaveBuffer@LZip+1)& (0+255),b
  2743                           
  2744                           ; BSR set to: 0
  2745                           ;persistant.c: 107: Zip(&LZip);
  2746  002622  0EBC               	movlw	low Persistant_SaveBuffer@LZip
  2747  002624  6F9E               	movwf	Zip@AZip& (0+255),b
  2748  002626  ECD8  F00C         	call	_Zip	;wreg free
  2749                           
  2750                           ; BSR set to: 0
  2751                           ;persistant.c: 108: for (char i = 0; i < sizeof(LZip.Bytes); i++)
  2752  00262A  6BC6               	clrf	Persistant_SaveBuffer@i& (0+255),b
  2753  00262C                     l4560:
  2754                           
  2755                           ; BSR set to: 0
  2756                           ;persistant.c: 109: LResult &= Persistant_WriteExternalMemory((ABuffer.Channel / 2 ) * s
      +                          izeof(LZip.Bytes) + i, LZip.Bytes[i]);
  2757  00262C  90D8               	bcf	status,0,c
  2758  00262E  31AE               	rrcf	(Persistant_SaveBuffer@ABuffer+2)& (0+255),w,b
  2759  002630  6FB8               	movwf	??_Persistant_SaveBuffer& (0+255),b
  2760  002632  6BB9               	clrf	(??_Persistant_SaveBuffer+1)& (0+255),b
  2761  002634  90D8               	bcf	status,0,c
  2762  002636  37B8               	rlcf	??_Persistant_SaveBuffer& (0+255),f,b
  2763  002638  37B9               	rlcf	(??_Persistant_SaveBuffer+1)& (0+255),f,b
  2764  00263A  90D8               	bcf	status,0,c
  2765  00263C  37B8               	rlcf	??_Persistant_SaveBuffer& (0+255),f,b
  2766  00263E  37B9               	rlcf	(??_Persistant_SaveBuffer+1)& (0+255),f,b
  2767  002640  90D8               	bcf	status,0,c
  2768  002642  37B8               	rlcf	??_Persistant_SaveBuffer& (0+255),f,b
  2769  002644  37B9               	rlcf	(??_Persistant_SaveBuffer+1)& (0+255),f,b
  2770  002646  51C6               	movf	Persistant_SaveBuffer@i& (0+255),w,b
  2771  002648  25B8               	addwf	??_Persistant_SaveBuffer& (0+255),w,b
  2772  00264A  6F74               	movwf	Persistant_WriteExternalMemory@AAddress& (0+255),b
  2773  00264C  0E00               	movlw	0
  2774  00264E  21B9               	addwfc	(??_Persistant_SaveBuffer+1)& (0+255),w,b
  2775  002650  6F75               	movwf	(Persistant_WriteExternalMemory@AAddress+1)& (0+255),b
  2776  002652  C0C6  F0BA         	movff	Persistant_SaveBuffer@i,??_Persistant_SaveBuffer+2
  2777  002656  0E02               	movlw	2
  2778  002658  27BA               	addwf	(??_Persistant_SaveBuffer+2)& (0+255),f,b
  2779  00265A  51BA               	movf	(??_Persistant_SaveBuffer+2)& (0+255),w,b
  2780  00265C  0FBC               	addlw	low Persistant_SaveBuffer@LZip
  2781  00265E  6ED9               	movwf	fsr2l,c
  2782  002660  6ADA               	clrf	fsr2h,c
  2783  002662  50DF               	movf	indf2,w,c
  2784  002664  6F76               	movwf	Persistant_WriteExternalMemory@AData& (0+255),b
  2785  002666  EC6B  F016         	call	_Persistant_WriteExternalMemory	;wreg free
  2786  00266A  0100               	movlb	0	; () banked
  2787  00266C  17BB               	andwf	Persistant_SaveBuffer@LResult& (0+255),f,b
  2788                           
  2789                           ; BSR set to: 0
  2790  00266E  2BC6               	incf	Persistant_SaveBuffer@i& (0+255),f,b
  2791                           
  2792                           ; BSR set to: 0
  2793  002670  0E07               	movlw	7
  2794  002672  65C6               	cpfsgt	Persistant_SaveBuffer@i& (0+255),b
  2795  002674  D7DB               	goto	l4560
  2796                           
  2797                           ; BSR set to: 0
  2798                           ;persistant.c: 110: memcpy(&_Hub.BackupBuffer, &ABuffer, sizeof(DataBuffer));
  2799  002676  0E7A               	movlw	low (__Hub+122)
  2800  002678  6F60               	movwf	memcpy@d1& (0+255),b
  2801  00267A  0E01               	movlw	high (__Hub+122)
  2802  00267C  6F61               	movwf	(memcpy@d1+1)& (0+255),b
  2803  00267E  0EAC               	movlw	low Persistant_SaveBuffer@ABuffer
  2804  002680  6F62               	movwf	memcpy@s1& (0+255),b
  2805  002682  6B63               	clrf	(memcpy@s1+1)& (0+255),b
  2806  002684  6B65               	clrf	(memcpy@n+1)& (0+255),b
  2807  002686  0E0C               	movlw	12
  2808  002688  6F64               	movwf	memcpy@n& (0+255),b
  2809  00268A  EFB0  F016         	goto	_memcpy	;wreg free
  2810  00268E                     __end_of_Persistant_SaveBuffer:
  2811                           	opt stack 0
  2812                           tblptru	equ	0xFF8
  2813                           tblptrh	equ	0xFF7
  2814                           tblptrl	equ	0xFF6
  2815                           tablat	equ	0xFF5
  2816                           postinc0	equ	0xFEE
  2817                           plusw0	equ	0xFEB
  2818                           wreg	equ	0xFE8
  2819                           postinc1	equ	0xFE6
  2820                           postdec1	equ	0xFE5
  2821                           fsr1h	equ	0xFE2
  2822                           fsr1l	equ	0xFE1
  2823                           indf2	equ	0xFDF
  2824                           postinc2	equ	0xFDE
  2825                           plusw2	equ	0xFDB
  2826                           fsr2h	equ	0xFDA
  2827                           fsr2l	equ	0xFD9
  2828                           status	equ	0xFD8
  2829                           
  2830 ;; *************** function _Zip *****************
  2831 ;; Defined at:
  2832 ;;		line 8 in file "zip.c"
  2833 ;; Parameters:    Size  Location     Type
  2834 ;;  AZip            1   62[BANK0 ] PTR struct .
  2835 ;;		 -> Persistant_SaveBuffer@LZip(10), 
  2836 ;; Auto vars:     Size  Location     Type
  2837 ;;  j               2   74[BANK0 ] int 
  2838 ;;  i               2   72[BANK0 ] int 
  2839 ;;  i               2   70[BANK0 ] int 
  2840 ;;  LIndex          1   69[BANK0 ] unsigned char 
  2841 ;;  LBytes          1   68[BANK0 ] PTR unsigned char 
  2842 ;;		 -> LZip.Bytes(8), Persistant_SaveBuffer@LZip(10), 
  2843 ;; Return value:  Size  Location     Type
  2844 ;;                  1    wreg      unsigned char 
  2845 ;; Registers used:
  2846 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2847 ;; Tracked objects:
  2848 ;;		On entry : 3F/0
  2849 ;;		On exit  : 3F/0
  2850 ;;		Unchanged: 0/0
  2851 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2852 ;;      Params:         0       1       0       0       0       0       0       0       0
  2853 ;;      Locals:         0       8       0       0       0       0       0       0       0
  2854 ;;      Temps:          0       5       0       0       0       0       0       0       0
  2855 ;;      Totals:         0      14       0       0       0       0       0       0       0
  2856 ;;Total ram usage:       14 bytes
  2857 ;; Hardware stack levels used:    1
  2858 ;; Hardware stack levels required when called:    8
  2859 ;; This function calls:
  2860 ;;		___ftdiv
  2861 ;;		___fttol
  2862 ;;		___lbtoft
  2863 ;; This function is called by:
  2864 ;;		_Persistant_SaveBuffer
  2865 ;; This function uses a non-reentrant model
  2866 ;;
  2867                           
  2868                           	psect	text10
  2869  0019B0                     __ptext10:
  2870                           	opt stack 0
  2871  0019B0                     _Zip:
  2872                           	opt stack 21
  2873                           
  2874                           ; BSR set to: 0
  2875                           ;zip.c: 10: unsigned char *LBytes = AZip->Bytes;
  2876                           
  2877                           ; BSR set to: 0
  2878                           ;incstack = 0
  2879  0019B0  519E               	movf	Zip@AZip& (0+255),w,b
  2880  0019B2  0F02               	addlw	2
  2881  0019B4  6FA4               	movwf	Zip@LBytes& (0+255),b
  2882                           
  2883                           ; BSR set to: 0
  2884                           ;zip.c: 11: for(int i = 0; i < sizeof(AZip->Bytes); i++)
  2885  0019B6  6BA6               	clrf	Zip@i& (0+255),b
  2886  0019B8  6BA7               	clrf	(Zip@i+1)& (0+255),b
  2887  0019BA                     l4312:
  2888                           
  2889                           ; BSR set to: 0
  2890                           ;zip.c: 12: LBytes[i] = 0x00;
  2891  0019BA  51A4               	movf	Zip@LBytes& (0+255),w,b
  2892  0019BC  25A6               	addwf	Zip@i& (0+255),w,b
  2893  0019BE  6ED9               	movwf	fsr2l,c
  2894  0019C0  6ADA               	clrf	fsr2h,c
  2895  0019C2  0E00               	movlw	0
  2896  0019C4  6EDF               	movwf	indf2,c
  2897                           
  2898                           ; BSR set to: 0
  2899  0019C6  4BA6               	infsnz	Zip@i& (0+255),f,b
  2900  0019C8  2BA7               	incf	(Zip@i+1)& (0+255),f,b
  2901                           
  2902                           ; BSR set to: 0
  2903  0019CA  51A7               	movf	(Zip@i+1)& (0+255),w,b
  2904  0019CC  E103               	bnz	u4530
  2905  0019CE  0E08               	movlw	8
  2906  0019D0  5DA6               	subwf	Zip@i& (0+255),w,b
  2907  0019D2  E3F3               	bnc	l4312
  2908  0019D4                     u4530:
  2909                           
  2910                           ; BSR set to: 0
  2911                           ;zip.c: 15: for(int i = 0; i < sizeof(AZip->Buffer->Values); i++)
  2912  0019D4  6BA8               	clrf	Zip@i_1425& (0+255),b
  2913  0019D6  6BA9               	clrf	(Zip@i_1425+1)& (0+255),b
  2914  0019D8                     l617:
  2915                           
  2916                           ; BSR set to: 0
  2917                           ;zip.c: 16: {
  2918                           ;zip.c: 17: for(int j = 0; j < 6; j++)
  2919  0019D8  6BAA               	clrf	Zip@j& (0+255),b
  2920  0019DA  6BAB               	clrf	(Zip@j+1)& (0+255),b
  2921  0019DC                     l4326:
  2922                           
  2923                           ; BSR set to: 0
  2924                           ;zip.c: 18: {
  2925                           ;zip.c: 19: LIndex = i * 6 + j;
  2926  0019DC  51A8               	movf	Zip@i_1425& (0+255),w,b
  2927  0019DE  0D06               	mullw	6
  2928  0019E0  50F3               	movf	prodl,w,c
  2929  0019E2  25AA               	addwf	Zip@j& (0+255),w,b
  2930  0019E4  6FA5               	movwf	Zip@LIndex& (0+255),b
  2931                           
  2932                           ; BSR set to: 0
  2933                           ;zip.c: 20: LBytes[(char)(LIndex / 8.0f)] |= ((AZip->Buffer->Values[i] >> j) & 0x01) << 
      +                          (LIndex % 8);
  2934  0019E6  C0A5  F09F         	movff	Zip@LIndex,??_Zip
  2935  0019EA  0E07               	movlw	7
  2936  0019EC  179F               	andwf	??_Zip& (0+255),f,b
  2937  0019EE  C0AA  F0A0         	movff	Zip@j,??_Zip+1
  2938  0019F2  519E               	movf	Zip@AZip& (0+255),w,b
  2939  0019F4  6ED9               	movwf	fsr2l,c
  2940  0019F6  6ADA               	clrf	fsr2h,c
  2941  0019F8  CFDE F0A1          	movff	postinc2,??_Zip+2
  2942  0019FC  CFDD F0A2          	movff	postdec2,??_Zip+3
  2943  001A00  51A8               	movf	Zip@i_1425& (0+255),w,b
  2944  001A02  27A1               	addwf	(??_Zip+2)& (0+255),f,b
  2945  001A04  51A9               	movf	(Zip@i_1425+1)& (0+255),w,b
  2946  001A06  23A2               	addwfc	(??_Zip+3)& (0+255),f,b
  2947  001A08  0E04               	movlw	4
  2948  001A0A  25A1               	addwf	(??_Zip+2)& (0+255),w,b
  2949  001A0C  6ED9               	movwf	fsr2l,c
  2950  001A0E  0E00               	movlw	0
  2951  001A10  21A2               	addwfc	(??_Zip+3)& (0+255),w,b
  2952  001A12  6EDA               	movwf	fsr2h,c
  2953  001A14  50DF               	movf	indf2,w,c
  2954  001A16  6FA3               	movwf	(??_Zip+4)& (0+255),b
  2955  001A18  2BA0               	incf	(??_Zip+1)& (0+255),f,b
  2956  001A1A  D002               	goto	u4544
  2957  001A1C                     u4545:
  2958  001A1C  90D8               	bcf	status,0,c
  2959  001A1E  33A3               	rrcf	(??_Zip+4)& (0+255),f,b
  2960  001A20                     u4544:
  2961  001A20  2FA0               	decfsz	(??_Zip+1)& (0+255),f,b
  2962  001A22  D7FC               	goto	u4545
  2963  001A24  0E01               	movlw	1
  2964  001A26  0100               	movlb	0	; () banked
  2965  001A28  17A3               	andwf	(??_Zip+4)& (0+255),f,b
  2966  001A2A  2B9F               	incf	??_Zip& (0+255),f,b
  2967  001A2C  D002               	goto	u4554
  2968  001A2E                     u4555:
  2969  001A2E  90D8               	bcf	status,0,c
  2970  001A30  37A3               	rlcf	(??_Zip+4)& (0+255),f,b
  2971  001A32                     u4554:
  2972  001A32  2F9F               	decfsz	??_Zip& (0+255),f,b
  2973  001A34  D7FC               	goto	u4555
  2974  001A36  0100               	movlb	0	; () banked
  2975  001A38  6B83               	clrf	___ftdiv@f2& (0+255),b
  2976  001A3A  6B84               	clrf	(___ftdiv@f2+1)& (0+255),b
  2977  001A3C  0E41               	movlw	65
  2978  001A3E  6F85               	movwf	(___ftdiv@f2+2)& (0+255),b
  2979  001A40  51A5               	movf	Zip@LIndex& (0+255),w,b
  2980  001A42  EC44  F018         	call	___lbtoft
  2981  001A46  C068  F080         	movff	?___lbtoft,___ftdiv@f1
  2982  001A4A  C069  F081         	movff	?___lbtoft+1,___ftdiv@f1+1
  2983  001A4E  C06A  F082         	movff	?___lbtoft+2,___ftdiv@f1+2
  2984  001A52  EC48  F00F         	call	___ftdiv	;wreg free
  2985  001A56  C080  F08F         	movff	?___ftdiv,___fttol@f1
  2986  001A5A  C081  F090         	movff	?___ftdiv+1,___fttol@f1+1
  2987  001A5E  C082  F091         	movff	?___ftdiv+2,___fttol@f1+2
  2988  001A62  ECEB  F00E         	call	___fttol	;wreg free
  2989  001A66  51A4               	movf	Zip@LBytes& (0+255),w,b
  2990  001A68  258F               	addwf	?___fttol& (0+255),w,b
  2991  001A6A  6ED9               	movwf	fsr2l,c
  2992  001A6C  6ADA               	clrf	fsr2h,c
  2993  001A6E  51A3               	movf	(??_Zip+4)& (0+255),w,b
  2994  001A70  12DF               	iorwf	indf2,f,c
  2995                           
  2996                           ; BSR set to: 0
  2997  001A72  4BAA               	infsnz	Zip@j& (0+255),f,b
  2998  001A74  2BAB               	incf	(Zip@j+1)& (0+255),f,b
  2999                           
  3000                           ; BSR set to: 0
  3001  001A76  BFAB               	btfsc	(Zip@j+1)& (0+255),7,b
  3002  001A78  D7B1               	goto	l4326
  3003  001A7A  51AB               	movf	(Zip@j+1)& (0+255),w,b
  3004  001A7C  E103               	bnz	u4560
  3005  001A7E  0E06               	movlw	6
  3006  001A80  5DAA               	subwf	Zip@j& (0+255),w,b
  3007  001A82  E3AC               	bnc	l4326
  3008  001A84                     u4560:
  3009                           
  3010                           ; BSR set to: 0
  3011  001A84  4BA8               	infsnz	Zip@i_1425& (0+255),f,b
  3012  001A86  2BA9               	incf	(Zip@i_1425+1)& (0+255),f,b
  3013                           
  3014                           ; BSR set to: 0
  3015  001A88  51A9               	movf	(Zip@i_1425+1)& (0+255),w,b
  3016  001A8A  E105               	bnz	u4570
  3017  001A8C  0E08               	movlw	8
  3018  001A8E  5DA8               	subwf	Zip@i_1425& (0+255),w,b
  3019  001A90  B0D8               	btfsc	status,0,c
  3020  001A92  0012               	return	
  3021  001A94  D7A1               	goto	l617
  3022  001A96                     u4570:
  3023                           
  3024                           ; BSR set to: 0
  3025  001A96  0012               	return		;funcret
  3026  001A98                     __end_of_Zip:
  3027                           	opt stack 0
  3028                           tblptru	equ	0xFF8
  3029                           tblptrh	equ	0xFF7
  3030                           tblptrl	equ	0xFF6
  3031                           tablat	equ	0xFF5
  3032                           prodl	equ	0xFF3
  3033                           postinc0	equ	0xFEE
  3034                           plusw0	equ	0xFEB
  3035                           wreg	equ	0xFE8
  3036                           postinc1	equ	0xFE6
  3037                           postdec1	equ	0xFE5
  3038                           fsr1h	equ	0xFE2
  3039                           fsr1l	equ	0xFE1
  3040                           indf2	equ	0xFDF
  3041                           postinc2	equ	0xFDE
  3042                           postdec2	equ	0xFDD
  3043                           plusw2	equ	0xFDB
  3044                           fsr2h	equ	0xFDA
  3045                           fsr2l	equ	0xFD9
  3046                           status	equ	0xFD8
  3047                           
  3048 ;; *************** function _PauseHub *****************
  3049 ;; Defined at:
  3050 ;;		line 135 in file "main.c"
  3051 ;; Parameters:    Size  Location     Type
  3052 ;;		None
  3053 ;; Auto vars:     Size  Location     Type
  3054 ;;		None
  3055 ;; Return value:  Size  Location     Type
  3056 ;;                  1    wreg      void 
  3057 ;; Registers used:
  3058 ;;		wreg, status,2
  3059 ;; Tracked objects:
  3060 ;;		On entry : 0/0
  3061 ;;		On exit  : 3F/1
  3062 ;;		Unchanged: 0/0
  3063 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3064 ;;      Params:         0       0       0       0       0       0       0       0       0
  3065 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3066 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3067 ;;      Totals:         0       0       0       0       0       0       0       0       0
  3068 ;;Total ram usage:        0 bytes
  3069 ;; Hardware stack levels used:    1
  3070 ;; Hardware stack levels required when called:    6
  3071 ;; This function calls:
  3072 ;;		Nothing
  3073 ;; This function is called by:
  3074 ;;		_main
  3075 ;; This function uses a non-reentrant model
  3076 ;;
  3077                           
  3078                           	psect	text11
  3079  003236                     __ptext11:
  3080                           	opt stack 0
  3081  003236                     _PauseHub:
  3082                           	opt stack 24
  3083                           
  3084                           ;main.c: 138: _Hub.ReadyToRead = 0;
  3085                           
  3086                           ; BSR set to: 0
  3087                           ;incstack = 0
  3088  003236  0101               	movlb	1	; () banked
  3089  003238  6B87               	clrf	(__Hub+135)& (0+255),b
  3090  00323A                     l4510:
  3091                           
  3092                           ; BSR set to: 1
  3093  00323A  5188               	movf	(__Hub+136)& (0+255),w,b
  3094  00323C  E0FE               	bz	l4510
  3095                           
  3096                           ; BSR set to: 1
  3097  00323E  0012               	return		;funcret
  3098  003240                     __end_of_PauseHub:
  3099                           	opt stack 0
  3100                           tblptru	equ	0xFF8
  3101                           tblptrh	equ	0xFF7
  3102                           tblptrl	equ	0xFF6
  3103                           tablat	equ	0xFF5
  3104                           prodl	equ	0xFF3
  3105                           postinc0	equ	0xFEE
  3106                           plusw0	equ	0xFEB
  3107                           wreg	equ	0xFE8
  3108                           postinc1	equ	0xFE6
  3109                           postdec1	equ	0xFE5
  3110                           fsr1h	equ	0xFE2
  3111                           fsr1l	equ	0xFE1
  3112                           indf2	equ	0xFDF
  3113                           postinc2	equ	0xFDE
  3114                           postdec2	equ	0xFDD
  3115                           plusw2	equ	0xFDB
  3116                           fsr2h	equ	0xFDA
  3117                           fsr2l	equ	0xFD9
  3118                           status	equ	0xFD8
  3119                           
  3120 ;; *************** function _Midi_Read *****************
  3121 ;; Defined at:
  3122 ;;		line 94 in file "midi.c"
  3123 ;; Parameters:    Size  Location     Type
  3124 ;;  AData           1    0[BANK0 ] PTR struct .
  3125 ;;		 -> main@LMidiData(5), 
  3126 ;;  AMidiBuffer     2    1[BANK0 ] PTR struct .
  3127 ;;		 -> _MidiInput(324), 
  3128 ;; Auto vars:     Size  Location     Type
  3129 ;;		None
  3130 ;; Return value:  Size  Location     Type
  3131 ;;                  1    wreg      unsigned char 
  3132 ;; Registers used:
  3133 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  3134 ;; Tracked objects:
  3135 ;;		On entry : 3F/0
  3136 ;;		On exit  : 3F/0
  3137 ;;		Unchanged: 0/0
  3138 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3139 ;;      Params:         0       3       0       0       0       0       0       0       0
  3140 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3141 ;;      Temps:          0       1       0       0       0       0       0       0       0
  3142 ;;      Totals:         0       4       0       0       0       0       0       0       0
  3143 ;;Total ram usage:        4 bytes
  3144 ;; Hardware stack levels used:    1
  3145 ;; Hardware stack levels required when called:    6
  3146 ;; This function calls:
  3147 ;;		Nothing
  3148 ;; This function is called by:
  3149 ;;		_main
  3150 ;; This function uses a non-reentrant model
  3151 ;;
  3152                           
  3153                           	psect	text12
  3154  00259C                     __ptext12:
  3155                           	opt stack 0
  3156  00259C                     _Midi_Read:
  3157                           	opt stack 24
  3158                           
  3159                           ; BSR set to: 0
  3160                           ;midi.c: 96: if (AMidiBuffer->Size > 0)
  3161                           
  3162                           ; BSR set to: 1
  3163                           ;incstack = 0
  3164  00259C  EE21 F043          	lfsr	2,323
  3165  0025A0  5161               	movf	Midi_Read@AMidiBuffer& (0+255),w,b
  3166  0025A2  26D9               	addwf	fsr2l,f,c
  3167  0025A4  5162               	movf	(Midi_Read@AMidiBuffer+1)& (0+255),w,b
  3168  0025A6  22DA               	addwfc	fsr2h,f,c
  3169  0025A8  50DF               	movf	indf2,w,c
  3170  0025AA  E035               	bz	l4612
  3171                           
  3172                           ; BSR set to: 0
  3173                           ;midi.c: 97: {
  3174                           ;midi.c: 98: *AData = AMidiBuffer->Buffer[AMidiBuffer->iBufferRead];
  3175  0025AC  EE21 F040          	lfsr	2,320
  3176  0025B0  5161               	movf	Midi_Read@AMidiBuffer& (0+255),w,b
  3177  0025B2  26D9               	addwf	fsr2l,f,c
  3178  0025B4  5162               	movf	(Midi_Read@AMidiBuffer+1)& (0+255),w,b
  3179  0025B6  22DA               	addwfc	fsr2h,f,c
  3180  0025B8  50DF               	movf	indf2,w,c
  3181  0025BA  0D05               	mullw	5
  3182  0025BC  50F3               	movf	prodl,w,c
  3183  0025BE  2561               	addwf	Midi_Read@AMidiBuffer& (0+255),w,b
  3184  0025C0  6ED9               	movwf	fsr2l,c
  3185  0025C2  50F4               	movf	prodh,w,c
  3186  0025C4  2162               	addwfc	(Midi_Read@AMidiBuffer+1)& (0+255),w,b
  3187  0025C6  6EDA               	movwf	fsr2h,c
  3188  0025C8  5160               	movf	Midi_Read@AData& (0+255),w,b
  3189  0025CA  6EE1               	movwf	fsr1l,c
  3190  0025CC  6AE2               	clrf	fsr1h,c
  3191  0025CE  0E04               	movlw	4
  3192  0025D0                     u4901:
  3193  0025D0  CFDB FFE3          	movff	plusw2,plusw1
  3194  0025D4  06E8               	decf	wreg,f,c
  3195  0025D6  E2FC               	bc	u4901
  3196                           
  3197                           ; BSR set to: 0
  3198                           ;midi.c: 99: AMidiBuffer->Size--;
  3199  0025D8  EE21 F043          	lfsr	2,323
  3200  0025DC  5161               	movf	Midi_Read@AMidiBuffer& (0+255),w,b
  3201  0025DE  26D9               	addwf	fsr2l,f,c
  3202  0025E0  5162               	movf	(Midi_Read@AMidiBuffer+1)& (0+255),w,b
  3203  0025E2  22DA               	addwfc	fsr2h,f,c
  3204  0025E4  06DF               	decf	indf2,f,c
  3205                           
  3206                           ; BSR set to: 0
  3207                           ;midi.c: 100: AMidiBuffer->iBufferRead++;
  3208  0025E6  EE21 F040          	lfsr	2,320
  3209  0025EA  5161               	movf	Midi_Read@AMidiBuffer& (0+255),w,b
  3210  0025EC  26D9               	addwf	fsr2l,f,c
  3211  0025EE  5162               	movf	(Midi_Read@AMidiBuffer+1)& (0+255),w,b
  3212  0025F0  22DA               	addwfc	fsr2h,f,c
  3213  0025F2  2ADF               	incf	indf2,f,c
  3214                           
  3215                           ; BSR set to: 0
  3216                           ;midi.c: 101: if (AMidiBuffer->iBufferRead >= 64)
  3217  0025F4  EE21 F040          	lfsr	2,320
  3218  0025F8  5161               	movf	Midi_Read@AMidiBuffer& (0+255),w,b
  3219  0025FA  26D9               	addwf	fsr2l,f,c
  3220  0025FC  5162               	movf	(Midi_Read@AMidiBuffer+1)& (0+255),w,b
  3221  0025FE  22DA               	addwfc	fsr2h,f,c
  3222  002600  0E3F               	movlw	63
  3223  002602  64DF               	cpfsgt	indf2,c
  3224  002604  0C01               	retlw	1
  3225                           
  3226                           ; BSR set to: 0
  3227                           ;midi.c: 102: AMidiBuffer->iBufferRead = 0;
  3228  002606  EE21 F040          	lfsr	2,320
  3229  00260A  5161               	movf	Midi_Read@AMidiBuffer& (0+255),w,b
  3230  00260C  26D9               	addwf	fsr2l,f,c
  3231  00260E  5162               	movf	(Midi_Read@AMidiBuffer+1)& (0+255),w,b
  3232  002610  22DA               	addwfc	fsr2h,f,c
  3233  002612  6ADF               	clrf	indf2,c
  3234                           
  3235                           ; BSR set to: 0
  3236                           ;midi.c: 103: return 1;
  3237  002614  0C01               	retlw	1
  3238  002616                     l4612:
  3239                           
  3240                           ; BSR set to: 0
  3241                           
  3242                           ; BSR set to: 0
  3243                           ;midi.c: 105: else
  3244                           ;midi.c: 106: return 0;
  3245  002616  0C00               	retlw	0	;funcret
  3246  002618                     __end_of_Midi_Read:
  3247                           	opt stack 0
  3248                           tblptru	equ	0xFF8
  3249                           tblptrh	equ	0xFF7
  3250                           tblptrl	equ	0xFF6
  3251                           tablat	equ	0xFF5
  3252                           prodh	equ	0xFF4
  3253                           prodl	equ	0xFF3
  3254                           postinc0	equ	0xFEE
  3255                           plusw0	equ	0xFEB
  3256                           wreg	equ	0xFE8
  3257                           postinc1	equ	0xFE6
  3258                           postdec1	equ	0xFE5
  3259                           plusw1	equ	0xFE3
  3260                           fsr1h	equ	0xFE2
  3261                           fsr1l	equ	0xFE1
  3262                           indf2	equ	0xFDF
  3263                           postinc2	equ	0xFDE
  3264                           postdec2	equ	0xFDD
  3265                           plusw2	equ	0xFDB
  3266                           fsr2h	equ	0xFDA
  3267                           fsr2l	equ	0xFD9
  3268                           status	equ	0xFD8
  3269                           
  3270 ;; *************** function _Load *****************
  3271 ;; Defined at:
  3272 ;;		line 117 in file "main.c"
  3273 ;; Parameters:    Size  Location     Type
  3274 ;;  AChannel        1    wreg     unsigned char 
  3275 ;; Auto vars:     Size  Location     Type
  3276 ;;  AChannel        1  102[BANK0 ] unsigned char 
  3277 ;;  i               2  105[BANK0 ] int 
  3278 ;;  i               2  103[BANK0 ] int 
  3279 ;;  LBuffer        12   90[BANK0 ] unsigned char [12]
  3280 ;; Return value:  Size  Location     Type
  3281 ;;                  1    wreg      void 
  3282 ;; Registers used:
  3283 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3284 ;; Tracked objects:
  3285 ;;		On entry : 3E/1
  3286 ;;		On exit  : 3F/0
  3287 ;;		Unchanged: 0/0
  3288 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3289 ;;      Params:         0       0       0       0       0       0       0       0       0
  3290 ;;      Locals:         0      17       0       0       0       0       0       0       0
  3291 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3292 ;;      Totals:         0      17       0       0       0       0       0       0       0
  3293 ;;Total ram usage:       17 bytes
  3294 ;; Hardware stack levels used:    1
  3295 ;; Hardware stack levels required when called:   12
  3296 ;; This function calls:
  3297 ;;		_Hub_CopyBuffer
  3298 ;;		_Persistant_LoadBuffer
  3299 ;;		_Persistant_WriteInternalMemory
  3300 ;;		_memcpy
  3301 ;; This function is called by:
  3302 ;;		_main
  3303 ;; This function uses a non-reentrant model
  3304 ;;
  3305                           
  3306                           	psect	text13
  3307  0022FC                     __ptext13:
  3308                           	opt stack 0
  3309  0022FC                     _Load:
  3310                           	opt stack 18
  3311                           
  3312                           ; BSR set to: 0
  3313                           ;incstack = 0
  3314                           ;Load@AChannel stored from wreg
  3315  0022FC  0100               	movlb	0	; () banked
  3316  0022FE  6FC6               	movwf	Load@AChannel& (0+255),b
  3317                           
  3318                           ;main.c: 119: _Hub.PrimaryBuffer.Channel = AChannel;
  3319  002300  C0C6  F164         	movff	Load@AChannel,__Hub+100
  3320                           
  3321                           ;main.c: 122: Persistant_LoadBuffer(&_Hub.PrimaryBuffer);
  3322  002304  0E62               	movlw	low (__Hub+98)
  3323  002306  6FA8               	movwf	Persistant_LoadBuffer@ABuffer& (0+255),b
  3324  002308  0E01               	movlw	high (__Hub+98)
  3325  00230A  6FA9               	movwf	(Persistant_LoadBuffer@ABuffer+1)& (0+255),b
  3326  00230C  ECA0  F010         	call	_Persistant_LoadBuffer	;wreg free
  3327                           
  3328                           ; BSR set to: 0
  3329                           ;main.c: 123: Hub_CopyBuffer();
  3330  002310  EC57  F018         	call	_Hub_CopyBuffer	;wreg free
  3331                           
  3332                           ; BSR set to: 1
  3333                           ;main.c: 124: _Config.Channel = AChannel / 2;
  3334  002314  0100               	movlb	0	; () banked
  3335  002316  90D8               	bcf	status,0,c
  3336  002318  31C6               	rrcf	Load@AChannel& (0+255),w,b
  3337  00231A  0101               	movlb	1	; () banked
  3338  00231C  6F9D               	movwf	__Config& (0+255),b
  3339                           
  3340                           ; BSR set to: 1
  3341                           ;main.c: 125: unsigned char LBuffer[sizeof(_Config)];
  3342                           ;main.c: 126: memcpy(LBuffer, &_Config, sizeof(_Config));
  3343  00231E  0EBA               	movlw	low Load@LBuffer
  3344  002320  0100               	movlb	0	; () banked
  3345  002322  6F60               	movwf	memcpy@d1& (0+255),b
  3346  002324  6B61               	clrf	(memcpy@d1+1)& (0+255),b
  3347  002326  0E9D               	movlw	low __Config
  3348  002328  6F62               	movwf	memcpy@s1& (0+255),b
  3349  00232A  0E01               	movlw	high __Config
  3350  00232C  6F63               	movwf	(memcpy@s1+1)& (0+255),b
  3351  00232E  6B65               	clrf	(memcpy@n+1)& (0+255),b
  3352  002330  0E0C               	movlw	12
  3353  002332  6F64               	movwf	memcpy@n& (0+255),b
  3354  002334  ECB0  F016         	call	_memcpy	;wreg free
  3355                           
  3356                           ; BSR set to: 0
  3357                           ;main.c: 127: for(int i = 0; i < sizeof(_Config); i++)
  3358  002338  6BC7               	clrf	Load@i& (0+255),b
  3359  00233A  6BC8               	clrf	(Load@i+1)& (0+255),b
  3360  00233C                     l4492:
  3361                           
  3362                           ; BSR set to: 0
  3363                           ;main.c: 128: Persistant_WriteInternalMemory(i, LBuffer);
  3364  00233C  C0C7  F062         	movff	Load@i,Persistant_WriteInternalMemory@AAddress
  3365  002340  C0C8  F063         	movff	Load@i+1,Persistant_WriteInternalMemory@AAddress+1
  3366  002344  0EBA               	movlw	low Load@LBuffer
  3367  002346  6F64               	movwf	Persistant_WriteInternalMemory@AData& (0+255),b
  3368  002348  EC32  F017         	call	_Persistant_WriteInternalMemory	;wreg free
  3369  00234C  0100               	movlb	0	; () banked
  3370  00234E  4BC7               	infsnz	Load@i& (0+255),f,b
  3371  002350  2BC8               	incf	(Load@i+1)& (0+255),f,b
  3372                           
  3373                           ; BSR set to: 0
  3374  002352  51C8               	movf	(Load@i+1)& (0+255),w,b
  3375  002354  E103               	bnz	u4840
  3376  002356  0E0C               	movlw	12
  3377  002358  5DC7               	subwf	Load@i& (0+255),w,b
  3378  00235A  E3F0               	bnc	l4492
  3379  00235C                     u4840:
  3380                           
  3381                           ; BSR set to: 0
  3382                           ;main.c: 130: for (int i = 0; i < 2; i++)
  3383  00235C  6BC9               	clrf	Load@i_420& (0+255),b
  3384  00235E  6BCA               	clrf	(Load@i_420+1)& (0+255),b
  3385  002360                     l4502:
  3386                           
  3387                           ; BSR set to: 0
  3388                           ;main.c: 131: _Display.PointMask[i] = 0x08;
  3389  002360  0EC8               	movlw	low (__Display+200)
  3390  002362  25C9               	addwf	Load@i_420& (0+255),w,b
  3391  002364  6ED9               	movwf	fsr2l,c
  3392  002366  0E02               	movlw	high (__Display+200)
  3393  002368  21CA               	addwfc	(Load@i_420+1)& (0+255),w,b
  3394  00236A  6EDA               	movwf	fsr2h,c
  3395  00236C  0E08               	movlw	8
  3396  00236E  6EDF               	movwf	indf2,c
  3397                           
  3398                           ; BSR set to: 0
  3399  002370  4BC9               	infsnz	Load@i_420& (0+255),f,b
  3400  002372  2BCA               	incf	(Load@i_420+1)& (0+255),f,b
  3401                           
  3402                           ; BSR set to: 0
  3403  002374  BFCA               	btfsc	(Load@i_420+1)& (0+255),7,b
  3404  002376  D7F4               	goto	l4502
  3405  002378  51CA               	movf	(Load@i_420+1)& (0+255),w,b
  3406  00237A  E103               	bnz	u4850
  3407  00237C  0E02               	movlw	2
  3408  00237E  5DC9               	subwf	Load@i_420& (0+255),w,b
  3409  002380  E3EF               	bnc	l4502
  3410  002382                     u4850:
  3411                           
  3412                           ; BSR set to: 0
  3413                           ;main.c: 132: _Modified = 0;
  3414  002382  6BE0               	clrf	__Modified& (0+255),b
  3415                           
  3416                           ; BSR set to: 0
  3417  002384  0012               	return		;funcret
  3418  002386                     __end_of_Load:
  3419                           	opt stack 0
  3420                           tblptru	equ	0xFF8
  3421                           tblptrh	equ	0xFF7
  3422                           tblptrl	equ	0xFF6
  3423                           tablat	equ	0xFF5
  3424                           prodh	equ	0xFF4
  3425                           prodl	equ	0xFF3
  3426                           postinc0	equ	0xFEE
  3427                           plusw0	equ	0xFEB
  3428                           wreg	equ	0xFE8
  3429                           postinc1	equ	0xFE6
  3430                           postdec1	equ	0xFE5
  3431                           plusw1	equ	0xFE3
  3432                           fsr1h	equ	0xFE2
  3433                           fsr1l	equ	0xFE1
  3434                           indf2	equ	0xFDF
  3435                           postinc2	equ	0xFDE
  3436                           postdec2	equ	0xFDD
  3437                           plusw2	equ	0xFDB
  3438                           fsr2h	equ	0xFDA
  3439                           fsr2l	equ	0xFD9
  3440                           status	equ	0xFD8
  3441                           
  3442 ;; *************** function _Persistant_WriteInternalMemory *****************
  3443 ;; Defined at:
  3444 ;;		line 80 in file "persistant.c"
  3445 ;; Parameters:    Size  Location     Type
  3446 ;;  AAddress        2    2[BANK0 ] int 
  3447 ;;  AData           1    4[BANK0 ] unsigned char 
  3448 ;; Auto vars:     Size  Location     Type
  3449 ;;  LState          1    5[BANK0 ] unsigned char 
  3450 ;; Return value:  Size  Location     Type
  3451 ;;                  1    wreg      unsigned char 
  3452 ;; Registers used:
  3453 ;;		wreg, status,2, cstack
  3454 ;; Tracked objects:
  3455 ;;		On entry : 3F/0
  3456 ;;		On exit  : 0/0
  3457 ;;		Unchanged: 0/0
  3458 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3459 ;;      Params:         0       3       0       0       0       0       0       0       0
  3460 ;;      Locals:         0       1       0       0       0       0       0       0       0
  3461 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3462 ;;      Totals:         0       4       0       0       0       0       0       0       0
  3463 ;;Total ram usage:        4 bytes
  3464 ;; Hardware stack levels used:    1
  3465 ;; Hardware stack levels required when called:    7
  3466 ;; This function calls:
  3467 ;;		_Persistant_ReadInternalMemory
  3468 ;; This function is called by:
  3469 ;;		_Load
  3470 ;; This function uses a non-reentrant model
  3471 ;;
  3472                           
  3473                           	psect	text14
  3474  002E64                     __ptext14:
  3475                           	opt stack 0
  3476  002E64                     _Persistant_WriteInternalMemory:
  3477                           	opt stack 22
  3478                           
  3479                           ; BSR set to: 0
  3480                           ;persistant.c: 82: EECON1bits.WREN = 1;
  3481                           
  3482                           ; BSR set to: 0
  3483                           ;incstack = 0
  3484  002E64  84A6               	bsf	4006,2,c	;volsfr
  3485                           
  3486                           ;persistant.c: 83: EEADR = AAddress;
  3487  002E66  C062  FFA9         	movff	Persistant_WriteInternalMemory@AAddress,4009	;volatile
  3488                           
  3489                           ;persistant.c: 84: EEDATA = AData;
  3490  002E6A  C064  FFA8         	movff	Persistant_WriteInternalMemory@AData,4008	;volatile
  3491                           
  3492                           ;persistant.c: 85: EECON1bits.EEPGD = 0;
  3493  002E6E  9EA6               	bcf	4006,7,c	;volsfr
  3494                           
  3495                           ;persistant.c: 86: EECON1bits.CFGS = 0;
  3496  002E70  9CA6               	bcf	4006,6,c	;volsfr
  3497                           
  3498                           ; BSR set to: 0
  3499                           ;persistant.c: 87: unsigned char LState = INTCONbits.GIE;
  3500  002E72  0E00               	movlw	0
  3501  002E74  BEF2               	btfsc	intcon,7,c	;volatile
  3502  002E76  0E01               	movlw	1
  3503  002E78  6F65               	movwf	Persistant_WriteInternalMemory@LState& (0+255),b
  3504                           
  3505                           ; BSR set to: 0
  3506                           ;persistant.c: 88: INTCONbits.GIE = 0;
  3507  002E7A  9EF2               	bcf	intcon,7,c	;volatile
  3508                           
  3509                           ; BSR set to: 0
  3510                           ;persistant.c: 90: EECON2 = 0x55;
  3511  002E7C  0E55               	movlw	85
  3512  002E7E  6EA7               	movwf	4007,c	;volsfr
  3513                           
  3514                           ; BSR set to: 0
  3515                           ;persistant.c: 91: EECON2 = 0xAA;
  3516  002E80  0EAA               	movlw	170
  3517  002E82  6EA7               	movwf	4007,c	;volsfr
  3518                           
  3519                           ; BSR set to: 0
  3520                           ;persistant.c: 92: EECON1bits.WR = 1;
  3521  002E84  82A6               	bsf	4006,1,c	;volsfr
  3522                           
  3523                           ; BSR set to: 0
  3524                           ;persistant.c: 94: INTCONbits.GIE = LState;
  3525  002E86  B165               	btfsc	Persistant_WriteInternalMemory@LState& (0+255),0,b
  3526  002E88  D002               	bra	u4025
  3527  002E8A  9EF2               	bcf	intcon,7,c	;volatile
  3528  002E8C  D001               	bra	u4026
  3529  002E8E                     u4025:
  3530  002E8E  8EF2               	bsf	intcon,7,c	;volatile
  3531  002E90                     u4026:
  3532                           
  3533                           ;persistant.c: 95: while (EECON1bits.WR == 1);
  3534  002E90  B2A6               	btfsc	4006,1,c	;volsfr
  3535  002E92  D7FE               	goto	u4026
  3536                           
  3537                           ;persistant.c: 96: EECON1bits.WREN = 0;
  3538  002E94  94A6               	bcf	4006,2,c	;volsfr
  3539                           
  3540                           ;persistant.c: 99: return (bool)(Persistant_ReadInternalMemory(AAddress) == AData);
  3541                           ;	Return value of _Persistant_WriteInternalMemory is never used
  3542  002E96  C062  F060         	movff	Persistant_WriteInternalMemory@AAddress,Persistant_ReadInternalMemory@AAddress
  3543  002E9A  C063  F061         	movff	Persistant_WriteInternalMemory@AAddress+1,Persistant_ReadInternalMemory@AAddress+
      +                          1
  3544  002E9E  EFDE  F018         	goto	_Persistant_ReadInternalMemory	;wreg free
  3545  002EA2                     __end_of_Persistant_WriteInternalMemory:
  3546                           	opt stack 0
  3547                           tblptru	equ	0xFF8
  3548                           tblptrh	equ	0xFF7
  3549                           tblptrl	equ	0xFF6
  3550                           tablat	equ	0xFF5
  3551                           prodh	equ	0xFF4
  3552                           prodl	equ	0xFF3
  3553                           intcon	equ	0xFF2
  3554                           postinc0	equ	0xFEE
  3555                           plusw0	equ	0xFEB
  3556                           wreg	equ	0xFE8
  3557                           postinc1	equ	0xFE6
  3558                           postdec1	equ	0xFE5
  3559                           plusw1	equ	0xFE3
  3560                           fsr1h	equ	0xFE2
  3561                           fsr1l	equ	0xFE1
  3562                           indf2	equ	0xFDF
  3563                           postinc2	equ	0xFDE
  3564                           postdec2	equ	0xFDD
  3565                           plusw2	equ	0xFDB
  3566                           fsr2h	equ	0xFDA
  3567                           fsr2l	equ	0xFD9
  3568                           status	equ	0xFD8
  3569                           
  3570 ;; *************** function _Persistant_ReadInternalMemory *****************
  3571 ;; Defined at:
  3572 ;;		line 70 in file "persistant.c"
  3573 ;; Parameters:    Size  Location     Type
  3574 ;;  AAddress        2    0[BANK0 ] int 
  3575 ;; Auto vars:     Size  Location     Type
  3576 ;;		None
  3577 ;; Return value:  Size  Location     Type
  3578 ;;                  1    wreg      unsigned char 
  3579 ;; Registers used:
  3580 ;;		wreg, status,2
  3581 ;; Tracked objects:
  3582 ;;		On entry : 0/0
  3583 ;;		On exit  : 0/0
  3584 ;;		Unchanged: 0/0
  3585 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3586 ;;      Params:         0       2       0       0       0       0       0       0       0
  3587 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3588 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3589 ;;      Totals:         0       2       0       0       0       0       0       0       0
  3590 ;;Total ram usage:        2 bytes
  3591 ;; Hardware stack levels used:    1
  3592 ;; Hardware stack levels required when called:    6
  3593 ;; This function calls:
  3594 ;;		Nothing
  3595 ;; This function is called by:
  3596 ;;		_Persistant_WriteInternalMemory
  3597 ;; This function uses a non-reentrant model
  3598 ;;
  3599                           
  3600                           	psect	text15
  3601  0031BC                     __ptext15:
  3602                           	opt stack 0
  3603  0031BC                     _Persistant_ReadInternalMemory:
  3604                           	opt stack 22
  3605                           
  3606                           ;persistant.c: 72: EEADR = AAddress;
  3607                           
  3608                           ;incstack = 0
  3609  0031BC  C060  FFA9         	movff	Persistant_ReadInternalMemory@AAddress,4009	;volatile
  3610                           
  3611                           ;persistant.c: 73: EECON1bits.EEPGD = 0;
  3612  0031C0  9EA6               	bcf	4006,7,c	;volsfr
  3613                           
  3614                           ;persistant.c: 74: EECON1bits.CFGS = 0;
  3615  0031C2  9CA6               	bcf	4006,6,c	;volsfr
  3616                           
  3617                           ;persistant.c: 75: EECON1bits.RD = 1;
  3618  0031C4  80A6               	bsf	4006,0,c	;volsfr
  3619                           
  3620                           ;persistant.c: 76: return EEDATA;
  3621  0031C6  50A8               	movf	4008,w,c	;volatile
  3622  0031C8  0012               	return		;funcret
  3623  0031CA                     __end_of_Persistant_ReadInternalMemory:
  3624                           	opt stack 0
  3625                           tblptru	equ	0xFF8
  3626                           tblptrh	equ	0xFF7
  3627                           tblptrl	equ	0xFF6
  3628                           tablat	equ	0xFF5
  3629                           prodh	equ	0xFF4
  3630                           prodl	equ	0xFF3
  3631                           intcon	equ	0xFF2
  3632                           postinc0	equ	0xFEE
  3633                           plusw0	equ	0xFEB
  3634                           wreg	equ	0xFE8
  3635                           postinc1	equ	0xFE6
  3636                           postdec1	equ	0xFE5
  3637                           plusw1	equ	0xFE3
  3638                           fsr1h	equ	0xFE2
  3639                           fsr1l	equ	0xFE1
  3640                           indf2	equ	0xFDF
  3641                           postinc2	equ	0xFDE
  3642                           postdec2	equ	0xFDD
  3643                           plusw2	equ	0xFDB
  3644                           fsr2h	equ	0xFDA
  3645                           fsr2l	equ	0xFD9
  3646                           status	equ	0xFD8
  3647                           
  3648 ;; *************** function _InitApp *****************
  3649 ;; Defined at:
  3650 ;;		line 22 in file "user.c"
  3651 ;; Parameters:    Size  Location     Type
  3652 ;;		None
  3653 ;; Auto vars:     Size  Location     Type
  3654 ;;  test            1  113[BANK0 ] unsigned char 
  3655 ;;  LResult         1    0        unsigned char 
  3656 ;; Return value:  Size  Location     Type
  3657 ;;                  1    wreg      void 
  3658 ;; Registers used:
  3659 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3660 ;; Tracked objects:
  3661 ;;		On entry : 0/0
  3662 ;;		On exit  : 3F/0
  3663 ;;		Unchanged: 0/0
  3664 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3665 ;;      Params:         0       0       0       0       0       0       0       0       0
  3666 ;;      Locals:         0       1       0       0       0       0       0       0       0
  3667 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3668 ;;      Totals:         0       1       0       0       0       0       0       0       0
  3669 ;;Total ram usage:        1 bytes
  3670 ;; Hardware stack levels used:    1
  3671 ;; Hardware stack levels required when called:   12
  3672 ;; This function calls:
  3673 ;;		_Display_Init
  3674 ;;		_Display_ProcessData
  3675 ;;		_Hub_CopyBuffer
  3676 ;;		_Hub_Init
  3677 ;;		_InitDigiPot
  3678 ;;		_Midi_Init
  3679 ;;		_Persistant_Init
  3680 ;;		_Persistant_LoadBuffer
  3681 ;;		_Persistant_ReadExternalMemory
  3682 ;;		_Persistant_WriteExternalMemory
  3683 ;;		_Sequencer_Start
  3684 ;; This function is called by:
  3685 ;;		_main
  3686 ;; This function uses a non-reentrant model
  3687 ;;
  3688                           
  3689                           	psect	text16
  3690  002776                     __ptext16:
  3691                           	opt stack 0
  3692  002776                     _InitApp:
  3693                           	opt stack 18
  3694                           
  3695                           ;user.c: 24: ADCON1 = 0x0F;
  3696                           
  3697                           ;incstack = 0
  3698  002776  0E0F               	movlw	15
  3699  002778  6EC1               	movwf	4033,c	;volatile
  3700                           
  3701                           ;user.c: 33: PEIE = 1;
  3702  00277A  8CF2               	bsf	intcon,6,c	;volatile
  3703                           
  3704                           ;user.c: 34: GIE = 1;
  3705  00277C  8EF2               	bsf	intcon,7,c	;volatile
  3706                           
  3707                           ;user.c: 36: Persistant_Init();
  3708  00277E  ECAD  F018         	call	_Persistant_Init	;wreg free
  3709                           
  3710                           ; BSR set to: 0
  3711                           ;user.c: 37: Hub_Init();
  3712  002782  EC4B  F012         	call	_Hub_Init	;wreg free
  3713                           
  3714                           ; BSR set to: 1
  3715                           ;user.c: 38: Display_Init();
  3716  002786  ECB8  F00A         	call	_Display_Init	;wreg free
  3717                           
  3718                           ; BSR set to: 0
  3719                           ;user.c: 40: bool LResult = Persistant_WriteExternalMemory(0x0001, 0x0F);
  3720  00278A  6B75               	clrf	(Persistant_WriteExternalMemory@AAddress+1)& (0+255),b
  3721  00278C  0E01               	movlw	1
  3722  00278E  6F74               	movwf	Persistant_WriteExternalMemory@AAddress& (0+255),b
  3723  002790  0E0F               	movlw	15
  3724  002792  6F76               	movwf	Persistant_WriteExternalMemory@AData& (0+255),b
  3725  002794  EC6B  F016         	call	_Persistant_WriteExternalMemory	;wreg free
  3726                           
  3727                           ;user.c: 41: unsigned char test = Persistant_ReadExternalMemory(0x0001);
  3728  002798  0100               	movlb	0	; () banked
  3729  00279A  6B72               	clrf	(Persistant_ReadExternalMemory@AAddress+1)& (0+255),b
  3730  00279C  0E01               	movlw	1
  3731  00279E  6F71               	movwf	Persistant_ReadExternalMemory@AAddress& (0+255),b
  3732  0027A0  EC1E  F016         	call	_Persistant_ReadExternalMemory	;wreg free
  3733  0027A4  0100               	movlb	0	; () banked
  3734  0027A6  6FD1               	movwf	InitApp@test& (0+255),b
  3735                           
  3736                           ; BSR set to: 0
  3737                           ;user.c: 51: _Hub.PrimaryBuffer.Channel = test * 2;
  3738  0027A8  51D1               	movf	InitApp@test& (0+255),w,b
  3739  0027AA  0D02               	mullw	2
  3740  0027AC  CFF3 F164          	movff	prodl,__Hub+100
  3741                           
  3742                           ; BSR set to: 0
  3743                           ;user.c: 53: Persistant_LoadBuffer(&_Hub.PrimaryBuffer);
  3744  0027B0  0E62               	movlw	low (__Hub+98)
  3745  0027B2  6FA8               	movwf	Persistant_LoadBuffer@ABuffer& (0+255),b
  3746  0027B4  0E01               	movlw	high (__Hub+98)
  3747  0027B6  6FA9               	movwf	(Persistant_LoadBuffer@ABuffer+1)& (0+255),b
  3748  0027B8  ECA0  F010         	call	_Persistant_LoadBuffer	;wreg free
  3749                           
  3750                           ; BSR set to: 0
  3751                           ;user.c: 54: Hub_CopyBuffer();
  3752  0027BC  EC57  F018         	call	_Hub_CopyBuffer	;wreg free
  3753                           
  3754                           ; BSR set to: 1
  3755                           ;user.c: 56: Display_ProcessData(_Hub.PrimaryBuffer.Channel, _Hub.PrimaryBuffer.Values, 
      +                          1, _Hub.PrimaryBuffer.PushedButton);
  3756  0027C0  0E66               	movlw	low (__Hub+102)
  3757  0027C2  0100               	movlb	0	; () banked
  3758  0027C4  6F68               	movwf	Display_ProcessData@AValues& (0+255),b
  3759  0027C6  0E01               	movlw	high (__Hub+102)
  3760  0027C8  6F69               	movwf	(Display_ProcessData@AValues+1)& (0+255),b
  3761  0027CA  0E01               	movlw	1
  3762  0027CC  6F6A               	movwf	Display_ProcessData@ALoaded& (0+255),b
  3763  0027CE  C163  F06B         	movff	__Hub+99,Display_ProcessData@APushed
  3764  0027D2  0101               	movlb	1	; () banked
  3765  0027D4  5164               	movf	(__Hub+100)& (0+255),w,b
  3766  0027D6  EC1E  F004         	call	_Display_ProcessData
  3767                           
  3768                           ; BSR set to: 2
  3769                           ;user.c: 57: Sequencer_Start();
  3770  0027DA  ECB7  F018         	call	_Sequencer_Start	;wreg free
  3771                           
  3772                           ; BSR set to: 2
  3773                           ;user.c: 58: InitDigiPot();
  3774  0027DE  EC21  F00A         	call	_InitDigiPot	;wreg free
  3775                           
  3776                           ; BSR set to: 0
  3777                           ;user.c: 59: Midi_Init();
  3778  0027E2  EF48  F00B         	goto	_Midi_Init	;wreg free
  3779  0027E6                     __end_of_InitApp:
  3780                           	opt stack 0
  3781                           tblptru	equ	0xFF8
  3782                           tblptrh	equ	0xFF7
  3783                           tblptrl	equ	0xFF6
  3784                           tablat	equ	0xFF5
  3785                           prodh	equ	0xFF4
  3786                           prodl	equ	0xFF3
  3787                           intcon	equ	0xFF2
  3788                           postinc0	equ	0xFEE
  3789                           plusw0	equ	0xFEB
  3790                           wreg	equ	0xFE8
  3791                           postinc1	equ	0xFE6
  3792                           postdec1	equ	0xFE5
  3793                           plusw1	equ	0xFE3
  3794                           fsr1h	equ	0xFE2
  3795                           fsr1l	equ	0xFE1
  3796                           indf2	equ	0xFDF
  3797                           postinc2	equ	0xFDE
  3798                           postdec2	equ	0xFDD
  3799                           plusw2	equ	0xFDB
  3800                           fsr2h	equ	0xFDA
  3801                           fsr2l	equ	0xFD9
  3802                           status	equ	0xFD8
  3803                           
  3804 ;; *************** function _Sequencer_Start *****************
  3805 ;; Defined at:
  3806 ;;		line 6 in file "sequencer.c"
  3807 ;; Parameters:    Size  Location     Type
  3808 ;;		None
  3809 ;; Auto vars:     Size  Location     Type
  3810 ;;		None
  3811 ;; Return value:  Size  Location     Type
  3812 ;;                  1    wreg      void 
  3813 ;; Registers used:
  3814 ;;		None
  3815 ;; Tracked objects:
  3816 ;;		On entry : 3F/2
  3817 ;;		On exit  : 3F/2
  3818 ;;		Unchanged: 3F/0
  3819 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3820 ;;      Params:         0       0       0       0       0       0       0       0       0
  3821 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3822 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3823 ;;      Totals:         0       0       0       0       0       0       0       0       0
  3824 ;;Total ram usage:        0 bytes
  3825 ;; Hardware stack levels used:    1
  3826 ;; Hardware stack levels required when called:    6
  3827 ;; This function calls:
  3828 ;;		Nothing
  3829 ;; This function is called by:
  3830 ;;		_InitApp
  3831 ;; This function uses a non-reentrant model
  3832 ;;
  3833                           
  3834                           	psect	text17
  3835  00316E                     __ptext17:
  3836                           	opt stack 0
  3837  00316E                     _Sequencer_Start:
  3838                           	opt stack 23
  3839                           
  3840                           ; BSR set to: 2
  3841                           ;sequencer.c: 9: T0PS0 = 0;
  3842                           
  3843                           ; BSR set to: 0
  3844                           ;incstack = 0
  3845  00316E  90D5               	bcf	4053,0,c	;volatile
  3846                           
  3847                           ;sequencer.c: 10: T0PS1 = 1;
  3848  003170  82D5               	bsf	4053,1,c	;volatile
  3849                           
  3850                           ;sequencer.c: 11: T0PS2 = 1;
  3851  003172  84D5               	bsf	4053,2,c	;volatile
  3852                           
  3853                           ;sequencer.c: 13: PSA = 0;
  3854  003174  96D5               	bcf	4053,3,c	;volatile
  3855                           
  3856                           ;sequencer.c: 14: T0CS = 0;
  3857  003176  9AD5               	bcf	4053,5,c	;volatile
  3858                           
  3859                           ;sequencer.c: 15: T08BIT = 1;
  3860  003178  8CD5               	bsf	4053,6,c	;volatile
  3861                           
  3862                           ;sequencer.c: 17: TMR0IE = 1;
  3863  00317A  8AF2               	bsf	intcon,5,c	;volatile
  3864                           
  3865                           ;sequencer.c: 18: TMR0ON = 1;
  3866  00317C  8ED5               	bsf	4053,7,c	;volatile
  3867                           
  3868                           ; BSR set to: 2
  3869  00317E  0012               	return		;funcret
  3870  003180                     __end_of_Sequencer_Start:
  3871                           	opt stack 0
  3872                           tblptru	equ	0xFF8
  3873                           tblptrh	equ	0xFF7
  3874                           tblptrl	equ	0xFF6
  3875                           tablat	equ	0xFF5
  3876                           prodh	equ	0xFF4
  3877                           prodl	equ	0xFF3
  3878                           intcon	equ	0xFF2
  3879                           postinc0	equ	0xFEE
  3880                           plusw0	equ	0xFEB
  3881                           wreg	equ	0xFE8
  3882                           postinc1	equ	0xFE6
  3883                           postdec1	equ	0xFE5
  3884                           plusw1	equ	0xFE3
  3885                           fsr1h	equ	0xFE2
  3886                           fsr1l	equ	0xFE1
  3887                           indf2	equ	0xFDF
  3888                           postinc2	equ	0xFDE
  3889                           postdec2	equ	0xFDD
  3890                           plusw2	equ	0xFDB
  3891                           fsr2h	equ	0xFDA
  3892                           fsr2l	equ	0xFD9
  3893                           status	equ	0xFD8
  3894                           
  3895 ;; *************** function _Persistant_WriteExternalMemory *****************
  3896 ;; Defined at:
  3897 ;;		line 51 in file "persistant.c"
  3898 ;; Parameters:    Size  Location     Type
  3899 ;;  AAddress        2   20[BANK0 ] int 
  3900 ;;  AData           1   22[BANK0 ] unsigned char 
  3901 ;; Auto vars:     Size  Location     Type
  3902 ;;		None
  3903 ;; Return value:  Size  Location     Type
  3904 ;;                  1    wreg      unsigned char 
  3905 ;; Registers used:
  3906 ;;		wreg, status,2, status,0, cstack
  3907 ;; Tracked objects:
  3908 ;;		On entry : 3F/0
  3909 ;;		On exit  : 0/0
  3910 ;;		Unchanged: 0/0
  3911 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3912 ;;      Params:         0       3       0       0       0       0       0       0       0
  3913 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3914 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3915 ;;      Totals:         0       3       0       0       0       0       0       0       0
  3916 ;;Total ram usage:        3 bytes
  3917 ;; Hardware stack levels used:    1
  3918 ;; Hardware stack levels required when called:   11
  3919 ;; This function calls:
  3920 ;;		_I2C_Ack
  3921 ;;		_I2C_Stop
  3922 ;;		_I2C_Write
  3923 ;;		_Persistant_Address
  3924 ;;		_Persistant_ReadExternalMemory
  3925 ;; This function is called by:
  3926 ;;		_InitApp
  3927 ;;		_Persistant_SaveBuffer
  3928 ;; This function uses a non-reentrant model
  3929 ;;
  3930                           
  3931                           	psect	text18
  3932  002CD6                     __ptext18:
  3933                           	opt stack 0
  3934  002CD6                     _Persistant_WriteExternalMemory:
  3935                           	opt stack 18
  3936                           
  3937                           ; BSR set to: 0
  3938                           ;persistant.c: 53: if (Persistant_Address(AAddress, 0))
  3939                           
  3940                           ; BSR set to: 2
  3941                           ;incstack = 0
  3942  002CD6  C074  F06E         	movff	Persistant_WriteExternalMemory@AAddress,Persistant_Address@AAddress
  3943  002CDA  C075  F06F         	movff	Persistant_WriteExternalMemory@AAddress+1,Persistant_Address@AAddress+1
  3944  002CDE  6B70               	clrf	Persistant_Address@ARead& (0+255),b
  3945  002CE0  ECC1  F017         	call	_Persistant_Address	;wreg free
  3946  002CE4  0900               	iorlw	0
  3947  002CE6  E01A               	bz	l396
  3948                           
  3949                           ;persistant.c: 54: {
  3950                           ;persistant.c: 55: if (I2C_Write(AData))
  3951  002CE8  0100               	movlb	0	; () banked
  3952  002CEA  5176               	movf	Persistant_WriteExternalMemory@AData& (0+255),w,b
  3953  002CEC  ECF0  F017         	call	_I2C_Write
  3954  002CF0  0900               	iorlw	0
  3955  002CF2  E014               	bz	l396
  3956                           
  3957                           ;persistant.c: 56: {
  3958                           ;persistant.c: 57: if (I2C_Ack(1))
  3959  002CF4  0E01               	movlw	1
  3960  002CF6  EC86  F018         	call	_I2C_Ack
  3961  002CFA  0900               	iorlw	0
  3962  002CFC  E00F               	bz	l396
  3963                           
  3964                           ;persistant.c: 58: {
  3965                           ;persistant.c: 59: if (I2C_Stop())
  3966  002CFE  ECEC  F018         	call	_I2C_Stop	;wreg free
  3967  002D02  0900               	iorlw	0
  3968  002D04  E00B               	bz	l396
  3969                           
  3970                           ; BSR set to: 0
  3971                           ;persistant.c: 60: {
  3972                           ;persistant.c: 61: return Persistant_ReadExternalMemory(AAddress) == AData;
  3973  002D06  C074  F071         	movff	Persistant_WriteExternalMemory@AAddress,Persistant_ReadExternalMemory@AAddress
  3974  002D0A  C075  F072         	movff	Persistant_WriteExternalMemory@AAddress+1,Persistant_ReadExternalMemory@AAddress+
      +                          1
  3975  002D0E  EC1E  F016         	call	_Persistant_ReadExternalMemory	;wreg free
  3976  002D12  0100               	movlb	0	; () banked
  3977  002D14  1976               	xorwf	Persistant_WriteExternalMemory@AData& (0+255),w,b
  3978  002D16  B4D8               	btfsc	status,2,c
  3979  002D18  0C01               	retlw	1
  3980  002D1A  0C00               	retlw	0
  3981  002D1C                     l396:
  3982                           
  3983                           ;persistant.c: 62: }
  3984                           ;persistant.c: 63: }
  3985                           ;persistant.c: 64: }
  3986                           ;persistant.c: 65: }
  3987                           ;persistant.c: 66: return 0;
  3988                           
  3989                           ; BSR set to: 0
  3990  002D1C  0C00               	retlw	0	;funcret
  3991  002D1E                     __end_of_Persistant_WriteExternalMemory:
  3992                           	opt stack 0
  3993                           tblptru	equ	0xFF8
  3994                           tblptrh	equ	0xFF7
  3995                           tblptrl	equ	0xFF6
  3996                           tablat	equ	0xFF5
  3997                           prodh	equ	0xFF4
  3998                           prodl	equ	0xFF3
  3999                           intcon	equ	0xFF2
  4000                           postinc0	equ	0xFEE
  4001                           plusw0	equ	0xFEB
  4002                           wreg	equ	0xFE8
  4003                           postinc1	equ	0xFE6
  4004                           postdec1	equ	0xFE5
  4005                           plusw1	equ	0xFE3
  4006                           fsr1h	equ	0xFE2
  4007                           fsr1l	equ	0xFE1
  4008                           indf2	equ	0xFDF
  4009                           postinc2	equ	0xFDE
  4010                           postdec2	equ	0xFDD
  4011                           plusw2	equ	0xFDB
  4012                           fsr2h	equ	0xFDA
  4013                           fsr2l	equ	0xFD9
  4014                           status	equ	0xFD8
  4015                           
  4016 ;; *************** function _Persistant_LoadBuffer *****************
  4017 ;; Defined at:
  4018 ;;		line 114 in file "persistant.c"
  4019 ;; Parameters:    Size  Location     Type
  4020 ;;  ABuffer         2   72[BANK0 ] PTR struct .
  4021 ;;		 -> _Hub(157), 
  4022 ;; Auto vars:     Size  Location     Type
  4023 ;;  i               1   89[BANK0 ] unsigned char 
  4024 ;;  LZip           10   78[BANK0 ] struct .
  4025 ;;  LChannel        1   88[BANK0 ] unsigned char 
  4026 ;;  LResult         1    0        unsigned char 
  4027 ;; Return value:  Size  Location     Type
  4028 ;;                  1    wreg      unsigned char 
  4029 ;; Registers used:
  4030 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4031 ;; Tracked objects:
  4032 ;;		On entry : 3F/0
  4033 ;;		On exit  : 3F/0
  4034 ;;		Unchanged: 0/0
  4035 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4036 ;;      Params:         0       2       0       0       0       0       0       0       0
  4037 ;;      Locals:         0      13       0       0       0       0       0       0       0
  4038 ;;      Temps:          0       3       0       0       0       0       0       0       0
  4039 ;;      Totals:         0      18       0       0       0       0       0       0       0
  4040 ;;Total ram usage:       18 bytes
  4041 ;; Hardware stack levels used:    1
  4042 ;; Hardware stack levels required when called:   11
  4043 ;; This function calls:
  4044 ;;		_Persistant_ReadExternalMemory
  4045 ;;		_UnZip
  4046 ;;		_memcpy
  4047 ;; This function is called by:
  4048 ;;		_Load
  4049 ;;		_InitApp
  4050 ;; This function uses a non-reentrant model
  4051 ;;
  4052                           
  4053                           	psect	text19
  4054  002140                     __ptext19:
  4055                           	opt stack 0
  4056  002140                     _Persistant_LoadBuffer:
  4057                           	opt stack 18
  4058                           
  4059                           ; BSR set to: 0
  4060                           ;persistant.c: 117: unsigned char LChannel = ABuffer->Channel;
  4061                           
  4062                           ; BSR set to: 0
  4063                           
  4064                           ;incstack = 0
  4065  002140  EE20 F002          	lfsr	2,2
  4066  002144  51A8               	movf	Persistant_LoadBuffer@ABuffer& (0+255),w,b
  4067  002146  26D9               	addwf	fsr2l,f,c
  4068  002148  51A9               	movf	(Persistant_LoadBuffer@ABuffer+1)& (0+255),w,b
  4069  00214A  22DA               	addwfc	fsr2h,f,c
  4070  00214C  50DF               	movf	indf2,w,c
  4071  00214E  6FB8               	movwf	Persistant_LoadBuffer@LChannel& (0+255),b
  4072                           
  4073                           ; BSR set to: 0
  4074                           ;persistant.c: 118: ZipContainer LZip;
  4075                           ;persistant.c: 119: LZip.Buffer = ABuffer;
  4076  002150  C0A8  F0AE         	movff	Persistant_LoadBuffer@ABuffer,Persistant_LoadBuffer@LZip
  4077  002154  C0A9  F0AF         	movff	Persistant_LoadBuffer@ABuffer+1,Persistant_LoadBuffer@LZip+1
  4078                           
  4079                           ; BSR set to: 0
  4080                           ;persistant.c: 120: for (char i = 0; i < sizeof(LZip.Bytes); i++)
  4081  002158  6BB9               	clrf	Persistant_LoadBuffer@i& (0+255),b
  4082  00215A                     l3954:
  4083                           
  4084                           ; BSR set to: 0
  4085                           ;persistant.c: 121: LZip.Bytes[i] = Persistant_ReadExternalMemory((LChannel / 2 ) * size
      +                          of(LZip.Bytes) + i);
  4086  00215A  C0B9  F0AA         	movff	Persistant_LoadBuffer@i,??_Persistant_LoadBuffer
  4087  00215E  0E02               	movlw	2
  4088  002160  27AA               	addwf	??_Persistant_LoadBuffer& (0+255),f,b
  4089  002162  51AA               	movf	??_Persistant_LoadBuffer& (0+255),w,b
  4090  002164  0FAE               	addlw	low Persistant_LoadBuffer@LZip
  4091  002166  6ED9               	movwf	fsr2l,c
  4092  002168  6ADA               	clrf	fsr2h,c
  4093  00216A  90D8               	bcf	status,0,c
  4094  00216C  31B8               	rrcf	Persistant_LoadBuffer@LChannel& (0+255),w,b
  4095  00216E  6FAB               	movwf	(??_Persistant_LoadBuffer+1)& (0+255),b
  4096  002170  6BAC               	clrf	(??_Persistant_LoadBuffer+2)& (0+255),b
  4097  002172  90D8               	bcf	status,0,c
  4098  002174  37AB               	rlcf	(??_Persistant_LoadBuffer+1)& (0+255),f,b
  4099  002176  37AC               	rlcf	(??_Persistant_LoadBuffer+2)& (0+255),f,b
  4100  002178  90D8               	bcf	status,0,c
  4101  00217A  37AB               	rlcf	(??_Persistant_LoadBuffer+1)& (0+255),f,b
  4102  00217C  37AC               	rlcf	(??_Persistant_LoadBuffer+2)& (0+255),f,b
  4103  00217E  90D8               	bcf	status,0,c
  4104  002180  37AB               	rlcf	(??_Persistant_LoadBuffer+1)& (0+255),f,b
  4105  002182  37AC               	rlcf	(??_Persistant_LoadBuffer+2)& (0+255),f,b
  4106  002184  51B9               	movf	Persistant_LoadBuffer@i& (0+255),w,b
  4107  002186  25AB               	addwf	(??_Persistant_LoadBuffer+1)& (0+255),w,b
  4108  002188  6F71               	movwf	Persistant_ReadExternalMemory@AAddress& (0+255),b
  4109  00218A  0E00               	movlw	0
  4110  00218C  21AC               	addwfc	(??_Persistant_LoadBuffer+2)& (0+255),w,b
  4111  00218E  6F72               	movwf	(Persistant_ReadExternalMemory@AAddress+1)& (0+255),b
  4112  002190  EC1E  F016         	call	_Persistant_ReadExternalMemory	;wreg free
  4113  002194  6EDF               	movwf	indf2,c
  4114  002196  0100               	movlb	0	; () banked
  4115  002198  2BB9               	incf	Persistant_LoadBuffer@i& (0+255),f,b
  4116                           
  4117                           ; BSR set to: 0
  4118  00219A  0E07               	movlw	7
  4119  00219C  65B9               	cpfsgt	Persistant_LoadBuffer@i& (0+255),b
  4120  00219E  D7DD               	goto	l3954
  4121                           
  4122                           ; BSR set to: 0
  4123                           ;persistant.c: 122: UnZip(&LZip);
  4124  0021A0  0EAE               	movlw	low Persistant_LoadBuffer@LZip
  4125  0021A2  6F9E               	movwf	UnZip@AZip& (0+255),b
  4126  0021A4  ECB7  F00D         	call	_UnZip	;wreg free
  4127                           
  4128                           ; BSR set to: 0
  4129                           ;persistant.c: 124: ABuffer->Channel = LChannel;
  4130  0021A8  EE20 F002          	lfsr	2,2
  4131  0021AC  51A8               	movf	Persistant_LoadBuffer@ABuffer& (0+255),w,b
  4132  0021AE  26D9               	addwf	fsr2l,f,c
  4133  0021B0  51A9               	movf	(Persistant_LoadBuffer@ABuffer+1)& (0+255),w,b
  4134  0021B2  22DA               	addwfc	fsr2h,f,c
  4135  0021B4  C0B8  FFDF         	movff	Persistant_LoadBuffer@LChannel,indf2
  4136                           
  4137                           ; BSR set to: 0
  4138                           ;persistant.c: 125: _Hub.CurrentChannel = LChannel;
  4139  0021B8  C0B8  F18C         	movff	Persistant_LoadBuffer@LChannel,__Hub+140
  4140                           
  4141                           ; BSR set to: 0
  4142                           ;persistant.c: 126: memcpy(&_Hub.BackupBuffer, ABuffer, sizeof(DataBuffer));
  4143  0021BC  0E7A               	movlw	low (__Hub+122)
  4144  0021BE  6F60               	movwf	memcpy@d1& (0+255),b
  4145  0021C0  0E01               	movlw	high (__Hub+122)
  4146  0021C2  6F61               	movwf	(memcpy@d1+1)& (0+255),b
  4147  0021C4  C0A8  F062         	movff	Persistant_LoadBuffer@ABuffer,memcpy@s1
  4148  0021C8  C0A9  F063         	movff	Persistant_LoadBuffer@ABuffer+1,memcpy@s1+1
  4149  0021CC  6B65               	clrf	(memcpy@n+1)& (0+255),b
  4150  0021CE  0E0C               	movlw	12
  4151  0021D0  6F64               	movwf	memcpy@n& (0+255),b
  4152  0021D2  EFB0  F016         	goto	_memcpy	;wreg free
  4153  0021D6                     __end_of_Persistant_LoadBuffer:
  4154                           	opt stack 0
  4155                           tblptru	equ	0xFF8
  4156                           tblptrh	equ	0xFF7
  4157                           tblptrl	equ	0xFF6
  4158                           tablat	equ	0xFF5
  4159                           prodh	equ	0xFF4
  4160                           prodl	equ	0xFF3
  4161                           intcon	equ	0xFF2
  4162                           postinc0	equ	0xFEE
  4163                           plusw0	equ	0xFEB
  4164                           wreg	equ	0xFE8
  4165                           postinc1	equ	0xFE6
  4166                           postdec1	equ	0xFE5
  4167                           plusw1	equ	0xFE3
  4168                           fsr1h	equ	0xFE2
  4169                           fsr1l	equ	0xFE1
  4170                           indf2	equ	0xFDF
  4171                           postinc2	equ	0xFDE
  4172                           postdec2	equ	0xFDD
  4173                           plusw2	equ	0xFDB
  4174                           fsr2h	equ	0xFDA
  4175                           fsr2l	equ	0xFD9
  4176                           status	equ	0xFD8
  4177                           
  4178 ;; *************** function _UnZip *****************
  4179 ;; Defined at:
  4180 ;;		line 25 in file "zip.c"
  4181 ;; Parameters:    Size  Location     Type
  4182 ;;  AZip            1   62[BANK0 ] PTR struct .
  4183 ;;		 -> Persistant_LoadBuffer@LZip(10), 
  4184 ;; Auto vars:     Size  Location     Type
  4185 ;;  LIndex          1   67[BANK0 ] unsigned char 
  4186 ;;  j               2   70[BANK0 ] int 
  4187 ;;  LValue          1   66[BANK0 ] unsigned char 
  4188 ;;  i               2   68[BANK0 ] int 
  4189 ;; Return value:  Size  Location     Type
  4190 ;;                  1    wreg      unsigned char 
  4191 ;; Registers used:
  4192 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4193 ;; Tracked objects:
  4194 ;;		On entry : 3F/0
  4195 ;;		On exit  : 3F/0
  4196 ;;		Unchanged: 0/0
  4197 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4198 ;;      Params:         0       1       0       0       0       0       0       0       0
  4199 ;;      Locals:         0       6       0       0       0       0       0       0       0
  4200 ;;      Temps:          0       3       0       0       0       0       0       0       0
  4201 ;;      Totals:         0      10       0       0       0       0       0       0       0
  4202 ;;Total ram usage:       10 bytes
  4203 ;; Hardware stack levels used:    1
  4204 ;; Hardware stack levels required when called:    8
  4205 ;; This function calls:
  4206 ;;		___ftdiv
  4207 ;;		___fttol
  4208 ;;		___lbtoft
  4209 ;; This function is called by:
  4210 ;;		_Persistant_LoadBuffer
  4211 ;; This function uses a non-reentrant model
  4212 ;;
  4213                           
  4214                           	psect	text20
  4215  001B6E                     __ptext20:
  4216                           	opt stack 0
  4217  001B6E                     _UnZip:
  4218                           	opt stack 20
  4219                           
  4220                           ; BSR set to: 0
  4221                           ;zip.c: 27: for(int i = 0; i < 8; i++)
  4222                           
  4223                           ; BSR set to: 0
  4224                           ;incstack = 0
  4225  001B6E  6BA4               	clrf	UnZip@i& (0+255),b
  4226  001B70  6BA5               	clrf	(UnZip@i+1)& (0+255),b
  4227  001B72                     l624:
  4228                           
  4229                           ; BSR set to: 0
  4230                           ;zip.c: 28: {
  4231                           ;zip.c: 29: char LValue = 0x00;
  4232  001B72  6BA2               	clrf	UnZip@LValue& (0+255),b
  4233                           
  4234                           ;zip.c: 30: for(int j = 0; j < 6; j++)
  4235  001B74  6BA6               	clrf	UnZip@j& (0+255),b
  4236  001B76  6BA7               	clrf	(UnZip@j+1)& (0+255),b
  4237  001B78                     l3834:
  4238                           
  4239                           ; BSR set to: 0
  4240                           ;zip.c: 31: {
  4241                           ;zip.c: 32: char LIndex = i * 6 + j;
  4242  001B78  51A4               	movf	UnZip@i& (0+255),w,b
  4243  001B7A  0D06               	mullw	6
  4244  001B7C  50F3               	movf	prodl,w,c
  4245  001B7E  25A6               	addwf	UnZip@j& (0+255),w,b
  4246  001B80  6FA3               	movwf	UnZip@LIndex& (0+255),b
  4247                           
  4248                           ; BSR set to: 0
  4249                           ;zip.c: 33: LValue |= ((AZip->Bytes[(char)(LIndex / 8.0f)] >> (LIndex % 8)) & 0x01) << j
      +                          ;
  4250  001B82  C0A6  F09F         	movff	UnZip@j,??_UnZip
  4251  001B86  C0A3  F0A0         	movff	UnZip@LIndex,??_UnZip+1
  4252  001B8A  0E07               	movlw	7
  4253  001B8C  17A0               	andwf	(??_UnZip+1)& (0+255),f,b
  4254  001B8E  6B83               	clrf	___ftdiv@f2& (0+255),b
  4255  001B90  6B84               	clrf	(___ftdiv@f2+1)& (0+255),b
  4256  001B92  0E41               	movlw	65
  4257  001B94  6F85               	movwf	(___ftdiv@f2+2)& (0+255),b
  4258  001B96  51A3               	movf	UnZip@LIndex& (0+255),w,b
  4259  001B98  EC44  F018         	call	___lbtoft
  4260  001B9C  C068  F080         	movff	?___lbtoft,___ftdiv@f1
  4261  001BA0  C069  F081         	movff	?___lbtoft+1,___ftdiv@f1+1
  4262  001BA4  C06A  F082         	movff	?___lbtoft+2,___ftdiv@f1+2
  4263  001BA8  EC48  F00F         	call	___ftdiv	;wreg free
  4264  001BAC  C080  F08F         	movff	?___ftdiv,___fttol@f1
  4265  001BB0  C081  F090         	movff	?___ftdiv+1,___fttol@f1+1
  4266  001BB4  C082  F091         	movff	?___ftdiv+2,___fttol@f1+2
  4267  001BB8  ECEB  F00E         	call	___fttol	;wreg free
  4268  001BBC  519E               	movf	UnZip@AZip& (0+255),w,b
  4269  001BBE  258F               	addwf	?___fttol& (0+255),w,b
  4270  001BC0  6ED9               	movwf	fsr2l,c
  4271  001BC2  6ADA               	clrf	fsr2h,c
  4272  001BC4  0E02               	movlw	2
  4273  001BC6  26D9               	addwf	fsr2l,f,c
  4274  001BC8  50DF               	movf	indf2,w,c
  4275  001BCA  6FA1               	movwf	(??_UnZip+2)& (0+255),b
  4276  001BCC  2BA0               	incf	(??_UnZip+1)& (0+255),f,b
  4277  001BCE  D002               	goto	u3874
  4278  001BD0                     u3875:
  4279  001BD0  90D8               	bcf	status,0,c
  4280  001BD2  33A1               	rrcf	(??_UnZip+2)& (0+255),f,b
  4281  001BD4                     u3874:
  4282  001BD4  2FA0               	decfsz	(??_UnZip+1)& (0+255),f,b
  4283  001BD6  D7FC               	goto	u3875
  4284  001BD8  0E01               	movlw	1
  4285  001BDA  0100               	movlb	0	; () banked
  4286  001BDC  17A1               	andwf	(??_UnZip+2)& (0+255),f,b
  4287  001BDE  2B9F               	incf	??_UnZip& (0+255),f,b
  4288  001BE0  D002               	goto	u3884
  4289  001BE2                     u3885:
  4290  001BE2  90D8               	bcf	status,0,c
  4291  001BE4  37A1               	rlcf	(??_UnZip+2)& (0+255),f,b
  4292  001BE6                     u3884:
  4293  001BE6  2F9F               	decfsz	??_UnZip& (0+255),f,b
  4294  001BE8  D7FC               	goto	u3885
  4295  001BEA  0100               	movlb	0	; () banked
  4296  001BEC  51A1               	movf	(??_UnZip+2)& (0+255),w,b
  4297  001BEE  13A2               	iorwf	UnZip@LValue& (0+255),f,b
  4298                           
  4299                           ; BSR set to: 0
  4300  001BF0  4BA6               	infsnz	UnZip@j& (0+255),f,b
  4301  001BF2  2BA7               	incf	(UnZip@j+1)& (0+255),f,b
  4302                           
  4303                           ; BSR set to: 0
  4304  001BF4  BFA7               	btfsc	(UnZip@j+1)& (0+255),7,b
  4305  001BF6  D7C0               	goto	l3834
  4306  001BF8  51A7               	movf	(UnZip@j+1)& (0+255),w,b
  4307  001BFA  E103               	bnz	u3890
  4308  001BFC  0E06               	movlw	6
  4309  001BFE  5DA6               	subwf	UnZip@j& (0+255),w,b
  4310  001C00  E3BB               	bnc	l3834
  4311  001C02                     u3890:
  4312                           
  4313                           ; BSR set to: 0
  4314                           ;zip.c: 34: }
  4315                           ;zip.c: 35: AZip->Buffer->Values[i] = LValue;
  4316  001C02  519E               	movf	UnZip@AZip& (0+255),w,b
  4317  001C04  6ED9               	movwf	fsr2l,c
  4318  001C06  6ADA               	clrf	fsr2h,c
  4319  001C08  CFDE F09F          	movff	postinc2,??_UnZip
  4320  001C0C  CFDD F0A0          	movff	postdec2,??_UnZip+1
  4321  001C10  51A4               	movf	UnZip@i& (0+255),w,b
  4322  001C12  279F               	addwf	??_UnZip& (0+255),f,b
  4323  001C14  51A5               	movf	(UnZip@i+1)& (0+255),w,b
  4324  001C16  23A0               	addwfc	(??_UnZip+1)& (0+255),f,b
  4325  001C18  0E04               	movlw	4
  4326  001C1A  259F               	addwf	??_UnZip& (0+255),w,b
  4327  001C1C  6ED9               	movwf	fsr2l,c
  4328  001C1E  0E00               	movlw	0
  4329  001C20  21A0               	addwfc	(??_UnZip+1)& (0+255),w,b
  4330  001C22  6EDA               	movwf	fsr2h,c
  4331  001C24  C0A2  FFDF         	movff	UnZip@LValue,indf2
  4332                           
  4333                           ; BSR set to: 0
  4334  001C28  4BA4               	infsnz	UnZip@i& (0+255),f,b
  4335  001C2A  2BA5               	incf	(UnZip@i+1)& (0+255),f,b
  4336                           
  4337                           ; BSR set to: 0
  4338  001C2C  BFA5               	btfsc	(UnZip@i+1)& (0+255),7,b
  4339  001C2E  D7A1               	goto	l624
  4340  001C30  51A5               	movf	(UnZip@i+1)& (0+255),w,b
  4341  001C32  E105               	bnz	u3900
  4342  001C34  0E08               	movlw	8
  4343  001C36  5DA4               	subwf	UnZip@i& (0+255),w,b
  4344  001C38  B0D8               	btfsc	status,0,c
  4345  001C3A  0012               	return	
  4346  001C3C  D79A               	goto	l624
  4347  001C3E                     u3900:
  4348                           
  4349                           ; BSR set to: 0
  4350  001C3E  0012               	return		;funcret
  4351  001C40                     __end_of_UnZip:
  4352                           	opt stack 0
  4353                           tblptru	equ	0xFF8
  4354                           tblptrh	equ	0xFF7
  4355                           tblptrl	equ	0xFF6
  4356                           tablat	equ	0xFF5
  4357                           prodh	equ	0xFF4
  4358                           prodl	equ	0xFF3
  4359                           intcon	equ	0xFF2
  4360                           postinc0	equ	0xFEE
  4361                           plusw0	equ	0xFEB
  4362                           wreg	equ	0xFE8
  4363                           postinc1	equ	0xFE6
  4364                           postdec1	equ	0xFE5
  4365                           plusw1	equ	0xFE3
  4366                           fsr1h	equ	0xFE2
  4367                           fsr1l	equ	0xFE1
  4368                           indf2	equ	0xFDF
  4369                           postinc2	equ	0xFDE
  4370                           postdec2	equ	0xFDD
  4371                           plusw2	equ	0xFDB
  4372                           fsr2h	equ	0xFDA
  4373                           fsr2l	equ	0xFD9
  4374                           status	equ	0xFD8
  4375                           
  4376 ;; *************** function _Persistant_ReadExternalMemory *****************
  4377 ;; Defined at:
  4378 ;;		line 31 in file "persistant.c"
  4379 ;; Parameters:    Size  Location     Type
  4380 ;;  AAddress        2   17[BANK0 ] int 
  4381 ;; Auto vars:     Size  Location     Type
  4382 ;;  LResult         1   19[BANK0 ] unsigned char 
  4383 ;; Return value:  Size  Location     Type
  4384 ;;                  1    wreg      unsigned char 
  4385 ;; Registers used:
  4386 ;;		wreg, status,2, status,0, cstack
  4387 ;; Tracked objects:
  4388 ;;		On entry : 3F/0
  4389 ;;		On exit  : 0/0
  4390 ;;		Unchanged: 0/0
  4391 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4392 ;;      Params:         0       2       0       0       0       0       0       0       0
  4393 ;;      Locals:         0       1       0       0       0       0       0       0       0
  4394 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4395 ;;      Totals:         0       3       0       0       0       0       0       0       0
  4396 ;;Total ram usage:        3 bytes
  4397 ;; Hardware stack levels used:    1
  4398 ;; Hardware stack levels required when called:   10
  4399 ;; This function calls:
  4400 ;;		_I2C_Ack
  4401 ;;		_I2C_Read
  4402 ;;		_I2C_Start
  4403 ;;		_I2C_Stop
  4404 ;;		_Persistant_Address
  4405 ;;		_Persistant_ControlByte
  4406 ;; This function is called by:
  4407 ;;		_InitApp
  4408 ;;		_Persistant_WriteExternalMemory
  4409 ;;		_Persistant_LoadBuffer
  4410 ;; This function uses a non-reentrant model
  4411 ;;
  4412                           
  4413                           	psect	text21
  4414  002C3C                     __ptext21:
  4415                           	opt stack 0
  4416  002C3C                     _Persistant_ReadExternalMemory:
  4417                           	opt stack 18
  4418                           
  4419                           ; BSR set to: 0
  4420                           ;persistant.c: 33: if (Persistant_Address(AAddress, 0))
  4421                           
  4422                           ; BSR set to: 0
  4423                           ;incstack = 0
  4424  002C3C  C071  F06E         	movff	Persistant_ReadExternalMemory@AAddress,Persistant_Address@AAddress
  4425  002C40  C072  F06F         	movff	Persistant_ReadExternalMemory@AAddress+1,Persistant_Address@AAddress+1
  4426  002C44  6B70               	clrf	Persistant_Address@ARead& (0+255),b
  4427  002C46  ECC1  F017         	call	_Persistant_Address	;wreg free
  4428  002C4A  0900               	iorlw	0
  4429  002C4C  E01D               	bz	l388
  4430                           
  4431                           ;persistant.c: 34: {
  4432                           ;persistant.c: 35: if (I2C_Start())
  4433  002C4E  ECE5  F018         	call	_I2C_Start	;wreg free
  4434  002C52  0900               	iorlw	0
  4435  002C54  E019               	bz	l388
  4436                           
  4437                           ; BSR set to: 0
  4438                           ;persistant.c: 36: {
  4439                           ;persistant.c: 37: if (Persistant_ControlByte(AAddress, 1))
  4440  002C56  C071  F068         	movff	Persistant_ReadExternalMemory@AAddress,Persistant_ControlByte@AAddress
  4441  002C5A  C072  F069         	movff	Persistant_ReadExternalMemory@AAddress+1,Persistant_ControlByte@AAddress+1
  4442  002C5E  0E01               	movlw	1
  4443  002C60  6F6A               	movwf	Persistant_ControlByte@ARead& (0+255),b
  4444  002C62  ECD9  F017         	call	_Persistant_ControlByte	;wreg free
  4445  002C66  0900               	iorlw	0
  4446  002C68  E00F               	bz	l388
  4447                           
  4448                           ;persistant.c: 38: {
  4449                           ;persistant.c: 39: unsigned char LResult = I2C_Read();
  4450  002C6A  EC1C  F018         	call	_I2C_Read	;wreg free
  4451  002C6E  0100               	movlb	0	; () banked
  4452  002C70  6F73               	movwf	Persistant_ReadExternalMemory@LResult& (0+255),b
  4453                           
  4454                           ;persistant.c: 40: if (I2C_Ack(0))
  4455  002C72  0E00               	movlw	0
  4456  002C74  EC86  F018         	call	_I2C_Ack
  4457  002C78  0900               	iorlw	0
  4458  002C7A  E006               	bz	l388
  4459                           
  4460                           ;persistant.c: 41: {
  4461                           ;persistant.c: 42: if (I2C_Stop())
  4462  002C7C  ECEC  F018         	call	_I2C_Stop	;wreg free
  4463  002C80  0900               	iorlw	0
  4464  002C82  E002               	bz	l388
  4465                           
  4466                           ; BSR set to: 0
  4467                           ;persistant.c: 43: return LResult;
  4468  002C84  5173               	movf	Persistant_ReadExternalMemory@LResult& (0+255),w,b
  4469  002C86  0012               	return	
  4470  002C88                     l388:
  4471                           
  4472                           ;persistant.c: 44: }
  4473                           ;persistant.c: 45: }
  4474                           ;persistant.c: 46: }
  4475                           ;persistant.c: 47: }
  4476                           ;persistant.c: 48: return 0x00;
  4477                           
  4478                           ; BSR set to: 0
  4479  002C88  0C00               	retlw	0	;funcret
  4480  002C8A                     __end_of_Persistant_ReadExternalMemory:
  4481                           	opt stack 0
  4482                           tblptru	equ	0xFF8
  4483                           tblptrh	equ	0xFF7
  4484                           tblptrl	equ	0xFF6
  4485                           tablat	equ	0xFF5
  4486                           prodh	equ	0xFF4
  4487                           prodl	equ	0xFF3
  4488                           intcon	equ	0xFF2
  4489                           postinc0	equ	0xFEE
  4490                           plusw0	equ	0xFEB
  4491                           wreg	equ	0xFE8
  4492                           postinc1	equ	0xFE6
  4493                           postdec1	equ	0xFE5
  4494                           plusw1	equ	0xFE3
  4495                           fsr1h	equ	0xFE2
  4496                           fsr1l	equ	0xFE1
  4497                           indf2	equ	0xFDF
  4498                           postinc2	equ	0xFDE
  4499                           postdec2	equ	0xFDD
  4500                           plusw2	equ	0xFDB
  4501                           fsr2h	equ	0xFDA
  4502                           fsr2l	equ	0xFD9
  4503                           status	equ	0xFD8
  4504                           
  4505 ;; *************** function _Persistant_Address *****************
  4506 ;; Defined at:
  4507 ;;		line 18 in file "persistant.c"
  4508 ;; Parameters:    Size  Location     Type
  4509 ;;  AAddress        2   14[BANK0 ] int 
  4510 ;;  ARead           1   16[BANK0 ] unsigned char 
  4511 ;; Auto vars:     Size  Location     Type
  4512 ;;		None
  4513 ;; Return value:  Size  Location     Type
  4514 ;;                  1    wreg      unsigned char 
  4515 ;; Registers used:
  4516 ;;		wreg, status,2, status,0, cstack
  4517 ;; Tracked objects:
  4518 ;;		On entry : 3F/0
  4519 ;;		On exit  : 0/0
  4520 ;;		Unchanged: 0/0
  4521 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4522 ;;      Params:         0       3       0       0       0       0       0       0       0
  4523 ;;      Locals:         0       0       0       0       0       0       0       0       0
  4524 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4525 ;;      Totals:         0       3       0       0       0       0       0       0       0
  4526 ;;Total ram usage:        3 bytes
  4527 ;; Hardware stack levels used:    1
  4528 ;; Hardware stack levels required when called:    9
  4529 ;; This function calls:
  4530 ;;		_I2C_Ack
  4531 ;;		_I2C_Start
  4532 ;;		_I2C_Write
  4533 ;;		_Persistant_ControlByte
  4534 ;; This function is called by:
  4535 ;;		_Persistant_ReadExternalMemory
  4536 ;;		_Persistant_WriteExternalMemory
  4537 ;; This function uses a non-reentrant model
  4538 ;;
  4539                           
  4540                           	psect	text22
  4541  002F82                     __ptext22:
  4542                           	opt stack 0
  4543  002F82                     _Persistant_Address:
  4544                           	opt stack 18
  4545                           
  4546                           ; BSR set to: 0
  4547                           ;persistant.c: 20: if (I2C_Start())
  4548                           
  4549                           ;incstack = 0
  4550  002F82  ECE5  F018         	call	_I2C_Start	;wreg free
  4551  002F86  0900               	iorlw	0
  4552  002F88  E013               	bz	l3602
  4553                           
  4554                           ; BSR set to: 0
  4555                           ;persistant.c: 21: {
  4556                           ;persistant.c: 22: if (Persistant_ControlByte(AAddress, ARead))
  4557  002F8A  C06E  F068         	movff	Persistant_Address@AAddress,Persistant_ControlByte@AAddress
  4558  002F8E  C06F  F069         	movff	Persistant_Address@AAddress+1,Persistant_ControlByte@AAddress+1
  4559  002F92  C070  F06A         	movff	Persistant_Address@ARead,Persistant_ControlByte@ARead
  4560  002F96  ECD9  F017         	call	_Persistant_ControlByte	;wreg free
  4561  002F9A  0900               	iorlw	0
  4562  002F9C  E009               	bz	l3602
  4563                           
  4564                           ;persistant.c: 23: {
  4565                           ;persistant.c: 24: if (I2C_Write(AAddress & 0xFF))
  4566  002F9E  0100               	movlb	0	; () banked
  4567  002FA0  516E               	movf	Persistant_Address@AAddress& (0+255),w,b
  4568  002FA2  ECF0  F017         	call	_I2C_Write
  4569  002FA6  0900               	iorlw	0
  4570  002FA8  E003               	bz	l3602
  4571                           
  4572                           ;persistant.c: 25: return I2C_Ack(1);
  4573  002FAA  0E01               	movlw	1
  4574  002FAC  EF86  F018         	goto	_I2C_Ack
  4575  002FB0                     l3602:
  4576                           
  4577                           ;persistant.c: 26: }
  4578                           ;persistant.c: 27: }
  4579                           ;persistant.c: 28: return 0;
  4580  002FB0  0C00               	retlw	0	;funcret
  4581  002FB2                     __end_of_Persistant_Address:
  4582                           	opt stack 0
  4583                           tblptru	equ	0xFF8
  4584                           tblptrh	equ	0xFF7
  4585                           tblptrl	equ	0xFF6
  4586                           tablat	equ	0xFF5
  4587                           prodh	equ	0xFF4
  4588                           prodl	equ	0xFF3
  4589                           intcon	equ	0xFF2
  4590                           postinc0	equ	0xFEE
  4591                           plusw0	equ	0xFEB
  4592                           wreg	equ	0xFE8
  4593                           postinc1	equ	0xFE6
  4594                           postdec1	equ	0xFE5
  4595                           plusw1	equ	0xFE3
  4596                           fsr1h	equ	0xFE2
  4597                           fsr1l	equ	0xFE1
  4598                           indf2	equ	0xFDF
  4599                           postinc2	equ	0xFDE
  4600                           postdec2	equ	0xFDD
  4601                           plusw2	equ	0xFDB
  4602                           fsr2h	equ	0xFDA
  4603                           fsr2l	equ	0xFD9
  4604                           status	equ	0xFD8
  4605                           
  4606 ;; *************** function _Persistant_ControlByte *****************
  4607 ;; Defined at:
  4608 ;;		line 11 in file "persistant.c"
  4609 ;; Parameters:    Size  Location     Type
  4610 ;;  AAddress        2    8[BANK0 ] int 
  4611 ;;  ARead           1   10[BANK0 ] unsigned char 
  4612 ;; Auto vars:     Size  Location     Type
  4613 ;;		None
  4614 ;; Return value:  Size  Location     Type
  4615 ;;                  1    wreg      unsigned char 
  4616 ;; Registers used:
  4617 ;;		wreg, status,2, status,0, cstack
  4618 ;; Tracked objects:
  4619 ;;		On entry : 3F/0
  4620 ;;		On exit  : 0/0
  4621 ;;		Unchanged: 0/0
  4622 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4623 ;;      Params:         0       3       0       0       0       0       0       0       0
  4624 ;;      Locals:         0       0       0       0       0       0       0       0       0
  4625 ;;      Temps:          0       3       0       0       0       0       0       0       0
  4626 ;;      Totals:         0       6       0       0       0       0       0       0       0
  4627 ;;Total ram usage:        6 bytes
  4628 ;; Hardware stack levels used:    1
  4629 ;; Hardware stack levels required when called:    8
  4630 ;; This function calls:
  4631 ;;		_I2C_Ack
  4632 ;;		_I2C_Write
  4633 ;; This function is called by:
  4634 ;;		_Persistant_Address
  4635 ;;		_Persistant_ReadExternalMemory
  4636 ;; This function uses a non-reentrant model
  4637 ;;
  4638                           
  4639                           	psect	text23
  4640  002FB2                     __ptext23:
  4641                           	opt stack 0
  4642  002FB2                     _Persistant_ControlByte:
  4643                           	opt stack 19
  4644                           
  4645                           ; BSR set to: 0
  4646                           ;persistant.c: 13: if (I2C_Write(0xA0 | 0x06 & (AAddress >> 7) | ARead))
  4647                           
  4648                           ;incstack = 0
  4649  002FB2  C068  F06B         	movff	Persistant_ControlByte@AAddress,??_Persistant_ControlByte
  4650  002FB6  C069  F06C         	movff	Persistant_ControlByte@AAddress+1,??_Persistant_ControlByte+1
  4651  002FBA  0E07               	movlw	7
  4652  002FBC  6F6D               	movwf	(??_Persistant_ControlByte+2)& (0+255),b
  4653  002FBE                     u3255:
  4654  002FBE  356C               	rlcf	(??_Persistant_ControlByte+1)& (0+255),w,b
  4655  002FC0  336C               	rrcf	(??_Persistant_ControlByte+1)& (0+255),f,b
  4656  002FC2  336B               	rrcf	??_Persistant_ControlByte& (0+255),f,b
  4657  002FC4  2F6D               	decfsz	(??_Persistant_ControlByte+2)& (0+255),f,b
  4658  002FC6  D7FB               	goto	u3255
  4659  002FC8  516B               	movf	??_Persistant_ControlByte& (0+255),w,b
  4660  002FCA  0B06               	andlw	6
  4661  002FCC  116A               	iorwf	Persistant_ControlByte@ARead& (0+255),w,b
  4662  002FCE  09A0               	iorlw	160
  4663  002FD0  ECF0  F017         	call	_I2C_Write
  4664  002FD4  0900               	iorlw	0
  4665  002FD6  E003               	bz	l3422
  4666                           
  4667                           ;persistant.c: 14: return I2C_Ack(1);
  4668  002FD8  0E01               	movlw	1
  4669  002FDA  EF86  F018         	goto	_I2C_Ack
  4670  002FDE                     l3422:
  4671                           
  4672                           ;persistant.c: 15: return 0;
  4673  002FDE  0C00               	retlw	0	;funcret
  4674  002FE0                     __end_of_Persistant_ControlByte:
  4675                           	opt stack 0
  4676                           tblptru	equ	0xFF8
  4677                           tblptrh	equ	0xFF7
  4678                           tblptrl	equ	0xFF6
  4679                           tablat	equ	0xFF5
  4680                           prodh	equ	0xFF4
  4681                           prodl	equ	0xFF3
  4682                           intcon	equ	0xFF2
  4683                           postinc0	equ	0xFEE
  4684                           plusw0	equ	0xFEB
  4685                           wreg	equ	0xFE8
  4686                           postinc1	equ	0xFE6
  4687                           postdec1	equ	0xFE5
  4688                           plusw1	equ	0xFE3
  4689                           fsr1h	equ	0xFE2
  4690                           fsr1l	equ	0xFE1
  4691                           indf2	equ	0xFDF
  4692                           postinc2	equ	0xFDE
  4693                           postdec2	equ	0xFDD
  4694                           plusw2	equ	0xFDB
  4695                           fsr2h	equ	0xFDA
  4696                           fsr2l	equ	0xFD9
  4697                           status	equ	0xFD8
  4698                           
  4699 ;; *************** function _I2C_Write *****************
  4700 ;; Defined at:
  4701 ;;		line 89 in file "I2C.c"
  4702 ;; Parameters:    Size  Location     Type
  4703 ;;  b               1    wreg     unsigned char 
  4704 ;; Auto vars:     Size  Location     Type
  4705 ;;  b               1    7[BANK0 ] unsigned char 
  4706 ;; Return value:  Size  Location     Type
  4707 ;;                  1    wreg      unsigned char 
  4708 ;; Registers used:
  4709 ;;		wreg, status,2, status,0, cstack
  4710 ;; Tracked objects:
  4711 ;;		On entry : 3F/0
  4712 ;;		On exit  : 0/0
  4713 ;;		Unchanged: 0/0
  4714 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4715 ;;      Params:         0       0       0       0       0       0       0       0       0
  4716 ;;      Locals:         0       1       0       0       0       0       0       0       0
  4717 ;;      Temps:          0       2       0       0       0       0       0       0       0
  4718 ;;      Totals:         0       3       0       0       0       0       0       0       0
  4719 ;;Total ram usage:        3 bytes
  4720 ;; Hardware stack levels used:    1
  4721 ;; Hardware stack levels required when called:    7
  4722 ;; This function calls:
  4723 ;;		_I2C_Wait
  4724 ;; This function is called by:
  4725 ;;		_Persistant_ControlByte
  4726 ;;		_Persistant_Address
  4727 ;;		_Persistant_WriteExternalMemory
  4728 ;; This function uses a non-reentrant model
  4729 ;;
  4730                           
  4731                           	psect	text24
  4732  002FE0                     __ptext24:
  4733                           	opt stack 0
  4734  002FE0                     _I2C_Write:
  4735                           	opt stack 19
  4736                           
  4737                           ;incstack = 0
  4738                           ;I2C_Write@b stored from wreg
  4739  002FE0  6F67               	movwf	I2C_Write@b& (0+255),b
  4740                           
  4741                           ;I2C.c: 91: if (I2C_Wait())
  4742  002FE2  ECF6  F014         	call	_I2C_Wait	;wreg free
  4743  002FE6  0900               	iorlw	0
  4744  002FE8  E010               	bz	l3198
  4745                           
  4746                           ; BSR set to: 0
  4747                           ;I2C.c: 95: _I2CCount++;
  4748  002FEA  C067  FFC9         	movff	I2C_Write@b,4041	;volatile
  4749                           
  4750                           ; BSR set to: 0
  4751                           ;I2C.c: 96: _delay((unsigned long)((100)*(20000000/4000.0)));
  4752  002FEE  0E03               	movlw	3
  4753  002FF0  0100               	movlb	0	; () banked
  4754  002FF2  6F66               	movwf	(??_I2C_Write+1)& (0+255),b
  4755  002FF4  0E8A               	movlw	138
  4756  002FF6  6F65               	movwf	??_I2C_Write& (0+255),b
  4757  002FF8  0E55               	movlw	85
  4758  002FFA                     u5317:
  4759  002FFA  2EE8               	decfsz	wreg,f,c
  4760  002FFC  D7FE               	bra	u5317
  4761  002FFE  2F65               	decfsz	??_I2C_Write& (0+255),f,b
  4762  003000  D7FC               	bra	u5317
  4763  003002  2F66               	decfsz	(??_I2C_Write+1)& (0+255),f,b
  4764  003004  D7FA               	bra	u5317
  4765  003006  D000               	nop2	
  4766                           
  4767                           ;I2C.c: 97: return 1;
  4768  003008  0C01               	retlw	1
  4769  00300A                     l3198:
  4770                           
  4771                           ; BSR set to: 0
  4772                           ;I2C.c: 100: return 0;
  4773  00300A  0C00               	retlw	0	;funcret
  4774  00300C                     __end_of_I2C_Write:
  4775                           	opt stack 0
  4776                           tblptru	equ	0xFF8
  4777                           tblptrh	equ	0xFF7
  4778                           tblptrl	equ	0xFF6
  4779                           tablat	equ	0xFF5
  4780                           prodh	equ	0xFF4
  4781                           prodl	equ	0xFF3
  4782                           intcon	equ	0xFF2
  4783                           postinc0	equ	0xFEE
  4784                           plusw0	equ	0xFEB
  4785                           wreg	equ	0xFE8
  4786                           postinc1	equ	0xFE6
  4787                           postdec1	equ	0xFE5
  4788                           plusw1	equ	0xFE3
  4789                           fsr1h	equ	0xFE2
  4790                           fsr1l	equ	0xFE1
  4791                           indf2	equ	0xFDF
  4792                           postinc2	equ	0xFDE
  4793                           postdec2	equ	0xFDD
  4794                           plusw2	equ	0xFDB
  4795                           fsr2h	equ	0xFDA
  4796                           fsr2l	equ	0xFD9
  4797                           status	equ	0xFD8
  4798                           
  4799 ;; *************** function _I2C_Start *****************
  4800 ;; Defined at:
  4801 ;;		line 30 in file "I2C.c"
  4802 ;; Parameters:    Size  Location     Type
  4803 ;;		None
  4804 ;; Auto vars:     Size  Location     Type
  4805 ;;		None
  4806 ;; Return value:  Size  Location     Type
  4807 ;;                  1    wreg      unsigned char 
  4808 ;; Registers used:
  4809 ;;		wreg, status,2, status,0, cstack
  4810 ;; Tracked objects:
  4811 ;;		On entry : 0/0
  4812 ;;		On exit  : 3F/0
  4813 ;;		Unchanged: 0/0
  4814 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4815 ;;      Params:         0       0       0       0       0       0       0       0       0
  4816 ;;      Locals:         0       0       0       0       0       0       0       0       0
  4817 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4818 ;;      Totals:         0       0       0       0       0       0       0       0       0
  4819 ;;Total ram usage:        0 bytes
  4820 ;; Hardware stack levels used:    1
  4821 ;; Hardware stack levels required when called:    7
  4822 ;; This function calls:
  4823 ;;		_I2C_Wait
  4824 ;; This function is called by:
  4825 ;;		_Persistant_Address
  4826 ;;		_Persistant_ReadExternalMemory
  4827 ;; This function uses a non-reentrant model
  4828 ;;
  4829                           
  4830                           	psect	text25
  4831  0031CA                     __ptext25:
  4832                           	opt stack 0
  4833  0031CA                     _I2C_Start:
  4834                           	opt stack 19
  4835                           
  4836                           ;I2C.c: 32: if (I2C_Wait())
  4837                           
  4838                           ;incstack = 0
  4839  0031CA  ECF6  F014         	call	_I2C_Wait	;wreg free
  4840  0031CE  0900               	iorlw	0
  4841  0031D0  E002               	bz	l3434
  4842                           
  4843                           ; BSR set to: 0
  4844                           ;I2C.c: 36: _I2CCount++;
  4845  0031D2  80C5               	bsf	4037,0,c	;volatile
  4846                           
  4847                           ; BSR set to: 0
  4848                           ;I2C.c: 37: return 1;
  4849  0031D4  0C01               	retlw	1
  4850  0031D6                     l3434:
  4851                           
  4852                           ; BSR set to: 0
  4853                           
  4854                           ; BSR set to: 0
  4855                           ;I2C.c: 40: return 0;
  4856  0031D6  0C00               	retlw	0	;funcret
  4857  0031D8                     __end_of_I2C_Start:
  4858                           	opt stack 0
  4859                           tblptru	equ	0xFF8
  4860                           tblptrh	equ	0xFF7
  4861                           tblptrl	equ	0xFF6
  4862                           tablat	equ	0xFF5
  4863                           prodh	equ	0xFF4
  4864                           prodl	equ	0xFF3
  4865                           intcon	equ	0xFF2
  4866                           postinc0	equ	0xFEE
  4867                           plusw0	equ	0xFEB
  4868                           wreg	equ	0xFE8
  4869                           postinc1	equ	0xFE6
  4870                           postdec1	equ	0xFE5
  4871                           plusw1	equ	0xFE3
  4872                           fsr1h	equ	0xFE2
  4873                           fsr1l	equ	0xFE1
  4874                           indf2	equ	0xFDF
  4875                           postinc2	equ	0xFDE
  4876                           postdec2	equ	0xFDD
  4877                           plusw2	equ	0xFDB
  4878                           fsr2h	equ	0xFDA
  4879                           fsr2l	equ	0xFD9
  4880                           status	equ	0xFD8
  4881                           
  4882 ;; *************** function _I2C_Stop *****************
  4883 ;; Defined at:
  4884 ;;		line 60 in file "I2C.c"
  4885 ;; Parameters:    Size  Location     Type
  4886 ;;		None
  4887 ;; Auto vars:     Size  Location     Type
  4888 ;;		None
  4889 ;; Return value:  Size  Location     Type
  4890 ;;                  1    wreg      unsigned char 
  4891 ;; Registers used:
  4892 ;;		wreg, status,2, status,0, cstack
  4893 ;; Tracked objects:
  4894 ;;		On entry : 0/0
  4895 ;;		On exit  : 3F/0
  4896 ;;		Unchanged: 0/0
  4897 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4898 ;;      Params:         0       0       0       0       0       0       0       0       0
  4899 ;;      Locals:         0       0       0       0       0       0       0       0       0
  4900 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4901 ;;      Totals:         0       0       0       0       0       0       0       0       0
  4902 ;;Total ram usage:        0 bytes
  4903 ;; Hardware stack levels used:    1
  4904 ;; Hardware stack levels required when called:    7
  4905 ;; This function calls:
  4906 ;;		_I2C_Wait
  4907 ;; This function is called by:
  4908 ;;		_Persistant_ReadExternalMemory
  4909 ;;		_Persistant_WriteExternalMemory
  4910 ;; This function uses a non-reentrant model
  4911 ;;
  4912                           
  4913                           	psect	text26
  4914  0031D8                     __ptext26:
  4915                           	opt stack 0
  4916  0031D8                     _I2C_Stop:
  4917                           	opt stack 20
  4918                           
  4919                           ;I2C.c: 62: if (I2C_Wait())
  4920                           
  4921                           ; BSR set to: 0
  4922                           ;incstack = 0
  4923  0031D8  ECF6  F014         	call	_I2C_Wait	;wreg free
  4924  0031DC  0900               	iorlw	0
  4925  0031DE  E002               	bz	l3632
  4926                           
  4927                           ; BSR set to: 0
  4928                           ;I2C.c: 66: _I2CCount++;
  4929  0031E0  84C5               	bsf	4037,2,c	;volatile
  4930                           
  4931                           ; BSR set to: 0
  4932                           ;I2C.c: 67: return 1;
  4933  0031E2  0C01               	retlw	1
  4934  0031E4                     l3632:
  4935                           
  4936                           ; BSR set to: 0
  4937                           
  4938                           ; BSR set to: 0
  4939                           ;I2C.c: 70: return 0;
  4940  0031E4  0C00               	retlw	0	;funcret
  4941  0031E6                     __end_of_I2C_Stop:
  4942                           	opt stack 0
  4943                           tblptru	equ	0xFF8
  4944                           tblptrh	equ	0xFF7
  4945                           tblptrl	equ	0xFF6
  4946                           tablat	equ	0xFF5
  4947                           prodh	equ	0xFF4
  4948                           prodl	equ	0xFF3
  4949                           intcon	equ	0xFF2
  4950                           postinc0	equ	0xFEE
  4951                           plusw0	equ	0xFEB
  4952                           wreg	equ	0xFE8
  4953                           postinc1	equ	0xFE6
  4954                           postdec1	equ	0xFE5
  4955                           plusw1	equ	0xFE3
  4956                           fsr1h	equ	0xFE2
  4957                           fsr1l	equ	0xFE1
  4958                           indf2	equ	0xFDF
  4959                           postinc2	equ	0xFDE
  4960                           postdec2	equ	0xFDD
  4961                           plusw2	equ	0xFDB
  4962                           fsr2h	equ	0xFDA
  4963                           fsr2l	equ	0xFD9
  4964                           status	equ	0xFD8
  4965                           
  4966 ;; *************** function _I2C_Read *****************
  4967 ;; Defined at:
  4968 ;;		line 105 in file "I2C.c"
  4969 ;; Parameters:    Size  Location     Type
  4970 ;;		None
  4971 ;; Auto vars:     Size  Location     Type
  4972 ;;  LData           1    6[BANK0 ] unsigned char 
  4973 ;; Return value:  Size  Location     Type
  4974 ;;                  1    wreg      unsigned char 
  4975 ;; Registers used:
  4976 ;;		wreg, status,2, status,0, cstack
  4977 ;; Tracked objects:
  4978 ;;		On entry : 0/0
  4979 ;;		On exit  : 0/0
  4980 ;;		Unchanged: 0/0
  4981 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4982 ;;      Params:         0       0       0       0       0       0       0       0       0
  4983 ;;      Locals:         0       1       0       0       0       0       0       0       0
  4984 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4985 ;;      Totals:         0       1       0       0       0       0       0       0       0
  4986 ;;Total ram usage:        1 bytes
  4987 ;; Hardware stack levels used:    1
  4988 ;; Hardware stack levels required when called:    8
  4989 ;; This function calls:
  4990 ;;		_I2C_Ack
  4991 ;;		_I2C_Wait
  4992 ;; This function is called by:
  4993 ;;		_Persistant_ReadExternalMemory
  4994 ;; This function uses a non-reentrant model
  4995 ;;
  4996                           
  4997                           	psect	text27
  4998  003038                     __ptext27:
  4999                           	opt stack 0
  5000  003038                     _I2C_Read:
  5001                           	opt stack 19
  5002                           
  5003                           ;I2C.c: 107: if (I2C_Wait())
  5004                           
  5005                           ; BSR set to: 0
  5006                           ;incstack = 0
  5007  003038  ECF6  F014         	call	_I2C_Wait	;wreg free
  5008  00303C  0900               	iorlw	0
  5009  00303E  E00F               	bz	l3620
  5010                           
  5011                           ; BSR set to: 0
  5012                           ;I2C.c: 108: {
  5013                           ;I2C.c: 109: RCEN = 1;
  5014  003040  86C5               	bsf	4037,3,c	;volatile
  5015                           
  5016                           ; BSR set to: 0
  5017                           ;I2C.c: 110: if (I2C_Wait())
  5018  003042  ECF6  F014         	call	_I2C_Wait	;wreg free
  5019  003046  0900               	iorlw	0
  5020  003048  E00A               	bz	l3620
  5021                           
  5022                           ; BSR set to: 0
  5023                           ;I2C.c: 111: {
  5024                           ;I2C.c: 112: unsigned char LData = SSPBUF;
  5025  00304A  CFC9 F066          	movff	4041,I2C_Read@LData	;volatile
  5026                           
  5027                           ; BSR set to: 0
  5028                           ;I2C.c: 116: _I2CCount++;
  5029  00304E  0E01               	movlw	1
  5030  003050  EC86  F018         	call	_I2C_Ack
  5031  003054  0900               	iorlw	0
  5032  003056  E003               	bz	l3620
  5033                           
  5034                           ;I2C.c: 117: return LData;
  5035  003058  0100               	movlb	0	; () banked
  5036  00305A  5166               	movf	I2C_Read@LData& (0+255),w,b
  5037  00305C  0012               	return	
  5038  00305E                     l3620:
  5039                           
  5040                           ;I2C.c: 122: return 0x00;
  5041  00305E  0C00               	retlw	0	;funcret
  5042  003060                     __end_of_I2C_Read:
  5043                           	opt stack 0
  5044                           tblptru	equ	0xFF8
  5045                           tblptrh	equ	0xFF7
  5046                           tblptrl	equ	0xFF6
  5047                           tablat	equ	0xFF5
  5048                           prodh	equ	0xFF4
  5049                           prodl	equ	0xFF3
  5050                           intcon	equ	0xFF2
  5051                           postinc0	equ	0xFEE
  5052                           plusw0	equ	0xFEB
  5053                           wreg	equ	0xFE8
  5054                           postinc1	equ	0xFE6
  5055                           postdec1	equ	0xFE5
  5056                           plusw1	equ	0xFE3
  5057                           fsr1h	equ	0xFE2
  5058                           fsr1l	equ	0xFE1
  5059                           indf2	equ	0xFDF
  5060                           postinc2	equ	0xFDE
  5061                           postdec2	equ	0xFDD
  5062                           plusw2	equ	0xFDB
  5063                           fsr2h	equ	0xFDA
  5064                           fsr2l	equ	0xFD9
  5065                           status	equ	0xFD8
  5066                           
  5067 ;; *************** function _I2C_Ack *****************
  5068 ;; Defined at:
  5069 ;;		line 75 in file "I2C.c"
  5070 ;; Parameters:    Size  Location     Type
  5071 ;;  AAck            1    wreg     unsigned char 
  5072 ;; Auto vars:     Size  Location     Type
  5073 ;;  AAck            1    5[BANK0 ] unsigned char 
  5074 ;; Return value:  Size  Location     Type
  5075 ;;                  1    wreg      unsigned char 
  5076 ;; Registers used:
  5077 ;;		wreg, status,2, status,0, cstack
  5078 ;; Tracked objects:
  5079 ;;		On entry : 0/0
  5080 ;;		On exit  : 0/0
  5081 ;;		Unchanged: 0/0
  5082 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5083 ;;      Params:         0       0       0       0       0       0       0       0       0
  5084 ;;      Locals:         0       1       0       0       0       0       0       0       0
  5085 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5086 ;;      Totals:         0       1       0       0       0       0       0       0       0
  5087 ;;Total ram usage:        1 bytes
  5088 ;; Hardware stack levels used:    1
  5089 ;; Hardware stack levels required when called:    7
  5090 ;; This function calls:
  5091 ;;		_I2C_Wait
  5092 ;; This function is called by:
  5093 ;;		_Persistant_ControlByte
  5094 ;;		_Persistant_Address
  5095 ;;		_Persistant_ReadExternalMemory
  5096 ;;		_Persistant_WriteExternalMemory
  5097 ;;		_I2C_Read
  5098 ;; This function uses a non-reentrant model
  5099 ;;
  5100                           
  5101                           	psect	text28
  5102  00310C                     __ptext28:
  5103                           	opt stack 0
  5104  00310C                     _I2C_Ack:
  5105                           	opt stack 19
  5106                           
  5107                           ;incstack = 0
  5108                           ;I2C_Ack@AAck stored from wreg
  5109  00310C  0100               	movlb	0	; () banked
  5110  00310E  6F65               	movwf	I2C_Ack@AAck& (0+255),b
  5111                           
  5112                           ;I2C.c: 77: if (I2C_Wait())
  5113  003110  ECF6  F014         	call	_I2C_Wait	;wreg free
  5114  003114  0900               	iorlw	0
  5115  003116  E007               	bz	l3210
  5116                           
  5117                           ; BSR set to: 0
  5118                           ;I2C.c: 78: {
  5119                           ;I2C.c: 79: ACKDT = AAck;
  5120  003118  A165               	btfss	I2C_Ack@AAck& (0+255),0,b
  5121  00311A  D002               	goto	u2820
  5122  00311C  8AC5               	bsf	4037,5,c	;volatile
  5123  00311E  D001               	goto	u2835
  5124  003120                     u2820:
  5125  003120  9AC5               	bcf	4037,5,c	;volatile
  5126  003122                     u2835:
  5127                           
  5128                           ;I2C.c: 82: _I2CCount++;
  5129  003122  88C5               	bsf	4037,4,c	;volatile
  5130                           
  5131                           ;I2C.c: 83: return 1;
  5132  003124  0C01               	retlw	1
  5133  003126                     l3210:
  5134                           
  5135                           ; BSR set to: 0
  5136                           ;I2C.c: 86: return 0;
  5137  003126  0C00               	retlw	0	;funcret
  5138  003128                     __end_of_I2C_Ack:
  5139                           	opt stack 0
  5140                           tblptru	equ	0xFF8
  5141                           tblptrh	equ	0xFF7
  5142                           tblptrl	equ	0xFF6
  5143                           tablat	equ	0xFF5
  5144                           prodh	equ	0xFF4
  5145                           prodl	equ	0xFF3
  5146                           intcon	equ	0xFF2
  5147                           postinc0	equ	0xFEE
  5148                           plusw0	equ	0xFEB
  5149                           wreg	equ	0xFE8
  5150                           postinc1	equ	0xFE6
  5151                           postdec1	equ	0xFE5
  5152                           plusw1	equ	0xFE3
  5153                           fsr1h	equ	0xFE2
  5154                           fsr1l	equ	0xFE1
  5155                           indf2	equ	0xFDF
  5156                           postinc2	equ	0xFDE
  5157                           postdec2	equ	0xFDD
  5158                           plusw2	equ	0xFDB
  5159                           fsr2h	equ	0xFDA
  5160                           fsr2l	equ	0xFD9
  5161                           status	equ	0xFD8
  5162                           
  5163 ;; *************** function _I2C_Wait *****************
  5164 ;; Defined at:
  5165 ;;		line 15 in file "I2C.c"
  5166 ;; Parameters:    Size  Location     Type
  5167 ;;		None
  5168 ;; Auto vars:     Size  Location     Type
  5169 ;;  LTimeOut        2    2[BANK0 ] int 
  5170 ;;  LResult         1    4[BANK0 ] unsigned char 
  5171 ;; Return value:  Size  Location     Type
  5172 ;;                  1    wreg      unsigned char 
  5173 ;; Registers used:
  5174 ;;		wreg, status,2, status,0
  5175 ;; Tracked objects:
  5176 ;;		On entry : 0/0
  5177 ;;		On exit  : 3F/0
  5178 ;;		Unchanged: 0/0
  5179 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5180 ;;      Params:         0       0       0       0       0       0       0       0       0
  5181 ;;      Locals:         0       3       0       0       0       0       0       0       0
  5182 ;;      Temps:          0       2       0       0       0       0       0       0       0
  5183 ;;      Totals:         0       5       0       0       0       0       0       0       0
  5184 ;;Total ram usage:        5 bytes
  5185 ;; Hardware stack levels used:    1
  5186 ;; Hardware stack levels required when called:    6
  5187 ;; This function calls:
  5188 ;;		Nothing
  5189 ;; This function is called by:
  5190 ;;		_I2C_Start
  5191 ;;		_I2C_Stop
  5192 ;;		_I2C_Ack
  5193 ;;		_I2C_Write
  5194 ;;		_I2C_Read
  5195 ;; This function uses a non-reentrant model
  5196 ;;
  5197                           
  5198                           	psect	text29
  5199  0029EC                     __ptext29:
  5200                           	opt stack 0
  5201  0029EC                     _I2C_Wait:
  5202                           	opt stack 19
  5203                           
  5204                           ;I2C.c: 17: int LTimeOut = 10000;
  5205                           
  5206                           ;incstack = 0
  5207  0029EC  0E27               	movlw	39
  5208  0029EE  0100               	movlb	0	; () banked
  5209  0029F0  6F63               	movwf	(I2C_Wait@LTimeOut+1)& (0+255),b
  5210  0029F2  0E10               	movlw	16
  5211  0029F4  6F62               	movwf	I2C_Wait@LTimeOut& (0+255),b
  5212                           
  5213                           ;I2C.c: 18: while (((SSPCON2 & 0x1F ) | RW ) && LTimeOut > 0)
  5214  0029F6  D00C               	goto	l668
  5215  0029F8                     l3138:
  5216                           
  5217                           ; BSR set to: 0
  5218                           ;I2C.c: 19: {
  5219                           ;I2C.c: 20: _delay((unsigned long)((1)*(20000000/4000.0)));
  5220  0029F8  0E07               	movlw	7
  5221  0029FA  0100               	movlb	0	; () banked
  5222  0029FC  6F60               	movwf	??_I2C_Wait& (0+255),b
  5223  0029FE  0E7D               	movlw	125
  5224  002A00                     u5327:
  5225  002A00  2EE8               	decfsz	wreg,f,c
  5226  002A02  D7FE               	bra	u5327
  5227  002A04  2F60               	decfsz	??_I2C_Wait& (0+255),f,b
  5228  002A06  D7FC               	bra	u5327
  5229                           
  5230                           ;I2C.c: 21: LTimeOut--;
  5231  002A08  0100               	movlb	0	; () banked
  5232  002A0A  0762               	decf	I2C_Wait@LTimeOut& (0+255),f,b
  5233  002A0C  A0D8               	btfss	status,0,c
  5234  002A0E  0763               	decf	(I2C_Wait@LTimeOut+1)& (0+255),f,b
  5235  002A10                     l668:
  5236                           
  5237                           ; BSR set to: 0
  5238  002A10  50C5               	movf	4037,w,c	;volatile
  5239  002A12  0B1F               	andlw	31
  5240  002A14  6F60               	movwf	??_I2C_Wait& (0+255),b
  5241  002A16  6B61               	clrf	(??_I2C_Wait+1)& (0+255),b
  5242  002A18  0E01               	movlw	1
  5243  002A1A  A4C7               	btfss	4039,2,c	;volatile
  5244  002A1C  0E00               	movlw	0
  5245  002A1E  1360               	iorwf	??_I2C_Wait& (0+255),f,b
  5246  002A20  5160               	movf	??_I2C_Wait& (0+255),w,b
  5247  002A22  1161               	iorwf	(??_I2C_Wait+1)& (0+255),w,b
  5248  002A24  E006               	bz	u2690
  5249                           
  5250                           ; BSR set to: 0
  5251  002A26  BF63               	btfsc	(I2C_Wait@LTimeOut+1)& (0+255),7,b
  5252  002A28  D004               	goto	u2690
  5253  002A2A  5163               	movf	(I2C_Wait@LTimeOut+1)& (0+255),w,b
  5254  002A2C  E1E5               	bnz	l3138
  5255  002A2E  0562               	decf	I2C_Wait@LTimeOut& (0+255),w,b
  5256  002A30  E2E3               	bc	l3138
  5257  002A32                     u2690:
  5258                           
  5259                           ; BSR set to: 0
  5260                           ;I2C.c: 22: };
  5261                           ;I2C.c: 23: bool LResult = LTimeOut > 0;
  5262  002A32  BF63               	btfsc	(I2C_Wait@LTimeOut+1)& (0+255),7,b
  5263  002A34  D006               	goto	u2700
  5264  002A36  5163               	movf	(I2C_Wait@LTimeOut+1)& (0+255),w,b
  5265  002A38  E102               	bnz	u2701
  5266  002A3A  0562               	decf	I2C_Wait@LTimeOut& (0+255),w,b
  5267  002A3C  E302               	bnc	u2700
  5268  002A3E                     u2701:
  5269  002A3E  0E01               	movlw	1
  5270  002A40  D001               	goto	u2710
  5271  002A42                     u2700:
  5272  002A42  0E00               	movlw	0
  5273  002A44                     u2710:
  5274  002A44  6F64               	movwf	I2C_Wait@LResult& (0+255),b
  5275                           
  5276                           ; BSR set to: 0
  5277                           ;I2C.c: 27: return LResult;
  5278  002A46  5164               	movf	I2C_Wait@LResult& (0+255),w,b
  5279                           
  5280                           ; BSR set to: 0
  5281  002A48  0012               	return		;funcret
  5282  002A4A                     __end_of_I2C_Wait:
  5283                           	opt stack 0
  5284                           tblptru	equ	0xFF8
  5285                           tblptrh	equ	0xFF7
  5286                           tblptrl	equ	0xFF6
  5287                           tablat	equ	0xFF5
  5288                           prodh	equ	0xFF4
  5289                           prodl	equ	0xFF3
  5290                           intcon	equ	0xFF2
  5291                           postinc0	equ	0xFEE
  5292                           plusw0	equ	0xFEB
  5293                           wreg	equ	0xFE8
  5294                           postinc1	equ	0xFE6
  5295                           postdec1	equ	0xFE5
  5296                           plusw1	equ	0xFE3
  5297                           fsr1h	equ	0xFE2
  5298                           fsr1l	equ	0xFE1
  5299                           indf2	equ	0xFDF
  5300                           postinc2	equ	0xFDE
  5301                           postdec2	equ	0xFDD
  5302                           plusw2	equ	0xFDB
  5303                           fsr2h	equ	0xFDA
  5304                           fsr2l	equ	0xFD9
  5305                           status	equ	0xFD8
  5306                           
  5307 ;; *************** function _Persistant_Init *****************
  5308 ;; Defined at:
  5309 ;;		line 6 in file "persistant.c"
  5310 ;; Parameters:    Size  Location     Type
  5311 ;;		None
  5312 ;; Auto vars:     Size  Location     Type
  5313 ;;		None
  5314 ;; Return value:  Size  Location     Type
  5315 ;;                  1    wreg      void 
  5316 ;; Registers used:
  5317 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  5318 ;; Tracked objects:
  5319 ;;		On entry : 0/0
  5320 ;;		On exit  : 3F/0
  5321 ;;		Unchanged: 0/0
  5322 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5323 ;;      Params:         0       0       0       0       0       0       0       0       0
  5324 ;;      Locals:         0       0       0       0       0       0       0       0       0
  5325 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5326 ;;      Totals:         0       0       0       0       0       0       0       0       0
  5327 ;;Total ram usage:        0 bytes
  5328 ;; Hardware stack levels used:    1
  5329 ;; Hardware stack levels required when called:    9
  5330 ;; This function calls:
  5331 ;;		_I2C_Init
  5332 ;; This function is called by:
  5333 ;;		_InitApp
  5334 ;; This function uses a non-reentrant model
  5335 ;;
  5336                           
  5337                           	psect	text30
  5338  00315A                     __ptext30:
  5339                           	opt stack 0
  5340  00315A                     _Persistant_Init:
  5341                           	opt stack 20
  5342                           
  5343                           ;persistant.c: 8: I2C_Init(400000);
  5344                           
  5345                           ; BSR set to: 0
  5346                           ;incstack = 0
  5347  00315A  0E80               	movlw	128
  5348  00315C  0100               	movlb	0	; () banked
  5349  00315E  6F9E               	movwf	I2C_Init@AFrequency& (0+255),b
  5350  003160  0E1A               	movlw	26
  5351  003162  6F9F               	movwf	(I2C_Init@AFrequency+1)& (0+255),b
  5352  003164  0E06               	movlw	6
  5353  003166  6FA0               	movwf	(I2C_Init@AFrequency+2)& (0+255),b
  5354  003168  6BA1               	clrf	(I2C_Init@AFrequency+3)& (0+255),b
  5355  00316A  EF35  F011         	goto	_I2C_Init	;wreg free
  5356  00316E                     __end_of_Persistant_Init:
  5357                           	opt stack 0
  5358                           tblptru	equ	0xFF8
  5359                           tblptrh	equ	0xFF7
  5360                           tblptrl	equ	0xFF6
  5361                           tablat	equ	0xFF5
  5362                           prodh	equ	0xFF4
  5363                           prodl	equ	0xFF3
  5364                           intcon	equ	0xFF2
  5365                           postinc0	equ	0xFEE
  5366                           plusw0	equ	0xFEB
  5367                           wreg	equ	0xFE8
  5368                           postinc1	equ	0xFE6
  5369                           postdec1	equ	0xFE5
  5370                           plusw1	equ	0xFE3
  5371                           fsr1h	equ	0xFE2
  5372                           fsr1l	equ	0xFE1
  5373                           indf2	equ	0xFDF
  5374                           postinc2	equ	0xFDE
  5375                           postdec2	equ	0xFDD
  5376                           plusw2	equ	0xFDB
  5377                           fsr2h	equ	0xFDA
  5378                           fsr2l	equ	0xFD9
  5379                           status	equ	0xFD8
  5380                           
  5381 ;; *************** function _I2C_Init *****************
  5382 ;; Defined at:
  5383 ;;		line 4 in file "I2C.c"
  5384 ;; Parameters:    Size  Location     Type
  5385 ;;  AFrequency      4   62[BANK0 ] long 
  5386 ;; Auto vars:     Size  Location     Type
  5387 ;;  LRatio          3   66[BANK0 ] float 
  5388 ;; Return value:  Size  Location     Type
  5389 ;;                  1    wreg      void 
  5390 ;; Registers used:
  5391 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  5392 ;; Tracked objects:
  5393 ;;		On entry : 3F/0
  5394 ;;		On exit  : 3F/0
  5395 ;;		Unchanged: 0/0
  5396 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5397 ;;      Params:         0       4       0       0       0       0       0       0       0
  5398 ;;      Locals:         0       3       0       0       0       0       0       0       0
  5399 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5400 ;;      Totals:         0       7       0       0       0       0       0       0       0
  5401 ;;Total ram usage:        7 bytes
  5402 ;; Hardware stack levels used:    1
  5403 ;; Hardware stack levels required when called:    8
  5404 ;; This function calls:
  5405 ;;		___altoft
  5406 ;;		___ftadd
  5407 ;;		___ftdiv
  5408 ;;		___ftmul
  5409 ;;		___fttol
  5410 ;; This function is called by:
  5411 ;;		_Persistant_Init
  5412 ;; This function uses a non-reentrant model
  5413 ;;
  5414                           
  5415                           	psect	text31
  5416  00226A                     __ptext31:
  5417                           	opt stack 0
  5418  00226A                     _I2C_Init:
  5419                           	opt stack 20
  5420                           
  5421                           ; BSR set to: 0
  5422                           ;I2C.c: 6: TRISB0 = 1;
  5423                           
  5424                           ; BSR set to: 0
  5425                           ;incstack = 0
  5426  00226A  8093               	bsf	3987,0,c	;volatile
  5427                           
  5428                           ;I2C.c: 7: TRISB1 = 1;
  5429  00226C  8293               	bsf	3987,1,c	;volatile
  5430                           
  5431                           ;I2C.c: 8: SSPSTAT = 0x00;
  5432  00226E  6AC7               	clrf	4039,c	;volatile
  5433                           
  5434                           ; BSR set to: 0
  5435                           ;I2C.c: 9: SSPCON1 = 0x28;
  5436  002270  0E28               	movlw	40
  5437  002272  6EC6               	movwf	4038,c	;volatile
  5438                           
  5439                           ; BSR set to: 0
  5440                           ;I2C.c: 10: float LRatio = (20000000 / (4.0f * AFrequency)) - 1;
  5441  002274  6B75               	clrf	___ftmul@f2& (0+255),b
  5442  002276  0E80               	movlw	128
  5443  002278  6F76               	movwf	(___ftmul@f2+1)& (0+255),b
  5444  00227A  0E40               	movlw	64
  5445  00227C  6F77               	movwf	(___ftmul@f2+2)& (0+255),b
  5446  00227E  C09E  F068         	movff	I2C_Init@AFrequency,___altoft@c
  5447  002282  C09F  F069         	movff	I2C_Init@AFrequency+1,___altoft@c+1
  5448  002286  C0A0  F06A         	movff	I2C_Init@AFrequency+2,___altoft@c+2
  5449  00228A  C0A1  F06B         	movff	I2C_Init@AFrequency+3,___altoft@c+3
  5450  00228E  EC93  F014         	call	___altoft	;wreg free
  5451  002292  C068  F072         	movff	?___altoft,___ftmul@f1
  5452  002296  C069  F073         	movff	?___altoft+1,___ftmul@f1+1
  5453  00229A  C06A  F074         	movff	?___altoft+2,___ftmul@f1+2
  5454  00229E  EC4C  F00D         	call	___ftmul	;wreg free
  5455  0022A2  C072  F083         	movff	?___ftmul,___ftdiv@f2
  5456  0022A6  C073  F084         	movff	?___ftmul+1,___ftdiv@f2+1
  5457  0022AA  C074  F085         	movff	?___ftmul+2,___ftdiv@f2+2
  5458  0022AE  0E97               	movlw	151
  5459  0022B0  6F80               	movwf	___ftdiv@f1& (0+255),b
  5460  0022B2  0E98               	movlw	152
  5461  0022B4  6F81               	movwf	(___ftdiv@f1+1)& (0+255),b
  5462  0022B6  0E4B               	movlw	75
  5463  0022B8  6F82               	movwf	(___ftdiv@f1+2)& (0+255),b
  5464  0022BA  EC48  F00F         	call	___ftdiv	;wreg free
  5465  0022BE  C080  F08F         	movff	?___ftdiv,___ftadd@f1
  5466  0022C2  C081  F090         	movff	?___ftdiv+1,___ftadd@f1+1
  5467  0022C6  C082  F091         	movff	?___ftdiv+2,___ftadd@f1+2
  5468  0022CA  6B92               	clrf	___ftadd@f2& (0+255),b
  5469  0022CC  0E80               	movlw	128
  5470  0022CE  6F93               	movwf	(___ftadd@f2+1)& (0+255),b
  5471  0022D0  0EBF               	movlw	191
  5472  0022D2  6F94               	movwf	(___ftadd@f2+2)& (0+255),b
  5473  0022D4  ECD3  F008         	call	___ftadd	;wreg free
  5474  0022D8  C08F  F0A2         	movff	?___ftadd,I2C_Init@LRatio
  5475  0022DC  C090  F0A3         	movff	?___ftadd+1,I2C_Init@LRatio+1
  5476  0022E0  C091  F0A4         	movff	?___ftadd+2,I2C_Init@LRatio+2
  5477                           
  5478                           ; BSR set to: 0
  5479                           ;I2C.c: 11: SSPADD = LRatio;
  5480  0022E4  C0A2  F08F         	movff	I2C_Init@LRatio,___fttol@f1
  5481  0022E8  C0A3  F090         	movff	I2C_Init@LRatio+1,___fttol@f1+1
  5482  0022EC  C0A4  F091         	movff	I2C_Init@LRatio+2,___fttol@f1+2
  5483  0022F0  ECEB  F00E         	call	___fttol	;wreg free
  5484  0022F4  518F               	movf	?___fttol& (0+255),w,b
  5485  0022F6  6EC8               	movwf	4040,c	;volatile
  5486                           
  5487                           ; BSR set to: 0
  5488                           ;I2C.c: 12: SSPCON2 = 0x00;
  5489  0022F8  6AC5               	clrf	4037,c	;volatile
  5490                           
  5491                           ; BSR set to: 0
  5492  0022FA  0012               	return		;funcret
  5493  0022FC                     __end_of_I2C_Init:
  5494                           	opt stack 0
  5495                           tblptru	equ	0xFF8
  5496                           tblptrh	equ	0xFF7
  5497                           tblptrl	equ	0xFF6
  5498                           tablat	equ	0xFF5
  5499                           prodh	equ	0xFF4
  5500                           prodl	equ	0xFF3
  5501                           intcon	equ	0xFF2
  5502                           postinc0	equ	0xFEE
  5503                           plusw0	equ	0xFEB
  5504                           wreg	equ	0xFE8
  5505                           postinc1	equ	0xFE6
  5506                           postdec1	equ	0xFE5
  5507                           plusw1	equ	0xFE3
  5508                           fsr1h	equ	0xFE2
  5509                           fsr1l	equ	0xFE1
  5510                           indf2	equ	0xFDF
  5511                           postinc2	equ	0xFDE
  5512                           postdec2	equ	0xFDD
  5513                           plusw2	equ	0xFDB
  5514                           fsr2h	equ	0xFDA
  5515                           fsr2l	equ	0xFD9
  5516                           status	equ	0xFD8
  5517                           
  5518 ;; *************** function _Midi_Init *****************
  5519 ;; Defined at:
  5520 ;;		line 6 in file "midi.c"
  5521 ;; Parameters:    Size  Location     Type
  5522 ;;		None
  5523 ;; Auto vars:     Size  Location     Type
  5524 ;;  LPeriod         4   21[BANK0 ] long 
  5525 ;;  LBaudRate       4   17[BANK0 ] const unsigned long 
  5526 ;; Return value:  Size  Location     Type
  5527 ;;                  1    wreg      void 
  5528 ;; Registers used:
  5529 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5530 ;; Tracked objects:
  5531 ;;		On entry : 3F/0
  5532 ;;		On exit  : 3F/0
  5533 ;;		Unchanged: 0/0
  5534 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5535 ;;      Params:         0       0       0       0       0       0       0       0       0
  5536 ;;      Locals:         0       8       0       0       0       0       0       0       0
  5537 ;;      Temps:          0       4       0       0       0       0       0       0       0
  5538 ;;      Totals:         0      12       0       0       0       0       0       0       0
  5539 ;;Total ram usage:       12 bytes
  5540 ;; Hardware stack levels used:    1
  5541 ;; Hardware stack levels required when called:    7
  5542 ;; This function calls:
  5543 ;;		_Midi_ResetBuffer
  5544 ;;		___lldiv
  5545 ;; This function is called by:
  5546 ;;		_InitApp
  5547 ;; This function uses a non-reentrant model
  5548 ;;
  5549                           
  5550                           	psect	text32
  5551  001690                     __ptext32:
  5552                           	opt stack 0
  5553  001690                     _Midi_Init:
  5554                           	opt stack 22
  5555                           
  5556                           ; BSR set to: 0
  5557                           ;midi.c: 8: Midi_ResetBuffer(&_MidiInput);
  5558                           
  5559                           ; BSR set to: 0
  5560                           ;incstack = 0
  5561  001690  0E1D               	movlw	low __MidiInput
  5562  001692  6F60               	movwf	Midi_ResetBuffer@AMidiBuffer& (0+255),b
  5563  001694  0E04               	movlw	high __MidiInput
  5564  001696  6F61               	movwf	(Midi_ResetBuffer@AMidiBuffer+1)& (0+255),b
  5565  001698  ECFD  F00F         	call	_Midi_ResetBuffer	;wreg free
  5566                           
  5567                           ;midi.c: 9: Midi_ResetBuffer(&_MidiOutput);
  5568  00169C  0ED9               	movlw	low __MidiOutput
  5569  00169E  6F60               	movwf	Midi_ResetBuffer@AMidiBuffer& (0+255),b
  5570  0016A0  0E02               	movlw	high __MidiOutput
  5571  0016A2  6F61               	movwf	(Midi_ResetBuffer@AMidiBuffer+1)& (0+255),b
  5572  0016A4  ECFD  F00F         	call	_Midi_ResetBuffer	;wreg free
  5573                           
  5574                           ; BSR set to: 0
  5575                           ;midi.c: 11: RCIF = 0;
  5576  0016A8  9A9E               	bcf	3998,5,c	;volatile
  5577                           
  5578                           ; BSR set to: 0
  5579                           ;midi.c: 12: RCIP = 0;
  5580  0016AA  9A9F               	bcf	3999,5,c	;volatile
  5581                           
  5582                           ; BSR set to: 0
  5583                           ;midi.c: 13: RCIE = 1;
  5584  0016AC  8A9D               	bsf	3997,5,c	;volatile
  5585                           
  5586                           ; BSR set to: 0
  5587                           ;midi.c: 14: PEIE = 1;
  5588  0016AE  8CF2               	bsf	intcon,6,c	;volatile
  5589                           
  5590                           ; BSR set to: 0
  5591                           ;midi.c: 16: const unsigned long LBaudRate = 31250;
  5592  0016B0  0E12               	movlw	18
  5593  0016B2  6F71               	movwf	Midi_Init@LBaudRate& (0+255),b
  5594  0016B4  0E7A               	movlw	122
  5595  0016B6  6F72               	movwf	(Midi_Init@LBaudRate+1)& (0+255),b
  5596  0016B8  6B73               	clrf	(Midi_Init@LBaudRate+2)& (0+255),b
  5597  0016BA  6B74               	clrf	(Midi_Init@LBaudRate+3)& (0+255),b
  5598                           
  5599                           ; BSR set to: 0
  5600                           ;midi.c: 17: long LPeriod;
  5601                           ;midi.c: 18: LPeriod = 48000000L/(LBaudRate*64) - 1;
  5602  0016BC  6B60               	clrf	___lldiv@dividend& (0+255),b
  5603  0016BE  0E6C               	movlw	108
  5604  0016C0  6F61               	movwf	(___lldiv@dividend+1)& (0+255),b
  5605  0016C2  0EDC               	movlw	220
  5606  0016C4  6F62               	movwf	(___lldiv@dividend+2)& (0+255),b
  5607  0016C6  0E02               	movlw	2
  5608  0016C8  6F63               	movwf	(___lldiv@dividend+3)& (0+255),b
  5609  0016CA  C071  F06D         	movff	Midi_Init@LBaudRate,??_Midi_Init
  5610  0016CE  C072  F06E         	movff	Midi_Init@LBaudRate+1,??_Midi_Init+1
  5611  0016D2  C073  F06F         	movff	Midi_Init@LBaudRate+2,??_Midi_Init+2
  5612  0016D6  C074  F070         	movff	Midi_Init@LBaudRate+3,??_Midi_Init+3
  5613  0016DA  0E06               	movlw	6
  5614  0016DC                     u4275:
  5615  0016DC  90D8               	bcf	status,0,c
  5616  0016DE  376D               	rlcf	??_Midi_Init& (0+255),f,b
  5617  0016E0  376E               	rlcf	(??_Midi_Init+1)& (0+255),f,b
  5618  0016E2  376F               	rlcf	(??_Midi_Init+2)& (0+255),f,b
  5619  0016E4  3770               	rlcf	(??_Midi_Init+3)& (0+255),f,b
  5620  0016E6  2EE8               	decfsz	wreg,f,c
  5621  0016E8  D7F9               	goto	u4275
  5622  0016EA  C06D  F064         	movff	??_Midi_Init,___lldiv@divisor
  5623  0016EE  C06E  F065         	movff	??_Midi_Init+1,___lldiv@divisor+1
  5624  0016F2  C06F  F066         	movff	??_Midi_Init+2,___lldiv@divisor+2
  5625  0016F6  C070  F067         	movff	??_Midi_Init+3,___lldiv@divisor+3
  5626  0016FA  EC47  F013         	call	___lldiv	;wreg free
  5627  0016FE  0EFF               	movlw	255
  5628  001700  2560               	addwf	?___lldiv& (0+255),w,b
  5629  001702  6F75               	movwf	Midi_Init@LPeriod& (0+255),b
  5630  001704  0EFF               	movlw	255
  5631  001706  2161               	addwfc	(?___lldiv+1)& (0+255),w,b
  5632  001708  6F76               	movwf	(Midi_Init@LPeriod+1)& (0+255),b
  5633  00170A  0EFF               	movlw	255
  5634  00170C  2162               	addwfc	(?___lldiv+2)& (0+255),w,b
  5635  00170E  6F77               	movwf	(Midi_Init@LPeriod+2)& (0+255),b
  5636  001710  0EFF               	movlw	255
  5637  001712  2163               	addwfc	(?___lldiv+3)& (0+255),w,b
  5638  001714  6F78               	movwf	(Midi_Init@LPeriod+3)& (0+255),b
  5639                           
  5640                           ; BSR set to: 0
  5641                           ;midi.c: 19: if(LPeriod > 255)
  5642  001716  BF78               	btfsc	(Midi_Init@LPeriod+3)& (0+255),7,b
  5643  001718  D033               	goto	l4248
  5644  00171A  5178               	movf	(Midi_Init@LPeriod+3)& (0+255),w,b
  5645  00171C  1177               	iorwf	(Midi_Init@LPeriod+2)& (0+255),w,b
  5646  00171E  E102               	bnz	u4280
  5647  001720  0576               	decf	(Midi_Init@LPeriod+1)& (0+255),w,b
  5648  001722  E32E               	bnc	l4248
  5649  001724                     u4280:
  5650                           
  5651                           ; BSR set to: 0
  5652                           ;midi.c: 20: {
  5653                           ;midi.c: 21: LPeriod = 48000000L/(LBaudRate*16) - 1;
  5654  001724  6B60               	clrf	___lldiv@dividend& (0+255),b
  5655  001726  0E6C               	movlw	108
  5656  001728  6F61               	movwf	(___lldiv@dividend+1)& (0+255),b
  5657  00172A  0EDC               	movlw	220
  5658  00172C  6F62               	movwf	(___lldiv@dividend+2)& (0+255),b
  5659  00172E  0E02               	movlw	2
  5660  001730  6F63               	movwf	(___lldiv@dividend+3)& (0+255),b
  5661  001732  C071  F06D         	movff	Midi_Init@LBaudRate,??_Midi_Init
  5662  001736  C072  F06E         	movff	Midi_Init@LBaudRate+1,??_Midi_Init+1
  5663  00173A  C073  F06F         	movff	Midi_Init@LBaudRate+2,??_Midi_Init+2
  5664  00173E  C074  F070         	movff	Midi_Init@LBaudRate+3,??_Midi_Init+3
  5665  001742  0E04               	movlw	4
  5666  001744                     u4295:
  5667  001744  90D8               	bcf	status,0,c
  5668  001746  376D               	rlcf	??_Midi_Init& (0+255),f,b
  5669  001748  376E               	rlcf	(??_Midi_Init+1)& (0+255),f,b
  5670  00174A  376F               	rlcf	(??_Midi_Init+2)& (0+255),f,b
  5671  00174C  3770               	rlcf	(??_Midi_Init+3)& (0+255),f,b
  5672  00174E  2EE8               	decfsz	wreg,f,c
  5673  001750  D7F9               	goto	u4295
  5674  001752  C06D  F064         	movff	??_Midi_Init,___lldiv@divisor
  5675  001756  C06E  F065         	movff	??_Midi_Init+1,___lldiv@divisor+1
  5676  00175A  C06F  F066         	movff	??_Midi_Init+2,___lldiv@divisor+2
  5677  00175E  C070  F067         	movff	??_Midi_Init+3,___lldiv@divisor+3
  5678  001762  EC47  F013         	call	___lldiv	;wreg free
  5679  001766  0EFF               	movlw	255
  5680  001768  2560               	addwf	?___lldiv& (0+255),w,b
  5681  00176A  6F75               	movwf	Midi_Init@LPeriod& (0+255),b
  5682  00176C  0EFF               	movlw	255
  5683  00176E  2161               	addwfc	(?___lldiv+1)& (0+255),w,b
  5684  001770  6F76               	movwf	(Midi_Init@LPeriod+1)& (0+255),b
  5685  001772  0EFF               	movlw	255
  5686  001774  2162               	addwfc	(?___lldiv+2)& (0+255),w,b
  5687  001776  6F77               	movwf	(Midi_Init@LPeriod+2)& (0+255),b
  5688  001778  0EFF               	movlw	255
  5689  00177A  2163               	addwfc	(?___lldiv+3)& (0+255),w,b
  5690  00177C  6F78               	movwf	(Midi_Init@LPeriod+3)& (0+255),b
  5691                           
  5692                           ; BSR set to: 0
  5693                           ;midi.c: 22: BRGH = 1;
  5694  00177E  84AC               	bsf	4012,2,c	;volatile
  5695  001780                     l4248:
  5696                           
  5697                           ; BSR set to: 0
  5698                           ;midi.c: 23: }
  5699                           ;midi.c: 24: if(LPeriod < 255)
  5700  001780  BF78               	btfsc	(Midi_Init@LPeriod+3)& (0+255),7,b
  5701  001782  D007               	goto	u4300
  5702  001784  5178               	movf	(Midi_Init@LPeriod+3)& (0+255),w,b
  5703  001786  1177               	iorwf	(Midi_Init@LPeriod+2)& (0+255),w,b
  5704  001788  1176               	iorwf	(Midi_Init@LPeriod+1)& (0+255),w,b
  5705  00178A  E10E               	bnz	l583
  5706  00178C  2975               	incf	Midi_Init@LPeriod& (0+255),w,b
  5707  00178E  B0D8               	btfsc	status,0,c
  5708  001790  0012               	return	
  5709  001792                     u4300:
  5710                           
  5711                           ; BSR set to: 0
  5712                           ;midi.c: 25: {
  5713                           ;midi.c: 26: SPBRG = LPeriod;
  5714  001792  C075  FFAF         	movff	Midi_Init@LPeriod,4015	;volatile
  5715                           
  5716                           ;midi.c: 27: TRISC7 = 1;
  5717  001796  8E94               	bsf	3988,7,c	;volatile
  5718                           
  5719                           ;midi.c: 28: TRISC6 = 1;
  5720  001798  8C94               	bsf	3988,6,c	;volatile
  5721                           
  5722                           ;midi.c: 29: SYNC = 0;
  5723  00179A  98AC               	bcf	4012,4,c	;volatile
  5724                           
  5725                           ;midi.c: 30: PIE1bits.RCIE = 1;
  5726  00179C  8A9D               	bsf	3997,5,c	;volatile
  5727                           
  5728                           ;midi.c: 32: SPEN = 1;
  5729  00179E  8EAB               	bsf	4011,7,c	;volatile
  5730                           
  5731                           ;midi.c: 33: CREN = 1;
  5732  0017A0  88AB               	bsf	4011,4,c	;volatile
  5733                           
  5734                           ;midi.c: 34: RX9 = 0;
  5735  0017A2  9CAB               	bcf	4011,6,c	;volatile
  5736                           
  5737                           ;midi.c: 36: TXEN = 1;
  5738  0017A4  8AAC               	bsf	4012,5,c	;volatile
  5739                           
  5740                           ;midi.c: 37: TX9 = 0;
  5741  0017A6  9CAC               	bcf	4012,6,c	;volatile
  5742  0017A8                     l583:
  5743                           
  5744                           ; BSR set to: 0
  5745  0017A8  0012               	return		;funcret
  5746  0017AA                     __end_of_Midi_Init:
  5747                           	opt stack 0
  5748                           tblptru	equ	0xFF8
  5749                           tblptrh	equ	0xFF7
  5750                           tblptrl	equ	0xFF6
  5751                           tablat	equ	0xFF5
  5752                           prodh	equ	0xFF4
  5753                           prodl	equ	0xFF3
  5754                           intcon	equ	0xFF2
  5755                           postinc0	equ	0xFEE
  5756                           plusw0	equ	0xFEB
  5757                           wreg	equ	0xFE8
  5758                           postinc1	equ	0xFE6
  5759                           postdec1	equ	0xFE5
  5760                           plusw1	equ	0xFE3
  5761                           fsr1h	equ	0xFE2
  5762                           fsr1l	equ	0xFE1
  5763                           indf2	equ	0xFDF
  5764                           postinc2	equ	0xFDE
  5765                           postdec2	equ	0xFDD
  5766                           plusw2	equ	0xFDB
  5767                           fsr2h	equ	0xFDA
  5768                           fsr2l	equ	0xFD9
  5769                           status	equ	0xFD8
  5770                           
  5771 ;; *************** function ___lldiv *****************
  5772 ;; Defined at:
  5773 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\lldiv.c"
  5774 ;; Parameters:    Size  Location     Type
  5775 ;;  dividend        4    0[BANK0 ] unsigned long 
  5776 ;;  divisor         4    4[BANK0 ] unsigned long 
  5777 ;; Auto vars:     Size  Location     Type
  5778 ;;  quotient        4    8[BANK0 ] unsigned long 
  5779 ;;  counter         1   12[BANK0 ] unsigned char 
  5780 ;; Return value:  Size  Location     Type
  5781 ;;                  4    0[BANK0 ] unsigned long 
  5782 ;; Registers used:
  5783 ;;		wreg, status,2, status,0
  5784 ;; Tracked objects:
  5785 ;;		On entry : 3F/0
  5786 ;;		On exit  : 3F/0
  5787 ;;		Unchanged: 0/0
  5788 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5789 ;;      Params:         0       8       0       0       0       0       0       0       0
  5790 ;;      Locals:         0       5       0       0       0       0       0       0       0
  5791 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5792 ;;      Totals:         0      13       0       0       0       0       0       0       0
  5793 ;;Total ram usage:       13 bytes
  5794 ;; Hardware stack levels used:    1
  5795 ;; Hardware stack levels required when called:    6
  5796 ;; This function calls:
  5797 ;;		Nothing
  5798 ;; This function is called by:
  5799 ;;		_Midi_Init
  5800 ;; This function uses a non-reentrant model
  5801 ;;
  5802                           
  5803                           	psect	text33
  5804  00268E                     __ptext33:
  5805                           	opt stack 0
  5806  00268E                     ___lldiv:
  5807                           	opt stack 22
  5808                           
  5809                           ; BSR set to: 0
  5810                           
  5811                           ; BSR set to: 0
  5812                           ;incstack = 0
  5813  00268E  6B68               	clrf	___lldiv@quotient& (0+255),b
  5814  002690  6B69               	clrf	(___lldiv@quotient+1)& (0+255),b
  5815  002692  6B6A               	clrf	(___lldiv@quotient+2)& (0+255),b
  5816  002694  6B6B               	clrf	(___lldiv@quotient+3)& (0+255),b
  5817                           
  5818                           ; BSR set to: 0
  5819  002696  5164               	movf	___lldiv@divisor& (0+255),w,b
  5820  002698  1165               	iorwf	(___lldiv@divisor+1)& (0+255),w,b
  5821  00269A  1166               	iorwf	(___lldiv@divisor+2)& (0+255),w,b
  5822  00269C  1167               	iorwf	(___lldiv@divisor+3)& (0+255),w,b
  5823  00269E  E029               	bz	l1048
  5824                           
  5825                           ; BSR set to: 0
  5826  0026A0  0E01               	movlw	1
  5827  0026A2  6F6C               	movwf	___lldiv@counter& (0+255),b
  5828  0026A4  D006               	goto	l3900
  5829  0026A6                     l3898:
  5830                           
  5831                           ; BSR set to: 0
  5832  0026A6  90D8               	bcf	status,0,c
  5833  0026A8  3764               	rlcf	___lldiv@divisor& (0+255),f,b
  5834  0026AA  3765               	rlcf	(___lldiv@divisor+1)& (0+255),f,b
  5835  0026AC  3766               	rlcf	(___lldiv@divisor+2)& (0+255),f,b
  5836  0026AE  3767               	rlcf	(___lldiv@divisor+3)& (0+255),f,b
  5837  0026B0  2B6C               	incf	___lldiv@counter& (0+255),f,b
  5838  0026B2                     l3900:
  5839                           
  5840                           ; BSR set to: 0
  5841  0026B2  AF67               	btfss	(___lldiv@divisor+3)& (0+255),7,b
  5842  0026B4  D7F8               	goto	l3898
  5843  0026B6                     u3960:
  5844                           
  5845                           ; BSR set to: 0
  5846  0026B6  90D8               	bcf	status,0,c
  5847  0026B8  3768               	rlcf	___lldiv@quotient& (0+255),f,b
  5848  0026BA  3769               	rlcf	(___lldiv@quotient+1)& (0+255),f,b
  5849  0026BC  376A               	rlcf	(___lldiv@quotient+2)& (0+255),f,b
  5850  0026BE  376B               	rlcf	(___lldiv@quotient+3)& (0+255),f,b
  5851                           
  5852                           ; BSR set to: 0
  5853  0026C0  5164               	movf	___lldiv@divisor& (0+255),w,b
  5854  0026C2  5D60               	subwf	___lldiv@dividend& (0+255),w,b
  5855  0026C4  5165               	movf	(___lldiv@divisor+1)& (0+255),w,b
  5856  0026C6  5961               	subwfb	(___lldiv@dividend+1)& (0+255),w,b
  5857  0026C8  5166               	movf	(___lldiv@divisor+2)& (0+255),w,b
  5858  0026CA  5962               	subwfb	(___lldiv@dividend+2)& (0+255),w,b
  5859  0026CC  5167               	movf	(___lldiv@divisor+3)& (0+255),w,b
  5860  0026CE  5963               	subwfb	(___lldiv@dividend+3)& (0+255),w,b
  5861  0026D0  E309               	bnc	l3910
  5862                           
  5863                           ; BSR set to: 0
  5864  0026D2  5164               	movf	___lldiv@divisor& (0+255),w,b
  5865  0026D4  5F60               	subwf	___lldiv@dividend& (0+255),f,b
  5866  0026D6  5165               	movf	(___lldiv@divisor+1)& (0+255),w,b
  5867  0026D8  5B61               	subwfb	(___lldiv@dividend+1)& (0+255),f,b
  5868  0026DA  5166               	movf	(___lldiv@divisor+2)& (0+255),w,b
  5869  0026DC  5B62               	subwfb	(___lldiv@dividend+2)& (0+255),f,b
  5870  0026DE  5167               	movf	(___lldiv@divisor+3)& (0+255),w,b
  5871  0026E0  5B63               	subwfb	(___lldiv@dividend+3)& (0+255),f,b
  5872                           
  5873                           ; BSR set to: 0
  5874  0026E2  8168               	bsf	___lldiv@quotient& (0+255),0,b
  5875  0026E4                     l3910:
  5876                           
  5877                           ; BSR set to: 0
  5878  0026E4  90D8               	bcf	status,0,c
  5879  0026E6  3367               	rrcf	(___lldiv@divisor+3)& (0+255),f,b
  5880  0026E8  3366               	rrcf	(___lldiv@divisor+2)& (0+255),f,b
  5881  0026EA  3365               	rrcf	(___lldiv@divisor+1)& (0+255),f,b
  5882  0026EC  3364               	rrcf	___lldiv@divisor& (0+255),f,b
  5883                           
  5884                           ; BSR set to: 0
  5885  0026EE  2F6C               	decfsz	___lldiv@counter& (0+255),f,b
  5886  0026F0  D7E2               	goto	u3960
  5887  0026F2                     l1048:
  5888                           
  5889                           ; BSR set to: 0
  5890  0026F2  C068  F060         	movff	___lldiv@quotient,?___lldiv
  5891  0026F6  C069  F061         	movff	___lldiv@quotient+1,?___lldiv+1
  5892  0026FA  C06A  F062         	movff	___lldiv@quotient+2,?___lldiv+2
  5893  0026FE  C06B  F063         	movff	___lldiv@quotient+3,?___lldiv+3
  5894                           
  5895                           ; BSR set to: 0
  5896  002702  0012               	return		;funcret
  5897  002704                     __end_of___lldiv:
  5898                           	opt stack 0
  5899                           tblptru	equ	0xFF8
  5900                           tblptrh	equ	0xFF7
  5901                           tblptrl	equ	0xFF6
  5902                           tablat	equ	0xFF5
  5903                           prodh	equ	0xFF4
  5904                           prodl	equ	0xFF3
  5905                           intcon	equ	0xFF2
  5906                           postinc0	equ	0xFEE
  5907                           plusw0	equ	0xFEB
  5908                           wreg	equ	0xFE8
  5909                           postinc1	equ	0xFE6
  5910                           postdec1	equ	0xFE5
  5911                           plusw1	equ	0xFE3
  5912                           fsr1h	equ	0xFE2
  5913                           fsr1l	equ	0xFE1
  5914                           indf2	equ	0xFDF
  5915                           postinc2	equ	0xFDE
  5916                           postdec2	equ	0xFDD
  5917                           plusw2	equ	0xFDB
  5918                           fsr2h	equ	0xFDA
  5919                           fsr2l	equ	0xFD9
  5920                           status	equ	0xFD8
  5921                           
  5922 ;; *************** function _Midi_ResetBuffer *****************
  5923 ;; Defined at:
  5924 ;;		line 41 in file "midi.c"
  5925 ;; Parameters:    Size  Location     Type
  5926 ;;  AMidiBuffer     2    0[BANK0 ] PTR struct .
  5927 ;;		 -> _MidiOutput(324), _MidiInput(324), 
  5928 ;; Auto vars:     Size  Location     Type
  5929 ;;  j               1    4[BANK0 ] unsigned char 
  5930 ;;  i               1    5[BANK0 ] unsigned char 
  5931 ;; Return value:  Size  Location     Type
  5932 ;;                  1    wreg      void 
  5933 ;; Registers used:
  5934 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  5935 ;; Tracked objects:
  5936 ;;		On entry : 3F/0
  5937 ;;		On exit  : 3F/0
  5938 ;;		Unchanged: 0/0
  5939 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5940 ;;      Params:         0       2       0       0       0       0       0       0       0
  5941 ;;      Locals:         0       2       0       0       0       0       0       0       0
  5942 ;;      Temps:          0       2       0       0       0       0       0       0       0
  5943 ;;      Totals:         0       6       0       0       0       0       0       0       0
  5944 ;;Total ram usage:        6 bytes
  5945 ;; Hardware stack levels used:    1
  5946 ;; Hardware stack levels required when called:    6
  5947 ;; This function calls:
  5948 ;;		Nothing
  5949 ;; This function is called by:
  5950 ;;		_Midi_Init
  5951 ;; This function uses a non-reentrant model
  5952 ;;
  5953                           
  5954                           	psect	text34
  5955  001FFA                     __ptext34:
  5956                           	opt stack 0
  5957  001FFA                     _Midi_ResetBuffer:
  5958                           	opt stack 22
  5959                           
  5960                           ; BSR set to: 0
  5961                           ;midi.c: 43: AMidiBuffer->iBufferRead = 0;
  5962                           
  5963                           ; BSR set to: 0
  5964                           ;incstack = 0
  5965  001FFA  EE21 F040          	lfsr	2,320
  5966  001FFE  5160               	movf	Midi_ResetBuffer@AMidiBuffer& (0+255),w,b
  5967  002000  26D9               	addwf	fsr2l,f,c
  5968  002002  5161               	movf	(Midi_ResetBuffer@AMidiBuffer+1)& (0+255),w,b
  5969  002004  22DA               	addwfc	fsr2h,f,c
  5970  002006  6ADF               	clrf	indf2,c
  5971                           
  5972                           ;midi.c: 44: AMidiBuffer->iBufferWrite = 0;
  5973  002008  EE21 F041          	lfsr	2,321
  5974  00200C  5160               	movf	Midi_ResetBuffer@AMidiBuffer& (0+255),w,b
  5975  00200E  26D9               	addwf	fsr2l,f,c
  5976  002010  5161               	movf	(Midi_ResetBuffer@AMidiBuffer+1)& (0+255),w,b
  5977  002012  22DA               	addwfc	fsr2h,f,c
  5978  002014  6ADF               	clrf	indf2,c
  5979                           
  5980                           ;midi.c: 45: AMidiBuffer->iData = 0;
  5981  002016  EE21 F042          	lfsr	2,322
  5982  00201A  5160               	movf	Midi_ResetBuffer@AMidiBuffer& (0+255),w,b
  5983  00201C  26D9               	addwf	fsr2l,f,c
  5984  00201E  5161               	movf	(Midi_ResetBuffer@AMidiBuffer+1)& (0+255),w,b
  5985  002020  22DA               	addwfc	fsr2h,f,c
  5986  002022  6ADF               	clrf	indf2,c
  5987                           
  5988                           ;midi.c: 46: AMidiBuffer->Size = 0;
  5989  002024  EE21 F043          	lfsr	2,323
  5990  002028  5160               	movf	Midi_ResetBuffer@AMidiBuffer& (0+255),w,b
  5991  00202A  26D9               	addwf	fsr2l,f,c
  5992  00202C  5161               	movf	(Midi_ResetBuffer@AMidiBuffer+1)& (0+255),w,b
  5993  00202E  22DA               	addwfc	fsr2h,f,c
  5994  002030  6ADF               	clrf	indf2,c
  5995                           
  5996                           ; BSR set to: 0
  5997                           ;midi.c: 47: for (char i = 0; i < 64; i++)
  5998  002032  6B65               	clrf	Midi_ResetBuffer@i& (0+255),b
  5999  002034                     l3730:
  6000                           
  6001                           ; BSR set to: 0
  6002                           ;midi.c: 48: {
  6003                           ;midi.c: 49: AMidiBuffer->Buffer[i].Code = 0x00;
  6004  002034  5165               	movf	Midi_ResetBuffer@i& (0+255),w,b
  6005  002036  0D05               	mullw	5
  6006  002038  50F3               	movf	prodl,w,c
  6007  00203A  2560               	addwf	Midi_ResetBuffer@AMidiBuffer& (0+255),w,b
  6008  00203C  6ED9               	movwf	fsr2l,c
  6009  00203E  50F4               	movf	prodh,w,c
  6010  002040  2161               	addwfc	(Midi_ResetBuffer@AMidiBuffer+1)& (0+255),w,b
  6011  002042  6EDA               	movwf	fsr2h,c
  6012  002044  6ADF               	clrf	indf2,c
  6013                           
  6014                           ;midi.c: 50: AMidiBuffer->Buffer[i].Channel = 0x00;
  6015  002046  5165               	movf	Midi_ResetBuffer@i& (0+255),w,b
  6016  002048  0D05               	mullw	5
  6017  00204A  C060  F062         	movff	Midi_ResetBuffer@AMidiBuffer,??_Midi_ResetBuffer
  6018  00204E  C061  F063         	movff	Midi_ResetBuffer@AMidiBuffer+1,??_Midi_ResetBuffer+1
  6019  002052  50F3               	movf	prodl,w,c
  6020  002054  2762               	addwf	??_Midi_ResetBuffer& (0+255),f,b
  6021  002056  50F4               	movf	prodh,w,c
  6022  002058  2363               	addwfc	(??_Midi_ResetBuffer+1)& (0+255),f,b
  6023  00205A  2962               	incf	??_Midi_ResetBuffer& (0+255),w,b
  6024  00205C  6ED9               	movwf	fsr2l,c
  6025  00205E  0E00               	movlw	0
  6026  002060  2163               	addwfc	(??_Midi_ResetBuffer+1)& (0+255),w,b
  6027  002062  6EDA               	movwf	fsr2h,c
  6028  002064  6ADF               	clrf	indf2,c
  6029                           
  6030                           ; BSR set to: 0
  6031                           ;midi.c: 51: for (char j = 0; j < sizeof(AMidiBuffer->Buffer[i].Data); j++)
  6032  002066  6B64               	clrf	Midi_ResetBuffer@j& (0+255),b
  6033  002068                     l3738:
  6034                           
  6035                           ; BSR set to: 0
  6036                           ;midi.c: 52: AMidiBuffer->Buffer[i].Data[j] = 0x00;
  6037  002068  5165               	movf	Midi_ResetBuffer@i& (0+255),w,b
  6038  00206A  0D05               	mullw	5
  6039  00206C  C060  F062         	movff	Midi_ResetBuffer@AMidiBuffer,??_Midi_ResetBuffer
  6040  002070  C061  F063         	movff	Midi_ResetBuffer@AMidiBuffer+1,??_Midi_ResetBuffer+1
  6041  002074  50F3               	movf	prodl,w,c
  6042  002076  2762               	addwf	??_Midi_ResetBuffer& (0+255),f,b
  6043  002078  50F4               	movf	prodh,w,c
  6044  00207A  2363               	addwfc	(??_Midi_ResetBuffer+1)& (0+255),f,b
  6045  00207C  5164               	movf	Midi_ResetBuffer@j& (0+255),w,b
  6046  00207E  2762               	addwf	??_Midi_ResetBuffer& (0+255),f,b
  6047  002080  0E00               	movlw	0
  6048  002082  2363               	addwfc	(??_Midi_ResetBuffer+1)& (0+255),f,b
  6049  002084  0E02               	movlw	2
  6050  002086  2562               	addwf	??_Midi_ResetBuffer& (0+255),w,b
  6051  002088  6ED9               	movwf	fsr2l,c
  6052  00208A  0E00               	movlw	0
  6053  00208C  2163               	addwfc	(??_Midi_ResetBuffer+1)& (0+255),w,b
  6054  00208E  6EDA               	movwf	fsr2h,c
  6055  002090  6ADF               	clrf	indf2,c
  6056                           
  6057                           ; BSR set to: 0
  6058  002092  2B64               	incf	Midi_ResetBuffer@j& (0+255),f,b
  6059                           
  6060                           ; BSR set to: 0
  6061  002094  0E01               	movlw	1
  6062  002096  6564               	cpfsgt	Midi_ResetBuffer@j& (0+255),b
  6063  002098  D7E7               	goto	l3738
  6064                           
  6065                           ; BSR set to: 0
  6066  00209A  2B65               	incf	Midi_ResetBuffer@i& (0+255),f,b
  6067                           
  6068                           ; BSR set to: 0
  6069  00209C  0E3F               	movlw	63
  6070  00209E  6565               	cpfsgt	Midi_ResetBuffer@i& (0+255),b
  6071  0020A0  D7C9               	goto	l3730
  6072  0020A2  0C3F               	retlw	63
  6073  0020A4                     __end_of_Midi_ResetBuffer:
  6074                           	opt stack 0
  6075                           tblptru	equ	0xFF8
  6076                           tblptrh	equ	0xFF7
  6077                           tblptrl	equ	0xFF6
  6078                           tablat	equ	0xFF5
  6079                           prodh	equ	0xFF4
  6080                           prodl	equ	0xFF3
  6081                           intcon	equ	0xFF2
  6082                           postinc0	equ	0xFEE
  6083                           plusw0	equ	0xFEB
  6084                           wreg	equ	0xFE8
  6085                           postinc1	equ	0xFE6
  6086                           postdec1	equ	0xFE5
  6087                           plusw1	equ	0xFE3
  6088                           fsr1h	equ	0xFE2
  6089                           fsr1l	equ	0xFE1
  6090                           indf2	equ	0xFDF
  6091                           postinc2	equ	0xFDE
  6092                           postdec2	equ	0xFDD
  6093                           plusw2	equ	0xFDB
  6094                           fsr2h	equ	0xFDA
  6095                           fsr2l	equ	0xFD9
  6096                           status	equ	0xFD8
  6097                           
  6098 ;; *************** function _InitDigiPot *****************
  6099 ;; Defined at:
  6100 ;;		line 7 in file "digipot.c"
  6101 ;; Parameters:    Size  Location     Type
  6102 ;;		None
  6103 ;; Auto vars:     Size  Location     Type
  6104 ;;  LTickCount      4  102[BANK0 ] long 
  6105 ;;  LPeriod         3  106[BANK0 ] float 
  6106 ;;  LPrescaler      1  112[BANK0 ] unsigned char 
  6107 ;; Return value:  Size  Location     Type
  6108 ;;                  1    wreg      void 
  6109 ;; Registers used:
  6110 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6111 ;; Tracked objects:
  6112 ;;		On entry : 3F/2
  6113 ;;		On exit  : 3F/0
  6114 ;;		Unchanged: 0/0
  6115 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6116 ;;      Params:         0       0       0       0       0       0       0       0       0
  6117 ;;      Locals:         0      11       0       0       0       0       0       0       0
  6118 ;;      Temps:          0       0       0       0       0       0       0       0       0
  6119 ;;      Totals:         0      11       0       0       0       0       0       0       0
  6120 ;;Total ram usage:       11 bytes
  6121 ;; Hardware stack levels used:    1
  6122 ;; Hardware stack levels required when called:   11
  6123 ;; This function calls:
  6124 ;;		_InitConnector
  6125 ;;		___altoft
  6126 ;;		___ftdiv
  6127 ;;		___ftmul
  6128 ;;		___fttol
  6129 ;;		___lbtoft
  6130 ;;		_pow
  6131 ;; This function is called by:
  6132 ;;		_InitApp
  6133 ;; This function uses a non-reentrant model
  6134 ;;
  6135                           
  6136                           	psect	text35
  6137  001442                     __ptext35:
  6138                           	opt stack 0
  6139  001442                     _InitDigiPot:
  6140                           	opt stack 18
  6141                           
  6142                           ; BSR set to: 2
  6143                           ;digipot.c: 9: unsigned char LPrescaler = T0PS0 | (T0PS1 << 1) | (T0PS2 << 2);
  6144                           
  6145                           ; BSR set to: 0
  6146                           ;incstack = 0
  6147  001442  0E00               	movlw	0
  6148  001444  B0D5               	btfsc	4053,0,c	;volatile
  6149  001446  0E01               	movlw	1
  6150  001448  B2D5               	btfsc	4053,1,c	;volatile
  6151  00144A  0902               	iorlw	2
  6152  00144C  B4D5               	btfsc	4053,2,c	;volatile
  6153  00144E  0904               	iorlw	4
  6154  001450  0100               	movlb	0	; () banked
  6155  001452  6FD0               	movwf	InitDigiPot@LPrescaler& (0+255),b
  6156                           
  6157                           ; BSR set to: 0
  6158                           ;digipot.c: 10: long LTickCount = pow(2, LPrescaler) * 4096;
  6159  001454  51D0               	movf	InitDigiPot@LPrescaler& (0+255),w,b
  6160  001456  EC44  F018         	call	___lbtoft
  6161  00145A  C068  F0B8         	movff	?___lbtoft,pow@y
  6162  00145E  C069  F0B9         	movff	?___lbtoft+1,pow@y+1
  6163  001462  C06A  F0BA         	movff	?___lbtoft+2,pow@y+2
  6164  001466  6BB5               	clrf	pow@x& (0+255),b
  6165  001468  6BB6               	clrf	(pow@x+1)& (0+255),b
  6166  00146A  0E40               	movlw	64
  6167  00146C  6FB7               	movwf	(pow@x+2)& (0+255),b
  6168  00146E  EC81  F009         	call	_pow	;wreg free
  6169  001472  C0B5  F0CD         	movff	?_pow,_InitDigiPot$2165
  6170  001476  C0B6  F0CE         	movff	?_pow+1,_InitDigiPot$2165+1
  6171  00147A  C0B7  F0CF         	movff	?_pow+2,_InitDigiPot$2165+2
  6172                           
  6173                           ; BSR set to: 0
  6174                           ;digipot.c: 10: long LTickCount = pow(2, LPrescaler) * 4096;
  6175  00147E  6B75               	clrf	___ftmul@f2& (0+255),b
  6176  001480  0E80               	movlw	128
  6177  001482  6F76               	movwf	(___ftmul@f2+1)& (0+255),b
  6178  001484  0E45               	movlw	69
  6179  001486  6F77               	movwf	(___ftmul@f2+2)& (0+255),b
  6180  001488  C0CD  F072         	movff	_InitDigiPot$2165,___ftmul@f1
  6181  00148C  C0CE  F073         	movff	_InitDigiPot$2165+1,___ftmul@f1+1
  6182  001490  C0CF  F074         	movff	_InitDigiPot$2165+2,___ftmul@f1+2
  6183  001494  EC4C  F00D         	call	___ftmul	;wreg free
  6184  001498  C072  F08F         	movff	?___ftmul,___fttol@f1
  6185  00149C  C073  F090         	movff	?___ftmul+1,___fttol@f1+1
  6186  0014A0  C074  F091         	movff	?___ftmul+2,___fttol@f1+2
  6187  0014A4  ECEB  F00E         	call	___fttol	;wreg free
  6188  0014A8  C08F  F0C6         	movff	?___fttol,InitDigiPot@LTickCount
  6189  0014AC  C090  F0C7         	movff	?___fttol+1,InitDigiPot@LTickCount+1
  6190  0014B0  C091  F0C8         	movff	?___fttol+2,InitDigiPot@LTickCount+2
  6191  0014B4  C092  F0C9         	movff	?___fttol+3,InitDigiPot@LTickCount+3
  6192                           
  6193                           ; BSR set to: 0
  6194                           ;digipot.c: 11: float LPeriod = (1.0f * LTickCount / 20000000);
  6195  0014B8  6B75               	clrf	___ftmul@f2& (0+255),b
  6196  0014BA  0E80               	movlw	128
  6197  0014BC  6F76               	movwf	(___ftmul@f2+1)& (0+255),b
  6198  0014BE  0E3F               	movlw	63
  6199  0014C0  6F77               	movwf	(___ftmul@f2+2)& (0+255),b
  6200  0014C2  C0C6  F068         	movff	InitDigiPot@LTickCount,___altoft@c
  6201  0014C6  C0C7  F069         	movff	InitDigiPot@LTickCount+1,___altoft@c+1
  6202  0014CA  C0C8  F06A         	movff	InitDigiPot@LTickCount+2,___altoft@c+2
  6203  0014CE  C0C9  F06B         	movff	InitDigiPot@LTickCount+3,___altoft@c+3
  6204  0014D2  EC93  F014         	call	___altoft	;wreg free
  6205  0014D6  C068  F072         	movff	?___altoft,___ftmul@f1
  6206  0014DA  C069  F073         	movff	?___altoft+1,___ftmul@f1+1
  6207  0014DE  C06A  F074         	movff	?___altoft+2,___ftmul@f1+2
  6208  0014E2  EC4C  F00D         	call	___ftmul	;wreg free
  6209  0014E6  C072  F080         	movff	?___ftmul,___ftdiv@f1
  6210  0014EA  C073  F081         	movff	?___ftmul+1,___ftdiv@f1+1
  6211  0014EE  C074  F082         	movff	?___ftmul+2,___ftdiv@f1+2
  6212  0014F2  0E97               	movlw	151
  6213  0014F4  6F83               	movwf	___ftdiv@f2& (0+255),b
  6214  0014F6  0E98               	movlw	152
  6215  0014F8  6F84               	movwf	(___ftdiv@f2+1)& (0+255),b
  6216  0014FA  0E4B               	movlw	75
  6217  0014FC  6F85               	movwf	(___ftdiv@f2+2)& (0+255),b
  6218  0014FE  EC48  F00F         	call	___ftdiv	;wreg free
  6219  001502  C080  F0CA         	movff	?___ftdiv,InitDigiPot@LPeriod
  6220  001506  C081  F0CB         	movff	?___ftdiv+1,InitDigiPot@LPeriod+1
  6221  00150A  C082  F0CC         	movff	?___ftdiv+2,InitDigiPot@LPeriod+2
  6222                           
  6223                           ; BSR set to: 0
  6224                           ;digipot.c: 13: TRISA2 = 0;
  6225  00150E  9492               	bcf	3986,2,c	;volatile
  6226                           
  6227                           ; BSR set to: 0
  6228                           ;digipot.c: 14: TRISA3 = 0;
  6229  001510  9692               	bcf	3986,3,c	;volatile
  6230                           
  6231                           ; BSR set to: 0
  6232                           ;digipot.c: 15: TRISA4 = 0;
  6233  001512  9892               	bcf	3986,4,c	;volatile
  6234                           
  6235                           ; BSR set to: 0
  6236                           ;digipot.c: 17: _DigiPot.CounterRef = 0.125f / LPeriod;
  6237  001514  C0CA  F083         	movff	InitDigiPot@LPeriod,___ftdiv@f2
  6238  001518  C0CB  F084         	movff	InitDigiPot@LPeriod+1,___ftdiv@f2+1
  6239  00151C  C0CC  F085         	movff	InitDigiPot@LPeriod+2,___ftdiv@f2+2
  6240  001520  6B80               	clrf	___ftdiv@f1& (0+255),b
  6241  001522  6B81               	clrf	(___ftdiv@f1+1)& (0+255),b
  6242  001524  0E3E               	movlw	62
  6243  001526  6F82               	movwf	(___ftdiv@f1+2)& (0+255),b
  6244  001528  EC48  F00F         	call	___ftdiv	;wreg free
  6245  00152C  C080  F08F         	movff	?___ftdiv,___fttol@f1
  6246  001530  C081  F090         	movff	?___ftdiv+1,___fttol@f1+1
  6247  001534  C082  F091         	movff	?___ftdiv+2,___fttol@f1+2
  6248  001538  ECEB  F00E         	call	___fttol	;wreg free
  6249  00153C  518F               	movf	?___fttol& (0+255),w,b
  6250  00153E  6FE1               	movwf	__DigiPot& (0+255),b
  6251                           
  6252                           ; BSR set to: 0
  6253                           ;digipot.c: 18: _DigiPot.Counter = 0;
  6254  001540  6BE2               	clrf	(__DigiPot+1)& (0+255),b
  6255                           
  6256                           ; BSR set to: 0
  6257                           ;digipot.c: 19: _DigiPot.IO.ClockPin.Port = &LATA;
  6258  001542  0E89               	movlw	137
  6259  001544  6FE3               	movwf	(__DigiPot+2)& (0+255),b
  6260  001546  0E0F               	movlw	15
  6261  001548  6FE4               	movwf	(__DigiPot+3)& (0+255),b
  6262                           
  6263                           ; BSR set to: 0
  6264                           ;digipot.c: 20: _DigiPot.IO.ClockPin.PinNumber = 4;
  6265  00154A  0E04               	movlw	4
  6266  00154C  6FE5               	movwf	(__DigiPot+4)& (0+255),b
  6267                           
  6268                           ; BSR set to: 0
  6269                           ;digipot.c: 21: _DigiPot.IO.DataPin.Port = &LATA;
  6270  00154E  0E89               	movlw	137
  6271  001550  6FE8               	movwf	(__DigiPot+7)& (0+255),b
  6272  001552  0E0F               	movlw	15
  6273  001554  6FE9               	movwf	(__DigiPot+8)& (0+255),b
  6274                           
  6275                           ; BSR set to: 0
  6276                           ;digipot.c: 22: _DigiPot.IO.DataPin.PinNumber = 2;
  6277  001556  0E02               	movlw	2
  6278  001558  6FEA               	movwf	(__DigiPot+9)& (0+255),b
  6279                           
  6280                           ; BSR set to: 0
  6281                           ;digipot.c: 23: _DigiPot.IO.LatchPin.Port = &LATA;
  6282  00155A  0E89               	movlw	137
  6283  00155C  6FED               	movwf	(__DigiPot+12)& (0+255),b
  6284  00155E  0E0F               	movlw	15
  6285  001560  6FEE               	movwf	(__DigiPot+13)& (0+255),b
  6286                           
  6287                           ; BSR set to: 0
  6288                           ;digipot.c: 24: _DigiPot.IO.LatchPin.PinNumber = 3;
  6289  001562  0E03               	movlw	3
  6290  001564  6FEF               	movwf	(__DigiPot+14)& (0+255),b
  6291                           
  6292                           ; BSR set to: 0
  6293                           ;digipot.c: 25: InitConnector(&_DigiPot.IO);
  6294  001566  0EE3               	movlw	low (__DigiPot+2)
  6295  001568  6F64               	movwf	InitConnector@AConnector& (0+255),b
  6296  00156A  6B65               	clrf	(InitConnector@AConnector+1)& (0+255),b
  6297  00156C  EF06  F018         	goto	_InitConnector	;wreg free
  6298  001570                     __end_of_InitDigiPot:
  6299                           	opt stack 0
  6300                           tblptru	equ	0xFF8
  6301                           tblptrh	equ	0xFF7
  6302                           tblptrl	equ	0xFF6
  6303                           tablat	equ	0xFF5
  6304                           prodh	equ	0xFF4
  6305                           prodl	equ	0xFF3
  6306                           intcon	equ	0xFF2
  6307                           postinc0	equ	0xFEE
  6308                           plusw0	equ	0xFEB
  6309                           wreg	equ	0xFE8
  6310                           postinc1	equ	0xFE6
  6311                           postdec1	equ	0xFE5
  6312                           plusw1	equ	0xFE3
  6313                           fsr1h	equ	0xFE2
  6314                           fsr1l	equ	0xFE1
  6315                           indf2	equ	0xFDF
  6316                           postinc2	equ	0xFDE
  6317                           postdec2	equ	0xFDD
  6318                           plusw2	equ	0xFDB
  6319                           fsr2h	equ	0xFDA
  6320                           fsr2l	equ	0xFD9
  6321                           status	equ	0xFD8
  6322                           
  6323 ;; *************** function ___lbtoft *****************
  6324 ;; Defined at:
  6325 ;;		line 27 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\lbtoft.c"
  6326 ;; Parameters:    Size  Location     Type
  6327 ;;  c               1    wreg     unsigned char 
  6328 ;; Auto vars:     Size  Location     Type
  6329 ;;  c               1   11[BANK0 ] unsigned char 
  6330 ;; Return value:  Size  Location     Type
  6331 ;;                  3    8[BANK0 ] float 
  6332 ;; Registers used:
  6333 ;;		wreg, status,2, status,0, cstack
  6334 ;; Tracked objects:
  6335 ;;		On entry : 3F/0
  6336 ;;		On exit  : 3F/0
  6337 ;;		Unchanged: 0/0
  6338 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6339 ;;      Params:         0       3       0       0       0       0       0       0       0
  6340 ;;      Locals:         0       1       0       0       0       0       0       0       0
  6341 ;;      Temps:          0       0       0       0       0       0       0       0       0
  6342 ;;      Totals:         0       4       0       0       0       0       0       0       0
  6343 ;;Total ram usage:        4 bytes
  6344 ;; Hardware stack levels used:    1
  6345 ;; Hardware stack levels required when called:    7
  6346 ;; This function calls:
  6347 ;;		___ftpack
  6348 ;; This function is called by:
  6349 ;;		_InitDigiPot
  6350 ;;		_Zip
  6351 ;;		_UnZip
  6352 ;; This function uses a non-reentrant model
  6353 ;;
  6354                           
  6355                           	psect	text36
  6356  003088                     __ptext36:
  6357                           	opt stack 0
  6358  003088                     ___lbtoft:
  6359                           	opt stack 21
  6360                           
  6361                           ; BSR set to: 0
  6362                           ;incstack = 0
  6363                           ;___lbtoft@c stored from wreg
  6364  003088  6F6B               	movwf	___lbtoft@c& (0+255),b
  6365  00308A  0100               	movlb	0	; () banked
  6366  00308C  516B               	movf	___lbtoft@c& (0+255),w,b
  6367  00308E  6F60               	movwf	___ftpack@arg& (0+255),b
  6368  003090  6B61               	clrf	(___ftpack@arg+1)& (0+255),b
  6369  003092  6B62               	clrf	(___ftpack@arg+2)& (0+255),b
  6370  003094  0E8E               	movlw	142
  6371  003096  6F63               	movwf	___ftpack@exp& (0+255),b
  6372  003098  0E00               	movlw	0
  6373  00309A  6F64               	movwf	___ftpack@sign& (0+255),b
  6374  00309C  ECC3  F011         	call	___ftpack	;wreg free
  6375  0030A0  C060  F068         	movff	?___ftpack,?___lbtoft
  6376  0030A4  C061  F069         	movff	?___ftpack+1,?___lbtoft+1
  6377  0030A8  C062  F06A         	movff	?___ftpack+2,?___lbtoft+2
  6378                           
  6379                           ; BSR set to: 0
  6380  0030AC  0012               	return		;funcret
  6381  0030AE                     __end_of___lbtoft:
  6382                           	opt stack 0
  6383                           tblptru	equ	0xFF8
  6384                           tblptrh	equ	0xFF7
  6385                           tblptrl	equ	0xFF6
  6386                           tablat	equ	0xFF5
  6387                           prodh	equ	0xFF4
  6388                           prodl	equ	0xFF3
  6389                           intcon	equ	0xFF2
  6390                           postinc0	equ	0xFEE
  6391                           plusw0	equ	0xFEB
  6392                           wreg	equ	0xFE8
  6393                           postinc1	equ	0xFE6
  6394                           postdec1	equ	0xFE5
  6395                           plusw1	equ	0xFE3
  6396                           fsr1h	equ	0xFE2
  6397                           fsr1l	equ	0xFE1
  6398                           indf2	equ	0xFDF
  6399                           postinc2	equ	0xFDE
  6400                           postdec2	equ	0xFDD
  6401                           plusw2	equ	0xFDB
  6402                           fsr2h	equ	0xFDA
  6403                           fsr2l	equ	0xFD9
  6404                           status	equ	0xFD8
  6405                           
  6406 ;; *************** function _Hub_Init *****************
  6407 ;; Defined at:
  6408 ;;		line 9 in file "hub.c"
  6409 ;; Parameters:    Size  Location     Type
  6410 ;;		None
  6411 ;; Auto vars:     Size  Location     Type
  6412 ;;  i               2   76[BANK0 ] int 
  6413 ;; Return value:  Size  Location     Type
  6414 ;;                  1    wreg      void 
  6415 ;; Registers used:
  6416 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  6417 ;; Tracked objects:
  6418 ;;		On entry : 3F/0
  6419 ;;		On exit  : 3F/1
  6420 ;;		Unchanged: 0/0
  6421 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6422 ;;      Params:         0       0       0       0       0       0       0       0       0
  6423 ;;      Locals:         0       2       0       0       0       0       0       0       0
  6424 ;;      Temps:          0       0       0       0       0       0       0       0       0
  6425 ;;      Totals:         0       2       0       0       0       0       0       0       0
  6426 ;;Total ram usage:        2 bytes
  6427 ;; Hardware stack levels used:    1
  6428 ;; Hardware stack levels required when called:   10
  6429 ;; This function calls:
  6430 ;;		_Hub_ReadSwitch
  6431 ;;		_InitConnector
  6432 ;; This function is called by:
  6433 ;;		_InitApp
  6434 ;; This function uses a non-reentrant model
  6435 ;;
  6436                           
  6437                           	psect	text37
  6438  002496                     __ptext37:
  6439                           	opt stack 0
  6440  002496                     _Hub_Init:
  6441                           	opt stack 19
  6442                           
  6443                           ; BSR set to: 0
  6444                           ;hub.c: 11: _Hub.ReadyToWrite = 0;
  6445                           
  6446                           ; BSR set to: 0
  6447                           ;incstack = 0
  6448  002496  0101               	movlb	1	; () banked
  6449  002498  6B86               	clrf	(__Hub+134)& (0+255),b
  6450                           
  6451                           ; BSR set to: 1
  6452                           ;hub.c: 12: _Hub.ReadyToRead = 1;
  6453  00249A  0E01               	movlw	1
  6454  00249C  6F87               	movwf	(__Hub+135)& (0+255),b
  6455                           
  6456                           ; BSR set to: 1
  6457                           ;hub.c: 13: _Hub.Paused = 0;
  6458  00249E  6B88               	clrf	(__Hub+136)& (0+255),b
  6459                           
  6460                           ; BSR set to: 1
  6461                           ;hub.c: 14: _Hub.iRead = 0;
  6462  0024A0  6B61               	clrf	(__Hub+97)& (0+255),b
  6463                           
  6464                           ; BSR set to: 1
  6465                           ;hub.c: 15: _Hub.ReadComplete = 0;
  6466  0024A2  6B60               	clrf	(__Hub+96)& (0+255),b
  6467                           
  6468                           ; BSR set to: 1
  6469                           ;hub.c: 17: _Hub.PrimaryBuffer.ActionButton = 0;
  6470  0024A4  6B62               	clrf	(__Hub+98)& (0+255),b
  6471                           
  6472                           ; BSR set to: 1
  6473                           ;hub.c: 18: _Hub.PrimaryBuffer.PushedButton = 0;
  6474  0024A6  6B63               	clrf	(__Hub+99)& (0+255),b
  6475                           
  6476                           ; BSR set to: 1
  6477                           ;hub.c: 19: _Hub.PrimaryBuffer.Channel = 0x00;
  6478  0024A8  6B64               	clrf	(__Hub+100)& (0+255),b
  6479                           
  6480                           ; BSR set to: 1
  6481                           ;hub.c: 20: _Hub.PrimaryBuffer.Sound = 0x00;
  6482  0024AA  6B65               	clrf	(__Hub+101)& (0+255),b
  6483                           
  6484                           ; BSR set to: 1
  6485                           ;hub.c: 21: _Hub.CurrentChannel = _Hub.PrimaryBuffer.Channel;
  6486  0024AC  C164  F18C         	movff	__Hub+100,__Hub+140
  6487                           
  6488                           ;hub.c: 23: _Hub.MaxChannel = (char)((1024.0f / (char)((8 * 6 * 1.0f + 2.0f*8.0f) / 8.0f
      +                          )) * 2.0f);
  6489  0024B0  0E01               	movlw	1
  6490  0024B2  6F8A               	movwf	(__Hub+138)& (0+255),b
  6491  0024B4  6B89               	clrf	(__Hub+137)& (0+255),b
  6492                           
  6493                           ;hub.c: 24: _Hub.MaxSound = 128;
  6494  0024B6  0E80               	movlw	128
  6495  0024B8  6F8B               	movwf	(__Hub+139)& (0+255),b
  6496                           
  6497                           ; BSR set to: 1
  6498                           ;hub.c: 26: TRISB2 = 1;
  6499  0024BA  8493               	bsf	3987,2,c	;volatile
  6500                           
  6501                           ; BSR set to: 1
  6502                           ;hub.c: 27: TRISB3 = 0;
  6503  0024BC  9693               	bcf	3987,3,c	;volatile
  6504                           
  6505                           ; BSR set to: 1
  6506                           ;hub.c: 28: TRISB4 = 0;
  6507  0024BE  9893               	bcf	3987,4,c	;volatile
  6508                           
  6509                           ; BSR set to: 1
  6510                           ;hub.c: 30: _Hub.IO.ClockPin.Port = &LATB;
  6511  0024C0  0E8A               	movlw	138
  6512  0024C2  6F8E               	movwf	(__Hub+142)& (0+255),b
  6513  0024C4  0E0F               	movlw	15
  6514  0024C6  6F8F               	movwf	(__Hub+143)& (0+255),b
  6515                           
  6516                           ; BSR set to: 1
  6517                           ;hub.c: 31: _Hub.IO.ClockPin.PinNumber = 4;
  6518  0024C8  0E04               	movlw	4
  6519  0024CA  6F90               	movwf	(__Hub+144)& (0+255),b
  6520                           
  6521                           ;hub.c: 32: _Hub.IO.DataPin.Port = &PORTB;
  6522  0024CC  0E81               	movlw	129
  6523  0024CE  6F93               	movwf	(__Hub+147)& (0+255),b
  6524  0024D0  0E0F               	movlw	15
  6525  0024D2  6F94               	movwf	(__Hub+148)& (0+255),b
  6526                           
  6527                           ; BSR set to: 1
  6528                           ;hub.c: 33: _Hub.IO.DataPin.PinNumber = 2;
  6529  0024D4  0E02               	movlw	2
  6530  0024D6  6F95               	movwf	(__Hub+149)& (0+255),b
  6531                           
  6532                           ; BSR set to: 1
  6533                           ;hub.c: 34: _Hub.IO.LatchPin.Port = &LATB;
  6534  0024D8  0E8A               	movlw	138
  6535  0024DA  6F98               	movwf	(__Hub+152)& (0+255),b
  6536  0024DC  0E0F               	movlw	15
  6537  0024DE  6F99               	movwf	(__Hub+153)& (0+255),b
  6538                           
  6539                           ;hub.c: 35: _Hub.IO.LatchPin.PinNumber = 3;
  6540  0024E0  0E03               	movlw	3
  6541  0024E2  6F9A               	movwf	(__Hub+154)& (0+255),b
  6542                           
  6543                           ; BSR set to: 1
  6544                           ;hub.c: 36: InitConnector(&_Hub.IO);
  6545  0024E4  0E8E               	movlw	low (__Hub+142)
  6546  0024E6  0100               	movlb	0	; () banked
  6547  0024E8  6F64               	movwf	InitConnector@AConnector& (0+255),b
  6548  0024EA  0E01               	movlw	high (__Hub+142)
  6549  0024EC  6F65               	movwf	(InitConnector@AConnector+1)& (0+255),b
  6550  0024EE  EC06  F018         	call	_InitConnector	;wreg free
  6551                           
  6552                           ; BSR set to: 0
  6553                           ;hub.c: 39: for (int i = 0; i < sizeof(_Hub.PrimaryBuffer.Values); i++)
  6554  0024F2  6BAC               	clrf	Hub_Init@i& (0+255),b
  6555  0024F4  6BAD               	clrf	(Hub_Init@i+1)& (0+255),b
  6556  0024F6                     l4118:
  6557                           
  6558                           ; BSR set to: 0
  6559                           ;hub.c: 40: _Hub.PrimaryBuffer.Values[i] = 0;
  6560  0024F6  0E66               	movlw	low (__Hub+102)
  6561  0024F8  25AC               	addwf	Hub_Init@i& (0+255),w,b
  6562  0024FA  6ED9               	movwf	fsr2l,c
  6563  0024FC  0E01               	movlw	high (__Hub+102)
  6564  0024FE  21AD               	addwfc	(Hub_Init@i+1)& (0+255),w,b
  6565  002500  6EDA               	movwf	fsr2h,c
  6566  002502  0E00               	movlw	0
  6567  002504  6EDF               	movwf	indf2,c
  6568                           
  6569                           ; BSR set to: 0
  6570  002506  4BAC               	infsnz	Hub_Init@i& (0+255),f,b
  6571  002508  2BAD               	incf	(Hub_Init@i+1)& (0+255),f,b
  6572                           
  6573                           ; BSR set to: 0
  6574  00250A  51AD               	movf	(Hub_Init@i+1)& (0+255),w,b
  6575  00250C  E002 EF8F  F016    	bnz	_Hub_ReadSwitch
  6576  002512  0E08               	movlw	8
  6577  002514  5DAC               	subwf	Hub_Init@i& (0+255),w,b
  6578  002516  E3EF               	bnc	l4118
  6579                           
  6580                           ; BSR set to: 0
  6581                           ;hub.c: 41: Hub_ReadSwitch();
  6582  002518  EF8F  F016         	goto	_Hub_ReadSwitch	;wreg free
  6583  00251C                     __end_of_Hub_Init:
  6584                           	opt stack 0
  6585                           tblptru	equ	0xFF8
  6586                           tblptrh	equ	0xFF7
  6587                           tblptrl	equ	0xFF6
  6588                           tablat	equ	0xFF5
  6589                           prodh	equ	0xFF4
  6590                           prodl	equ	0xFF3
  6591                           intcon	equ	0xFF2
  6592                           postinc0	equ	0xFEE
  6593                           plusw0	equ	0xFEB
  6594                           wreg	equ	0xFE8
  6595                           postinc1	equ	0xFE6
  6596                           postdec1	equ	0xFE5
  6597                           plusw1	equ	0xFE3
  6598                           fsr1h	equ	0xFE2
  6599                           fsr1l	equ	0xFE1
  6600                           indf2	equ	0xFDF
  6601                           postinc2	equ	0xFDE
  6602                           postdec2	equ	0xFDD
  6603                           plusw2	equ	0xFDB
  6604                           fsr2h	equ	0xFDA
  6605                           fsr2l	equ	0xFD9
  6606                           status	equ	0xFD8
  6607                           
  6608 ;; *************** function _Hub_ReadSwitch *****************
  6609 ;; Defined at:
  6610 ;;		line 44 in file "hub.c"
  6611 ;; Parameters:    Size  Location     Type
  6612 ;;		None
  6613 ;; Auto vars:     Size  Location     Type
  6614 ;;  LBitArray      24   52[BANK0 ] unsigned char [24]
  6615 ;; Return value:  Size  Location     Type
  6616 ;;                  1    wreg      void 
  6617 ;; Registers used:
  6618 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, cstack
  6619 ;; Tracked objects:
  6620 ;;		On entry : 3F/0
  6621 ;;		On exit  : 3F/1
  6622 ;;		Unchanged: 0/0
  6623 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6624 ;;      Params:         0       0       0       0       0       0       0       0       0
  6625 ;;      Locals:         0      24       0       0       0       0       0       0       0
  6626 ;;      Temps:          0       0       0       0       0       0       0       0       0
  6627 ;;      Totals:         0      24       0       0       0       0       0       0       0
  6628 ;;Total ram usage:       24 bytes
  6629 ;; Hardware stack levels used:    1
  6630 ;; Hardware stack levels required when called:    9
  6631 ;; This function calls:
  6632 ;;		_ReadBitArray
  6633 ;;		_memcpy
  6634 ;; This function is called by:
  6635 ;;		_Hub_Init
  6636 ;; This function uses a non-reentrant model
  6637 ;;
  6638                           
  6639                           	psect	text38
  6640  002D1E                     __ptext38:
  6641                           	opt stack 0
  6642  002D1E                     _Hub_ReadSwitch:
  6643                           	opt stack 19
  6644                           
  6645                           ; BSR set to: 0
  6646                           ;hub.c: 46: bool LBitArray[24];
  6647                           ;hub.c: 47: ReadBitArray(LBitArray, _Hub.IO);
  6648                           
  6649                           ; BSR set to: 1
  6650                           ;incstack = 0
  6651  002D1E  0E94               	movlw	low Hub_ReadSwitch@LBitArray
  6652  002D20  6F81               	movwf	ReadBitArray@AData& (0+255),b
  6653  002D22  EE21  F08E         	lfsr	2,__Hub+142
  6654  002D26  EE00  F082         	lfsr	0,ReadBitArray@AIO
  6655  002D2A  0E0E               	movlw	14
  6656  002D2C                     u3861:
  6657  002D2C  CFDB FFEB          	movff	plusw2,plusw0
  6658  002D30  06E8               	decf	wreg,f,c
  6659  002D32  E2FC               	bc	u3861
  6660  002D34  ECF2  F016         	call	_ReadBitArray	;wreg free
  6661                           
  6662                           ; BSR set to: 0
  6663                           ;hub.c: 48: memcpy(_Hub.Switch + _Hub.iRead, LBitArray, sizeof(LBitArray));
  6664  002D38  0E00               	movlw	low __Hub
  6665  002D3A  0101               	movlb	1	; () banked
  6666  002D3C  2561               	addwf	(__Hub+97)& (0+255),w,b
  6667  002D3E  0100               	movlb	0	; () banked
  6668  002D40  6F60               	movwf	memcpy@d1& (0+255),b
  6669  002D42  6B61               	clrf	(memcpy@d1+1)& (0+255),b
  6670  002D44  0E01               	movlw	high __Hub
  6671  002D46  2361               	addwfc	(memcpy@d1+1)& (0+255),f,b
  6672  002D48  0E94               	movlw	low Hub_ReadSwitch@LBitArray
  6673  002D4A  6F62               	movwf	memcpy@s1& (0+255),b
  6674  002D4C  6B63               	clrf	(memcpy@s1+1)& (0+255),b
  6675  002D4E  6B65               	clrf	(memcpy@n+1)& (0+255),b
  6676  002D50  0E18               	movlw	24
  6677  002D52  6F64               	movwf	memcpy@n& (0+255),b
  6678  002D54  ECB0  F016         	call	_memcpy	;wreg free
  6679                           
  6680                           ; BSR set to: 0
  6681                           ;hub.c: 49: _Hub.iRead += 24;
  6682  002D58  0E18               	movlw	24
  6683  002D5A  0101               	movlb	1	; () banked
  6684  002D5C  2761               	addwf	(__Hub+97)& (0+255),f,b
  6685                           
  6686                           ; BSR set to: 1
  6687  002D5E  0C18               	retlw	24	;funcret
  6688  002D60                     __end_of_Hub_ReadSwitch:
  6689                           	opt stack 0
  6690                           tblptru	equ	0xFF8
  6691                           tblptrh	equ	0xFF7
  6692                           tblptrl	equ	0xFF6
  6693                           tablat	equ	0xFF5
  6694                           prodh	equ	0xFF4
  6695                           prodl	equ	0xFF3
  6696                           intcon	equ	0xFF2
  6697                           postinc0	equ	0xFEE
  6698                           plusw0	equ	0xFEB
  6699                           wreg	equ	0xFE8
  6700                           postinc1	equ	0xFE6
  6701                           postdec1	equ	0xFE5
  6702                           plusw1	equ	0xFE3
  6703                           fsr1h	equ	0xFE2
  6704                           fsr1l	equ	0xFE1
  6705                           indf2	equ	0xFDF
  6706                           postinc2	equ	0xFDE
  6707                           postdec2	equ	0xFDD
  6708                           plusw2	equ	0xFDB
  6709                           fsr2h	equ	0xFDA
  6710                           fsr2l	equ	0xFD9
  6711                           status	equ	0xFD8
  6712                           
  6713 ;; *************** function _ReadBitArray *****************
  6714 ;; Defined at:
  6715 ;;		line 62 in file "harware.c"
  6716 ;; Parameters:    Size  Location     Type
  6717 ;;  AData           1   33[BANK0 ] PTR unsigned char 
  6718 ;;		 -> Hub_ReadSwitch@LBitArray(24), 
  6719 ;;  AIO            15   34[BANK0 ] struct .
  6720 ;; Auto vars:     Size  Location     Type
  6721 ;;  i               2   50[BANK0 ] int 
  6722 ;; Return value:  Size  Location     Type
  6723 ;;                  1    wreg      void 
  6724 ;; Registers used:
  6725 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, cstack
  6726 ;; Tracked objects:
  6727 ;;		On entry : 3F/0
  6728 ;;		On exit  : 3F/0
  6729 ;;		Unchanged: 0/0
  6730 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6731 ;;      Params:         0      16       0       0       0       0       0       0       0
  6732 ;;      Locals:         0       2       0       0       0       0       0       0       0
  6733 ;;      Temps:          0       1       0       0       0       0       0       0       0
  6734 ;;      Totals:         0      19       0       0       0       0       0       0       0
  6735 ;;Total ram usage:       19 bytes
  6736 ;; Hardware stack levels used:    1
  6737 ;; Hardware stack levels required when called:    8
  6738 ;; This function calls:
  6739 ;;		_ReadBit
  6740 ;; This function is called by:
  6741 ;;		_Hub_ReadSwitch
  6742 ;; This function uses a non-reentrant model
  6743 ;;
  6744                           
  6745                           	psect	text39
  6746  002DE4                     __ptext39:
  6747                           	opt stack 0
  6748  002DE4                     _ReadBitArray:
  6749                           	opt stack 19
  6750                           
  6751                           ; BSR set to: 0
  6752                           ;harware.c: 66: for (int i = 0; i < 24; i++)
  6753                           
  6754                           ; BSR set to: 1
  6755                           ;incstack = 0
  6756  002DE4  6B92               	clrf	ReadBitArray@i& (0+255),b
  6757  002DE6  6B93               	clrf	(ReadBitArray@i+1)& (0+255),b
  6758  002DE8                     l3586:
  6759                           
  6760                           ; BSR set to: 0
  6761                           ;harware.c: 67: AData[i] = ReadBit(AIO);
  6762  002DE8  EE20  F082         	lfsr	2,ReadBitArray@AIO
  6763  002DEC  EE00  F06F         	lfsr	0,ReadBit@AIO
  6764  002DF0  0E0E               	movlw	14
  6765  002DF2                     u3501:
  6766  002DF2  CFDB FFEB          	movff	plusw2,plusw0
  6767  002DF6  06E8               	decf	wreg,f,c
  6768  002DF8  E2FC               	bc	u3501
  6769  002DFA  EC7C  F015         	call	_ReadBit	;wreg free
  6770  002DFE  6F91               	movwf	??_ReadBitArray& (0+255),b
  6771  002E00  5181               	movf	ReadBitArray@AData& (0+255),w,b
  6772  002E02  2592               	addwf	ReadBitArray@i& (0+255),w,b
  6773  002E04  6ED9               	movwf	fsr2l,c
  6774  002E06  6ADA               	clrf	fsr2h,c
  6775  002E08  C091  FFDF         	movff	??_ReadBitArray,indf2
  6776                           
  6777                           ; BSR set to: 0
  6778  002E0C  4B92               	infsnz	ReadBitArray@i& (0+255),f,b
  6779  002E0E  2B93               	incf	(ReadBitArray@i+1)& (0+255),f,b
  6780                           
  6781                           ; BSR set to: 0
  6782  002E10  BF93               	btfsc	(ReadBitArray@i+1)& (0+255),7,b
  6783  002E12  D7EA               	goto	l3586
  6784  002E14  5193               	movf	(ReadBitArray@i+1)& (0+255),w,b
  6785  002E16  E105               	bnz	u3510
  6786  002E18  0E18               	movlw	24
  6787  002E1A  5D92               	subwf	ReadBitArray@i& (0+255),w,b
  6788  002E1C  B0D8               	btfsc	status,0,c
  6789  002E1E  0012               	return	
  6790  002E20  D7E3               	goto	l3586
  6791  002E22                     u3510:
  6792                           
  6793                           ; BSR set to: 0
  6794  002E22  0012               	return		;funcret
  6795  002E24                     __end_of_ReadBitArray:
  6796                           	opt stack 0
  6797                           tblptru	equ	0xFF8
  6798                           tblptrh	equ	0xFF7
  6799                           tblptrl	equ	0xFF6
  6800                           tablat	equ	0xFF5
  6801                           prodh	equ	0xFF4
  6802                           prodl	equ	0xFF3
  6803                           intcon	equ	0xFF2
  6804                           postinc0	equ	0xFEE
  6805                           plusw0	equ	0xFEB
  6806                           wreg	equ	0xFE8
  6807                           postinc1	equ	0xFE6
  6808                           postdec1	equ	0xFE5
  6809                           plusw1	equ	0xFE3
  6810                           fsr1h	equ	0xFE2
  6811                           fsr1l	equ	0xFE1
  6812                           indf2	equ	0xFDF
  6813                           postinc2	equ	0xFDE
  6814                           postdec2	equ	0xFDD
  6815                           plusw2	equ	0xFDB
  6816                           fsr2h	equ	0xFDA
  6817                           fsr2l	equ	0xFD9
  6818                           status	equ	0xFD8
  6819                           
  6820 ;; *************** function _ReadBit *****************
  6821 ;; Defined at:
  6822 ;;		line 36 in file "harware.c"
  6823 ;; Parameters:    Size  Location     Type
  6824 ;;  AIO            15   15[BANK0 ] struct .
  6825 ;; Auto vars:     Size  Location     Type
  6826 ;;  LBit            1   32[BANK0 ] unsigned char 
  6827 ;; Return value:  Size  Location     Type
  6828 ;;                  1    wreg      unsigned char 
  6829 ;; Registers used:
  6830 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, cstack
  6831 ;; Tracked objects:
  6832 ;;		On entry : 3F/0
  6833 ;;		On exit  : 3F/0
  6834 ;;		Unchanged: 0/0
  6835 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6836 ;;      Params:         0      15       0       0       0       0       0       0       0
  6837 ;;      Locals:         0       1       0       0       0       0       0       0       0
  6838 ;;      Temps:          0       2       0       0       0       0       0       0       0
  6839 ;;      Totals:         0      18       0       0       0       0       0       0       0
  6840 ;;Total ram usage:       18 bytes
  6841 ;; Hardware stack levels used:    1
  6842 ;; Hardware stack levels required when called:    7
  6843 ;; This function calls:
  6844 ;;		_ClockDown
  6845 ;;		_ClockUp
  6846 ;; This function is called by:
  6847 ;;		_ReadBitArray
  6848 ;; This function uses a non-reentrant model
  6849 ;;
  6850                           
  6851                           	psect	text40
  6852  002AF8                     __ptext40:
  6853                           	opt stack 0
  6854  002AF8                     _ReadBit:
  6855                           	opt stack 19
  6856                           
  6857                           ; BSR set to: 0
  6858                           ;harware.c: 38: bool LBit = (*AIO.DataPin.Port >> AIO.DataPin.PinNumber) & 0x01;
  6859                           
  6860                           ; BSR set to: 0
  6861                           ;incstack = 0
  6862  002AF8  C076  F07E         	movff	ReadBit@AIO+7,??_ReadBit
  6863  002AFC  C074  FFD9         	movff	ReadBit@AIO+5,fsr2l
  6864  002B00  C075  FFDA         	movff	ReadBit@AIO+6,fsr2h
  6865  002B04  50DF               	movf	indf2,w,c
  6866  002B06  6F7F               	movwf	(??_ReadBit+1)& (0+255),b
  6867  002B08  2B7E               	incf	??_ReadBit& (0+255),f,b
  6868  002B0A  D002               	goto	u3284
  6869  002B0C                     u3285:
  6870  002B0C  90D8               	bcf	status,0,c
  6871  002B0E  337F               	rrcf	(??_ReadBit+1)& (0+255),f,b
  6872  002B10                     u3284:
  6873  002B10  2F7E               	decfsz	??_ReadBit& (0+255),f,b
  6874  002B12  D7FC               	goto	u3285
  6875  002B14  0100               	movlb	0	; () banked
  6876  002B16  517F               	movf	(??_ReadBit+1)& (0+255),w,b
  6877  002B18  0B01               	andlw	1
  6878  002B1A  6F80               	movwf	ReadBit@LBit& (0+255),b
  6879                           
  6880                           ; BSR set to: 0
  6881                           ;harware.c: 39: ClockUp(AIO);
  6882  002B1C  EE20  F06F         	lfsr	2,ReadBit@AIO
  6883  002B20  EE00  F060         	lfsr	0,ClockUp@AIO
  6884  002B24  0E0E               	movlw	14
  6885  002B26                     u3291:
  6886  002B26  CFDB FFEB          	movff	plusw2,plusw0
  6887  002B2A  06E8               	decf	wreg,f,c
  6888  002B2C  E2FC               	bc	u3291
  6889  002B2E  ECC8  F018         	call	_ClockUp	;wreg free
  6890                           
  6891                           ; BSR set to: 0
  6892                           ;harware.c: 40: ClockDown(AIO);
  6893  002B32  EE20  F06F         	lfsr	2,ReadBit@AIO
  6894  002B36  EE00  F060         	lfsr	0,ClockDown@AIO
  6895  002B3A  0E0E               	movlw	14
  6896  002B3C                     u3301:
  6897  002B3C  CFDB FFEB          	movff	plusw2,plusw0
  6898  002B40  06E8               	decf	wreg,f,c
  6899  002B42  E2FC               	bc	u3301
  6900  002B44  ECF3  F018         	call	_ClockDown	;wreg free
  6901                           
  6902                           ; BSR set to: 0
  6903                           ;harware.c: 41: return LBit;
  6904  002B48  5180               	movf	ReadBit@LBit& (0+255),w,b
  6905                           
  6906                           ; BSR set to: 0
  6907  002B4A  0012               	return		;funcret
  6908  002B4C                     __end_of_ReadBit:
  6909                           	opt stack 0
  6910                           tblptru	equ	0xFF8
  6911                           tblptrh	equ	0xFF7
  6912                           tblptrl	equ	0xFF6
  6913                           tablat	equ	0xFF5
  6914                           prodh	equ	0xFF4
  6915                           prodl	equ	0xFF3
  6916                           intcon	equ	0xFF2
  6917                           postinc0	equ	0xFEE
  6918                           plusw0	equ	0xFEB
  6919                           wreg	equ	0xFE8
  6920                           postinc1	equ	0xFE6
  6921                           postdec1	equ	0xFE5
  6922                           plusw1	equ	0xFE3
  6923                           fsr1h	equ	0xFE2
  6924                           fsr1l	equ	0xFE1
  6925                           indf2	equ	0xFDF
  6926                           postinc2	equ	0xFDE
  6927                           postdec2	equ	0xFDD
  6928                           plusw2	equ	0xFDB
  6929                           fsr2h	equ	0xFDA
  6930                           fsr2l	equ	0xFD9
  6931                           status	equ	0xFD8
  6932                           
  6933 ;; *************** function _ClockUp *****************
  6934 ;; Defined at:
  6935 ;;		line 80 in file "harware.c"
  6936 ;; Parameters:    Size  Location     Type
  6937 ;;  AIO            15    0[BANK0 ] struct .
  6938 ;; Auto vars:     Size  Location     Type
  6939 ;;		None
  6940 ;; Return value:  Size  Location     Type
  6941 ;;                  1    wreg      void 
  6942 ;; Registers used:
  6943 ;;		wreg, fsr2l, fsr2h
  6944 ;; Tracked objects:
  6945 ;;		On entry : 0/0
  6946 ;;		On exit  : 3F/0
  6947 ;;		Unchanged: 0/0
  6948 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6949 ;;      Params:         0      15       0       0       0       0       0       0       0
  6950 ;;      Locals:         0       0       0       0       0       0       0       0       0
  6951 ;;      Temps:          0       0       0       0       0       0       0       0       0
  6952 ;;      Totals:         0      15       0       0       0       0       0       0       0
  6953 ;;Total ram usage:       15 bytes
  6954 ;; Hardware stack levels used:    1
  6955 ;; Hardware stack levels required when called:    6
  6956 ;; This function calls:
  6957 ;;		Nothing
  6958 ;; This function is called by:
  6959 ;;		_WriteChar
  6960 ;;		_ReadBit
  6961 ;; This function uses a non-reentrant model
  6962 ;;
  6963                           
  6964                           	psect	text41
  6965  003190                     __ptext41:
  6966                           	opt stack 0
  6967  003190                     _ClockUp:
  6968                           	opt stack 22
  6969                           
  6970                           ;harware.c: 82: *AIO.ClockPin.Port &= AIO.ClockPin.Mask;
  6971                           
  6972                           ; BSR set to: 0
  6973                           ;incstack = 0
  6974  003190  C060  FFD9         	movff	ClockUp@AIO,fsr2l
  6975  003194  C061  FFDA         	movff	ClockUp@AIO+1,fsr2h
  6976  003198  0100               	movlb	0	; () banked
  6977  00319A  5163               	movf	(ClockUp@AIO+3)& (0+255),w,b
  6978  00319C  16DF               	andwf	indf2,f,c
  6979                           
  6980                           ; BSR set to: 0
  6981  00319E  0012               	return		;funcret
  6982  0031A0                     __end_of_ClockUp:
  6983                           	opt stack 0
  6984                           tblptru	equ	0xFF8
  6985                           tblptrh	equ	0xFF7
  6986                           tblptrl	equ	0xFF6
  6987                           tablat	equ	0xFF5
  6988                           prodh	equ	0xFF4
  6989                           prodl	equ	0xFF3
  6990                           intcon	equ	0xFF2
  6991                           postinc0	equ	0xFEE
  6992                           plusw0	equ	0xFEB
  6993                           wreg	equ	0xFE8
  6994                           postinc1	equ	0xFE6
  6995                           postdec1	equ	0xFE5
  6996                           plusw1	equ	0xFE3
  6997                           fsr1h	equ	0xFE2
  6998                           fsr1l	equ	0xFE1
  6999                           indf2	equ	0xFDF
  7000                           postinc2	equ	0xFDE
  7001                           postdec2	equ	0xFDD
  7002                           plusw2	equ	0xFDB
  7003                           fsr2h	equ	0xFDA
  7004                           fsr2l	equ	0xFD9
  7005                           status	equ	0xFD8
  7006                           
  7007 ;; *************** function _ClockDown *****************
  7008 ;; Defined at:
  7009 ;;		line 85 in file "harware.c"
  7010 ;; Parameters:    Size  Location     Type
  7011 ;;  AIO            15    0[BANK0 ] struct .
  7012 ;; Auto vars:     Size  Location     Type
  7013 ;;		None
  7014 ;; Return value:  Size  Location     Type
  7015 ;;                  1    wreg      void 
  7016 ;; Registers used:
  7017 ;;		wreg, fsr2l, fsr2h
  7018 ;; Tracked objects:
  7019 ;;		On entry : 3F/0
  7020 ;;		On exit  : 3F/0
  7021 ;;		Unchanged: 0/0
  7022 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7023 ;;      Params:         0      15       0       0       0       0       0       0       0
  7024 ;;      Locals:         0       0       0       0       0       0       0       0       0
  7025 ;;      Temps:          0       0       0       0       0       0       0       0       0
  7026 ;;      Totals:         0      15       0       0       0       0       0       0       0
  7027 ;;Total ram usage:       15 bytes
  7028 ;; Hardware stack levels used:    1
  7029 ;; Hardware stack levels required when called:    6
  7030 ;; This function calls:
  7031 ;;		Nothing
  7032 ;; This function is called by:
  7033 ;;		_WriteChar
  7034 ;;		_ReadBit
  7035 ;; This function uses a non-reentrant model
  7036 ;;
  7037                           
  7038                           	psect	text42
  7039  0031E6                     __ptext42:
  7040                           	opt stack 0
  7041  0031E6                     _ClockDown:
  7042                           	opt stack 22
  7043                           
  7044                           ; BSR set to: 0
  7045                           ;harware.c: 87: *AIO.ClockPin.Port |= AIO.ClockPin.NegativeMask;
  7046                           
  7047                           ; BSR set to: 0
  7048                           ;incstack = 0
  7049  0031E6  C060  FFD9         	movff	ClockDown@AIO,fsr2l
  7050  0031EA  C061  FFDA         	movff	ClockDown@AIO+1,fsr2h
  7051  0031EE  5164               	movf	(ClockDown@AIO+4)& (0+255),w,b
  7052  0031F0  12DF               	iorwf	indf2,f,c
  7053                           
  7054                           ; BSR set to: 0
  7055  0031F2  0012               	return		;funcret
  7056  0031F4                     __end_of_ClockDown:
  7057                           	opt stack 0
  7058                           tblptru	equ	0xFF8
  7059                           tblptrh	equ	0xFF7
  7060                           tblptrl	equ	0xFF6
  7061                           tablat	equ	0xFF5
  7062                           prodh	equ	0xFF4
  7063                           prodl	equ	0xFF3
  7064                           intcon	equ	0xFF2
  7065                           postinc0	equ	0xFEE
  7066                           plusw0	equ	0xFEB
  7067                           wreg	equ	0xFE8
  7068                           postinc1	equ	0xFE6
  7069                           postdec1	equ	0xFE5
  7070                           plusw1	equ	0xFE3
  7071                           fsr1h	equ	0xFE2
  7072                           fsr1l	equ	0xFE1
  7073                           indf2	equ	0xFDF
  7074                           postinc2	equ	0xFDE
  7075                           postdec2	equ	0xFDD
  7076                           plusw2	equ	0xFDB
  7077                           fsr2h	equ	0xFDA
  7078                           fsr2l	equ	0xFD9
  7079                           status	equ	0xFD8
  7080                           
  7081 ;; *************** function _Hub_CopyBuffer *****************
  7082 ;; Defined at:
  7083 ;;		line 113 in file "hub.c"
  7084 ;; Parameters:    Size  Location     Type
  7085 ;;		None
  7086 ;; Auto vars:     Size  Location     Type
  7087 ;;		None
  7088 ;; Return value:  Size  Location     Type
  7089 ;;                  1    wreg      void 
  7090 ;; Registers used:
  7091 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  7092 ;; Tracked objects:
  7093 ;;		On entry : 3F/0
  7094 ;;		On exit  : 3F/1
  7095 ;;		Unchanged: 0/0
  7096 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7097 ;;      Params:         0       0       0       0       0       0       0       0       0
  7098 ;;      Locals:         0       0       0       0       0       0       0       0       0
  7099 ;;      Temps:          0       0       0       0       0       0       0       0       0
  7100 ;;      Totals:         0       0       0       0       0       0       0       0       0
  7101 ;;Total ram usage:        0 bytes
  7102 ;; Hardware stack levels used:    1
  7103 ;; Hardware stack levels required when called:    7
  7104 ;; This function calls:
  7105 ;;		_memcpy
  7106 ;; This function is called by:
  7107 ;;		_Load
  7108 ;;		_InitApp
  7109 ;; This function uses a non-reentrant model
  7110 ;;
  7111                           
  7112                           	psect	text43
  7113  0030AE                     __ptext43:
  7114                           	opt stack 0
  7115  0030AE                     _Hub_CopyBuffer:
  7116                           	opt stack 22
  7117                           
  7118                           ; BSR set to: 0
  7119                           ;hub.c: 115: memcpy(&_Hub.SecondaryBuffer, &_Hub.PrimaryBuffer, sizeof(DataBuffer));
  7120                           
  7121                           ; BSR set to: 0
  7122                           ;incstack = 0
  7123  0030AE  0E6E               	movlw	low (__Hub+110)
  7124  0030B0  6F60               	movwf	memcpy@d1& (0+255),b
  7125  0030B2  0E01               	movlw	high (__Hub+110)
  7126  0030B4  6F61               	movwf	(memcpy@d1+1)& (0+255),b
  7127  0030B6  0E62               	movlw	low (__Hub+98)
  7128  0030B8  6F62               	movwf	memcpy@s1& (0+255),b
  7129  0030BA  0E01               	movlw	high (__Hub+98)
  7130  0030BC  6F63               	movwf	(memcpy@s1+1)& (0+255),b
  7131  0030BE  6B65               	clrf	(memcpy@n+1)& (0+255),b
  7132  0030C0  0E0C               	movlw	12
  7133  0030C2  6F64               	movwf	memcpy@n& (0+255),b
  7134  0030C4  ECB0  F016         	call	_memcpy	;wreg free
  7135                           
  7136                           ; BSR set to: 0
  7137                           ;hub.c: 117: _Hub.ReadyToWrite = 0;
  7138  0030C8  0101               	movlb	1	; () banked
  7139  0030CA  6B86               	clrf	(__Hub+134)& (0+255),b
  7140                           
  7141                           ; BSR set to: 1
  7142  0030CC  0012               	return		;funcret
  7143  0030CE                     __end_of_Hub_CopyBuffer:
  7144                           	opt stack 0
  7145                           tblptru	equ	0xFF8
  7146                           tblptrh	equ	0xFF7
  7147                           tblptrl	equ	0xFF6
  7148                           tablat	equ	0xFF5
  7149                           prodh	equ	0xFF4
  7150                           prodl	equ	0xFF3
  7151                           intcon	equ	0xFF2
  7152                           postinc0	equ	0xFEE
  7153                           plusw0	equ	0xFEB
  7154                           wreg	equ	0xFE8
  7155                           postinc1	equ	0xFE6
  7156                           postdec1	equ	0xFE5
  7157                           plusw1	equ	0xFE3
  7158                           fsr1h	equ	0xFE2
  7159                           fsr1l	equ	0xFE1
  7160                           indf2	equ	0xFDF
  7161                           postinc2	equ	0xFDE
  7162                           postdec2	equ	0xFDD
  7163                           plusw2	equ	0xFDB
  7164                           fsr2h	equ	0xFDA
  7165                           fsr2l	equ	0xFD9
  7166                           status	equ	0xFD8
  7167                           
  7168 ;; *************** function _memcpy *****************
  7169 ;; Defined at:
  7170 ;;		line 27 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\memcpy.c"
  7171 ;; Parameters:    Size  Location     Type
  7172 ;;  d1              2    0[BANK0 ] PTR void 
  7173 ;;		 -> _Hub.Switch(48), Load@LBuffer(12), _Hub(157), 
  7174 ;;  s1              2    2[BANK0 ] PTR const void 
  7175 ;;		 -> Persistant_SaveBuffer@ABuffer(12), _Hub.Switch(48), Hub_ReadSwitch@LBitArray(24), _Config(12), 
  7176 ;;		 -> _Hub.PrimaryBuffer(12), _Hub(157), 
  7177 ;;  n               2    4[BANK0 ] unsigned int 
  7178 ;; Auto vars:     Size  Location     Type
  7179 ;;  s               2    8[BANK0 ] PTR const unsigned char 
  7180 ;;		 -> Persistant_SaveBuffer@ABuffer(12), _Hub.Switch(48), Hub_ReadSwitch@LBitArray(24), _Config(12), 
  7181 ;;		 -> _Hub.PrimaryBuffer(12), _Hub(157), 
  7182 ;;  d               2    6[BANK0 ] PTR unsigned char 
  7183 ;;		 -> _Hub.Switch(48), Load@LBuffer(12), _Hub(157), 
  7184 ;;  tmp             1   10[BANK0 ] unsigned char 
  7185 ;; Return value:  Size  Location     Type
  7186 ;;                  2    0[BANK0 ] PTR void 
  7187 ;; Registers used:
  7188 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  7189 ;; Tracked objects:
  7190 ;;		On entry : 3F/0
  7191 ;;		On exit  : 3F/0
  7192 ;;		Unchanged: 0/0
  7193 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7194 ;;      Params:         0       6       0       0       0       0       0       0       0
  7195 ;;      Locals:         0       5       0       0       0       0       0       0       0
  7196 ;;      Temps:          0       0       0       0       0       0       0       0       0
  7197 ;;      Totals:         0      11       0       0       0       0       0       0       0
  7198 ;;Total ram usage:       11 bytes
  7199 ;; Hardware stack levels used:    1
  7200 ;; Hardware stack levels required when called:    6
  7201 ;; This function calls:
  7202 ;;		Nothing
  7203 ;; This function is called by:
  7204 ;;		_Load
  7205 ;;		_Hub_ReadSwitch
  7206 ;;		_Hub_CopyBuffer
  7207 ;;		_Persistant_SaveBuffer
  7208 ;;		_Persistant_LoadBuffer
  7209 ;; This function uses a non-reentrant model
  7210 ;;
  7211                           
  7212                           	psect	text44
  7213  002D60                     __ptext44:
  7214                           	opt stack 0
  7215  002D60                     _memcpy:
  7216                           	opt stack 23
  7217                           
  7218                           ; BSR set to: 0
  7219                           
  7220                           ; BSR set to: 1
  7221                           ;incstack = 0
  7222  002D60  C062  F068         	movff	memcpy@s1,memcpy@s
  7223  002D64  C063  F069         	movff	memcpy@s1+1,memcpy@s+1
  7224  002D68  C060  F066         	movff	memcpy@d1,memcpy@d
  7225  002D6C  C061  F067         	movff	memcpy@d1+1,memcpy@d+1
  7226  002D70  D010               	goto	l3578
  7227  002D72                     l3570:
  7228                           
  7229                           ; BSR set to: 0
  7230  002D72  C068  FFD9         	movff	memcpy@s,fsr2l
  7231  002D76  C069  FFDA         	movff	memcpy@s+1,fsr2h
  7232  002D7A  50DF               	movf	indf2,w,c
  7233  002D7C  6F6A               	movwf	memcpy@tmp& (0+255),b
  7234                           
  7235                           ; BSR set to: 0
  7236  002D7E  4B68               	infsnz	memcpy@s& (0+255),f,b
  7237  002D80  2B69               	incf	(memcpy@s+1)& (0+255),f,b
  7238                           
  7239                           ; BSR set to: 0
  7240  002D82  C066  FFD9         	movff	memcpy@d,fsr2l
  7241  002D86  C067  FFDA         	movff	memcpy@d+1,fsr2h
  7242  002D8A  C06A  FFDF         	movff	memcpy@tmp,indf2
  7243                           
  7244                           ; BSR set to: 0
  7245  002D8E  4B66               	infsnz	memcpy@d& (0+255),f,b
  7246  002D90  2B67               	incf	(memcpy@d+1)& (0+255),f,b
  7247  002D92                     l3578:
  7248                           
  7249                           ; BSR set to: 0
  7250  002D92  0764               	decf	memcpy@n& (0+255),f,b
  7251  002D94  A0D8               	btfss	status,0,c
  7252  002D96  0765               	decf	(memcpy@n+1)& (0+255),f,b
  7253  002D98  2964               	incf	memcpy@n& (0+255),w,b
  7254  002D9A  E1EB               	bnz	l3570
  7255  002D9C  2965               	incf	(memcpy@n+1)& (0+255),w,b
  7256  002D9E  E1E9               	bnz	l3570
  7257                           
  7258                           ; BSR set to: 0
  7259  002DA0  0012               	return		;funcret
  7260  002DA2                     __end_of_memcpy:
  7261                           	opt stack 0
  7262                           tblptru	equ	0xFF8
  7263                           tblptrh	equ	0xFF7
  7264                           tblptrl	equ	0xFF6
  7265                           tablat	equ	0xFF5
  7266                           prodh	equ	0xFF4
  7267                           prodl	equ	0xFF3
  7268                           intcon	equ	0xFF2
  7269                           postinc0	equ	0xFEE
  7270                           plusw0	equ	0xFEB
  7271                           wreg	equ	0xFE8
  7272                           postinc1	equ	0xFE6
  7273                           postdec1	equ	0xFE5
  7274                           plusw1	equ	0xFE3
  7275                           fsr1h	equ	0xFE2
  7276                           fsr1l	equ	0xFE1
  7277                           indf2	equ	0xFDF
  7278                           postinc2	equ	0xFDE
  7279                           postdec2	equ	0xFDD
  7280                           plusw2	equ	0xFDB
  7281                           fsr2h	equ	0xFDA
  7282                           fsr2l	equ	0xFD9
  7283                           status	equ	0xFD8
  7284                           
  7285 ;; *************** function _Display_ProcessData *****************
  7286 ;; Defined at:
  7287 ;;		line 39 in file "display.c"
  7288 ;; Parameters:    Size  Location     Type
  7289 ;;  ADigitalValu    1    wreg     unsigned char 
  7290 ;;  AValues         2    8[BANK0 ] PTR unsigned char 
  7291 ;;		 -> _Hub.SecondaryBuffer(12), _Hub.PrimaryBuffer(12), _Hub(157), 
  7292 ;;  ALoaded         1   10[BANK0 ] unsigned char 
  7293 ;;  APushed         1   11[BANK0 ] unsigned char 
  7294 ;; Auto vars:     Size  Location     Type
  7295 ;;  ADigitalValu    1   19[BANK0 ] unsigned char 
  7296 ;;  i               2   33[BANK0 ] int 
  7297 ;;  LData           1   20[BANK0 ] unsigned char 
  7298 ;;  j               2   31[BANK0 ] int 
  7299 ;;  i               2   25[BANK0 ] int 
  7300 ;;  LBit            1   21[BANK0 ] unsigned char 
  7301 ;;  k               2   23[BANK0 ] int 
  7302 ;;  i               2   29[BANK0 ] int 
  7303 ;;  i               2   27[BANK0 ] int 
  7304 ;;  iDataIndex      1   22[BANK0 ] unsigned char 
  7305 ;; Return value:  Size  Location     Type
  7306 ;;                  1    wreg      void 
  7307 ;; Registers used:
  7308 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7309 ;; Tracked objects:
  7310 ;;		On entry : 3E/0
  7311 ;;		On exit  : 3F/2
  7312 ;;		Unchanged: 0/0
  7313 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7314 ;;      Params:         0       4       0       0       0       0       0       0       0
  7315 ;;      Locals:         0      16       0       0       0       0       0       0       0
  7316 ;;      Temps:          0       7       0       0       0       0       0       0       0
  7317 ;;      Totals:         0      27       0       0       0       0       0       0       0
  7318 ;;Total ram usage:       27 bytes
  7319 ;; Hardware stack levels used:    1
  7320 ;; Hardware stack levels required when called:    7
  7321 ;; This function calls:
  7322 ;;		___lbdiv
  7323 ;;		___lbmod
  7324 ;; This function is called by:
  7325 ;;		_main
  7326 ;;		_InitApp
  7327 ;; This function uses a non-reentrant model
  7328 ;;
  7329                           
  7330                           	psect	text45
  7331  00083C                     __ptext45:
  7332                           	opt stack 0
  7333  00083C                     _Display_ProcessData:
  7334                           	opt stack 22
  7335                           
  7336                           ; BSR set to: 0
  7337                           ;incstack = 0
  7338                           ;Display_ProcessData@ADigitalValue stored from wreg
  7339  00083C  0100               	movlb	0	; () banked
  7340  00083E  6F73               	movwf	Display_ProcessData@ADigitalValue& (0+255),b
  7341                           
  7342                           ;display.c: 41: if (_Display.ReadyToWrite)
  7343  000840  0102               	movlb	2	; () banked
  7344  000842  5101               	movf	(__Display+1)& (0+255),w,b
  7345  000844  B4D8               	btfsc	status,2,c
  7346  000846  0012               	return	
  7347                           
  7348                           ; BSR set to: 2
  7349                           ;display.c: 42: {
  7350                           ;display.c: 43: _Display.ReadyToRead = 0;
  7351  000848  6B00               	clrf	__Display& (0+255),b
  7352                           
  7353                           ;display.c: 44: unsigned char iDataIndex = 0;
  7354  00084A  0100               	movlb	0	; () banked
  7355  00084C  6B76               	clrf	Display_ProcessData@iDataIndex& (0+255),b
  7356                           
  7357                           ;display.c: 45: iDataIndex = 0;
  7358  00084E  6B76               	clrf	Display_ProcessData@iDataIndex& (0+255),b
  7359                           
  7360                           ;display.c: 47: for(int i = 0; i < 2; i++)
  7361  000850  6B7B               	clrf	Display_ProcessData@i& (0+255),b
  7362  000852  6B7C               	clrf	(Display_ProcessData@i+1)& (0+255),b
  7363  000854                     l3996:
  7364                           
  7365                           ; BSR set to: 0
  7366                           ;display.c: 48: _Display.DigitalValueData[i] = _Digits[(ADigitalValue / _Display.Digital
      +                          ValueRatio[i]) % 10];
  7367  000854  0E0A               	movlw	10
  7368  000856  6F64               	movwf	___lbmod@divisor& (0+255),b
  7369  000858  0EBA               	movlw	low (__Display+186)
  7370  00085A  257B               	addwf	Display_ProcessData@i& (0+255),w,b
  7371  00085C  6ED9               	movwf	fsr2l,c
  7372  00085E  0E02               	movlw	high (__Display+186)
  7373  000860  217C               	addwfc	(Display_ProcessData@i+1)& (0+255),w,b
  7374  000862  6EDA               	movwf	fsr2h,c
  7375  000864  50DF               	movf	indf2,w,c
  7376  000866  6F60               	movwf	___lbdiv@divisor& (0+255),b
  7377  000868  5173               	movf	Display_ProcessData@ADigitalValue& (0+255),w,b
  7378  00086A  EC70  F017         	call	___lbdiv
  7379  00086E  EC30  F018         	call	___lbmod
  7380  000872  6F6C               	movwf	??_Display_ProcessData& (0+255),b
  7381  000874  516C               	movf	??_Display_ProcessData& (0+255),w,b
  7382  000876  0FF2               	addlw	low __Digits
  7383  000878  6ED9               	movwf	fsr2l,c
  7384  00087A  6ADA               	clrf	fsr2h,c
  7385  00087C  0EBC               	movlw	low (__Display+188)
  7386  00087E  257B               	addwf	Display_ProcessData@i& (0+255),w,b
  7387  000880  6EE1               	movwf	fsr1l,c
  7388  000882  0E02               	movlw	high (__Display+188)
  7389  000884  217C               	addwfc	(Display_ProcessData@i+1)& (0+255),w,b
  7390  000886  6EE2               	movwf	fsr1h,c
  7391  000888  CFDF FFE7          	movff	indf2,indf1
  7392                           
  7393                           ; BSR set to: 0
  7394  00088C  4B7B               	infsnz	Display_ProcessData@i& (0+255),f,b
  7395  00088E  2B7C               	incf	(Display_ProcessData@i+1)& (0+255),f,b
  7396                           
  7397                           ; BSR set to: 0
  7398  000890  BF7C               	btfsc	(Display_ProcessData@i+1)& (0+255),7,b
  7399  000892  D7E0               	goto	l3996
  7400  000894  517C               	movf	(Display_ProcessData@i+1)& (0+255),w,b
  7401  000896  E103               	bnz	u4050
  7402  000898  0E02               	movlw	2
  7403  00089A  5D7B               	subwf	Display_ProcessData@i& (0+255),w,b
  7404  00089C  E3DB               	bnc	l3996
  7405  00089E                     u4050:
  7406                           
  7407                           ; BSR set to: 0
  7408                           ;display.c: 50: if (ALoaded)
  7409  00089E  516A               	movf	Display_ProcessData@ALoaded& (0+255),w,b
  7410  0008A0  E004               	bz	l4006
  7411                           
  7412                           ; BSR set to: 0
  7413                           ;display.c: 51: _Display.DigitalValueData[1] |= 0x08 & _Display.PointMask[1];
  7414  0008A2  0102               	movlb	2	; () banked
  7415  0008A4  51C9               	movf	(__Display+201)& (0+255),w,b
  7416  0008A6  0B08               	andlw	8
  7417  0008A8  13BD               	iorwf	(__Display+189)& (0+255),f,b
  7418  0008AA                     l4006:
  7419                           
  7420                           ;display.c: 53: if (APushed)
  7421  0008AA  0100               	movlb	0	; () banked
  7422  0008AC  516B               	movf	Display_ProcessData@APushed& (0+255),w,b
  7423  0008AE  E004               	bz	l4010
  7424                           
  7425                           ; BSR set to: 0
  7426                           ;display.c: 54: _Display.DigitalValueData[0] |= 0x08 & _Display.PointMask[0];
  7427  0008B0  0102               	movlb	2	; () banked
  7428  0008B2  51C8               	movf	(__Display+200)& (0+255),w,b
  7429  0008B4  0B08               	andlw	8
  7430  0008B6  13BC               	iorwf	(__Display+188)& (0+255),f,b
  7431  0008B8                     l4010:
  7432                           
  7433                           ;display.c: 56: for(int i = 0; i < 8; i++)
  7434  0008B8  0100               	movlb	0	; () banked
  7435  0008BA  6B7D               	clrf	Display_ProcessData@i_646& (0+255),b
  7436  0008BC  6B7E               	clrf	(Display_ProcessData@i_646+1)& (0+255),b
  7437  0008BE                     l4014:
  7438                           
  7439                           ; BSR set to: 0
  7440                           ;display.c: 57: _Display.ValueData[i] = AValues[i] % (char)(((0x01 << 6) - 1 * 1.0f) / (
      +                          7 * 1.0f));
  7441  0008BE  0EBE               	movlw	low (__Display+190)
  7442  0008C0  257D               	addwf	Display_ProcessData@i_646& (0+255),w,b
  7443  0008C2  6ED9               	movwf	fsr2l,c
  7444  0008C4  0E02               	movlw	high (__Display+190)
  7445  0008C6  217E               	addwfc	(Display_ProcessData@i_646+1)& (0+255),w,b
  7446  0008C8  6EDA               	movwf	fsr2h,c
  7447  0008CA  0E09               	movlw	9
  7448  0008CC  6F64               	movwf	___lbmod@divisor& (0+255),b
  7449  0008CE  517D               	movf	Display_ProcessData@i_646& (0+255),w,b
  7450  0008D0  2568               	addwf	Display_ProcessData@AValues& (0+255),w,b
  7451  0008D2  6EE1               	movwf	fsr1l,c
  7452  0008D4  517E               	movf	(Display_ProcessData@i_646+1)& (0+255),w,b
  7453  0008D6  2169               	addwfc	(Display_ProcessData@AValues+1)& (0+255),w,b
  7454  0008D8  6EE2               	movwf	fsr1h,c
  7455  0008DA  50E7               	movf	indf1,w,c
  7456  0008DC  EC30  F018         	call	___lbmod
  7457  0008E0  6EDF               	movwf	indf2,c
  7458                           
  7459                           ; BSR set to: 0
  7460  0008E2  4B7D               	infsnz	Display_ProcessData@i_646& (0+255),f,b
  7461  0008E4  2B7E               	incf	(Display_ProcessData@i_646+1)& (0+255),f,b
  7462                           
  7463                           ; BSR set to: 0
  7464  0008E6  BF7E               	btfsc	(Display_ProcessData@i_646+1)& (0+255),7,b
  7465  0008E8  D7EA               	goto	l4014
  7466  0008EA  517E               	movf	(Display_ProcessData@i_646+1)& (0+255),w,b
  7467  0008EC  E103               	bnz	u4080
  7468  0008EE  0E08               	movlw	8
  7469  0008F0  5D7D               	subwf	Display_ProcessData@i_646& (0+255),w,b
  7470  0008F2  E3E5               	bnc	l4014
  7471  0008F4                     u4080:
  7472                           
  7473                           ; BSR set to: 0
  7474                           ;display.c: 59: for (int k = 0; k < (char)(((0x01 << 6) - 1 * 1.0f) / (7 * 1.0f)); k ++)
  7475  0008F4  6B77               	clrf	Display_ProcessData@k& (0+255),b
  7476  0008F6  6B78               	clrf	(Display_ProcessData@k+1)& (0+255),b
  7477  0008F8                     l253:
  7478                           
  7479                           ; BSR set to: 0
  7480                           ;display.c: 60: {
  7481                           ;display.c: 62: for (int i = 0; i < 2; i++)
  7482  0008F8  6B79               	clrf	Display_ProcessData@i_648& (0+255),b
  7483  0008FA  6B7A               	clrf	(Display_ProcessData@i_648+1)& (0+255),b
  7484  0008FC                     l4028:
  7485                           
  7486                           ; BSR set to: 0
  7487                           ;display.c: 63: {
  7488                           ;display.c: 64: *(_Display.SecondaryBuffer + iDataIndex) = _Display.DigitalValueData[i] 
      +                          & _Display.SavingMask;
  7489  0008FC  5176               	movf	Display_ProcessData@iDataIndex& (0+255),w,b
  7490  0008FE  0102               	movlb	2	; () banked
  7491  000900  25B8               	addwf	(__Display+184)& (0+255),w,b
  7492  000902  6ED9               	movwf	fsr2l,c
  7493  000904  0E00               	movlw	0
  7494  000906  21B9               	addwfc	(__Display+185)& (0+255),w,b
  7495  000908  6EDA               	movwf	fsr2h,c
  7496  00090A  0EBC               	movlw	low (__Display+188)
  7497  00090C  0100               	movlb	0	; () banked
  7498  00090E  2579               	addwf	Display_ProcessData@i_648& (0+255),w,b
  7499  000910  6EE1               	movwf	fsr1l,c
  7500  000912  0E02               	movlw	high (__Display+188)
  7501  000914  217A               	addwfc	(Display_ProcessData@i_648+1)& (0+255),w,b
  7502  000916  6EE2               	movwf	fsr1h,c
  7503  000918  50E7               	movf	indf1,w,c
  7504  00091A  0102               	movlb	2	; () banked
  7505  00091C  15C7               	andwf	(__Display+199)& (0+255),w,b
  7506  00091E  6EDF               	movwf	indf2,c
  7507                           
  7508                           ; BSR set to: 2
  7509                           ;display.c: 65: iDataIndex++;
  7510  000920  0100               	movlb	0	; () banked
  7511  000922  2B76               	incf	Display_ProcessData@iDataIndex& (0+255),f,b
  7512                           
  7513                           ; BSR set to: 0
  7514  000924  4B79               	infsnz	Display_ProcessData@i_648& (0+255),f,b
  7515  000926  2B7A               	incf	(Display_ProcessData@i_648+1)& (0+255),f,b
  7516                           
  7517                           ; BSR set to: 0
  7518  000928  BF7A               	btfsc	(Display_ProcessData@i_648+1)& (0+255),7,b
  7519  00092A  D7E8               	goto	l4028
  7520  00092C  517A               	movf	(Display_ProcessData@i_648+1)& (0+255),w,b
  7521  00092E  E103               	bnz	u4090
  7522  000930  0E02               	movlw	2
  7523  000932  5D79               	subwf	Display_ProcessData@i_648& (0+255),w,b
  7524  000934  E3E3               	bnc	l4028
  7525  000936                     u4090:
  7526                           
  7527                           ; BSR set to: 0
  7528                           ;display.c: 66: }
  7529                           ;display.c: 69: unsigned char LBit;
  7530                           ;display.c: 70: for (int j = 0; j < 8; j++)
  7531  000936  6B7F               	clrf	Display_ProcessData@j& (0+255),b
  7532  000938  6B80               	clrf	(Display_ProcessData@j+1)& (0+255),b
  7533  00093A                     l257:
  7534                           
  7535                           ; BSR set to: 0
  7536                           ;display.c: 71: {
  7537                           ;display.c: 72: unsigned char LData = 0x00;
  7538  00093A  6B74               	clrf	Display_ProcessData@LData& (0+255),b
  7539                           
  7540                           ;display.c: 73: for (int i = 0; i < 7; i++)
  7541  00093C  6B81               	clrf	Display_ProcessData@i_652& (0+255),b
  7542  00093E  6B82               	clrf	(Display_ProcessData@i_652+1)& (0+255),b
  7543  000940                     l259:
  7544                           
  7545                           ; BSR set to: 0
  7546                           ;display.c: 74: {
  7547                           ;display.c: 75: LBit = 0x00;
  7548  000940  6B75               	clrf	Display_ProcessData@LBit& (0+255),b
  7549                           
  7550                           ; BSR set to: 0
  7551                           ;display.c: 76: if (AValues[j] >= (char)(((0x01 << 6) - 1 * 1.0f) / (7 * 1.0f)) * (i + 1
      +                          ))
  7552  000942  2981               	incf	Display_ProcessData@i_652& (0+255),w,b
  7553  000944  6F6C               	movwf	??_Display_ProcessData& (0+255),b
  7554  000946  0E00               	movlw	0
  7555  000948  2182               	addwfc	(Display_ProcessData@i_652+1)& (0+255),w,b
  7556  00094A  6F6D               	movwf	(??_Display_ProcessData+1)& (0+255),b
  7557  00094C  0E09               	movlw	9
  7558  00094E  036C               	mulwf	??_Display_ProcessData& (0+255),b
  7559  000950  CFF3 F06E          	movff	prodl,??_Display_ProcessData+2
  7560  000954  CFF4 F06F          	movff	prodh,??_Display_ProcessData+3
  7561  000958  036D               	mulwf	(??_Display_ProcessData+1)& (0+255),b
  7562  00095A  50F3               	movf	prodl,w,c
  7563  00095C  276F               	addwf	(??_Display_ProcessData+3)& (0+255),f,b
  7564  00095E  517F               	movf	Display_ProcessData@j& (0+255),w,b
  7565  000960  2568               	addwf	Display_ProcessData@AValues& (0+255),w,b
  7566  000962  6ED9               	movwf	fsr2l,c
  7567  000964  5180               	movf	(Display_ProcessData@j+1)& (0+255),w,b
  7568  000966  2169               	addwfc	(Display_ProcessData@AValues+1)& (0+255),w,b
  7569  000968  6EDA               	movwf	fsr2h,c
  7570  00096A  50DF               	movf	indf2,w,c
  7571  00096C  6F70               	movwf	(??_Display_ProcessData+4)& (0+255),b
  7572  00096E  6B71               	clrf	(??_Display_ProcessData+5)& (0+255),b
  7573  000970  516E               	movf	(??_Display_ProcessData+2)& (0+255),w,b
  7574  000972  5D70               	subwf	(??_Display_ProcessData+4)& (0+255),w,b
  7575  000974  5171               	movf	(??_Display_ProcessData+5)& (0+255),w,b
  7576  000976  0A80               	xorlw	128
  7577  000978  6F72               	movwf	(??_Display_ProcessData+6)& (0+255),b
  7578  00097A  516F               	movf	(??_Display_ProcessData+3)& (0+255),w,b
  7579  00097C  0A80               	xorlw	128
  7580  00097E  5972               	subwfb	(??_Display_ProcessData+6)& (0+255),w,b
  7581  000980  E302               	bnc	l4048
  7582                           
  7583                           ; BSR set to: 0
  7584                           ;display.c: 77: LBit = 0x01;
  7585  000982  0E01               	movlw	1
  7586  000984  D02F               	goto	u4120
  7587  000986                     l4048:
  7588                           
  7589                           ; BSR set to: 0
  7590                           ;display.c: 78: else
  7591                           ;display.c: 79: {
  7592                           ;display.c: 80: if (AValues[j] > (char)(((0x01 << 6) - 1 * 1.0f) / (7 * 1.0f)) * i)
  7593  000986  517F               	movf	Display_ProcessData@j& (0+255),w,b
  7594  000988  2568               	addwf	Display_ProcessData@AValues& (0+255),w,b
  7595  00098A  6ED9               	movwf	fsr2l,c
  7596  00098C  5180               	movf	(Display_ProcessData@j+1)& (0+255),w,b
  7597  00098E  2169               	addwfc	(Display_ProcessData@AValues+1)& (0+255),w,b
  7598  000990  6EDA               	movwf	fsr2h,c
  7599  000992  50DF               	movf	indf2,w,c
  7600  000994  6F6C               	movwf	??_Display_ProcessData& (0+255),b
  7601  000996  6B6D               	clrf	(??_Display_ProcessData+1)& (0+255),b
  7602  000998  0E09               	movlw	9
  7603  00099A  0381               	mulwf	Display_ProcessData@i_652& (0+255),b
  7604  00099C  CFF3 F06E          	movff	prodl,??_Display_ProcessData+2
  7605  0009A0  CFF4 F06F          	movff	prodh,??_Display_ProcessData+3
  7606  0009A4  0382               	mulwf	(Display_ProcessData@i_652+1)& (0+255),b
  7607  0009A6  50F3               	movf	prodl,w,c
  7608  0009A8  276F               	addwf	(??_Display_ProcessData+3)& (0+255),f,b
  7609  0009AA  516C               	movf	??_Display_ProcessData& (0+255),w,b
  7610  0009AC  5D6E               	subwf	(??_Display_ProcessData+2)& (0+255),w,b
  7611  0009AE  516F               	movf	(??_Display_ProcessData+3)& (0+255),w,b
  7612  0009B0  0A80               	xorlw	128
  7613  0009B2  6F70               	movwf	(??_Display_ProcessData+4)& (0+255),b
  7614  0009B4  516D               	movf	(??_Display_ProcessData+1)& (0+255),w,b
  7615  0009B6  0A80               	xorlw	128
  7616  0009B8  5970               	subwfb	(??_Display_ProcessData+4)& (0+255),w,b
  7617  0009BA  E215               	bc	l4052
  7618                           
  7619                           ; BSR set to: 0
  7620                           ;display.c: 81: LBit = (unsigned char)(_Display.ValueData[j] > k);
  7621  0009BC  0EBE               	movlw	low (__Display+190)
  7622  0009BE  257F               	addwf	Display_ProcessData@j& (0+255),w,b
  7623  0009C0  6ED9               	movwf	fsr2l,c
  7624  0009C2  0E02               	movlw	high (__Display+190)
  7625  0009C4  2180               	addwfc	(Display_ProcessData@j+1)& (0+255),w,b
  7626  0009C6  6EDA               	movwf	fsr2h,c
  7627  0009C8  50DF               	movf	indf2,w,c
  7628  0009CA  6F6C               	movwf	??_Display_ProcessData& (0+255),b
  7629  0009CC  6B6D               	clrf	(??_Display_ProcessData+1)& (0+255),b
  7630  0009CE  516C               	movf	??_Display_ProcessData& (0+255),w,b
  7631  0009D0  5D77               	subwf	Display_ProcessData@k& (0+255),w,b
  7632  0009D2  5178               	movf	(Display_ProcessData@k+1)& (0+255),w,b
  7633  0009D4  0A80               	xorlw	128
  7634  0009D6  6F6E               	movwf	(??_Display_ProcessData+2)& (0+255),b
  7635  0009D8  516D               	movf	(??_Display_ProcessData+1)& (0+255),w,b
  7636  0009DA  0A80               	xorlw	128
  7637  0009DC  596E               	subwfb	(??_Display_ProcessData+2)& (0+255),w,b
  7638  0009DE  0E01               	movlw	1
  7639  0009E0  B0D8               	btfsc	status,0,c
  7640  0009E2  0E00               	movlw	0
  7641  0009E4                     u4120:
  7642  0009E4  6F75               	movwf	Display_ProcessData@LBit& (0+255),b
  7643  0009E6                     l4052:
  7644                           
  7645                           ; BSR set to: 0
  7646                           ;display.c: 82: }
  7647                           ;display.c: 83: LData |= LBit << i;
  7648  0009E6  C081  F06C         	movff	Display_ProcessData@i_652,??_Display_ProcessData
  7649  0009EA  C075  F06D         	movff	Display_ProcessData@LBit,??_Display_ProcessData+1
  7650  0009EE  2B6C               	incf	??_Display_ProcessData& (0+255),f,b
  7651  0009F0  D002               	goto	u4144
  7652  0009F2                     u4145:
  7653  0009F2  90D8               	bcf	status,0,c
  7654  0009F4  376D               	rlcf	(??_Display_ProcessData+1)& (0+255),f,b
  7655  0009F6                     u4144:
  7656  0009F6  2F6C               	decfsz	??_Display_ProcessData& (0+255),f,b
  7657  0009F8  D7FC               	goto	u4145
  7658  0009FA  0100               	movlb	0	; () banked
  7659  0009FC  516D               	movf	(??_Display_ProcessData+1)& (0+255),w,b
  7660  0009FE  1374               	iorwf	Display_ProcessData@LData& (0+255),f,b
  7661                           
  7662                           ; BSR set to: 0
  7663  000A00  4B81               	infsnz	Display_ProcessData@i_652& (0+255),f,b
  7664  000A02  2B82               	incf	(Display_ProcessData@i_652+1)& (0+255),f,b
  7665                           
  7666                           ; BSR set to: 0
  7667  000A04  BF82               	btfsc	(Display_ProcessData@i_652+1)& (0+255),7,b
  7668  000A06  D79C               	goto	l259
  7669  000A08  5182               	movf	(Display_ProcessData@i_652+1)& (0+255),w,b
  7670  000A0A  E103               	bnz	u4150
  7671  000A0C  0E07               	movlw	7
  7672  000A0E  5D81               	subwf	Display_ProcessData@i_652& (0+255),w,b
  7673  000A10  E397               	bnc	l259
  7674  000A12                     u4150:
  7675                           
  7676                           ; BSR set to: 0
  7677                           ;display.c: 84: }
  7678                           ;display.c: 85: *(_Display.SecondaryBuffer + iDataIndex) = LData;
  7679  000A12  5176               	movf	Display_ProcessData@iDataIndex& (0+255),w,b
  7680  000A14  0102               	movlb	2	; () banked
  7681  000A16  25B8               	addwf	(__Display+184)& (0+255),w,b
  7682  000A18  6ED9               	movwf	fsr2l,c
  7683  000A1A  0E00               	movlw	0
  7684  000A1C  21B9               	addwfc	(__Display+185)& (0+255),w,b
  7685  000A1E  6EDA               	movwf	fsr2h,c
  7686  000A20  C074  FFDF         	movff	Display_ProcessData@LData,indf2
  7687                           
  7688                           ; BSR set to: 2
  7689                           ;display.c: 86: iDataIndex++;
  7690  000A24  0100               	movlb	0	; () banked
  7691  000A26  2B76               	incf	Display_ProcessData@iDataIndex& (0+255),f,b
  7692                           
  7693                           ; BSR set to: 0
  7694  000A28  4B7F               	infsnz	Display_ProcessData@j& (0+255),f,b
  7695  000A2A  2B80               	incf	(Display_ProcessData@j+1)& (0+255),f,b
  7696                           
  7697                           ; BSR set to: 0
  7698  000A2C  BF80               	btfsc	(Display_ProcessData@j+1)& (0+255),7,b
  7699  000A2E  D785               	goto	l257
  7700  000A30  5180               	movf	(Display_ProcessData@j+1)& (0+255),w,b
  7701  000A32  E103               	bnz	u4160
  7702  000A34  0E08               	movlw	8
  7703  000A36  5D7F               	subwf	Display_ProcessData@j& (0+255),w,b
  7704  000A38  E380               	bnc	l257
  7705  000A3A                     u4160:
  7706                           
  7707                           ; BSR set to: 0
  7708  000A3A  4B77               	infsnz	Display_ProcessData@k& (0+255),f,b
  7709  000A3C  2B78               	incf	(Display_ProcessData@k+1)& (0+255),f,b
  7710                           
  7711                           ; BSR set to: 0
  7712  000A3E  BF78               	btfsc	(Display_ProcessData@k+1)& (0+255),7,b
  7713  000A40  D75B               	goto	l253
  7714  000A42  5178               	movf	(Display_ProcessData@k+1)& (0+255),w,b
  7715  000A44  E104               	bnz	u4170
  7716  000A46  0E09               	movlw	9
  7717  000A48  5D77               	subwf	Display_ProcessData@k& (0+255),w,b
  7718  000A4A  E201 D755          	bnc	l253
  7719  000A4E                     u4170:
  7720                           
  7721                           ; BSR set to: 0
  7722                           ;display.c: 87: }
  7723                           ;display.c: 88: }
  7724                           ;display.c: 89: _Display.ReadyToRead = 1;
  7725  000A4E  0E01               	movlw	1
  7726  000A50  0102               	movlb	2	; () banked
  7727  000A52  6F00               	movwf	__Display& (0+255),b
  7728                           
  7729                           ; BSR set to: 2
  7730                           ;display.c: 90: _Display.ReadyToWrite = 0;
  7731  000A54  6B01               	clrf	(__Display+1)& (0+255),b
  7732                           
  7733                           ; BSR set to: 2
  7734  000A56  0012               	return		;funcret
  7735  000A58                     __end_of_Display_ProcessData:
  7736                           	opt stack 0
  7737                           tblptru	equ	0xFF8
  7738                           tblptrh	equ	0xFF7
  7739                           tblptrl	equ	0xFF6
  7740                           tablat	equ	0xFF5
  7741                           prodh	equ	0xFF4
  7742                           prodl	equ	0xFF3
  7743                           intcon	equ	0xFF2
  7744                           postinc0	equ	0xFEE
  7745                           plusw0	equ	0xFEB
  7746                           wreg	equ	0xFE8
  7747                           indf1	equ	0xFE7
  7748                           postinc1	equ	0xFE6
  7749                           postdec1	equ	0xFE5
  7750                           plusw1	equ	0xFE3
  7751                           fsr1h	equ	0xFE2
  7752                           fsr1l	equ	0xFE1
  7753                           indf2	equ	0xFDF
  7754                           postinc2	equ	0xFDE
  7755                           postdec2	equ	0xFDD
  7756                           plusw2	equ	0xFDB
  7757                           fsr2h	equ	0xFDA
  7758                           fsr2l	equ	0xFD9
  7759                           status	equ	0xFD8
  7760                           
  7761 ;; *************** function ___lbmod *****************
  7762 ;; Defined at:
  7763 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\lbmod.c"
  7764 ;; Parameters:    Size  Location     Type
  7765 ;;  dividend        1    wreg     unsigned char 
  7766 ;;  divisor         1    4[BANK0 ] unsigned char 
  7767 ;; Auto vars:     Size  Location     Type
  7768 ;;  dividend        1    5[BANK0 ] unsigned char 
  7769 ;;  rem             1    7[BANK0 ] unsigned char 
  7770 ;;  counter         1    6[BANK0 ] unsigned char 
  7771 ;; Return value:  Size  Location     Type
  7772 ;;                  1    wreg      unsigned char 
  7773 ;; Registers used:
  7774 ;;		wreg, status,2, status,0
  7775 ;; Tracked objects:
  7776 ;;		On entry : 3F/0
  7777 ;;		On exit  : 3F/0
  7778 ;;		Unchanged: 0/0
  7779 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7780 ;;      Params:         0       1       0       0       0       0       0       0       0
  7781 ;;      Locals:         0       3       0       0       0       0       0       0       0
  7782 ;;      Temps:          0       0       0       0       0       0       0       0       0
  7783 ;;      Totals:         0       4       0       0       0       0       0       0       0
  7784 ;;Total ram usage:        4 bytes
  7785 ;; Hardware stack levels used:    1
  7786 ;; Hardware stack levels required when called:    6
  7787 ;; This function calls:
  7788 ;;		Nothing
  7789 ;; This function is called by:
  7790 ;;		_Display_ProcessData
  7791 ;; This function uses a non-reentrant model
  7792 ;;
  7793                           
  7794                           	psect	text46
  7795  003060                     __ptext46:
  7796                           	opt stack 0
  7797  003060                     ___lbmod:
  7798                           	opt stack 22
  7799                           
  7800                           ; BSR set to: 2
  7801                           ;incstack = 0
  7802                           ;___lbmod@dividend stored from wreg
  7803  003060  6F65               	movwf	___lbmod@dividend& (0+255),b
  7804  003062  0E08               	movlw	8
  7805  003064  0100               	movlb	0	; () banked
  7806  003066  6F66               	movwf	___lbmod@counter& (0+255),b
  7807                           
  7808                           ; BSR set to: 0
  7809  003068  6B67               	clrf	___lbmod@rem& (0+255),b
  7810  00306A                     l3878:
  7811                           
  7812                           ; BSR set to: 0
  7813  00306A  90D8               	bcf	status,0,c
  7814  00306C  3565               	rlcf	___lbmod@dividend& (0+255),w,b
  7815  00306E  3567               	rlcf	___lbmod@rem& (0+255),w,b
  7816  003070  6F67               	movwf	___lbmod@rem& (0+255),b
  7817                           
  7818                           ; BSR set to: 0
  7819  003072  90D8               	bcf	status,0,c
  7820  003074  3765               	rlcf	___lbmod@dividend& (0+255),f,b
  7821                           
  7822                           ; BSR set to: 0
  7823  003076  5164               	movf	___lbmod@divisor& (0+255),w,b
  7824  003078  5D67               	subwf	___lbmod@rem& (0+255),w,b
  7825  00307A  E302               	bnc	l3886
  7826                           
  7827                           ; BSR set to: 0
  7828  00307C  5164               	movf	___lbmod@divisor& (0+255),w,b
  7829  00307E  5F67               	subwf	___lbmod@rem& (0+255),f,b
  7830  003080                     l3886:
  7831                           
  7832                           ; BSR set to: 0
  7833  003080  2F66               	decfsz	___lbmod@counter& (0+255),f,b
  7834  003082  D7F3               	goto	l3878
  7835                           
  7836                           ; BSR set to: 0
  7837  003084  5167               	movf	___lbmod@rem& (0+255),w,b
  7838                           
  7839                           ; BSR set to: 0
  7840  003086  0012               	return		;funcret
  7841  003088                     __end_of___lbmod:
  7842                           	opt stack 0
  7843                           tblptru	equ	0xFF8
  7844                           tblptrh	equ	0xFF7
  7845                           tblptrl	equ	0xFF6
  7846                           tablat	equ	0xFF5
  7847                           prodh	equ	0xFF4
  7848                           prodl	equ	0xFF3
  7849                           intcon	equ	0xFF2
  7850                           postinc0	equ	0xFEE
  7851                           plusw0	equ	0xFEB
  7852                           wreg	equ	0xFE8
  7853                           indf1	equ	0xFE7
  7854                           postinc1	equ	0xFE6
  7855                           postdec1	equ	0xFE5
  7856                           plusw1	equ	0xFE3
  7857                           fsr1h	equ	0xFE2
  7858                           fsr1l	equ	0xFE1
  7859                           indf2	equ	0xFDF
  7860                           postinc2	equ	0xFDE
  7861                           postdec2	equ	0xFDD
  7862                           plusw2	equ	0xFDB
  7863                           fsr2h	equ	0xFDA
  7864                           fsr2l	equ	0xFD9
  7865                           status	equ	0xFD8
  7866                           
  7867 ;; *************** function ___lbdiv *****************
  7868 ;; Defined at:
  7869 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\lbdiv.c"
  7870 ;; Parameters:    Size  Location     Type
  7871 ;;  dividend        1    wreg     unsigned char 
  7872 ;;  divisor         1    0[BANK0 ] unsigned char 
  7873 ;; Auto vars:     Size  Location     Type
  7874 ;;  dividend        1    1[BANK0 ] unsigned char 
  7875 ;;  quotient        1    3[BANK0 ] unsigned char 
  7876 ;;  counter         1    2[BANK0 ] unsigned char 
  7877 ;; Return value:  Size  Location     Type
  7878 ;;                  1    wreg      unsigned char 
  7879 ;; Registers used:
  7880 ;;		wreg, status,2, status,0
  7881 ;; Tracked objects:
  7882 ;;		On entry : 3F/0
  7883 ;;		On exit  : 3F/0
  7884 ;;		Unchanged: 0/0
  7885 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7886 ;;      Params:         0       1       0       0       0       0       0       0       0
  7887 ;;      Locals:         0       3       0       0       0       0       0       0       0
  7888 ;;      Temps:          0       0       0       0       0       0       0       0       0
  7889 ;;      Totals:         0       4       0       0       0       0       0       0       0
  7890 ;;Total ram usage:        4 bytes
  7891 ;; Hardware stack levels used:    1
  7892 ;; Hardware stack levels required when called:    6
  7893 ;; This function calls:
  7894 ;;		Nothing
  7895 ;; This function is called by:
  7896 ;;		_Display_ProcessData
  7897 ;; This function uses a non-reentrant model
  7898 ;;
  7899                           
  7900                           	psect	text47
  7901  002EE0                     __ptext47:
  7902                           	opt stack 0
  7903  002EE0                     ___lbdiv:
  7904                           	opt stack 22
  7905                           
  7906                           ; BSR set to: 0
  7907                           ;incstack = 0
  7908                           ;___lbdiv@dividend stored from wreg
  7909  002EE0  6F61               	movwf	___lbdiv@dividend& (0+255),b
  7910  002EE2  0100               	movlb	0	; () banked
  7911  002EE4  6B63               	clrf	___lbdiv@quotient& (0+255),b
  7912                           
  7913                           ; BSR set to: 0
  7914  002EE6  5160               	movf	___lbdiv@divisor& (0+255),w,b
  7915  002EE8  E014               	bz	l3870
  7916                           
  7917                           ; BSR set to: 0
  7918  002EEA  0E01               	movlw	1
  7919  002EEC  6F62               	movwf	___lbdiv@counter& (0+255),b
  7920  002EEE  D003               	goto	l3858
  7921  002EF0                     l3854:
  7922                           
  7923                           ; BSR set to: 0
  7924  002EF0  90D8               	bcf	status,0,c
  7925  002EF2  3760               	rlcf	___lbdiv@divisor& (0+255),f,b
  7926                           
  7927                           ; BSR set to: 0
  7928  002EF4  2B62               	incf	___lbdiv@counter& (0+255),f,b
  7929  002EF6                     l3858:
  7930                           
  7931                           ; BSR set to: 0
  7932  002EF6  AF60               	btfss	___lbdiv@divisor& (0+255),7,b
  7933  002EF8  D7FB               	goto	l3854
  7934  002EFA                     u3920:
  7935                           
  7936                           ; BSR set to: 0
  7937  002EFA  90D8               	bcf	status,0,c
  7938  002EFC  3763               	rlcf	___lbdiv@quotient& (0+255),f,b
  7939  002EFE  5160               	movf	___lbdiv@divisor& (0+255),w,b
  7940  002F00  5D61               	subwf	___lbdiv@dividend& (0+255),w,b
  7941  002F02  E303               	bnc	l3866
  7942                           
  7943                           ; BSR set to: 0
  7944  002F04  5160               	movf	___lbdiv@divisor& (0+255),w,b
  7945  002F06  5F61               	subwf	___lbdiv@dividend& (0+255),f,b
  7946                           
  7947                           ; BSR set to: 0
  7948  002F08  8163               	bsf	___lbdiv@quotient& (0+255),0,b
  7949  002F0A                     l3866:
  7950                           
  7951                           ; BSR set to: 0
  7952  002F0A  90D8               	bcf	status,0,c
  7953  002F0C  3360               	rrcf	___lbdiv@divisor& (0+255),f,b
  7954                           
  7955                           ; BSR set to: 0
  7956  002F0E  2F62               	decfsz	___lbdiv@counter& (0+255),f,b
  7957  002F10  D7F4               	goto	u3920
  7958  002F12                     l3870:
  7959                           
  7960                           ; BSR set to: 0
  7961  002F12  5163               	movf	___lbdiv@quotient& (0+255),w,b
  7962                           
  7963                           ; BSR set to: 0
  7964  002F14  0012               	return		;funcret
  7965  002F16                     __end_of___lbdiv:
  7966                           	opt stack 0
  7967                           tblptru	equ	0xFF8
  7968                           tblptrh	equ	0xFF7
  7969                           tblptrl	equ	0xFF6
  7970                           tablat	equ	0xFF5
  7971                           prodh	equ	0xFF4
  7972                           prodl	equ	0xFF3
  7973                           intcon	equ	0xFF2
  7974                           postinc0	equ	0xFEE
  7975                           plusw0	equ	0xFEB
  7976                           wreg	equ	0xFE8
  7977                           indf1	equ	0xFE7
  7978                           postinc1	equ	0xFE6
  7979                           postdec1	equ	0xFE5
  7980                           plusw1	equ	0xFE3
  7981                           fsr1h	equ	0xFE2
  7982                           fsr1l	equ	0xFE1
  7983                           indf2	equ	0xFDF
  7984                           postinc2	equ	0xFDE
  7985                           postdec2	equ	0xFDD
  7986                           plusw2	equ	0xFDB
  7987                           fsr2h	equ	0xFDA
  7988                           fsr2l	equ	0xFD9
  7989                           status	equ	0xFD8
  7990                           
  7991 ;; *************** function _Display_Init *****************
  7992 ;; Defined at:
  7993 ;;		line 6 in file "display.c"
  7994 ;; Parameters:    Size  Location     Type
  7995 ;;		None
  7996 ;; Auto vars:     Size  Location     Type
  7997 ;;  i               2  110[BANK0 ] int 
  7998 ;;  i               2  108[BANK0 ] int 
  7999 ;; Return value:  Size  Location     Type
  8000 ;;                  1    wreg      void 
  8001 ;; Registers used:
  8002 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8003 ;; Tracked objects:
  8004 ;;		On entry : 3F/1
  8005 ;;		On exit  : 3F/0
  8006 ;;		Unchanged: 0/0
  8007 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8008 ;;      Params:         0       0       0       0       0       0       0       0       0
  8009 ;;      Locals:         0      10       0       0       0       0       0       0       0
  8010 ;;      Temps:          0       0       0       0       0       0       0       0       0
  8011 ;;      Totals:         0      10       0       0       0       0       0       0       0
  8012 ;;Total ram usage:       10 bytes
  8013 ;; Hardware stack levels used:    1
  8014 ;; Hardware stack levels required when called:   11
  8015 ;; This function calls:
  8016 ;;		_InitConnector
  8017 ;;		___awtoft
  8018 ;;		___fttol
  8019 ;;		_pow
  8020 ;; This function is called by:
  8021 ;;		_InitApp
  8022 ;; This function uses a non-reentrant model
  8023 ;;
  8024                           
  8025                           	psect	text48
  8026  001570                     __ptext48:
  8027                           	opt stack 0
  8028  001570                     _Display_Init:
  8029                           	opt stack 18
  8030                           
  8031                           ; BSR set to: 1
  8032                           ;display.c: 8: TRISA5 = 0;
  8033                           
  8034                           ; BSR set to: 0
  8035                           ;incstack = 0
  8036  001570  9A92               	bcf	3986,5,c	;volatile
  8037                           
  8038                           ;display.c: 9: TRISC2 = 0;
  8039  001572  9494               	bcf	3988,2,c	;volatile
  8040                           
  8041                           ;display.c: 10: TRISB4 = 0;
  8042  001574  9893               	bcf	3987,4,c	;volatile
  8043                           
  8044                           ; BSR set to: 1
  8045                           ;display.c: 12: _Display.IO.ClockPin.Port = &LATB;
  8046  001576  0E8A               	movlw	138
  8047  001578  0102               	movlb	2	; () banked
  8048  00157A  6FCA               	movwf	(__Display+202)& (0+255),b
  8049  00157C  0E0F               	movlw	15
  8050  00157E  6FCB               	movwf	(__Display+203)& (0+255),b
  8051                           
  8052                           ; BSR set to: 2
  8053                           ;display.c: 13: _Display.IO.ClockPin.PinNumber = 4;
  8054  001580  0E04               	movlw	4
  8055  001582  6FCC               	movwf	(__Display+204)& (0+255),b
  8056                           
  8057                           ; BSR set to: 2
  8058                           ;display.c: 14: _Display.IO.DataPin.Port = &LATA;
  8059  001584  0E89               	movlw	137
  8060  001586  6FCF               	movwf	(__Display+207)& (0+255),b
  8061  001588  0E0F               	movlw	15
  8062  00158A  6FD0               	movwf	(__Display+208)& (0+255),b
  8063                           
  8064                           ;display.c: 15: _Display.IO.DataPin.PinNumber = 5;
  8065  00158C  0E05               	movlw	5
  8066  00158E  6FD1               	movwf	(__Display+209)& (0+255),b
  8067                           
  8068                           ; BSR set to: 2
  8069                           ;display.c: 16: _Display.IO.LatchPin.Port = &LATC;
  8070  001590  0E8B               	movlw	139
  8071  001592  6FD4               	movwf	(__Display+212)& (0+255),b
  8072  001594  0E0F               	movlw	15
  8073  001596  6FD5               	movwf	(__Display+213)& (0+255),b
  8074                           
  8075                           ; BSR set to: 2
  8076                           ;display.c: 17: _Display.IO.LatchPin.PinNumber = 2;
  8077  001598  0E02               	movlw	2
  8078  00159A  6FD6               	movwf	(__Display+214)& (0+255),b
  8079                           
  8080                           ; BSR set to: 2
  8081                           ;display.c: 18: InitConnector(&_Display.IO);
  8082  00159C  0ECA               	movlw	low (__Display+202)
  8083  00159E  0100               	movlb	0	; () banked
  8084  0015A0  6F64               	movwf	InitConnector@AConnector& (0+255),b
  8085  0015A2  0E02               	movlw	high (__Display+202)
  8086  0015A4  6F65               	movwf	(InitConnector@AConnector+1)& (0+255),b
  8087  0015A6  EC06  F018         	call	_InitConnector	;wreg free
  8088                           
  8089                           ; BSR set to: 0
  8090                           ;display.c: 20: _Display.SavingMask = 0xFF;
  8091  0015AA  0102               	movlb	2	; () banked
  8092  0015AC  69C7               	setf	(__Display+199)& (0+255),b
  8093                           
  8094                           ; BSR set to: 2
  8095                           ;display.c: 21: _Display.iDisplay = 0;
  8096  0015AE  6BC6               	clrf	(__Display+198)& (0+255),b
  8097                           
  8098                           ; BSR set to: 2
  8099                           ;display.c: 23: _Display.ReadyToWrite = 1;
  8100  0015B0  0E01               	movlw	1
  8101  0015B2  6F01               	movwf	(__Display+1)& (0+255),b
  8102                           
  8103                           ; BSR set to: 2
  8104                           ;display.c: 24: _Display.ReadyToRead = 0;
  8105  0015B4  6B00               	clrf	__Display& (0+255),b
  8106                           
  8107                           ; BSR set to: 2
  8108                           ;display.c: 26: _Display.PrimaryBuffer = (unsigned char*)_Display.Buffer1;
  8109  0015B6  0E02               	movlw	low (__Display+2)
  8110  0015B8  6FB6               	movwf	(__Display+182)& (0+255),b
  8111  0015BA  0E02               	movlw	high (__Display+2)
  8112  0015BC  6FB7               	movwf	(__Display+183)& (0+255),b
  8113                           
  8114                           ; BSR set to: 2
  8115                           ;display.c: 27: _Display.SecondaryBuffer = (unsigned char*)_Display.Buffer2;
  8116  0015BE  0E5C               	movlw	low (__Display+92)
  8117  0015C0  6FB8               	movwf	(__Display+184)& (0+255),b
  8118  0015C2  0E02               	movlw	high (__Display+92)
  8119  0015C4  6FB9               	movwf	(__Display+185)& (0+255),b
  8120                           
  8121                           ; BSR set to: 2
  8122                           ;display.c: 29: for (int i = 0; i < (char)(((0x01 << 6) - 1 * 1.0f) / (7 * 1.0f)) * (2 +
      +                           8); i++)
  8123  0015C6  0100               	movlb	0	; () banked
  8124  0015C8  6BCC               	clrf	Display_Init@i& (0+255),b
  8125  0015CA  6BCD               	clrf	(Display_Init@i+1)& (0+255),b
  8126  0015CC                     l4158:
  8127                           
  8128                           ; BSR set to: 0
  8129                           ;display.c: 30: {
  8130                           ;display.c: 31: *(_Display.PrimaryBuffer + i) = 0x00;
  8131  0015CC  51CC               	movf	Display_Init@i& (0+255),w,b
  8132  0015CE  0102               	movlb	2	; () banked
  8133  0015D0  25B6               	addwf	(__Display+182)& (0+255),w,b
  8134  0015D2  6ED9               	movwf	fsr2l,c
  8135  0015D4  0100               	movlb	0	; () banked
  8136  0015D6  51CD               	movf	(Display_Init@i+1)& (0+255),w,b
  8137  0015D8  0102               	movlb	2	; () banked
  8138  0015DA  21B7               	addwfc	(__Display+183)& (0+255),w,b
  8139  0015DC  6EDA               	movwf	fsr2h,c
  8140  0015DE  6ADF               	clrf	indf2,c
  8141                           
  8142                           ;display.c: 32: *(_Display.SecondaryBuffer + i) = 0x00;
  8143  0015E0  0100               	movlb	0	; () banked
  8144  0015E2  51CC               	movf	Display_Init@i& (0+255),w,b
  8145  0015E4  0102               	movlb	2	; () banked
  8146  0015E6  25B8               	addwf	(__Display+184)& (0+255),w,b
  8147  0015E8  6ED9               	movwf	fsr2l,c
  8148  0015EA  0100               	movlb	0	; () banked
  8149  0015EC  51CD               	movf	(Display_Init@i+1)& (0+255),w,b
  8150  0015EE  0102               	movlb	2	; () banked
  8151  0015F0  21B9               	addwfc	(__Display+185)& (0+255),w,b
  8152  0015F2  6EDA               	movwf	fsr2h,c
  8153  0015F4  0E00               	movlw	0
  8154  0015F6  6EDF               	movwf	indf2,c
  8155                           
  8156                           ; BSR set to: 2
  8157  0015F8  0100               	movlb	0	; () banked
  8158  0015FA  4BCC               	infsnz	Display_Init@i& (0+255),f,b
  8159  0015FC  2BCD               	incf	(Display_Init@i+1)& (0+255),f,b
  8160                           
  8161                           ; BSR set to: 0
  8162  0015FE  BFCD               	btfsc	(Display_Init@i+1)& (0+255),7,b
  8163  001600  D7E5               	goto	l4158
  8164  001602  51CD               	movf	(Display_Init@i+1)& (0+255),w,b
  8165  001604  E103               	bnz	u4190
  8166  001606  0E5A               	movlw	90
  8167  001608  5DCC               	subwf	Display_Init@i& (0+255),w,b
  8168  00160A  E3E0               	bnc	l4158
  8169  00160C                     u4190:
  8170                           
  8171                           ; BSR set to: 0
  8172                           ;display.c: 33: }
  8173                           ;display.c: 35: for(int i = 0; i < 2; i++)
  8174  00160C  6BCE               	clrf	Display_Init@i_638& (0+255),b
  8175  00160E  6BCF               	clrf	(Display_Init@i_638+1)& (0+255),b
  8176  001610                     l4168:
  8177                           
  8178                           ; BSR set to: 0
  8179                           ;display.c: 36: _Display.DigitalValueRatio[i] = 2 * (int)pow(10, 2 - i - 1);
  8180  001610  51CE               	movf	Display_Init@i_638& (0+255),w,b
  8181  001612  0801               	sublw	1
  8182  001614  6F68               	movwf	___awtoft@c& (0+255),b
  8183  001616  51CF               	movf	(Display_Init@i_638+1)& (0+255),w,b
  8184  001618  A0D8               	btfss	status,0,c
  8185  00161A  2AE8               	incf	wreg,f,c
  8186  00161C  0800               	sublw	0
  8187  00161E  6F69               	movwf	(___awtoft@c+1)& (0+255),b
  8188  001620  ECA6  F017         	call	___awtoft	;wreg free
  8189  001624  C068  F0C6         	movff	?___awtoft,_Display_Init$2163
  8190  001628  C069  F0C7         	movff	?___awtoft+1,_Display_Init$2163+1
  8191  00162C  C06A  F0C8         	movff	?___awtoft+2,_Display_Init$2163+2
  8192                           
  8193                           ; BSR set to: 0
  8194                           ;display.c: 36: _Display.DigitalValueRatio[i] = 2 * (int)pow(10, 2 - i - 1);
  8195  001630  C0C6  F0B8         	movff	_Display_Init$2163,pow@y
  8196  001634  C0C7  F0B9         	movff	_Display_Init$2163+1,pow@y+1
  8197  001638  C0C8  F0BA         	movff	_Display_Init$2163+2,pow@y+2
  8198  00163C  6BB5               	clrf	pow@x& (0+255),b
  8199  00163E  0E20               	movlw	32
  8200  001640  6FB6               	movwf	(pow@x+1)& (0+255),b
  8201  001642  0E41               	movlw	65
  8202  001644  6FB7               	movwf	(pow@x+2)& (0+255),b
  8203  001646  EC81  F009         	call	_pow	;wreg free
  8204  00164A  C0B5  F0C9         	movff	?_pow,_Display_Init$2164
  8205  00164E  C0B6  F0CA         	movff	?_pow+1,_Display_Init$2164+1
  8206  001652  C0B7  F0CB         	movff	?_pow+2,_Display_Init$2164+2
  8207                           
  8208                           ; BSR set to: 0
  8209                           ;display.c: 36: _Display.DigitalValueRatio[i] = 2 * (int)pow(10, 2 - i - 1);
  8210  001656  0EBA               	movlw	low (__Display+186)
  8211  001658  25CE               	addwf	Display_Init@i_638& (0+255),w,b
  8212  00165A  6ED9               	movwf	fsr2l,c
  8213  00165C  0E02               	movlw	high (__Display+186)
  8214  00165E  21CF               	addwfc	(Display_Init@i_638+1)& (0+255),w,b
  8215  001660  6EDA               	movwf	fsr2h,c
  8216  001662  C0C9  F08F         	movff	_Display_Init$2164,___fttol@f1
  8217  001666  C0CA  F090         	movff	_Display_Init$2164+1,___fttol@f1+1
  8218  00166A  C0CB  F091         	movff	_Display_Init$2164+2,___fttol@f1+2
  8219  00166E  ECEB  F00E         	call	___fttol	;wreg free
  8220  001672  90D8               	bcf	status,0,c
  8221  001674  358F               	rlcf	?___fttol& (0+255),w,b
  8222  001676  6EDF               	movwf	indf2,c
  8223                           
  8224                           ; BSR set to: 0
  8225  001678  4BCE               	infsnz	Display_Init@i_638& (0+255),f,b
  8226  00167A  2BCF               	incf	(Display_Init@i_638+1)& (0+255),f,b
  8227                           
  8228                           ; BSR set to: 0
  8229  00167C  BFCF               	btfsc	(Display_Init@i_638+1)& (0+255),7,b
  8230  00167E  D7C8               	goto	l4168
  8231  001680  51CF               	movf	(Display_Init@i_638+1)& (0+255),w,b
  8232  001682  E105               	bnz	u4200
  8233  001684  0E02               	movlw	2
  8234  001686  5DCE               	subwf	Display_Init@i_638& (0+255),w,b
  8235  001688  B0D8               	btfsc	status,0,c
  8236  00168A  0012               	return	
  8237  00168C  D7C1               	goto	l4168
  8238  00168E                     u4200:
  8239                           
  8240                           ; BSR set to: 0
  8241  00168E  0012               	return		;funcret
  8242  001690                     __end_of_Display_Init:
  8243                           	opt stack 0
  8244                           tblptru	equ	0xFF8
  8245                           tblptrh	equ	0xFF7
  8246                           tblptrl	equ	0xFF6
  8247                           tablat	equ	0xFF5
  8248                           prodh	equ	0xFF4
  8249                           prodl	equ	0xFF3
  8250                           intcon	equ	0xFF2
  8251                           postinc0	equ	0xFEE
  8252                           plusw0	equ	0xFEB
  8253                           wreg	equ	0xFE8
  8254                           indf1	equ	0xFE7
  8255                           postinc1	equ	0xFE6
  8256                           postdec1	equ	0xFE5
  8257                           plusw1	equ	0xFE3
  8258                           fsr1h	equ	0xFE2
  8259                           fsr1l	equ	0xFE1
  8260                           indf2	equ	0xFDF
  8261                           postinc2	equ	0xFDE
  8262                           postdec2	equ	0xFDD
  8263                           plusw2	equ	0xFDB
  8264                           fsr2h	equ	0xFDA
  8265                           fsr2l	equ	0xFD9
  8266                           status	equ	0xFD8
  8267                           
  8268 ;; *************** function _pow *****************
  8269 ;; Defined at:
  8270 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\pow.c"
  8271 ;; Parameters:    Size  Location     Type
  8272 ;;  x               3   85[BANK0 ] void 
  8273 ;;  y               3   88[BANK0 ] void 
  8274 ;; Auto vars:     Size  Location     Type
  8275 ;;  yi              4   98[BANK0 ] unsigned long 
  8276 ;;  sign            1   97[BANK0 ] unsigned char 
  8277 ;; Return value:  Size  Location     Type
  8278 ;;                  3   85[BANK0 ] unsigned char 
  8279 ;; Registers used:
  8280 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8281 ;; Tracked objects:
  8282 ;;		On entry : 3F/0
  8283 ;;		On exit  : 3F/0
  8284 ;;		Unchanged: 0/0
  8285 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8286 ;;      Params:         0       6       0       0       0       0       0       0       0
  8287 ;;      Locals:         0      11       0       0       0       0       0       0       0
  8288 ;;      Temps:          0       0       0       0       0       0       0       0       0
  8289 ;;      Totals:         0      17       0       0       0       0       0       0       0
  8290 ;;Total ram usage:       17 bytes
  8291 ;; Hardware stack levels used:    1
  8292 ;; Hardware stack levels required when called:   10
  8293 ;; This function calls:
  8294 ;;		___ftge
  8295 ;;		___ftmul
  8296 ;;		___ftneg
  8297 ;;		___fttol
  8298 ;;		___lltoft
  8299 ;;		_exp
  8300 ;;		_log
  8301 ;; This function is called by:
  8302 ;;		_Display_Init
  8303 ;;		_InitDigiPot
  8304 ;; This function uses a non-reentrant model
  8305 ;;
  8306                           
  8307                           	psect	text49
  8308  001302                     __ptext49:
  8309                           	opt stack 0
  8310  001302                     _pow:
  8311                           	opt stack 18
  8312                           
  8313                           ; BSR set to: 0
  8314                           
  8315                           ; BSR set to: 0
  8316                           ;incstack = 0
  8317  001302  6BC1               	clrf	pow@sign& (0+255),b
  8318                           
  8319                           ; BSR set to: 0
  8320  001304  51B5               	movf	pow@x& (0+255),w,b
  8321  001306  11B6               	iorwf	(pow@x+1)& (0+255),w,b
  8322  001308  11B7               	iorwf	(pow@x+2)& (0+255),w,b
  8323  00130A  E10F               	bnz	l3774
  8324                           
  8325                           ; BSR set to: 0
  8326  00130C  6B60               	clrf	___ftge@ff1& (0+255),b
  8327  00130E  6B61               	clrf	(___ftge@ff1+1)& (0+255),b
  8328  001310  6B62               	clrf	(___ftge@ff1+2)& (0+255),b
  8329  001312  C0B8  F063         	movff	pow@y,___ftge@ff2
  8330  001316  C0B9  F064         	movff	pow@y+1,___ftge@ff2+1
  8331  00131A  C0BA  F065         	movff	pow@y+2,___ftge@ff2+2
  8332  00131E  EC25  F015         	call	___ftge	;wreg free
  8333                           
  8334                           ; BSR set to: 0
  8335  001322  6BB5               	clrf	?_pow& (0+255),b
  8336  001324  6BB6               	clrf	(?_pow+1)& (0+255),b
  8337  001326  6BB7               	clrf	(?_pow+2)& (0+255),b
  8338  001328  0012               	return	
  8339  00132A                     l3774:
  8340                           
  8341                           ; BSR set to: 0
  8342  00132A  51B8               	movf	pow@y& (0+255),w,b
  8343  00132C  11B9               	iorwf	(pow@y+1)& (0+255),w,b
  8344  00132E  11BA               	iorwf	(pow@y+2)& (0+255),w,b
  8345  001330  E106               	bnz	l3780
  8346                           
  8347                           ; BSR set to: 0
  8348  001332  6BB5               	clrf	?_pow& (0+255),b
  8349  001334  0E80               	movlw	128
  8350  001336  6FB6               	movwf	(?_pow+1)& (0+255),b
  8351  001338  0E3F               	movlw	63
  8352  00133A  6FB7               	movwf	(?_pow+2)& (0+255),b
  8353  00133C  0C3F               	retlw	63
  8354  00133E                     l3780:
  8355                           
  8356                           ; BSR set to: 0
  8357  00133E  AFB7               	btfss	(pow@x+2)& (0+255),7,b
  8358  001340  D038               	goto	l3790
  8359                           
  8360                           ; BSR set to: 0
  8361  001342  C0B8  F08F         	movff	pow@y,___fttol@f1
  8362  001346  C0B9  F090         	movff	pow@y+1,___fttol@f1+1
  8363  00134A  C0BA  F091         	movff	pow@y+2,___fttol@f1+2
  8364  00134E  ECEB  F00E         	call	___fttol	;wreg free
  8365  001352  C08F  F0C2         	movff	?___fttol,pow@yi
  8366  001356  C090  F0C3         	movff	?___fttol+1,pow@yi+1
  8367  00135A  C091  F0C4         	movff	?___fttol+2,pow@yi+2
  8368  00135E  C092  F0C5         	movff	?___fttol+3,pow@yi+3
  8369  001362  C0C2  F068         	movff	pow@yi,___lltoft@c
  8370  001366  C0C3  F069         	movff	pow@yi+1,___lltoft@c+1
  8371  00136A  C0C4  F06A         	movff	pow@yi+2,___lltoft@c+2
  8372  00136E  C0C5  F06B         	movff	pow@yi+3,___lltoft@c+3
  8373  001372  EC45  F016         	call	___lltoft	;wreg free
  8374  001376  51B8               	movf	pow@y& (0+255),w,b
  8375  001378  1968               	xorwf	?___lltoft& (0+255),w,b
  8376  00137A  E106               	bnz	u3840
  8377  00137C  51B9               	movf	(pow@y+1)& (0+255),w,b
  8378  00137E  1969               	xorwf	(?___lltoft+1)& (0+255),w,b
  8379  001380  E103               	bnz	u3840
  8380  001382  51BA               	movf	(pow@y+2)& (0+255),w,b
  8381  001384  196A               	xorwf	(?___lltoft+2)& (0+255),w,b
  8382  001386  E004               	bz	l3786
  8383  001388                     u3840:
  8384                           
  8385                           ; BSR set to: 0
  8386  001388  6BB5               	clrf	?_pow& (0+255),b
  8387  00138A  6BB6               	clrf	(?_pow+1)& (0+255),b
  8388  00138C  6BB7               	clrf	(?_pow+2)& (0+255),b
  8389  00138E  0012               	return	
  8390  001390                     l3786:
  8391                           
  8392                           ; BSR set to: 0
  8393  001390  51C2               	movf	pow@yi& (0+255),w,b
  8394  001392  0B01               	andlw	1
  8395  001394  6FC1               	movwf	pow@sign& (0+255),b
  8396                           
  8397                           ; BSR set to: 0
  8398  001396  C0B5  F060         	movff	pow@x,___ftneg@f1
  8399  00139A  C0B6  F061         	movff	pow@x+1,___ftneg@f1+1
  8400  00139E  C0B7  F062         	movff	pow@x+2,___ftneg@f1+2
  8401  0013A2  EC94  F018         	call	___ftneg	;wreg free
  8402  0013A6  C060  F0B5         	movff	?___ftneg,pow@x
  8403  0013AA  C061  F0B6         	movff	?___ftneg+1,pow@x+1
  8404  0013AE  C062  F0B7         	movff	?___ftneg+2,pow@x+2
  8405  0013B2                     l3790:
  8406                           
  8407                           ; BSR set to: 0
  8408  0013B2  C0B5  F0A5         	movff	pow@x,log@x
  8409  0013B6  C0B6  F0A6         	movff	pow@x+1,log@x+1
  8410  0013BA  C0B7  F0A7         	movff	pow@x+2,log@x+2
  8411  0013BE  EC62  F00C         	call	_log	;wreg free
  8412  0013C2  C0A5  F0BB         	movff	?_log,_pow$2166
  8413  0013C6  C0A6  F0BC         	movff	?_log+1,_pow$2166+1
  8414  0013CA  C0A7  F0BD         	movff	?_log+2,_pow$2166+2
  8415                           
  8416                           ; BSR set to: 0
  8417  0013CE  C0BB  F072         	movff	_pow$2166,___ftmul@f1
  8418  0013D2  C0BC  F073         	movff	_pow$2166+1,___ftmul@f1+1
  8419  0013D6  C0BD  F074         	movff	_pow$2166+2,___ftmul@f1+2
  8420  0013DA  C0B8  F075         	movff	pow@y,___ftmul@f2
  8421  0013DE  C0B9  F076         	movff	pow@y+1,___ftmul@f2+1
  8422  0013E2  C0BA  F077         	movff	pow@y+2,___ftmul@f2+2
  8423  0013E6  EC4C  F00D         	call	___ftmul	;wreg free
  8424  0013EA  C072  F0BE         	movff	?___ftmul,_pow$2167
  8425  0013EE  C073  F0BF         	movff	?___ftmul+1,_pow$2167+1
  8426  0013F2  C074  F0C0         	movff	?___ftmul+2,_pow$2167+2
  8427                           
  8428                           ; BSR set to: 0
  8429  0013F6  C0BE  F0AC         	movff	_pow$2167,exp@x
  8430  0013FA  C0BF  F0AD         	movff	_pow$2167+1,exp@x+1
  8431  0013FE  C0C0  F0AE         	movff	_pow$2167+2,exp@x+2
  8432  001402  EC2C  F007         	call	_exp	;wreg free
  8433  001406  C0AC  F0B5         	movff	?_exp,pow@x
  8434  00140A  C0AD  F0B6         	movff	?_exp+1,pow@x+1
  8435  00140E  C0AE  F0B7         	movff	?_exp+2,pow@x+2
  8436                           
  8437                           ; BSR set to: 0
  8438  001412  51C1               	movf	pow@sign& (0+255),w,b
  8439  001414  E00F               	bz	l1151
  8440                           
  8441                           ; BSR set to: 0
  8442  001416  C0B5  F060         	movff	pow@x,___ftneg@f1
  8443  00141A  C0B6  F061         	movff	pow@x+1,___ftneg@f1+1
  8444  00141E  C0B7  F062         	movff	pow@x+2,___ftneg@f1+2
  8445  001422  EC94  F018         	call	___ftneg	;wreg free
  8446  001426  C060  F0B5         	movff	?___ftneg,?_pow
  8447  00142A  C061  F0B6         	movff	?___ftneg+1,?_pow+1
  8448  00142E  C062  F0B7         	movff	?___ftneg+2,?_pow+2
  8449  001432  0012               	return	
  8450  001434                     l1151:
  8451                           
  8452                           ; BSR set to: 0
  8453  001434  C0B5  F0B5         	movff	pow@x,?_pow
  8454  001438  C0B6  F0B6         	movff	pow@x+1,?_pow+1
  8455  00143C  C0B7  F0B7         	movff	pow@x+2,?_pow+2
  8456                           
  8457                           ; BSR set to: 0
  8458  001440  0012               	return		;funcret
  8459  001442                     __end_of_pow:
  8460                           	opt stack 0
  8461                           tblptru	equ	0xFF8
  8462                           tblptrh	equ	0xFF7
  8463                           tblptrl	equ	0xFF6
  8464                           tablat	equ	0xFF5
  8465                           prodh	equ	0xFF4
  8466                           prodl	equ	0xFF3
  8467                           intcon	equ	0xFF2
  8468                           postinc0	equ	0xFEE
  8469                           plusw0	equ	0xFEB
  8470                           wreg	equ	0xFE8
  8471                           indf1	equ	0xFE7
  8472                           postinc1	equ	0xFE6
  8473                           postdec1	equ	0xFE5
  8474                           plusw1	equ	0xFE3
  8475                           fsr1h	equ	0xFE2
  8476                           fsr1l	equ	0xFE1
  8477                           indf2	equ	0xFDF
  8478                           postinc2	equ	0xFDE
  8479                           postdec2	equ	0xFDD
  8480                           plusw2	equ	0xFDB
  8481                           fsr2h	equ	0xFDA
  8482                           fsr2l	equ	0xFD9
  8483                           status	equ	0xFD8
  8484                           
  8485 ;; *************** function _log *****************
  8486 ;; Defined at:
  8487 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\log.c"
  8488 ;; Parameters:    Size  Location     Type
  8489 ;;  x               3   69[BANK0 ] unsigned char 
  8490 ;; Auto vars:     Size  Location     Type
  8491 ;;  exponent        2   72[BANK0 ] int 
  8492 ;; Return value:  Size  Location     Type
  8493 ;;                  3   69[BANK0 ] int 
  8494 ;; Registers used:
  8495 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8496 ;; Tracked objects:
  8497 ;;		On entry : 3F/0
  8498 ;;		On exit  : 3F/0
  8499 ;;		Unchanged: 0/0
  8500 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8501 ;;      Params:         0       3       0       0       0       0       0       0       0
  8502 ;;      Locals:         0       2       0       0       0       0       0       0       0
  8503 ;;      Temps:          0       0       0       0       0       0       0       0       0
  8504 ;;      Totals:         0       5       0       0       0       0       0       0       0
  8505 ;;Total ram usage:        5 bytes
  8506 ;; Hardware stack levels used:    1
  8507 ;; Hardware stack levels required when called:    9
  8508 ;; This function calls:
  8509 ;;		___awtoft
  8510 ;;		___ftadd
  8511 ;;		___ftmul
  8512 ;;		_eval_poly
  8513 ;;		_frexp
  8514 ;; This function is called by:
  8515 ;;		_pow
  8516 ;; This function uses a non-reentrant model
  8517 ;;
  8518                           
  8519                           	psect	text50
  8520  0018C4                     __ptext50:
  8521                           	opt stack 0
  8522  0018C4                     _log:
  8523                           	opt stack 18
  8524                           
  8525                           ; BSR set to: 0
  8526                           
  8527                           ; BSR set to: 0
  8528                           ;incstack = 0
  8529  0018C4  AFA7               	btfss	(log@x+2)& (0+255),7,b
  8530  0018C6  D004               	goto	l3656
  8531                           
  8532                           ; BSR set to: 0
  8533  0018C8  6BA5               	clrf	?_log& (0+255),b
  8534  0018CA  6BA6               	clrf	(?_log+1)& (0+255),b
  8535  0018CC  6BA7               	clrf	(?_log+2)& (0+255),b
  8536  0018CE  0012               	return	
  8537  0018D0                     l3656:
  8538                           
  8539                           ; BSR set to: 0
  8540  0018D0  51A5               	movf	log@x& (0+255),w,b
  8541  0018D2  11A6               	iorwf	(log@x+1)& (0+255),w,b
  8542  0018D4  11A7               	iorwf	(log@x+2)& (0+255),w,b
  8543  0018D6  E104               	bnz	l3660
  8544                           
  8545                           ; BSR set to: 0
  8546  0018D8  6BA5               	clrf	?_log& (0+255),b
  8547  0018DA  6BA6               	clrf	(?_log+1)& (0+255),b
  8548  0018DC  6BA7               	clrf	(?_log+2)& (0+255),b
  8549  0018DE  0012               	return	
  8550  0018E0                     l3660:
  8551                           
  8552                           ; BSR set to: 0
  8553  0018E0  6B75               	clrf	___ftmul@f2& (0+255),b
  8554  0018E2  6B76               	clrf	(___ftmul@f2+1)& (0+255),b
  8555  0018E4  0E40               	movlw	64
  8556  0018E6  6F77               	movwf	(___ftmul@f2+2)& (0+255),b
  8557  0018E8  0EA8               	movlw	low log@exponent
  8558  0018EA  6F63               	movwf	frexp@eptr& (0+255),b
  8559  0018EC  C0A5  F060         	movff	log@x,frexp@value
  8560  0018F0  C0A6  F061         	movff	log@x+1,frexp@value+1
  8561  0018F4  C0A7  F062         	movff	log@x+2,frexp@value+2
  8562  0018F8  ECF3  F013         	call	_frexp	;wreg free
  8563  0018FC  C060  F072         	movff	?_frexp,___ftmul@f1
  8564  001900  C061  F073         	movff	?_frexp+1,___ftmul@f1+1
  8565  001904  C062  F074         	movff	?_frexp+2,___ftmul@f1+2
  8566  001908  EC4C  F00D         	call	___ftmul	;wreg free
  8567  00190C  C072  F08F         	movff	?___ftmul,___ftadd@f1
  8568  001910  C073  F090         	movff	?___ftmul+1,___ftadd@f1+1
  8569  001914  C074  F091         	movff	?___ftmul+2,___ftadd@f1+2
  8570  001918  6B92               	clrf	___ftadd@f2& (0+255),b
  8571  00191A  0E80               	movlw	128
  8572  00191C  6F93               	movwf	(___ftadd@f2+1)& (0+255),b
  8573  00191E  0EBF               	movlw	191
  8574  001920  6F94               	movwf	(___ftadd@f2+2)& (0+255),b
  8575  001922  ECD3  F008         	call	___ftadd	;wreg free
  8576  001926  C08F  F0A5         	movff	?___ftadd,log@x
  8577  00192A  C090  F0A6         	movff	?___ftadd+1,log@x+1
  8578  00192E  C091  F0A7         	movff	?___ftadd+2,log@x+2
  8579                           
  8580                           ; BSR set to: 0
  8581  001932  07A8               	decf	log@exponent& (0+255),f,b
  8582  001934  A0D8               	btfss	status,0,c
  8583  001936  07A9               	decf	(log@exponent+1)& (0+255),f,b
  8584                           
  8585                           ; BSR set to: 0
  8586  001938  C0A5  F09B         	movff	log@x,eval_poly@x
  8587  00193C  C0A6  F09C         	movff	log@x+1,eval_poly@x+1
  8588  001940  C0A7  F09D         	movff	log@x+2,eval_poly@x+2
  8589  001944  0E1F               	movlw	low log@coeff
  8590  001946  6F9E               	movwf	eval_poly@d& (0+255),b
  8591  001948  6BA0               	clrf	(eval_poly@n+1)& (0+255),b
  8592  00194A  0E08               	movlw	8
  8593  00194C  6F9F               	movwf	eval_poly@n& (0+255),b
  8594  00194E  EC52  F010         	call	_eval_poly	;wreg free
  8595  001952  C09B  F0A5         	movff	?_eval_poly,log@x
  8596  001956  C09C  F0A6         	movff	?_eval_poly+1,log@x+1
  8597  00195A  C09D  F0A7         	movff	?_eval_poly+2,log@x+2
  8598                           
  8599                           ; BSR set to: 0
  8600  00195E  0E72               	movlw	114
  8601  001960  6F75               	movwf	___ftmul@f2& (0+255),b
  8602  001962  0E31               	movlw	49
  8603  001964  6F76               	movwf	(___ftmul@f2+1)& (0+255),b
  8604  001966  0E3F               	movlw	63
  8605  001968  6F77               	movwf	(___ftmul@f2+2)& (0+255),b
  8606  00196A  C0A8  F068         	movff	log@exponent,___awtoft@c
  8607  00196E  C0A9  F069         	movff	log@exponent+1,___awtoft@c+1
  8608  001972  ECA6  F017         	call	___awtoft	;wreg free
  8609  001976  C068  F072         	movff	?___awtoft,___ftmul@f1
  8610  00197A  C069  F073         	movff	?___awtoft+1,___ftmul@f1+1
  8611  00197E  C06A  F074         	movff	?___awtoft+2,___ftmul@f1+2
  8612  001982  EC4C  F00D         	call	___ftmul	;wreg free
  8613  001986  C072  F08F         	movff	?___ftmul,___ftadd@f1
  8614  00198A  C073  F090         	movff	?___ftmul+1,___ftadd@f1+1
  8615  00198E  C074  F091         	movff	?___ftmul+2,___ftadd@f1+2
  8616  001992  C0A5  F092         	movff	log@x,___ftadd@f2
  8617  001996  C0A6  F093         	movff	log@x+1,___ftadd@f2+1
  8618  00199A  C0A7  F094         	movff	log@x+2,___ftadd@f2+2
  8619  00199E  ECD3  F008         	call	___ftadd	;wreg free
  8620  0019A2  C08F  F0A5         	movff	?___ftadd,?_log
  8621  0019A6  C090  F0A6         	movff	?___ftadd+1,?_log+1
  8622  0019AA  C091  F0A7         	movff	?___ftadd+2,?_log+2
  8623                           
  8624                           ; BSR set to: 0
  8625  0019AE  0012               	return		;funcret
  8626  0019B0                     __end_of_log:
  8627                           	opt stack 0
  8628                           tblptru	equ	0xFF8
  8629                           tblptrh	equ	0xFF7
  8630                           tblptrl	equ	0xFF6
  8631                           tablat	equ	0xFF5
  8632                           prodh	equ	0xFF4
  8633                           prodl	equ	0xFF3
  8634                           intcon	equ	0xFF2
  8635                           postinc0	equ	0xFEE
  8636                           plusw0	equ	0xFEB
  8637                           wreg	equ	0xFE8
  8638                           indf1	equ	0xFE7
  8639                           postinc1	equ	0xFE6
  8640                           postdec1	equ	0xFE5
  8641                           plusw1	equ	0xFE3
  8642                           fsr1h	equ	0xFE2
  8643                           fsr1l	equ	0xFE1
  8644                           indf2	equ	0xFDF
  8645                           postinc2	equ	0xFDE
  8646                           postdec2	equ	0xFDD
  8647                           plusw2	equ	0xFDB
  8648                           fsr2h	equ	0xFDA
  8649                           fsr2l	equ	0xFD9
  8650                           status	equ	0xFD8
  8651                           
  8652 ;; *************** function _exp *****************
  8653 ;; Defined at:
  8654 ;;		line 12 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\exp.c"
  8655 ;; Parameters:    Size  Location     Type
  8656 ;;  x               3   76[BANK0 ] int 
  8657 ;; Auto vars:     Size  Location     Type
  8658 ;;  exponent        2   82[BANK0 ] int 
  8659 ;;  sign            1   84[BANK0 ] unsigned char 
  8660 ;; Return value:  Size  Location     Type
  8661 ;;                  3   76[BANK0 ] unsigned char 
  8662 ;; Registers used:
  8663 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8664 ;; Tracked objects:
  8665 ;;		On entry : 3F/0
  8666 ;;		On exit  : 3F/0
  8667 ;;		Unchanged: 0/0
  8668 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8669 ;;      Params:         0       3       0       0       0       0       0       0       0
  8670 ;;      Locals:         0       6       0       0       0       0       0       0       0
  8671 ;;      Temps:          0       0       0       0       0       0       0       0       0
  8672 ;;      Totals:         0       9       0       0       0       0       0       0       0
  8673 ;;Total ram usage:        9 bytes
  8674 ;; Hardware stack levels used:    1
  8675 ;; Hardware stack levels required when called:    9
  8676 ;; This function calls:
  8677 ;;		___awtoft
  8678 ;;		___ftdiv
  8679 ;;		___ftge
  8680 ;;		___ftmul
  8681 ;;		___ftneg
  8682 ;;		___ftsub
  8683 ;;		___fttol
  8684 ;;		_eval_poly
  8685 ;;		_floor
  8686 ;;		_ldexp
  8687 ;; This function is called by:
  8688 ;;		_pow
  8689 ;; This function uses a non-reentrant model
  8690 ;;
  8691                           
  8692                           	psect	text51
  8693  000E58                     __ptext51:
  8694                           	opt stack 0
  8695  000E58                     _exp:
  8696                           	opt stack 18
  8697                           
  8698                           ; BSR set to: 0
  8699                           
  8700                           ; BSR set to: 0
  8701                           ;incstack = 0
  8702  000E58  51AC               	movf	exp@x& (0+255),w,b
  8703  000E5A  11AD               	iorwf	(exp@x+1)& (0+255),w,b
  8704  000E5C  11AE               	iorwf	(exp@x+2)& (0+255),w,b
  8705  000E5E  E106               	bnz	l3676
  8706                           
  8707                           ; BSR set to: 0
  8708  000E60  6BAC               	clrf	?_exp& (0+255),b
  8709  000E62  0E80               	movlw	128
  8710  000E64  6FAD               	movwf	(?_exp+1)& (0+255),b
  8711  000E66  0E3F               	movlw	63
  8712  000E68  6FAE               	movwf	(?_exp+2)& (0+255),b
  8713  000E6A  0C3F               	retlw	63
  8714  000E6C                     l3676:
  8715                           
  8716                           ; BSR set to: 0
  8717  000E6C  0E72               	movlw	114
  8718  000E6E  6F60               	movwf	___ftge@ff1& (0+255),b
  8719  000E70  0E31               	movlw	49
  8720  000E72  6F61               	movwf	(___ftge@ff1+1)& (0+255),b
  8721  000E74  0E44               	movlw	68
  8722  000E76  6F62               	movwf	(___ftge@ff1+2)& (0+255),b
  8723  000E78  C0AC  F063         	movff	exp@x,___ftge@ff2
  8724  000E7C  C0AD  F064         	movff	exp@x+1,___ftge@ff2+1
  8725  000E80  C0AE  F065         	movff	exp@x+2,___ftge@ff2+2
  8726  000E84  EC25  F015         	call	___ftge	;wreg free
  8727  000E88  E205               	bc	l3682
  8728                           
  8729                           ; BSR set to: 0
  8730  000E8A  69AC               	setf	?_exp& (0+255),b
  8731  000E8C  0E7F               	movlw	127
  8732  000E8E  6FAD               	movwf	(?_exp+1)& (0+255),b
  8733  000E90  6FAE               	movwf	(?_exp+2)& (0+255),b
  8734  000E92  0C7F               	retlw	127
  8735  000E94                     l3682:
  8736                           
  8737                           ; BSR set to: 0
  8738  000E94  C0AC  F060         	movff	exp@x,___ftge@ff1
  8739  000E98  C0AD  F061         	movff	exp@x+1,___ftge@ff1+1
  8740  000E9C  C0AE  F062         	movff	exp@x+2,___ftge@ff1+2
  8741  000EA0  0E49               	movlw	73
  8742  000EA2  6F63               	movwf	___ftge@ff2& (0+255),b
  8743  000EA4  0E3A               	movlw	58
  8744  000EA6  6F64               	movwf	(___ftge@ff2+1)& (0+255),b
  8745  000EA8  0EC4               	movlw	196
  8746  000EAA  6F65               	movwf	(___ftge@ff2+2)& (0+255),b
  8747  000EAC  EC25  F015         	call	___ftge	;wreg free
  8748  000EB0  E204               	bc	l3686
  8749                           
  8750                           ; BSR set to: 0
  8751  000EB2  6BAC               	clrf	?_exp& (0+255),b
  8752  000EB4  6BAD               	clrf	(?_exp+1)& (0+255),b
  8753  000EB6  6BAE               	clrf	(?_exp+2)& (0+255),b
  8754  000EB8  0012               	return	
  8755  000EBA                     l3686:
  8756  000EBA  0E01               	movlw	1
  8757                           
  8758                           ; BSR set to: 0
  8759  000EBC  AFAE               	btfss	(exp@x+2)& (0+255),7,b
  8760  000EBE  0E00               	movlw	0
  8761  000EC0  6FB4               	movwf	exp@sign& (0+255),b
  8762                           
  8763                           ; BSR set to: 0
  8764  000EC2  51B4               	movf	exp@sign& (0+255),w,b
  8765  000EC4  E00E               	bz	l3692
  8766                           
  8767                           ; BSR set to: 0
  8768  000EC6  C0AC  F060         	movff	exp@x,___ftneg@f1
  8769  000ECA  C0AD  F061         	movff	exp@x+1,___ftneg@f1+1
  8770  000ECE  C0AE  F062         	movff	exp@x+2,___ftneg@f1+2
  8771  000ED2  EC94  F018         	call	___ftneg	;wreg free
  8772  000ED6  C060  F0AC         	movff	?___ftneg,exp@x
  8773  000EDA  C061  F0AD         	movff	?___ftneg+1,exp@x+1
  8774  000EDE  C062  F0AE         	movff	?___ftneg+2,exp@x+2
  8775  000EE2                     l3692:
  8776                           
  8777                           ; BSR set to: 0
  8778  000EE2  C0AC  F072         	movff	exp@x,___ftmul@f1
  8779  000EE6  C0AD  F073         	movff	exp@x+1,___ftmul@f1+1
  8780  000EEA  C0AE  F074         	movff	exp@x+2,___ftmul@f1+2
  8781  000EEE  0EAA               	movlw	170
  8782  000EF0  6F75               	movwf	___ftmul@f2& (0+255),b
  8783  000EF2  0EB8               	movlw	184
  8784  000EF4  6F76               	movwf	(___ftmul@f2+1)& (0+255),b
  8785  000EF6  0E3F               	movlw	63
  8786  000EF8  6F77               	movwf	(___ftmul@f2+2)& (0+255),b
  8787  000EFA  EC4C  F00D         	call	___ftmul	;wreg free
  8788  000EFE  C072  F0AC         	movff	?___ftmul,exp@x
  8789  000F02  C073  F0AD         	movff	?___ftmul+1,exp@x+1
  8790  000F06  C074  F0AE         	movff	?___ftmul+2,exp@x+2
  8791                           
  8792                           ; BSR set to: 0
  8793  000F0A  C0AC  F09E         	movff	exp@x,floor@x
  8794  000F0E  C0AD  F09F         	movff	exp@x+1,floor@x+1
  8795  000F12  C0AE  F0A0         	movff	exp@x+2,floor@x+2
  8796  000F16  EC20  F00E         	call	_floor	;wreg free
  8797  000F1A  C09E  F0AF         	movff	?_floor,_exp$2168
  8798  000F1E  C09F  F0B0         	movff	?_floor+1,_exp$2168+1
  8799  000F22  C0A0  F0B1         	movff	?_floor+2,_exp$2168+2
  8800                           
  8801                           ; BSR set to: 0
  8802  000F26  C0AF  F08F         	movff	_exp$2168,___fttol@f1
  8803  000F2A  C0B0  F090         	movff	_exp$2168+1,___fttol@f1+1
  8804  000F2E  C0B1  F091         	movff	_exp$2168+2,___fttol@f1+2
  8805  000F32  ECEB  F00E         	call	___fttol	;wreg free
  8806  000F36  C08F  F0B2         	movff	?___fttol,exp@exponent
  8807  000F3A  C090  F0B3         	movff	?___fttol+1,exp@exponent+1
  8808                           
  8809                           ; BSR set to: 0
  8810  000F3E  C0AC  F09B         	movff	exp@x,___ftsub@f1
  8811  000F42  C0AD  F09C         	movff	exp@x+1,___ftsub@f1+1
  8812  000F46  C0AE  F09D         	movff	exp@x+2,___ftsub@f1+2
  8813  000F4A  C0B2  F068         	movff	exp@exponent,___awtoft@c
  8814  000F4E  C0B3  F069         	movff	exp@exponent+1,___awtoft@c+1
  8815  000F52  ECA6  F017         	call	___awtoft	;wreg free
  8816  000F56  C068  F09E         	movff	?___awtoft,___ftsub@f2
  8817  000F5A  C069  F09F         	movff	?___awtoft+1,___ftsub@f2+1
  8818  000F5E  C06A  F0A0         	movff	?___awtoft+2,___ftsub@f2+2
  8819  000F62  EC8B  F017         	call	___ftsub	;wreg free
  8820  000F66  C09B  F0AC         	movff	?___ftsub,exp@x
  8821  000F6A  C09C  F0AD         	movff	?___ftsub+1,exp@x+1
  8822  000F6E  C09D  F0AE         	movff	?___ftsub+2,exp@x+2
  8823                           
  8824                           ; BSR set to: 0
  8825  000F72  C0AC  F09B         	movff	exp@x,eval_poly@x
  8826  000F76  C0AD  F09C         	movff	exp@x+1,eval_poly@x+1
  8827  000F7A  C0AE  F09D         	movff	exp@x+2,eval_poly@x+2
  8828  000F7E  0E01               	movlw	low exp@coeff
  8829  000F80  6F9E               	movwf	eval_poly@d& (0+255),b
  8830  000F82  6BA0               	clrf	(eval_poly@n+1)& (0+255),b
  8831  000F84  0E09               	movlw	9
  8832  000F86  6F9F               	movwf	eval_poly@n& (0+255),b
  8833  000F88  EC52  F010         	call	_eval_poly	;wreg free
  8834  000F8C  C09B  F0A5         	movff	?_eval_poly,ldexp@value
  8835  000F90  C09C  F0A6         	movff	?_eval_poly+1,ldexp@value+1
  8836  000F94  C09D  F0A7         	movff	?_eval_poly+2,ldexp@value+2
  8837  000F98  C0B2  F0A8         	movff	exp@exponent,ldexp@newexp
  8838  000F9C  C0B3  F0A9         	movff	exp@exponent+1,ldexp@newexp+1
  8839  000FA0  ECEB  F010         	call	_ldexp	;wreg free
  8840  000FA4  C0A5  F0AC         	movff	?_ldexp,exp@x
  8841  000FA8  C0A6  F0AD         	movff	?_ldexp+1,exp@x+1
  8842  000FAC  C0A7  F0AE         	movff	?_ldexp+2,exp@x+2
  8843                           
  8844                           ; BSR set to: 0
  8845  000FB0  51B4               	movf	exp@sign& (0+255),w,b
  8846  000FB2  E020               	bz	l1310
  8847                           
  8848                           ; BSR set to: 0
  8849  000FB4  29AC               	incf	exp@x& (0+255),w,b
  8850  000FB6  E10A               	bnz	l3708
  8851  000FB8  0E7F               	movlw	127
  8852  000FBA  19AD               	xorwf	(exp@x+1)& (0+255),w,b
  8853  000FBC  E107               	bnz	l3708
  8854  000FBE  0E7F               	movlw	127
  8855  000FC0  19AE               	xorwf	(exp@x+2)& (0+255),w,b
  8856  000FC2  E104               	bnz	l3708
  8857                           
  8858                           ; BSR set to: 0
  8859  000FC4  6BAC               	clrf	?_exp& (0+255),b
  8860  000FC6  6BAD               	clrf	(?_exp+1)& (0+255),b
  8861  000FC8  6BAE               	clrf	(?_exp+2)& (0+255),b
  8862  000FCA  0012               	return	
  8863  000FCC                     l3708:
  8864                           
  8865                           ; BSR set to: 0
  8866  000FCC  6B80               	clrf	___ftdiv@f1& (0+255),b
  8867  000FCE  0E80               	movlw	128
  8868  000FD0  6F81               	movwf	(___ftdiv@f1+1)& (0+255),b
  8869  000FD2  0E3F               	movlw	63
  8870  000FD4  6F82               	movwf	(___ftdiv@f1+2)& (0+255),b
  8871  000FD6  C0AC  F083         	movff	exp@x,___ftdiv@f2
  8872  000FDA  C0AD  F084         	movff	exp@x+1,___ftdiv@f2+1
  8873  000FDE  C0AE  F085         	movff	exp@x+2,___ftdiv@f2+2
  8874  000FE2  EC48  F00F         	call	___ftdiv	;wreg free
  8875  000FE6  C080  F0AC         	movff	?___ftdiv,?_exp
  8876  000FEA  C081  F0AD         	movff	?___ftdiv+1,?_exp+1
  8877  000FEE  C082  F0AE         	movff	?___ftdiv+2,?_exp+2
  8878  000FF2  0012               	return	
  8879  000FF4                     l1310:
  8880                           
  8881                           ; BSR set to: 0
  8882  000FF4  C0AC  F0AC         	movff	exp@x,?_exp
  8883  000FF8  C0AD  F0AD         	movff	exp@x+1,?_exp+1
  8884  000FFC  C0AE  F0AE         	movff	exp@x+2,?_exp+2
  8885                           
  8886                           ; BSR set to: 0
  8887  001000  0012               	return		;funcret
  8888  001002                     __end_of_exp:
  8889                           	opt stack 0
  8890                           tblptru	equ	0xFF8
  8891                           tblptrh	equ	0xFF7
  8892                           tblptrl	equ	0xFF6
  8893                           tablat	equ	0xFF5
  8894                           prodh	equ	0xFF4
  8895                           prodl	equ	0xFF3
  8896                           intcon	equ	0xFF2
  8897                           postinc0	equ	0xFEE
  8898                           plusw0	equ	0xFEB
  8899                           wreg	equ	0xFE8
  8900                           indf1	equ	0xFE7
  8901                           postinc1	equ	0xFE6
  8902                           postdec1	equ	0xFE5
  8903                           plusw1	equ	0xFE3
  8904                           fsr1h	equ	0xFE2
  8905                           fsr1l	equ	0xFE1
  8906                           indf2	equ	0xFDF
  8907                           postinc2	equ	0xFDE
  8908                           postdec2	equ	0xFDD
  8909                           plusw2	equ	0xFDB
  8910                           fsr2h	equ	0xFDA
  8911                           fsr2l	equ	0xFD9
  8912                           status	equ	0xFD8
  8913                           
  8914 ;; *************** function _ldexp *****************
  8915 ;; Defined at:
  8916 ;;		line 277 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\frexp.c"
  8917 ;; Parameters:    Size  Location     Type
  8918 ;;  value           3   69[BANK0 ] unsigned char 
  8919 ;;  newexp          2   72[BANK0 ] int 
  8920 ;; Auto vars:     Size  Location     Type
  8921 ;;		None
  8922 ;; Return value:  Size  Location     Type
  8923 ;;                  3   69[BANK0 ] int 
  8924 ;; Registers used:
  8925 ;;		wreg, status,2, status,0
  8926 ;; Tracked objects:
  8927 ;;		On entry : 3F/0
  8928 ;;		On exit  : 3F/0
  8929 ;;		Unchanged: 0/0
  8930 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8931 ;;      Params:         0       5       0       0       0       0       0       0       0
  8932 ;;      Locals:         0       0       0       0       0       0       0       0       0
  8933 ;;      Temps:          0       2       0       0       0       0       0       0       0
  8934 ;;      Totals:         0       7       0       0       0       0       0       0       0
  8935 ;;Total ram usage:        7 bytes
  8936 ;; Hardware stack levels used:    1
  8937 ;; Hardware stack levels required when called:    6
  8938 ;; This function calls:
  8939 ;;		Nothing
  8940 ;; This function is called by:
  8941 ;;		_exp
  8942 ;; This function uses a non-reentrant model
  8943 ;;
  8944                           
  8945                           	psect	text52
  8946  0021D6                     __ptext52:
  8947                           	opt stack 0
  8948  0021D6                     _ldexp:
  8949                           	opt stack 20
  8950                           
  8951                           ; BSR set to: 0
  8952                           
  8953                           ; BSR set to: 0
  8954                           ;incstack = 0
  8955  0021D6  51A5               	movf	ldexp@value& (0+255),w,b
  8956  0021D8  11A6               	iorwf	(ldexp@value+1)& (0+255),w,b
  8957  0021DA  11A7               	iorwf	(ldexp@value+2)& (0+255),w,b
  8958  0021DC  E104               	bnz	l3538
  8959                           
  8960                           ; BSR set to: 0
  8961  0021DE  6BA5               	clrf	?_ldexp& (0+255),b
  8962  0021E0  6BA6               	clrf	(?_ldexp+1)& (0+255),b
  8963  0021E2  6BA7               	clrf	(?_ldexp+2)& (0+255),b
  8964  0021E4  0012               	return	
  8965  0021E6                     l3538:
  8966                           
  8967                           ; BSR set to: 0
  8968  0021E6  51A7               	movf	(ldexp@value+2)& (0+255),w,b
  8969  0021E8  0B7F               	andlw	127
  8970  0021EA  6FAA               	movwf	??_ldexp& (0+255),b
  8971  0021EC  6BAB               	clrf	(??_ldexp+1)& (0+255),b
  8972  0021EE  90D8               	bcf	status,0,c
  8973  0021F0  37AA               	rlcf	??_ldexp& (0+255),f,b
  8974  0021F2  37AB               	rlcf	(??_ldexp+1)& (0+255),f,b
  8975  0021F4  51AA               	movf	??_ldexp& (0+255),w,b
  8976  0021F6  27A8               	addwf	ldexp@newexp& (0+255),f,b
  8977  0021F8  51AB               	movf	(??_ldexp+1)& (0+255),w,b
  8978  0021FA  23A9               	addwfc	(ldexp@newexp+1)& (0+255),f,b
  8979  0021FC  0E01               	movlw	1
  8980  0021FE  AFA6               	btfss	(ldexp@value+1)& (0+255),7,b
  8981  002200  0E00               	movlw	0
  8982  002202  27A8               	addwf	ldexp@newexp& (0+255),f,b
  8983  002204  0E00               	movlw	0
  8984  002206  23A9               	addwfc	(ldexp@newexp+1)& (0+255),f,b
  8985  002208  AFA9               	btfss	(ldexp@newexp+1)& (0+255),7,b
  8986  00220A  D004               	goto	l3544
  8987                           
  8988                           ; BSR set to: 0
  8989  00220C  6BA5               	clrf	?_ldexp& (0+255),b
  8990  00220E  6BA6               	clrf	(?_ldexp+1)& (0+255),b
  8991  002210  6BA7               	clrf	(?_ldexp+2)& (0+255),b
  8992  002212  0012               	return	
  8993  002214                     l3544:
  8994                           
  8995                           ; BSR set to: 0
  8996  002214  BFA9               	btfsc	(ldexp@newexp+1)& (0+255),7,b
  8997  002216  D00E               	goto	l3558
  8998  002218  05A9               	decf	(ldexp@newexp+1)& (0+255),w,b
  8999  00221A  E30C               	bnc	l3558
  9000                           
  9001                           ; BSR set to: 0
  9002  00221C  AFA7               	btfss	(ldexp@value+2)& (0+255),7,b
  9003  00221E  D005               	goto	l3554
  9004                           
  9005                           ; BSR set to: 0
  9006  002220  69A5               	setf	?_ldexp& (0+255),b
  9007  002222  0E7F               	movlw	127
  9008  002224  6FA6               	movwf	(?_ldexp+1)& (0+255),b
  9009  002226  69A7               	setf	(?_ldexp+2)& (0+255),b
  9010  002228  0CFF               	retlw	255
  9011  00222A                     l3554:
  9012                           
  9013                           ; BSR set to: 0
  9014  00222A  69A5               	setf	?_ldexp& (0+255),b
  9015  00222C  0E7F               	movlw	127
  9016  00222E  6FA6               	movwf	(?_ldexp+1)& (0+255),b
  9017  002230  6FA7               	movwf	(?_ldexp+2)& (0+255),b
  9018  002232  0C7F               	retlw	127
  9019  002234                     l3558:
  9020                           
  9021                           ; BSR set to: 0
  9022  002234  35A9               	rlcf	(ldexp@newexp+1)& (0+255),w,b
  9023  002236  31A9               	rrcf	(ldexp@newexp+1)& (0+255),w,b
  9024  002238  6FAB               	movwf	(??_ldexp+1)& (0+255),b
  9025  00223A  31A8               	rrcf	ldexp@newexp& (0+255),w,b
  9026  00223C  6FAA               	movwf	??_ldexp& (0+255),b
  9027  00223E  19A7               	xorwf	(ldexp@value+2)& (0+255),w,b
  9028  002240  0B80               	andlw	-128
  9029  002242  19AA               	xorwf	??_ldexp& (0+255),w,b
  9030  002244  6FA7               	movwf	(ldexp@value+2)& (0+255),b
  9031  002246  C0A8  F0AA         	movff	ldexp@newexp,??_ldexp
  9032  00224A  0E01               	movlw	1
  9033  00224C  17AA               	andwf	??_ldexp& (0+255),f,b
  9034  00224E  33AA               	rrcf	??_ldexp& (0+255),f,b
  9035  002250  33AA               	rrcf	??_ldexp& (0+255),f,b
  9036  002252  51A6               	movf	(ldexp@value+1)& (0+255),w,b
  9037  002254  19AA               	xorwf	??_ldexp& (0+255),w,b
  9038  002256  0B7F               	andlw	-129
  9039  002258  19AA               	xorwf	??_ldexp& (0+255),w,b
  9040  00225A  6FA6               	movwf	(ldexp@value+1)& (0+255),b
  9041                           
  9042                           ; BSR set to: 0
  9043  00225C  C0A5  F0A5         	movff	ldexp@value,?_ldexp
  9044  002260  C0A6  F0A6         	movff	ldexp@value+1,?_ldexp+1
  9045  002264  C0A7  F0A7         	movff	ldexp@value+2,?_ldexp+2
  9046                           
  9047                           ; BSR set to: 0
  9048  002268  0012               	return		;funcret
  9049  00226A                     __end_of_ldexp:
  9050                           	opt stack 0
  9051                           tblptru	equ	0xFF8
  9052                           tblptrh	equ	0xFF7
  9053                           tblptrl	equ	0xFF6
  9054                           tablat	equ	0xFF5
  9055                           prodh	equ	0xFF4
  9056                           prodl	equ	0xFF3
  9057                           intcon	equ	0xFF2
  9058                           postinc0	equ	0xFEE
  9059                           plusw0	equ	0xFEB
  9060                           wreg	equ	0xFE8
  9061                           indf1	equ	0xFE7
  9062                           postinc1	equ	0xFE6
  9063                           postdec1	equ	0xFE5
  9064                           plusw1	equ	0xFE3
  9065                           fsr1h	equ	0xFE2
  9066                           fsr1l	equ	0xFE1
  9067                           indf2	equ	0xFDF
  9068                           postinc2	equ	0xFDE
  9069                           postdec2	equ	0xFDD
  9070                           plusw2	equ	0xFDB
  9071                           fsr2h	equ	0xFDA
  9072                           fsr2l	equ	0xFD9
  9073                           status	equ	0xFD8
  9074                           
  9075 ;; *************** function _floor *****************
  9076 ;; Defined at:
  9077 ;;		line 13 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\floor.c"
  9078 ;; Parameters:    Size  Location     Type
  9079 ;;  x               3   62[BANK0 ] int 
  9080 ;; Auto vars:     Size  Location     Type
  9081 ;;  i               3   65[BANK0 ] int 
  9082 ;;  expon           2   68[BANK0 ] int 
  9083 ;; Return value:  Size  Location     Type
  9084 ;;                  3   62[BANK0 ] int 
  9085 ;; Registers used:
  9086 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  9087 ;; Tracked objects:
  9088 ;;		On entry : 3F/0
  9089 ;;		On exit  : 3F/0
  9090 ;;		Unchanged: 0/0
  9091 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  9092 ;;      Params:         0       3       0       0       0       0       0       0       0
  9093 ;;      Locals:         0       5       0       0       0       0       0       0       0
  9094 ;;      Temps:          0       0       0       0       0       0       0       0       0
  9095 ;;      Totals:         0       8       0       0       0       0       0       0       0
  9096 ;;Total ram usage:        8 bytes
  9097 ;; Hardware stack levels used:    1
  9098 ;; Hardware stack levels required when called:    8
  9099 ;; This function calls:
  9100 ;;		___altoft
  9101 ;;		___ftadd
  9102 ;;		___ftge
  9103 ;;		___fttol
  9104 ;;		_frexp
  9105 ;; This function is called by:
  9106 ;;		_exp
  9107 ;; This function uses a non-reentrant model
  9108 ;;
  9109                           
  9110                           	psect	text53
  9111  001C40                     __ptext53:
  9112                           	opt stack 0
  9113  001C40                     _floor:
  9114                           	opt stack 18
  9115                           
  9116                           ; BSR set to: 0
  9117                           
  9118                           ; BSR set to: 0
  9119                           ;incstack = 0
  9120  001C40  C09E  F060         	movff	floor@x,frexp@value
  9121  001C44  C09F  F061         	movff	floor@x+1,frexp@value+1
  9122  001C48  C0A0  F062         	movff	floor@x+2,frexp@value+2
  9123  001C4C  0EA4               	movlw	low floor@expon
  9124  001C4E  6F63               	movwf	frexp@eptr& (0+255),b
  9125  001C50  ECF3  F013         	call	_frexp	;wreg free
  9126                           
  9127                           ; BSR set to: 0
  9128  001C54  AFA5               	btfss	(floor@expon+1)& (0+255),7,b
  9129  001C56  D00C               	goto	l3518
  9130                           
  9131                           ; BSR set to: 0
  9132  001C58  AFA0               	btfss	(floor@x+2)& (0+255),7,b
  9133  001C5A  D006               	goto	l1317
  9134                           
  9135                           ; BSR set to: 0
  9136  001C5C  6B9E               	clrf	?_floor& (0+255),b
  9137  001C5E  0E80               	movlw	128
  9138  001C60  6F9F               	movwf	(?_floor+1)& (0+255),b
  9139  001C62  0EBF               	movlw	191
  9140  001C64  6FA0               	movwf	(?_floor+2)& (0+255),b
  9141  001C66  0CBF               	retlw	191
  9142  001C68                     l1317:
  9143                           
  9144                           ; BSR set to: 0
  9145  001C68  6B9E               	clrf	?_floor& (0+255),b
  9146  001C6A  6B9F               	clrf	(?_floor+1)& (0+255),b
  9147  001C6C  6BA0               	clrf	(?_floor+2)& (0+255),b
  9148  001C6E  0012               	return	
  9149  001C70                     l3518:
  9150                           
  9151                           ; BSR set to: 0
  9152  001C70  51A5               	movf	(floor@expon+1)& (0+255),w,b
  9153  001C72  E103               	bnz	u3410
  9154  001C74  0E15               	movlw	21
  9155  001C76  5DA4               	subwf	floor@expon& (0+255),w,b
  9156  001C78  E307               	bnc	l3522
  9157  001C7A                     u3410:
  9158                           
  9159                           ; BSR set to: 0
  9160  001C7A  C09E  F09E         	movff	floor@x,?_floor
  9161  001C7E  C09F  F09F         	movff	floor@x+1,?_floor+1
  9162  001C82  C0A0  F0A0         	movff	floor@x+2,?_floor+2
  9163  001C86  0012               	return	
  9164  001C88                     l3522:
  9165                           
  9166                           ; BSR set to: 0
  9167  001C88  C09E  F08F         	movff	floor@x,___fttol@f1
  9168  001C8C  C09F  F090         	movff	floor@x+1,___fttol@f1+1
  9169  001C90  C0A0  F091         	movff	floor@x+2,___fttol@f1+2
  9170  001C94  ECEB  F00E         	call	___fttol	;wreg free
  9171  001C98  C08F  F068         	movff	?___fttol,___altoft@c
  9172  001C9C  C090  F069         	movff	?___fttol+1,___altoft@c+1
  9173  001CA0  C091  F06A         	movff	?___fttol+2,___altoft@c+2
  9174  001CA4  C092  F06B         	movff	?___fttol+3,___altoft@c+3
  9175  001CA8  EC93  F014         	call	___altoft	;wreg free
  9176  001CAC  C068  F0A1         	movff	?___altoft,floor@i
  9177  001CB0  C069  F0A2         	movff	?___altoft+1,floor@i+1
  9178  001CB4  C06A  F0A3         	movff	?___altoft+2,floor@i+2
  9179  001CB8  C09E  F060         	movff	floor@x,___ftge@ff1
  9180  001CBC  C09F  F061         	movff	floor@x+1,___ftge@ff1+1
  9181  001CC0  C0A0  F062         	movff	floor@x+2,___ftge@ff1+2
  9182  001CC4  C0A1  F063         	movff	floor@i,___ftge@ff2
  9183  001CC8  C0A2  F064         	movff	floor@i+1,___ftge@ff2+1
  9184  001CCC  C0A3  F065         	movff	floor@i+2,___ftge@ff2+2
  9185  001CD0  EC25  F015         	call	___ftge	;wreg free
  9186  001CD4  E214               	bc	l1320
  9187                           
  9188                           ; BSR set to: 0
  9189  001CD6  C0A1  F08F         	movff	floor@i,___ftadd@f1
  9190  001CDA  C0A2  F090         	movff	floor@i+1,___ftadd@f1+1
  9191  001CDE  C0A3  F091         	movff	floor@i+2,___ftadd@f1+2
  9192  001CE2  6B92               	clrf	___ftadd@f2& (0+255),b
  9193  001CE4  0E80               	movlw	128
  9194  001CE6  6F93               	movwf	(___ftadd@f2+1)& (0+255),b
  9195  001CE8  0EBF               	movlw	191
  9196  001CEA  6F94               	movwf	(___ftadd@f2+2)& (0+255),b
  9197  001CEC  ECD3  F008         	call	___ftadd	;wreg free
  9198  001CF0  C08F  F09E         	movff	?___ftadd,?_floor
  9199  001CF4  C090  F09F         	movff	?___ftadd+1,?_floor+1
  9200  001CF8  C091  F0A0         	movff	?___ftadd+2,?_floor+2
  9201  001CFC  0012               	return	
  9202  001CFE                     l1320:
  9203                           
  9204                           ; BSR set to: 0
  9205  001CFE  C0A1  F09E         	movff	floor@i,?_floor
  9206  001D02  C0A2  F09F         	movff	floor@i+1,?_floor+1
  9207  001D06  C0A3  F0A0         	movff	floor@i+2,?_floor+2
  9208                           
  9209                           ; BSR set to: 0
  9210  001D0A  0012               	return		;funcret
  9211  001D0C                     __end_of_floor:
  9212                           	opt stack 0
  9213                           tblptru	equ	0xFF8
  9214                           tblptrh	equ	0xFF7
  9215                           tblptrl	equ	0xFF6
  9216                           tablat	equ	0xFF5
  9217                           prodh	equ	0xFF4
  9218                           prodl	equ	0xFF3
  9219                           intcon	equ	0xFF2
  9220                           postinc0	equ	0xFEE
  9221                           plusw0	equ	0xFEB
  9222                           wreg	equ	0xFE8
  9223                           indf1	equ	0xFE7
  9224                           postinc1	equ	0xFE6
  9225                           postdec1	equ	0xFE5
  9226                           plusw1	equ	0xFE3
  9227                           fsr1h	equ	0xFE2
  9228                           fsr1l	equ	0xFE1
  9229                           indf2	equ	0xFDF
  9230                           postinc2	equ	0xFDE
  9231                           postdec2	equ	0xFDD
  9232                           plusw2	equ	0xFDB
  9233                           fsr2h	equ	0xFDA
  9234                           fsr2l	equ	0xFD9
  9235                           status	equ	0xFD8
  9236                           
  9237 ;; *************** function _frexp *****************
  9238 ;; Defined at:
  9239 ;;		line 254 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\frexp.c"
  9240 ;; Parameters:    Size  Location     Type
  9241 ;;  value           3    0[BANK0 ] int 
  9242 ;;  eptr            1    3[BANK0 ] PTR int 
  9243 ;;		 -> log@exponent(2), floor@expon(2), 
  9244 ;; Auto vars:     Size  Location     Type
  9245 ;;		None
  9246 ;; Return value:  Size  Location     Type
  9247 ;;                  3    0[BANK0 ] PTR int 
  9248 ;; Registers used:
  9249 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  9250 ;; Tracked objects:
  9251 ;;		On entry : 3F/0
  9252 ;;		On exit  : 3F/0
  9253 ;;		Unchanged: 0/0
  9254 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  9255 ;;      Params:         0       4       0       0       0       0       0       0       0
  9256 ;;      Locals:         0       0       0       0       0       0       0       0       0
  9257 ;;      Temps:          0       2       0       0       0       0       0       0       0
  9258 ;;      Totals:         0       6       0       0       0       0       0       0       0
  9259 ;;Total ram usage:        6 bytes
  9260 ;; Hardware stack levels used:    1
  9261 ;; Hardware stack levels required when called:    6
  9262 ;; This function calls:
  9263 ;;		Nothing
  9264 ;; This function is called by:
  9265 ;;		_floor
  9266 ;;		_log
  9267 ;; This function uses a non-reentrant model
  9268 ;;
  9269                           
  9270                           	psect	text54
  9271  0027E6                     __ptext54:
  9272                           	opt stack 0
  9273  0027E6                     _frexp:
  9274                           	opt stack 20
  9275                           
  9276                           ; BSR set to: 0
  9277                           
  9278                           ; BSR set to: 0
  9279                           ;incstack = 0
  9280  0027E6  5160               	movf	frexp@value& (0+255),w,b
  9281  0027E8  1161               	iorwf	(frexp@value+1)& (0+255),w,b
  9282  0027EA  1162               	iorwf	(frexp@value+2)& (0+255),w,b
  9283  0027EC  E10A               	bnz	l3404
  9284                           
  9285                           ; BSR set to: 0
  9286  0027EE  5163               	movf	frexp@eptr& (0+255),w,b
  9287  0027F0  6ED9               	movwf	fsr2l,c
  9288  0027F2  6ADA               	clrf	fsr2h,c
  9289  0027F4  0E00               	movlw	0
  9290  0027F6  6ADE               	clrf	postinc2,c
  9291  0027F8  6ADD               	clrf	postdec2,c
  9292                           
  9293                           ; BSR set to: 0
  9294  0027FA  6B60               	clrf	?_frexp& (0+255),b
  9295  0027FC  6B61               	clrf	(?_frexp+1)& (0+255),b
  9296  0027FE  6B62               	clrf	(?_frexp+2)& (0+255),b
  9297  002800  0012               	return	
  9298  002802                     l3404:
  9299                           
  9300                           ; BSR set to: 0
  9301  002802  5162               	movf	(frexp@value+2)& (0+255),w,b
  9302  002804  0B7F               	andlw	127
  9303  002806  6F64               	movwf	??_frexp& (0+255),b
  9304  002808  6B65               	clrf	(??_frexp+1)& (0+255),b
  9305  00280A  90D8               	bcf	status,0,c
  9306  00280C  3764               	rlcf	??_frexp& (0+255),f,b
  9307  00280E  3765               	rlcf	(??_frexp+1)& (0+255),f,b
  9308  002810  5163               	movf	frexp@eptr& (0+255),w,b
  9309  002812  6ED9               	movwf	fsr2l,c
  9310  002814  6ADA               	clrf	fsr2h,c
  9311  002816  C064  FFDE         	movff	??_frexp,postinc2
  9312  00281A  C065  FFDD         	movff	??_frexp+1,postdec2
  9313  00281E  5163               	movf	frexp@eptr& (0+255),w,b
  9314  002820  6ED9               	movwf	fsr2l,c
  9315  002822  6ADA               	clrf	fsr2h,c
  9316  002824  0E01               	movlw	1
  9317  002826  AF61               	btfss	(frexp@value+1)& (0+255),7,b
  9318  002828  0E00               	movlw	0
  9319  00282A  12DE               	iorwf	postinc2,f,c
  9320  00282C  0E00               	movlw	0
  9321  00282E  12DD               	iorwf	postdec2,f,c
  9322                           
  9323                           ; BSR set to: 0
  9324  002830  5163               	movf	frexp@eptr& (0+255),w,b
  9325  002832  6ED9               	movwf	fsr2l,c
  9326  002834  6ADA               	clrf	fsr2h,c
  9327  002836  0E82               	movlw	130
  9328  002838  26DE               	addwf	postinc2,f,c
  9329  00283A  0EFF               	movlw	255
  9330  00283C  22DD               	addwfc	postdec2,f,c
  9331                           
  9332                           ; BSR set to: 0
  9333  00283E  5162               	movf	(frexp@value+2)& (0+255),w,b
  9334  002840  0B80               	andlw	-128
  9335  002842  093F               	iorlw	63
  9336  002844  6F62               	movwf	(frexp@value+2)& (0+255),b
  9337                           
  9338                           ; BSR set to: 0
  9339  002846  9F61               	bcf	(frexp@value+1)& (0+255),7,b
  9340                           
  9341                           ; BSR set to: 0
  9342  002848  C060  F060         	movff	frexp@value,?_frexp
  9343  00284C  C061  F061         	movff	frexp@value+1,?_frexp+1
  9344  002850  C062  F062         	movff	frexp@value+2,?_frexp+2
  9345                           
  9346                           ; BSR set to: 0
  9347  002854  0012               	return		;funcret
  9348  002856                     __end_of_frexp:
  9349                           	opt stack 0
  9350                           tblptru	equ	0xFF8
  9351                           tblptrh	equ	0xFF7
  9352                           tblptrl	equ	0xFF6
  9353                           tablat	equ	0xFF5
  9354                           prodh	equ	0xFF4
  9355                           prodl	equ	0xFF3
  9356                           intcon	equ	0xFF2
  9357                           postinc0	equ	0xFEE
  9358                           plusw0	equ	0xFEB
  9359                           wreg	equ	0xFE8
  9360                           indf1	equ	0xFE7
  9361                           postinc1	equ	0xFE6
  9362                           postdec1	equ	0xFE5
  9363                           plusw1	equ	0xFE3
  9364                           fsr1h	equ	0xFE2
  9365                           fsr1l	equ	0xFE1
  9366                           indf2	equ	0xFDF
  9367                           postinc2	equ	0xFDE
  9368                           postdec2	equ	0xFDD
  9369                           plusw2	equ	0xFDB
  9370                           fsr2h	equ	0xFDA
  9371                           fsr2l	equ	0xFD9
  9372                           status	equ	0xFD8
  9373                           
  9374 ;; *************** function ___fttol *****************
  9375 ;; Defined at:
  9376 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\fttol.c"
  9377 ;; Parameters:    Size  Location     Type
  9378 ;;  f1              3   47[BANK0 ] float 
  9379 ;; Auto vars:     Size  Location     Type
  9380 ;;  lval            4   57[BANK0 ] unsigned long 
  9381 ;;  exp1            1   61[BANK0 ] unsigned char 
  9382 ;;  sign1           1   56[BANK0 ] unsigned char 
  9383 ;; Return value:  Size  Location     Type
  9384 ;;                  4   47[BANK0 ] long 
  9385 ;; Registers used:
  9386 ;;		wreg, status,2, status,0
  9387 ;; Tracked objects:
  9388 ;;		On entry : 3F/0
  9389 ;;		On exit  : 3F/0
  9390 ;;		Unchanged: 0/0
  9391 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  9392 ;;      Params:         0       4       0       0       0       0       0       0       0
  9393 ;;      Locals:         0       6       0       0       0       0       0       0       0
  9394 ;;      Temps:          0       5       0       0       0       0       0       0       0
  9395 ;;      Totals:         0      15       0       0       0       0       0       0       0
  9396 ;;Total ram usage:       15 bytes
  9397 ;; Hardware stack levels used:    1
  9398 ;; Hardware stack levels required when called:    6
  9399 ;; This function calls:
  9400 ;;		Nothing
  9401 ;; This function is called by:
  9402 ;;		_Display_Init
  9403 ;;		_Sequencer_StartTimer
  9404 ;;		_InitDigiPot
  9405 ;;		_Zip
  9406 ;;		_UnZip
  9407 ;;		_I2C_Init
  9408 ;;		_pow
  9409 ;;		_exp
  9410 ;;		_floor
  9411 ;; This function uses a non-reentrant model
  9412 ;;
  9413                           
  9414                           	psect	text55
  9415  001DD6                     __ptext55:
  9416                           	opt stack 0
  9417  001DD6                     ___fttol:
  9418                           	opt stack 23
  9419                           
  9420                           ; BSR set to: 0
  9421                           
  9422                           ; BSR set to: 0
  9423                           ;incstack = 0
  9424  001DD6  C091  F093         	movff	___fttol@f1+2,??___fttol
  9425  001DDA  6B94               	clrf	(??___fttol+1)& (0+255),b
  9426  001DDC  6B95               	clrf	(??___fttol+2)& (0+255),b
  9427  001DDE  3590               	rlcf	(___fttol@f1+1)& (0+255),w,b
  9428  001DE0  3793               	rlcf	??___fttol& (0+255),f,b
  9429  001DE2  E301               	bnc	u3151
  9430  001DE4  8194               	bsf	(??___fttol+1)& (0+255),0,b
  9431  001DE6                     u3151:
  9432  001DE6  5193               	movf	??___fttol& (0+255),w,b
  9433  001DE8  6F9D               	movwf	___fttol@exp1& (0+255),b
  9434  001DEA  519D               	movf	___fttol@exp1& (0+255),w,b
  9435  001DEC  E105               	bnz	l3360
  9436  001DEE                     u3160:
  9437                           
  9438                           ; BSR set to: 0
  9439  001DEE  6B8F               	clrf	?___fttol& (0+255),b
  9440  001DF0  6B90               	clrf	(?___fttol+1)& (0+255),b
  9441  001DF2  6B91               	clrf	(?___fttol+2)& (0+255),b
  9442  001DF4  6B92               	clrf	(?___fttol+3)& (0+255),b
  9443  001DF6  0012               	return	
  9444  001DF8                     l3360:
  9445                           
  9446                           ; BSR set to: 0
  9447  001DF8  0E17               	movlw	23
  9448  001DFA  6F93               	movwf	??___fttol& (0+255),b
  9449  001DFC  C08F  F094         	movff	___fttol@f1,??___fttol+1
  9450  001E00  C090  F095         	movff	___fttol@f1+1,??___fttol+2
  9451  001E04  C091  F096         	movff	___fttol@f1+2,??___fttol+3
  9452  001E08  2993               	incf	??___fttol& (0+255),w,b
  9453  001E0A  6F97               	movwf	(??___fttol+4)& (0+255),b
  9454  001E0C  D004               	goto	u3170
  9455  001E0E                     u3175:
  9456  001E0E  90D8               	bcf	status,0,c
  9457  001E10  3396               	rrcf	(??___fttol+3)& (0+255),f,b
  9458  001E12  3395               	rrcf	(??___fttol+2)& (0+255),f,b
  9459  001E14  3394               	rrcf	(??___fttol+1)& (0+255),f,b
  9460  001E16                     u3170:
  9461  001E16  2F97               	decfsz	(??___fttol+4)& (0+255),f,b
  9462  001E18  D7FA               	goto	u3175
  9463  001E1A  0100               	movlb	0	; () banked
  9464  001E1C  5194               	movf	(??___fttol+1)& (0+255),w,b
  9465  001E1E  6F98               	movwf	___fttol@sign1& (0+255),b
  9466                           
  9467                           ; BSR set to: 0
  9468  001E20  8F90               	bsf	(___fttol@f1+1)& (0+255),7,b
  9469                           
  9470                           ; BSR set to: 0
  9471  001E22  6B91               	clrf	(___fttol@f1+2)& (0+255),b
  9472                           
  9473                           ; BSR set to: 0
  9474  001E24  518F               	movf	___fttol@f1& (0+255),w,b
  9475  001E26  6F99               	movwf	___fttol@lval& (0+255),b
  9476  001E28  5190               	movf	(___fttol@f1+1)& (0+255),w,b
  9477  001E2A  6F9A               	movwf	(___fttol@lval+1)& (0+255),b
  9478  001E2C  5191               	movf	(___fttol@f1+2)& (0+255),w,b
  9479  001E2E  6F9B               	movwf	(___fttol@lval+2)& (0+255),b
  9480  001E30  6B9C               	clrf	(___fttol@lval+3)& (0+255),b
  9481                           
  9482                           ; BSR set to: 0
  9483  001E32  0E8E               	movlw	142
  9484  001E34  5F9D               	subwf	___fttol@exp1& (0+255),f,b
  9485                           
  9486                           ; BSR set to: 0
  9487  001E36  AF9D               	btfss	___fttol@exp1& (0+255),7,b
  9488  001E38  D00C               	goto	l3380
  9489                           
  9490                           ; BSR set to: 0
  9491  001E3A  519D               	movf	___fttol@exp1& (0+255),w,b
  9492  001E3C  0A80               	xorlw	128
  9493  001E3E  0F8F               	addlw	143
  9494  001E40  E3D6               	bnc	u3160
  9495  001E42                     l3376:
  9496                           
  9497                           ; BSR set to: 0
  9498  001E42  90D8               	bcf	status,0,c
  9499  001E44  339C               	rrcf	(___fttol@lval+3)& (0+255),f,b
  9500  001E46  339B               	rrcf	(___fttol@lval+2)& (0+255),f,b
  9501  001E48  339A               	rrcf	(___fttol@lval+1)& (0+255),f,b
  9502  001E4A  3399               	rrcf	___fttol@lval& (0+255),f,b
  9503                           
  9504                           ; BSR set to: 0
  9505  001E4C  3F9D               	incfsz	___fttol@exp1& (0+255),f,b
  9506  001E4E  D7F9               	goto	l3376
  9507  001E50  D00C               	goto	u3210
  9508  001E52                     l3380:
  9509                           
  9510                           ; BSR set to: 0
  9511  001E52  0E17               	movlw	23
  9512  001E54  659D               	cpfsgt	___fttol@exp1& (0+255),b
  9513  001E56  D007               	goto	l3386
  9514  001E58  D7CA               	goto	u3160
  9515  001E5A                     l3384:
  9516                           
  9517                           ; BSR set to: 0
  9518  001E5A  90D8               	bcf	status,0,c
  9519  001E5C  3799               	rlcf	___fttol@lval& (0+255),f,b
  9520  001E5E  379A               	rlcf	(___fttol@lval+1)& (0+255),f,b
  9521  001E60  379B               	rlcf	(___fttol@lval+2)& (0+255),f,b
  9522  001E62  379C               	rlcf	(___fttol@lval+3)& (0+255),f,b
  9523  001E64  079D               	decf	___fttol@exp1& (0+255),f,b
  9524  001E66                     l3386:
  9525                           
  9526                           ; BSR set to: 0
  9527  001E66  519D               	movf	___fttol@exp1& (0+255),w,b
  9528  001E68  E1F8               	bnz	l3384
  9529  001E6A                     u3210:
  9530                           
  9531                           ; BSR set to: 0
  9532  001E6A  5198               	movf	___fttol@sign1& (0+255),w,b
  9533  001E6C  E008               	bz	l3392
  9534                           
  9535                           ; BSR set to: 0
  9536  001E6E  1F9C               	comf	(___fttol@lval+3)& (0+255),f,b
  9537  001E70  1F9B               	comf	(___fttol@lval+2)& (0+255),f,b
  9538  001E72  1F9A               	comf	(___fttol@lval+1)& (0+255),f,b
  9539  001E74  6D99               	negf	___fttol@lval& (0+255),b
  9540  001E76  0E00               	movlw	0
  9541  001E78  239A               	addwfc	(___fttol@lval+1)& (0+255),f,b
  9542  001E7A  239B               	addwfc	(___fttol@lval+2)& (0+255),f,b
  9543  001E7C  239C               	addwfc	(___fttol@lval+3)& (0+255),f,b
  9544  001E7E                     l3392:
  9545                           
  9546                           ; BSR set to: 0
  9547  001E7E  C099  F08F         	movff	___fttol@lval,?___fttol
  9548  001E82  C09A  F090         	movff	___fttol@lval+1,?___fttol+1
  9549  001E86  C09B  F091         	movff	___fttol@lval+2,?___fttol+2
  9550  001E8A  C09C  F092         	movff	___fttol@lval+3,?___fttol+3
  9551                           
  9552                           ; BSR set to: 0
  9553  001E8E  0012               	return		;funcret
  9554  001E90                     __end_of___fttol:
  9555                           	opt stack 0
  9556                           tblptru	equ	0xFF8
  9557                           tblptrh	equ	0xFF7
  9558                           tblptrl	equ	0xFF6
  9559                           tablat	equ	0xFF5
  9560                           prodh	equ	0xFF4
  9561                           prodl	equ	0xFF3
  9562                           intcon	equ	0xFF2
  9563                           postinc0	equ	0xFEE
  9564                           plusw0	equ	0xFEB
  9565                           wreg	equ	0xFE8
  9566                           indf1	equ	0xFE7
  9567                           postinc1	equ	0xFE6
  9568                           postdec1	equ	0xFE5
  9569                           plusw1	equ	0xFE3
  9570                           fsr1h	equ	0xFE2
  9571                           fsr1l	equ	0xFE1
  9572                           indf2	equ	0xFDF
  9573                           postinc2	equ	0xFDE
  9574                           postdec2	equ	0xFDD
  9575                           plusw2	equ	0xFDB
  9576                           fsr2h	equ	0xFDA
  9577                           fsr2l	equ	0xFD9
  9578                           status	equ	0xFD8
  9579                           
  9580 ;; *************** function ___ftge *****************
  9581 ;; Defined at:
  9582 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\ftge.c"
  9583 ;; Parameters:    Size  Location     Type
  9584 ;;  ff1             3    0[BANK0 ] float 
  9585 ;;  ff2             3    3[BANK0 ] float 
  9586 ;; Auto vars:     Size  Location     Type
  9587 ;;		None
  9588 ;; Return value:  Size  Location     Type
  9589 ;;		None               void
  9590 ;; Registers used:
  9591 ;;		wreg, status,2, status,0
  9592 ;; Tracked objects:
  9593 ;;		On entry : 3F/0
  9594 ;;		On exit  : 3F/0
  9595 ;;		Unchanged: 0/0
  9596 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  9597 ;;      Params:         0       6       0       0       0       0       0       0       0
  9598 ;;      Locals:         0       0       0       0       0       0       0       0       0
  9599 ;;      Temps:          0       3       0       0       0       0       0       0       0
  9600 ;;      Totals:         0       9       0       0       0       0       0       0       0
  9601 ;;Total ram usage:        9 bytes
  9602 ;; Hardware stack levels used:    1
  9603 ;; Hardware stack levels required when called:    6
  9604 ;; This function calls:
  9605 ;;		Nothing
  9606 ;; This function is called by:
  9607 ;;		_pow
  9608 ;;		_exp
  9609 ;;		_floor
  9610 ;; This function uses a non-reentrant model
  9611 ;;
  9612                           
  9613                           	psect	text56
  9614  002A4A                     __ptext56:
  9615                           	opt stack 0
  9616  002A4A                     ___ftge:
  9617                           	opt stack 19
  9618                           
  9619                           ; BSR set to: 0
  9620                           
  9621                           ; BSR set to: 0
  9622                           ;incstack = 0
  9623  002A4A  AF62               	btfss	(___ftge@ff1+2)& (0+255),7,b
  9624  002A4C  D00D               	goto	l3342
  9625                           
  9626                           ; BSR set to: 0
  9627  002A4E  6B66               	clrf	??___ftge& (0+255),b
  9628  002A50  6B67               	clrf	(??___ftge+1)& (0+255),b
  9629  002A52  0E80               	movlw	128
  9630  002A54  6F68               	movwf	(??___ftge+2)& (0+255),b
  9631  002A56  5160               	movf	___ftge@ff1& (0+255),w,b
  9632  002A58  5D66               	subwf	??___ftge& (0+255),w,b
  9633  002A5A  6F60               	movwf	___ftge@ff1& (0+255),b
  9634  002A5C  5161               	movf	(___ftge@ff1+1)& (0+255),w,b
  9635  002A5E  5967               	subwfb	(??___ftge+1)& (0+255),w,b
  9636  002A60  6F61               	movwf	(___ftge@ff1+1)& (0+255),b
  9637  002A62  5162               	movf	(___ftge@ff1+2)& (0+255),w,b
  9638  002A64  5968               	subwfb	(??___ftge+2)& (0+255),w,b
  9639  002A66  6F62               	movwf	(___ftge@ff1+2)& (0+255),b
  9640  002A68                     l3342:
  9641                           
  9642                           ; BSR set to: 0
  9643  002A68  AF65               	btfss	(___ftge@ff2+2)& (0+255),7,b
  9644  002A6A  D00D               	goto	l3346
  9645                           
  9646                           ; BSR set to: 0
  9647  002A6C  6B66               	clrf	??___ftge& (0+255),b
  9648  002A6E  6B67               	clrf	(??___ftge+1)& (0+255),b
  9649  002A70  0E80               	movlw	128
  9650  002A72  6F68               	movwf	(??___ftge+2)& (0+255),b
  9651  002A74  5163               	movf	___ftge@ff2& (0+255),w,b
  9652  002A76  5D66               	subwf	??___ftge& (0+255),w,b
  9653  002A78  6F63               	movwf	___ftge@ff2& (0+255),b
  9654  002A7A  5164               	movf	(___ftge@ff2+1)& (0+255),w,b
  9655  002A7C  5967               	subwfb	(??___ftge+1)& (0+255),w,b
  9656  002A7E  6F64               	movwf	(___ftge@ff2+1)& (0+255),b
  9657  002A80  5165               	movf	(___ftge@ff2+2)& (0+255),w,b
  9658  002A82  5968               	subwfb	(??___ftge+2)& (0+255),w,b
  9659  002A84  6F65               	movwf	(___ftge@ff2+2)& (0+255),b
  9660  002A86                     l3346:
  9661                           
  9662                           ; BSR set to: 0
  9663  002A86  0E80               	movlw	128
  9664  002A88  1B62               	xorwf	(___ftge@ff1+2)& (0+255),f,b
  9665                           
  9666                           ; BSR set to: 0
  9667  002A8A  1B65               	xorwf	(___ftge@ff2+2)& (0+255),f,b
  9668  002A8C  5163               	movf	___ftge@ff2& (0+255),w,b
  9669  002A8E  5D60               	subwf	___ftge@ff1& (0+255),w,b
  9670  002A90  5164               	movf	(___ftge@ff2+1)& (0+255),w,b
  9671  002A92  5961               	subwfb	(___ftge@ff1+1)& (0+255),w,b
  9672  002A94  5165               	movf	(___ftge@ff2+2)& (0+255),w,b
  9673  002A96  5962               	subwfb	(___ftge@ff1+2)& (0+255),w,b
  9674  002A98  E202               	bc	l3352
  9675                           
  9676                           ; BSR set to: 0
  9677  002A9A  90D8               	bcf	status,0,c
  9678  002A9C  0012               	return	
  9679  002A9E                     l3352:
  9680                           
  9681                           ; BSR set to: 0
  9682  002A9E  80D8               	bsf	status,0,c
  9683                           
  9684                           ; BSR set to: 0
  9685  002AA0  0012               	return		;funcret
  9686  002AA2                     __end_of___ftge:
  9687                           	opt stack 0
  9688                           tblptru	equ	0xFF8
  9689                           tblptrh	equ	0xFF7
  9690                           tblptrl	equ	0xFF6
  9691                           tablat	equ	0xFF5
  9692                           prodh	equ	0xFF4
  9693                           prodl	equ	0xFF3
  9694                           intcon	equ	0xFF2
  9695                           postinc0	equ	0xFEE
  9696                           plusw0	equ	0xFEB
  9697                           wreg	equ	0xFE8
  9698                           indf1	equ	0xFE7
  9699                           postinc1	equ	0xFE6
  9700                           postdec1	equ	0xFE5
  9701                           plusw1	equ	0xFE3
  9702                           fsr1h	equ	0xFE2
  9703                           fsr1l	equ	0xFE1
  9704                           indf2	equ	0xFDF
  9705                           postinc2	equ	0xFDE
  9706                           postdec2	equ	0xFDD
  9707                           plusw2	equ	0xFDB
  9708                           fsr2h	equ	0xFDA
  9709                           fsr2l	equ	0xFD9
  9710                           status	equ	0xFD8
  9711                           
  9712 ;; *************** function ___altoft *****************
  9713 ;; Defined at:
  9714 ;;		line 42 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\altoft.c"
  9715 ;; Parameters:    Size  Location     Type
  9716 ;;  c               4    8[BANK0 ] long 
  9717 ;; Auto vars:     Size  Location     Type
  9718 ;;  sign            1   17[BANK0 ] unsigned char 
  9719 ;;  exp             1   16[BANK0 ] unsigned char 
  9720 ;; Return value:  Size  Location     Type
  9721 ;;                  3    8[BANK0 ] float 
  9722 ;; Registers used:
  9723 ;;		wreg, status,2, status,0, cstack
  9724 ;; Tracked objects:
  9725 ;;		On entry : 3F/0
  9726 ;;		On exit  : 3F/0
  9727 ;;		Unchanged: 0/0
  9728 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  9729 ;;      Params:         0       4       0       0       0       0       0       0       0
  9730 ;;      Locals:         0       2       0       0       0       0       0       0       0
  9731 ;;      Temps:          0       4       0       0       0       0       0       0       0
  9732 ;;      Totals:         0      10       0       0       0       0       0       0       0
  9733 ;;Total ram usage:       10 bytes
  9734 ;; Hardware stack levels used:    1
  9735 ;; Hardware stack levels required when called:    7
  9736 ;; This function calls:
  9737 ;;		___ftpack
  9738 ;; This function is called by:
  9739 ;;		_InitDigiPot
  9740 ;;		_I2C_Init
  9741 ;;		_floor
  9742 ;; This function uses a non-reentrant model
  9743 ;;
  9744                           
  9745                           	psect	text57
  9746  002926                     __ptext57:
  9747                           	opt stack 0
  9748  002926                     ___altoft:
  9749                           	opt stack 20
  9750                           
  9751                           ; BSR set to: 0
  9752                           
  9753                           ; BSR set to: 0
  9754                           ;incstack = 0
  9755  002926  6B71               	clrf	___altoft@sign& (0+255),b
  9756                           
  9757                           ; BSR set to: 0
  9758  002928  0E8E               	movlw	142
  9759  00292A  6F70               	movwf	___altoft@exp& (0+255),b
  9760                           
  9761                           ; BSR set to: 0
  9762  00292C  AF6B               	btfss	(___altoft@c+3)& (0+255),7,b
  9763  00292E  D011               	goto	l3230
  9764                           
  9765                           ; BSR set to: 0
  9766  002930  1F6B               	comf	(___altoft@c+3)& (0+255),f,b
  9767  002932  1F6A               	comf	(___altoft@c+2)& (0+255),f,b
  9768  002934  1F69               	comf	(___altoft@c+1)& (0+255),f,b
  9769  002936  6D68               	negf	___altoft@c& (0+255),b
  9770  002938  0E00               	movlw	0
  9771  00293A  2369               	addwfc	(___altoft@c+1)& (0+255),f,b
  9772  00293C  236A               	addwfc	(___altoft@c+2)& (0+255),f,b
  9773  00293E  236B               	addwfc	(___altoft@c+3)& (0+255),f,b
  9774                           
  9775                           ; BSR set to: 0
  9776  002940  0E01               	movlw	1
  9777  002942  6F71               	movwf	___altoft@sign& (0+255),b
  9778  002944  D006               	goto	l3230
  9779  002946                     l3228:
  9780                           
  9781                           ; BSR set to: 0
  9782  002946  90D8               	bcf	status,0,c
  9783  002948  336B               	rrcf	(___altoft@c+3)& (0+255),f,b
  9784  00294A  336A               	rrcf	(___altoft@c+2)& (0+255),f,b
  9785  00294C  3369               	rrcf	(___altoft@c+1)& (0+255),f,b
  9786  00294E  3368               	rrcf	___altoft@c& (0+255),f,b
  9787  002950  2B70               	incf	___altoft@exp& (0+255),f,b
  9788  002952                     l3230:
  9789                           
  9790                           ; BSR set to: 0
  9791  002952  6B6C               	clrf	??___altoft& (0+255),b
  9792  002954  6B6D               	clrf	(??___altoft+1)& (0+255),b
  9793  002956  6B6E               	clrf	(??___altoft+2)& (0+255),b
  9794  002958  516B               	movf	(___altoft@c+3)& (0+255),w,b
  9795  00295A  6F6F               	movwf	(??___altoft+3)& (0+255),b
  9796  00295C  516C               	movf	??___altoft& (0+255),w,b
  9797  00295E  116D               	iorwf	(??___altoft+1)& (0+255),w,b
  9798  002960  116E               	iorwf	(??___altoft+2)& (0+255),w,b
  9799  002962  116F               	iorwf	(??___altoft+3)& (0+255),w,b
  9800  002964  E1F0               	bnz	l3228
  9801                           
  9802                           ; BSR set to: 0
  9803  002966  C068  F060         	movff	___altoft@c,___ftpack@arg
  9804  00296A  C069  F061         	movff	___altoft@c+1,___ftpack@arg+1
  9805  00296E  C06A  F062         	movff	___altoft@c+2,___ftpack@arg+2
  9806  002972  C070  F063         	movff	___altoft@exp,___ftpack@exp
  9807  002976  C071  F064         	movff	___altoft@sign,___ftpack@sign
  9808  00297A  ECC3  F011         	call	___ftpack	;wreg free
  9809  00297E  C060  F068         	movff	?___ftpack,?___altoft
  9810  002982  C061  F069         	movff	?___ftpack+1,?___altoft+1
  9811  002986  C062  F06A         	movff	?___ftpack+2,?___altoft+2
  9812                           
  9813                           ; BSR set to: 0
  9814  00298A  0012               	return		;funcret
  9815  00298C                     __end_of___altoft:
  9816                           	opt stack 0
  9817                           tblptru	equ	0xFF8
  9818                           tblptrh	equ	0xFF7
  9819                           tblptrl	equ	0xFF6
  9820                           tablat	equ	0xFF5
  9821                           prodh	equ	0xFF4
  9822                           prodl	equ	0xFF3
  9823                           intcon	equ	0xFF2
  9824                           postinc0	equ	0xFEE
  9825                           plusw0	equ	0xFEB
  9826                           wreg	equ	0xFE8
  9827                           indf1	equ	0xFE7
  9828                           postinc1	equ	0xFE6
  9829                           postdec1	equ	0xFE5
  9830                           plusw1	equ	0xFE3
  9831                           fsr1h	equ	0xFE2
  9832                           fsr1l	equ	0xFE1
  9833                           indf2	equ	0xFDF
  9834                           postinc2	equ	0xFDE
  9835                           postdec2	equ	0xFDD
  9836                           plusw2	equ	0xFDB
  9837                           fsr2h	equ	0xFDA
  9838                           fsr2l	equ	0xFD9
  9839                           status	equ	0xFD8
  9840                           
  9841 ;; *************** function _eval_poly *****************
  9842 ;; Defined at:
  9843 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\evalpoly.c"
  9844 ;; Parameters:    Size  Location     Type
  9845 ;;  x               3   59[BANK0 ] float 
  9846 ;;  d               1   62[BANK0 ] PTR const 
  9847 ;;		 -> log@coeff(27), exp@coeff(30), 
  9848 ;;  n               2   63[BANK0 ] int 
  9849 ;; Auto vars:     Size  Location     Type
  9850 ;;  res             3   66[BANK0 ] int 
  9851 ;; Return value:  Size  Location     Type
  9852 ;;                  3   59[BANK0 ] int 
  9853 ;; Registers used:
  9854 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9855 ;; Tracked objects:
  9856 ;;		On entry : 3F/0
  9857 ;;		On exit  : 3F/0
  9858 ;;		Unchanged: 0/0
  9859 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  9860 ;;      Params:         0       6       0       0       0       0       0       0       0
  9861 ;;      Locals:         0       3       0       0       0       0       0       0       0
  9862 ;;      Temps:          0       1       0       0       0       0       0       0       0
  9863 ;;      Totals:         0      10       0       0       0       0       0       0       0
  9864 ;;Total ram usage:       10 bytes
  9865 ;; Hardware stack levels used:    1
  9866 ;; Hardware stack levels required when called:    8
  9867 ;; This function calls:
  9868 ;;		___ftadd
  9869 ;;		___ftmul
  9870 ;; This function is called by:
  9871 ;;		_exp
  9872 ;;		_log
  9873 ;; This function uses a non-reentrant model
  9874 ;;
  9875                           
  9876                           	psect	text58
  9877  0020A4                     __ptext58:
  9878                           	opt stack 0
  9879  0020A4                     _eval_poly:
  9880                           	opt stack 18
  9881                           
  9882                           ; BSR set to: 0
  9883                           
  9884                           ; BSR set to: 0
  9885                           ;incstack = 0
  9886  0020A4  519F               	movf	eval_poly@n& (0+255),w,b
  9887  0020A6  0D03               	mullw	3
  9888  0020A8  519E               	movf	eval_poly@d& (0+255),w,b
  9889  0020AA  24F3               	addwf	prodl,w,c
  9890  0020AC  6FA1               	movwf	??_eval_poly& (0+255),b
  9891  0020AE  C0A1  FFF6         	movff	??_eval_poly,tblptrl
  9892  0020B2                     	if	1	;There is more than 1 active tblptr byte
  9893  0020B2  0E08               	movlw	high __smallconst
  9894  0020B4  6EF7               	movwf	tblptrh,c
  9895  0020B6                     	endif
  9896  0020B6                     	if	0	;tblptru may be non-zero
  9897  0020B6                     	endif
  9898  0020B6                     	if	0	;tblptru may be non-zero
  9899  0020B6                     	endif
  9900  0020B6  0009               	tblrd		*+
  9901  0020B8  CFF5 F0A2          	movff	tablat,eval_poly@res
  9902  0020BC  0009               	tblrd		*+
  9903  0020BE  CFF5 F0A3          	movff	tablat,eval_poly@res+1
  9904  0020C2  000A               	tblrd		*-
  9905  0020C4  CFF5 F0A4          	movff	tablat,eval_poly@res+2
  9906  0020C8  D031               	goto	l3532
  9907  0020CA                     l3530:
  9908                           
  9909                           ; BSR set to: 0
  9910  0020CA  C0A2  F075         	movff	eval_poly@res,___ftmul@f2
  9911  0020CE  C0A3  F076         	movff	eval_poly@res+1,___ftmul@f2+1
  9912  0020D2  C0A4  F077         	movff	eval_poly@res+2,___ftmul@f2+2
  9913  0020D6  C09B  F072         	movff	eval_poly@x,___ftmul@f1
  9914  0020DA  C09C  F073         	movff	eval_poly@x+1,___ftmul@f1+1
  9915  0020DE  C09D  F074         	movff	eval_poly@x+2,___ftmul@f1+2
  9916  0020E2  EC4C  F00D         	call	___ftmul	;wreg free
  9917  0020E6  C072  F08F         	movff	?___ftmul,___ftadd@f1
  9918  0020EA  C073  F090         	movff	?___ftmul+1,___ftadd@f1+1
  9919  0020EE  C074  F091         	movff	?___ftmul+2,___ftadd@f1+2
  9920  0020F2  079F               	decf	eval_poly@n& (0+255),f,b
  9921  0020F4  A0D8               	btfss	status,0,c
  9922  0020F6  07A0               	decf	(eval_poly@n+1)& (0+255),f,b
  9923  0020F8  519F               	movf	eval_poly@n& (0+255),w,b
  9924  0020FA  0D03               	mullw	3
  9925  0020FC  519E               	movf	eval_poly@d& (0+255),w,b
  9926  0020FE  24F3               	addwf	prodl,w,c
  9927  002100  6FA1               	movwf	??_eval_poly& (0+255),b
  9928  002102  C0A1  FFF6         	movff	??_eval_poly,tblptrl
  9929  002106                     	if	1	;There is more than 1 active tblptr byte
  9930  002106  0E08               	movlw	high __smallconst
  9931  002108  6EF7               	movwf	tblptrh,c
  9932  00210A                     	endif
  9933  00210A                     	if	0	;tblptru may be non-zero
  9934  00210A                     	endif
  9935  00210A                     	if	0	;tblptru may be non-zero
  9936  00210A                     	endif
  9937  00210A  0009               	tblrd		*+
  9938  00210C  CFF5 F092          	movff	tablat,___ftadd@f2
  9939  002110  0009               	tblrd		*+
  9940  002112  CFF5 F093          	movff	tablat,___ftadd@f2+1
  9941  002116  000A               	tblrd		*-
  9942  002118  CFF5 F094          	movff	tablat,___ftadd@f2+2
  9943  00211C  ECD3  F008         	call	___ftadd	;wreg free
  9944  002120  C08F  F0A2         	movff	?___ftadd,eval_poly@res
  9945  002124  C090  F0A3         	movff	?___ftadd+1,eval_poly@res+1
  9946  002128  C091  F0A4         	movff	?___ftadd+2,eval_poly@res+2
  9947  00212C                     l3532:
  9948                           
  9949                           ; BSR set to: 0
  9950  00212C  519F               	movf	eval_poly@n& (0+255),w,b
  9951  00212E  11A0               	iorwf	(eval_poly@n+1)& (0+255),w,b
  9952  002130  E1CC               	bnz	l3530
  9953                           
  9954                           ; BSR set to: 0
  9955  002132  C0A2  F09B         	movff	eval_poly@res,?_eval_poly
  9956  002136  C0A3  F09C         	movff	eval_poly@res+1,?_eval_poly+1
  9957  00213A  C0A4  F09D         	movff	eval_poly@res+2,?_eval_poly+2
  9958                           
  9959                           ; BSR set to: 0
  9960  00213E  0012               	return		;funcret
  9961  002140                     __end_of_eval_poly:
  9962                           	opt stack 0
  9963                           tblptru	equ	0xFF8
  9964                           tblptrh	equ	0xFF7
  9965                           tblptrl	equ	0xFF6
  9966                           tablat	equ	0xFF5
  9967                           prodh	equ	0xFF4
  9968                           prodl	equ	0xFF3
  9969                           intcon	equ	0xFF2
  9970                           postinc0	equ	0xFEE
  9971                           plusw0	equ	0xFEB
  9972                           wreg	equ	0xFE8
  9973                           indf1	equ	0xFE7
  9974                           postinc1	equ	0xFE6
  9975                           postdec1	equ	0xFE5
  9976                           plusw1	equ	0xFE3
  9977                           fsr1h	equ	0xFE2
  9978                           fsr1l	equ	0xFE1
  9979                           indf2	equ	0xFDF
  9980                           postinc2	equ	0xFDE
  9981                           postdec2	equ	0xFDD
  9982                           plusw2	equ	0xFDB
  9983                           fsr2h	equ	0xFDA
  9984                           fsr2l	equ	0xFD9
  9985                           status	equ	0xFD8
  9986                           
  9987 ;; *************** function ___ftmul *****************
  9988 ;; Defined at:
  9989 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\ftmul.c"
  9990 ;; Parameters:    Size  Location     Type
  9991 ;;  f1              3   18[BANK0 ] float 
  9992 ;;  f2              3   21[BANK0 ] float 
  9993 ;; Auto vars:     Size  Location     Type
  9994 ;;  f3_as_produc    3   29[BANK0 ] unsigned um
  9995 ;;  sign            1   28[BANK0 ] unsigned char 
  9996 ;;  exp             1   27[BANK0 ] unsigned char 
  9997 ;;  cntr            1    0        unsigned char 
  9998 ;; Return value:  Size  Location     Type
  9999 ;;                  3   18[BANK0 ] float 
 10000 ;; Registers used:
 10001 ;;		wreg, status,2, status,0, prodl, prodh, cstack
 10002 ;; Tracked objects:
 10003 ;;		On entry : 3F/0
 10004 ;;		On exit  : 3F/0
 10005 ;;		Unchanged: 0/0
 10006 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 10007 ;;      Params:         0       6       0       0       0       0       0       0       0
 10008 ;;      Locals:         0       5       0       0       0       0       0       0       0
 10009 ;;      Temps:          0       3       0       0       0       0       0       0       0
 10010 ;;      Totals:         0      14       0       0       0       0       0       0       0
 10011 ;;Total ram usage:       14 bytes
 10012 ;; Hardware stack levels used:    1
 10013 ;; Hardware stack levels required when called:    7
 10014 ;; This function calls:
 10015 ;;		___ftpack
 10016 ;; This function is called by:
 10017 ;;		_InitDigiPot
 10018 ;;		_I2C_Init
 10019 ;;		_pow
 10020 ;;		_exp
 10021 ;;		_log
 10022 ;;		_eval_poly
 10023 ;; This function uses a non-reentrant model
 10024 ;;
 10025                           
 10026                           	psect	text59
 10027  001A98                     __ptext59:
 10028                           	opt stack 0
 10029  001A98                     ___ftmul:
 10030                           	opt stack 20
 10031                           
 10032                           ; BSR set to: 0
 10033                           
 10034                           ; BSR set to: 0
 10035                           ;incstack = 0
 10036  001A98  C074  F078         	movff	___ftmul@f1+2,??___ftmul
 10037  001A9C  6B79               	clrf	(??___ftmul+1)& (0+255),b
 10038  001A9E  6B7A               	clrf	(??___ftmul+2)& (0+255),b
 10039  001AA0  3573               	rlcf	(___ftmul@f1+1)& (0+255),w,b
 10040  001AA2  3778               	rlcf	??___ftmul& (0+255),f,b
 10041  001AA4  E301               	bnc	u3071
 10042  001AA6  8179               	bsf	(??___ftmul+1)& (0+255),0,b
 10043  001AA8                     u3071:
 10044  001AA8  5178               	movf	??___ftmul& (0+255),w,b
 10045  001AAA  6F7B               	movwf	___ftmul@exp& (0+255),b
 10046  001AAC  517B               	movf	___ftmul@exp& (0+255),w,b
 10047  001AAE  E104               	bnz	l3304
 10048                           
 10049                           ; BSR set to: 0
 10050  001AB0  6B72               	clrf	?___ftmul& (0+255),b
 10051  001AB2  6B73               	clrf	(?___ftmul+1)& (0+255),b
 10052  001AB4  6B74               	clrf	(?___ftmul+2)& (0+255),b
 10053  001AB6  0012               	return	
 10054  001AB8                     l3304:
 10055                           
 10056                           ; BSR set to: 0
 10057  001AB8  C077  F078         	movff	___ftmul@f2+2,??___ftmul
 10058  001ABC  6B79               	clrf	(??___ftmul+1)& (0+255),b
 10059  001ABE  6B7A               	clrf	(??___ftmul+2)& (0+255),b
 10060  001AC0  3576               	rlcf	(___ftmul@f2+1)& (0+255),w,b
 10061  001AC2  3778               	rlcf	??___ftmul& (0+255),f,b
 10062  001AC4  E301               	bnc	u3091
 10063  001AC6  8179               	bsf	(??___ftmul+1)& (0+255),0,b
 10064  001AC8                     u3091:
 10065  001AC8  5178               	movf	??___ftmul& (0+255),w,b
 10066  001ACA  6F7C               	movwf	___ftmul@sign& (0+255),b
 10067  001ACC  517C               	movf	___ftmul@sign& (0+255),w,b
 10068  001ACE  E104               	bnz	l3308
 10069                           
 10070                           ; BSR set to: 0
 10071  001AD0  6B72               	clrf	?___ftmul& (0+255),b
 10072  001AD2  6B73               	clrf	(?___ftmul+1)& (0+255),b
 10073  001AD4  6B74               	clrf	(?___ftmul+2)& (0+255),b
 10074  001AD6  0012               	return	
 10075  001AD8                     l3308:
 10076                           
 10077                           ; BSR set to: 0
 10078  001AD8  517C               	movf	___ftmul@sign& (0+255),w,b
 10079  001ADA  0F7B               	addlw	123
 10080  001ADC  277B               	addwf	___ftmul@exp& (0+255),f,b
 10081                           
 10082                           ; BSR set to: 0
 10083  001ADE  C074  F07C         	movff	___ftmul@f1+2,___ftmul@sign
 10084  001AE2  5177               	movf	(___ftmul@f2+2)& (0+255),w,b
 10085  001AE4  1B7C               	xorwf	___ftmul@sign& (0+255),f,b
 10086  001AE6  0E80               	movlw	128
 10087  001AE8  177C               	andwf	___ftmul@sign& (0+255),f,b
 10088                           
 10089                           ; BSR set to: 0
 10090  001AEA  8F73               	bsf	(___ftmul@f1+1)& (0+255),7,b
 10091                           
 10092                           ; BSR set to: 0
 10093  001AEC  8F76               	bsf	(___ftmul@f2+1)& (0+255),7,b
 10094                           
 10095                           ; BSR set to: 0
 10096  001AEE  6B77               	clrf	(___ftmul@f2+2)& (0+255),b
 10097                           
 10098                           ; BSR set to: 0
 10099                           
 10100                           ; BSR set to: 0
 10101  001AF0  6B74               	clrf	(___ftmul@f1+2)& (0+255),b
 10102                           
 10103                           ; BSR set to: 0
 10104  001AF2  5172               	movf	___ftmul@f1& (0+255),w,b
 10105  001AF4  0375               	mulwf	___ftmul@f2& (0+255),b
 10106  001AF6  CFF4 FFF3          	movff	prodh,prodl
 10107  001AFA  6AF4               	clrf	prodh,c
 10108  001AFC  CFF3 F07D          	movff	prodl,___ftmul@f3_as_product
 10109  001B00  CFF4 F07E          	movff	prodh,___ftmul@f3_as_product+1
 10110  001B04  6B7F               	clrf	(___ftmul@f3_as_product+2)& (0+255),b
 10111                           
 10112                           ; BSR set to: 0
 10113  001B06  5172               	movf	___ftmul@f1& (0+255),w,b
 10114  001B08  0376               	mulwf	(___ftmul@f2+1)& (0+255),b
 10115  001B0A  50F3               	movf	prodl,w,c
 10116  001B0C  277D               	addwf	___ftmul@f3_as_product& (0+255),f,b
 10117  001B0E  50F4               	movf	prodh,w,c
 10118  001B10  237E               	addwfc	(___ftmul@f3_as_product+1)& (0+255),f,b
 10119  001B12  0E00               	movlw	0
 10120  001B14  237F               	addwfc	(___ftmul@f3_as_product+2)& (0+255),f,b
 10121                           
 10122                           ; BSR set to: 0
 10123  001B16  5173               	movf	(___ftmul@f1+1)& (0+255),w,b
 10124  001B18  0375               	mulwf	___ftmul@f2& (0+255),b
 10125  001B1A  50F3               	movf	prodl,w,c
 10126  001B1C  277D               	addwf	___ftmul@f3_as_product& (0+255),f,b
 10127  001B1E  50F4               	movf	prodh,w,c
 10128  001B20  237E               	addwfc	(___ftmul@f3_as_product+1)& (0+255),f,b
 10129  001B22  0E00               	movlw	0
 10130  001B24  237F               	addwfc	(___ftmul@f3_as_product+2)& (0+255),f,b
 10131                           
 10132                           ; BSR set to: 0
 10133  001B26  5173               	movf	(___ftmul@f1+1)& (0+255),w,b
 10134  001B28  0376               	mulwf	(___ftmul@f2+1)& (0+255),b
 10135  001B2A  50F3               	movf	prodl,w,c
 10136  001B2C  277E               	addwf	(___ftmul@f3_as_product+1)& (0+255),f,b
 10137  001B2E  50F4               	movf	prodh,w,c
 10138  001B30  237F               	addwfc	(___ftmul@f3_as_product+2)& (0+255),f,b
 10139                           
 10140                           ; BSR set to: 0
 10141  001B32  AF7F               	btfss	(___ftmul@f3_as_product+2)& (0+255),7,b
 10142  001B34  D005               	goto	l1000
 10143                           
 10144                           ; BSR set to: 0
 10145  001B36  90D8               	bcf	status,0,c
 10146  001B38  337F               	rrcf	(___ftmul@f3_as_product+2)& (0+255),f,b
 10147  001B3A  337E               	rrcf	(___ftmul@f3_as_product+1)& (0+255),f,b
 10148  001B3C  337D               	rrcf	___ftmul@f3_as_product& (0+255),f,b
 10149  001B3E  2B7B               	incf	___ftmul@exp& (0+255),f,b
 10150  001B40                     l1000:
 10151                           
 10152                           ; BSR set to: 0
 10153  001B40  90D8               	bcf	status,0,c
 10154  001B42  337F               	rrcf	(___ftmul@f3_as_product+2)& (0+255),f,b
 10155  001B44  337E               	rrcf	(___ftmul@f3_as_product+1)& (0+255),f,b
 10156  001B46  337D               	rrcf	___ftmul@f3_as_product& (0+255),f,b
 10157                           
 10158                           ; BSR set to: 0
 10159  001B48  C07D  F060         	movff	___ftmul@f3_as_product,___ftpack@arg
 10160  001B4C  C07E  F061         	movff	___ftmul@f3_as_product+1,___ftpack@arg+1
 10161  001B50  C07F  F062         	movff	___ftmul@f3_as_product+2,___ftpack@arg+2
 10162  001B54  C07B  F063         	movff	___ftmul@exp,___ftpack@exp
 10163  001B58  C07C  F064         	movff	___ftmul@sign,___ftpack@sign
 10164  001B5C  ECC3  F011         	call	___ftpack	;wreg free
 10165  001B60  C060  F072         	movff	?___ftpack,?___ftmul
 10166  001B64  C061  F073         	movff	?___ftpack+1,?___ftmul+1
 10167  001B68  C062  F074         	movff	?___ftpack+2,?___ftmul+2
 10168                           
 10169                           ; BSR set to: 0
 10170  001B6C  0012               	return		;funcret
 10171  001B6E                     __end_of___ftmul:
 10172                           	opt stack 0
 10173                           tblptru	equ	0xFF8
 10174                           tblptrh	equ	0xFF7
 10175                           tblptrl	equ	0xFF6
 10176                           tablat	equ	0xFF5
 10177                           prodh	equ	0xFF4
 10178                           prodl	equ	0xFF3
 10179                           intcon	equ	0xFF2
 10180                           postinc0	equ	0xFEE
 10181                           plusw0	equ	0xFEB
 10182                           wreg	equ	0xFE8
 10183                           indf1	equ	0xFE7
 10184                           postinc1	equ	0xFE6
 10185                           postdec1	equ	0xFE5
 10186                           plusw1	equ	0xFE3
 10187                           fsr1h	equ	0xFE2
 10188                           fsr1l	equ	0xFE1
 10189                           indf2	equ	0xFDF
 10190                           postinc2	equ	0xFDE
 10191                           postdec2	equ	0xFDD
 10192                           plusw2	equ	0xFDB
 10193                           fsr2h	equ	0xFDA
 10194                           fsr2l	equ	0xFD9
 10195                           status	equ	0xFD8
 10196                           
 10197 ;; *************** function ___ftsub *****************
 10198 ;; Defined at:
 10199 ;;		line 20 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\ftsub.c"
 10200 ;; Parameters:    Size  Location     Type
 10201 ;;  f1              3   59[BANK0 ] float 
 10202 ;;  f2              3   62[BANK0 ] float 
 10203 ;; Auto vars:     Size  Location     Type
 10204 ;;		None
 10205 ;; Return value:  Size  Location     Type
 10206 ;;                  3   59[BANK0 ] float 
 10207 ;; Registers used:
 10208 ;;		wreg, status,2, status,0, cstack
 10209 ;; Tracked objects:
 10210 ;;		On entry : 3F/0
 10211 ;;		On exit  : 3F/0
 10212 ;;		Unchanged: 0/0
 10213 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 10214 ;;      Params:         0       6       0       0       0       0       0       0       0
 10215 ;;      Locals:         0       0       0       0       0       0       0       0       0
 10216 ;;      Temps:          0       0       0       0       0       0       0       0       0
 10217 ;;      Totals:         0       6       0       0       0       0       0       0       0
 10218 ;;Total ram usage:        6 bytes
 10219 ;; Hardware stack levels used:    1
 10220 ;; Hardware stack levels required when called:    8
 10221 ;; This function calls:
 10222 ;;		___ftadd
 10223 ;; This function is called by:
 10224 ;;		_exp
 10225 ;; This function uses a non-reentrant model
 10226 ;;
 10227                           
 10228                           	psect	text60
 10229  002F16                     __ptext60:
 10230                           	opt stack 0
 10231  002F16                     ___ftsub:
 10232                           	opt stack 18
 10233                           
 10234                           ; BSR set to: 0
 10235                           
 10236                           ; BSR set to: 0
 10237                           ;incstack = 0
 10238  002F16  519E               	movf	___ftsub@f2& (0+255),w,b
 10239  002F18  119F               	iorwf	(___ftsub@f2+1)& (0+255),w,b
 10240  002F1A  11A0               	iorwf	(___ftsub@f2+2)& (0+255),w,b
 10241  002F1C  E002               	bz	l3488
 10242                           
 10243                           ; BSR set to: 0
 10244  002F1E  0E80               	movlw	128
 10245  002F20  1BA0               	xorwf	(___ftsub@f2+2)& (0+255),f,b
 10246  002F22                     l3488:
 10247                           
 10248                           ; BSR set to: 0
 10249  002F22  C09B  F08F         	movff	___ftsub@f1,___ftadd@f1
 10250  002F26  C09C  F090         	movff	___ftsub@f1+1,___ftadd@f1+1
 10251  002F2A  C09D  F091         	movff	___ftsub@f1+2,___ftadd@f1+2
 10252  002F2E  C09E  F092         	movff	___ftsub@f2,___ftadd@f2
 10253  002F32  C09F  F093         	movff	___ftsub@f2+1,___ftadd@f2+1
 10254  002F36  C0A0  F094         	movff	___ftsub@f2+2,___ftadd@f2+2
 10255  002F3A  ECD3  F008         	call	___ftadd	;wreg free
 10256  002F3E  C08F  F09B         	movff	?___ftadd,?___ftsub
 10257  002F42  C090  F09C         	movff	?___ftadd+1,?___ftsub+1
 10258  002F46  C091  F09D         	movff	?___ftadd+2,?___ftsub+2
 10259                           
 10260                           ; BSR set to: 0
 10261  002F4A  0012               	return		;funcret
 10262  002F4C                     __end_of___ftsub:
 10263                           	opt stack 0
 10264                           tblptru	equ	0xFF8
 10265                           tblptrh	equ	0xFF7
 10266                           tblptrl	equ	0xFF6
 10267                           tablat	equ	0xFF5
 10268                           prodh	equ	0xFF4
 10269                           prodl	equ	0xFF3
 10270                           intcon	equ	0xFF2
 10271                           postinc0	equ	0xFEE
 10272                           plusw0	equ	0xFEB
 10273                           wreg	equ	0xFE8
 10274                           indf1	equ	0xFE7
 10275                           postinc1	equ	0xFE6
 10276                           postdec1	equ	0xFE5
 10277                           plusw1	equ	0xFE3
 10278                           fsr1h	equ	0xFE2
 10279                           fsr1l	equ	0xFE1
 10280                           indf2	equ	0xFDF
 10281                           postinc2	equ	0xFDE
 10282                           postdec2	equ	0xFDD
 10283                           plusw2	equ	0xFDB
 10284                           fsr2h	equ	0xFDA
 10285                           fsr2l	equ	0xFD9
 10286                           status	equ	0xFD8
 10287                           
 10288 ;; *************** function ___ftadd *****************
 10289 ;; Defined at:
 10290 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\ftadd.c"
 10291 ;; Parameters:    Size  Location     Type
 10292 ;;  f1              3   47[BANK0 ] float 
 10293 ;;  f2              3   50[BANK0 ] float 
 10294 ;; Auto vars:     Size  Location     Type
 10295 ;;  exp1            1   58[BANK0 ] unsigned char 
 10296 ;;  exp2            1   57[BANK0 ] unsigned char 
 10297 ;;  sign            1   56[BANK0 ] unsigned char 
 10298 ;; Return value:  Size  Location     Type
 10299 ;;                  3   47[BANK0 ] float 
 10300 ;; Registers used:
 10301 ;;		wreg, status,2, status,0, cstack
 10302 ;; Tracked objects:
 10303 ;;		On entry : 3F/0
 10304 ;;		On exit  : 3F/0
 10305 ;;		Unchanged: 0/0
 10306 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 10307 ;;      Params:         0       6       0       0       0       0       0       0       0
 10308 ;;      Locals:         0       3       0       0       0       0       0       0       0
 10309 ;;      Temps:          0       3       0       0       0       0       0       0       0
 10310 ;;      Totals:         0      12       0       0       0       0       0       0       0
 10311 ;;Total ram usage:       12 bytes
 10312 ;; Hardware stack levels used:    1
 10313 ;; Hardware stack levels required when called:    7
 10314 ;; This function calls:
 10315 ;;		___ftpack
 10316 ;; This function is called by:
 10317 ;;		_I2C_Init
 10318 ;;		___ftsub
 10319 ;;		_floor
 10320 ;;		_log
 10321 ;;		_eval_poly
 10322 ;; This function uses a non-reentrant model
 10323 ;;
 10324                           
 10325                           	psect	text61
 10326  0011A6                     __ptext61:
 10327                           	opt stack 0
 10328  0011A6                     ___ftadd:
 10329                           	opt stack 20
 10330                           
 10331                           ; BSR set to: 0
 10332                           
 10333                           ; BSR set to: 0
 10334                           ;incstack = 0
 10335  0011A6  C091  F095         	movff	___ftadd@f1+2,??___ftadd
 10336  0011AA  6B96               	clrf	(??___ftadd+1)& (0+255),b
 10337  0011AC  6B97               	clrf	(??___ftadd+2)& (0+255),b
 10338  0011AE  3590               	rlcf	(___ftadd@f1+1)& (0+255),w,b
 10339  0011B0  3795               	rlcf	??___ftadd& (0+255),f,b
 10340  0011B2  E301               	bnc	u2861
 10341  0011B4  8196               	bsf	(??___ftadd+1)& (0+255),0,b
 10342  0011B6                     u2861:
 10343  0011B6  5195               	movf	??___ftadd& (0+255),w,b
 10344  0011B8  6F9A               	movwf	___ftadd@exp1& (0+255),b
 10345  0011BA  C094  F095         	movff	___ftadd@f2+2,??___ftadd
 10346  0011BE  6B96               	clrf	(??___ftadd+1)& (0+255),b
 10347  0011C0  6B97               	clrf	(??___ftadd+2)& (0+255),b
 10348  0011C2  3593               	rlcf	(___ftadd@f2+1)& (0+255),w,b
 10349  0011C4  3795               	rlcf	??___ftadd& (0+255),f,b
 10350  0011C6  E301               	bnc	u2871
 10351  0011C8  8196               	bsf	(??___ftadd+1)& (0+255),0,b
 10352  0011CA                     u2871:
 10353  0011CA  5195               	movf	??___ftadd& (0+255),w,b
 10354  0011CC  6F99               	movwf	___ftadd@exp2& (0+255),b
 10355                           
 10356                           ; BSR set to: 0
 10357  0011CE  519A               	movf	___ftadd@exp1& (0+255),w,b
 10358  0011D0  E009               	bz	u2900
 10359                           
 10360                           ; BSR set to: 0
 10361  0011D2  5199               	movf	___ftadd@exp2& (0+255),w,b
 10362  0011D4  5D9A               	subwf	___ftadd@exp1& (0+255),w,b
 10363  0011D6  E20D               	bc	l3244
 10364                           
 10365                           ; BSR set to: 0
 10366  0011D8  519A               	movf	___ftadd@exp1& (0+255),w,b
 10367  0011DA  5D99               	subwf	___ftadd@exp2& (0+255),w,b
 10368  0011DC  6F95               	movwf	??___ftadd& (0+255),b
 10369  0011DE  0E18               	movlw	24
 10370  0011E0  6595               	cpfsgt	??___ftadd& (0+255),b
 10371  0011E2  D007               	goto	l3244
 10372  0011E4                     u2900:
 10373                           
 10374                           ; BSR set to: 0
 10375  0011E4  C092  F08F         	movff	___ftadd@f2,?___ftadd
 10376  0011E8  C093  F090         	movff	___ftadd@f2+1,?___ftadd+1
 10377  0011EC  C094  F091         	movff	___ftadd@f2+2,?___ftadd+2
 10378  0011F0  0012               	return	
 10379  0011F2                     l3244:
 10380                           
 10381                           ; BSR set to: 0
 10382  0011F2  5199               	movf	___ftadd@exp2& (0+255),w,b
 10383  0011F4  E009               	bz	u2930
 10384                           
 10385                           ; BSR set to: 0
 10386  0011F6  519A               	movf	___ftadd@exp1& (0+255),w,b
 10387  0011F8  5D99               	subwf	___ftadd@exp2& (0+255),w,b
 10388  0011FA  E20D               	bc	l3250
 10389                           
 10390                           ; BSR set to: 0
 10391  0011FC  5199               	movf	___ftadd@exp2& (0+255),w,b
 10392  0011FE  5D9A               	subwf	___ftadd@exp1& (0+255),w,b
 10393  001200  6F95               	movwf	??___ftadd& (0+255),b
 10394  001202  0E18               	movlw	24
 10395  001204  6595               	cpfsgt	??___ftadd& (0+255),b
 10396  001206  D007               	goto	l3250
 10397  001208                     u2930:
 10398                           
 10399                           ; BSR set to: 0
 10400  001208  C08F  F08F         	movff	___ftadd@f1,?___ftadd
 10401  00120C  C090  F090         	movff	___ftadd@f1+1,?___ftadd+1
 10402  001210  C091  F091         	movff	___ftadd@f1+2,?___ftadd+2
 10403  001214  0012               	return	
 10404  001216                     l3250:
 10405                           
 10406                           ; BSR set to: 0
 10407  001216  0E06               	movlw	6
 10408  001218  6F98               	movwf	___ftadd@sign& (0+255),b
 10409                           
 10410                           ; BSR set to: 0
 10411  00121A  BF91               	btfsc	(___ftadd@f1+2)& (0+255),7,b
 10412                           
 10413                           ; BSR set to: 0
 10414  00121C  8F98               	bsf	___ftadd@sign& (0+255),7,b
 10415                           
 10416                           ; BSR set to: 0
 10417  00121E  BF94               	btfsc	(___ftadd@f2+2)& (0+255),7,b
 10418                           
 10419                           ; BSR set to: 0
 10420  001220  8D98               	bsf	___ftadd@sign& (0+255),6,b
 10421                           
 10422                           ; BSR set to: 0
 10423  001222  8F90               	bsf	(___ftadd@f1+1)& (0+255),7,b
 10424                           
 10425                           ; BSR set to: 0
 10426  001224  6B91               	clrf	(___ftadd@f1+2)& (0+255),b
 10427  001226  8F93               	bsf	(___ftadd@f2+1)& (0+255),7,b
 10428                           
 10429                           ; BSR set to: 0
 10430  001228  6B94               	clrf	(___ftadd@f2+2)& (0+255),b
 10431                           
 10432                           ; BSR set to: 0
 10433  00122A  5199               	movf	___ftadd@exp2& (0+255),w,b
 10434  00122C  5D9A               	subwf	___ftadd@exp1& (0+255),w,b
 10435  00122E  E218               	bc	l3276
 10436  001230                     u2960:
 10437                           
 10438                           ; BSR set to: 0
 10439  001230  90D8               	bcf	status,0,c
 10440  001232  3792               	rlcf	___ftadd@f2& (0+255),f,b
 10441  001234  3793               	rlcf	(___ftadd@f2+1)& (0+255),f,b
 10442  001236  3794               	rlcf	(___ftadd@f2+2)& (0+255),f,b
 10443  001238  0799               	decf	___ftadd@exp2& (0+255),f,b
 10444                           
 10445                           ; BSR set to: 0
 10446  00123A  519A               	movf	___ftadd@exp1& (0+255),w,b
 10447  00123C  1999               	xorwf	___ftadd@exp2& (0+255),w,b
 10448  00123E  E00C               	bz	l3274
 10449                           
 10450                           ; BSR set to: 0
 10451  001240  0798               	decf	___ftadd@sign& (0+255),f,b
 10452  001242  C098  F095         	movff	___ftadd@sign,??___ftadd
 10453  001246  0E07               	movlw	7
 10454  001248  1795               	andwf	??___ftadd& (0+255),f,b
 10455  00124A  E006               	bz	l3274
 10456  00124C  D7F1               	goto	u2960
 10457  00124E                     l3272:
 10458                           
 10459                           ; BSR set to: 0
 10460  00124E  90D8               	bcf	status,0,c
 10461  001250  3391               	rrcf	(___ftadd@f1+2)& (0+255),f,b
 10462  001252  3390               	rrcf	(___ftadd@f1+1)& (0+255),f,b
 10463  001254  338F               	rrcf	___ftadd@f1& (0+255),f,b
 10464  001256  2B9A               	incf	___ftadd@exp1& (0+255),f,b
 10465  001258                     l3274:
 10466                           
 10467                           ; BSR set to: 0
 10468  001258  5199               	movf	___ftadd@exp2& (0+255),w,b
 10469  00125A  199A               	xorwf	___ftadd@exp1& (0+255),w,b
 10470  00125C  E01B               	bz	u3030
 10471  00125E  D7F7               	goto	l3272
 10472  001260                     l3276:
 10473                           
 10474                           ; BSR set to: 0
 10475  001260  519A               	movf	___ftadd@exp1& (0+255),w,b
 10476  001262  5D99               	subwf	___ftadd@exp2& (0+255),w,b
 10477  001264  E217               	bc	u3030
 10478  001266                     u3000:
 10479                           
 10480                           ; BSR set to: 0
 10481  001266  90D8               	bcf	status,0,c
 10482  001268  378F               	rlcf	___ftadd@f1& (0+255),f,b
 10483  00126A  3790               	rlcf	(___ftadd@f1+1)& (0+255),f,b
 10484  00126C  3791               	rlcf	(___ftadd@f1+2)& (0+255),f,b
 10485  00126E  079A               	decf	___ftadd@exp1& (0+255),f,b
 10486                           
 10487                           ; BSR set to: 0
 10488  001270  519A               	movf	___ftadd@exp1& (0+255),w,b
 10489  001272  1999               	xorwf	___ftadd@exp2& (0+255),w,b
 10490  001274  E00C               	bz	l3286
 10491                           
 10492                           ; BSR set to: 0
 10493  001276  0798               	decf	___ftadd@sign& (0+255),f,b
 10494  001278  C098  F095         	movff	___ftadd@sign,??___ftadd
 10495  00127C  0E07               	movlw	7
 10496  00127E  1795               	andwf	??___ftadd& (0+255),f,b
 10497  001280  E006               	bz	l3286
 10498  001282  D7F1               	goto	u3000
 10499  001284                     l3284:
 10500                           
 10501                           ; BSR set to: 0
 10502  001284  90D8               	bcf	status,0,c
 10503  001286  3394               	rrcf	(___ftadd@f2+2)& (0+255),f,b
 10504  001288  3393               	rrcf	(___ftadd@f2+1)& (0+255),f,b
 10505  00128A  3392               	rrcf	___ftadd@f2& (0+255),f,b
 10506  00128C  2B99               	incf	___ftadd@exp2& (0+255),f,b
 10507  00128E                     l3286:
 10508                           
 10509                           ; BSR set to: 0
 10510  00128E  5199               	movf	___ftadd@exp2& (0+255),w,b
 10511  001290  199A               	xorwf	___ftadd@exp1& (0+255),w,b
 10512  001292  E1F8               	bnz	l3284
 10513  001294                     u3030:
 10514                           
 10515                           ; BSR set to: 0
 10516  001294  AF98               	btfss	___ftadd@sign& (0+255),7,b
 10517  001296  D007               	goto	l975
 10518                           
 10519                           ; BSR set to: 0
 10520  001298  1F8F               	comf	___ftadd@f1& (0+255),f,b
 10521  00129A  1F90               	comf	(___ftadd@f1+1)& (0+255),f,b
 10522  00129C  1F91               	comf	(___ftadd@f1+2)& (0+255),f,b
 10523  00129E  2B8F               	incf	___ftadd@f1& (0+255),f,b
 10524  0012A0  0E00               	movlw	0
 10525  0012A2  2390               	addwfc	(___ftadd@f1+1)& (0+255),f,b
 10526  0012A4  2391               	addwfc	(___ftadd@f1+2)& (0+255),f,b
 10527  0012A6                     l975:
 10528                           
 10529                           ; BSR set to: 0
 10530  0012A6  AD98               	btfss	___ftadd@sign& (0+255),6,b
 10531  0012A8  D007               	goto	l976
 10532                           
 10533                           ; BSR set to: 0
 10534  0012AA  1F92               	comf	___ftadd@f2& (0+255),f,b
 10535  0012AC  1F93               	comf	(___ftadd@f2+1)& (0+255),f,b
 10536  0012AE  1F94               	comf	(___ftadd@f2+2)& (0+255),f,b
 10537  0012B0  2B92               	incf	___ftadd@f2& (0+255),f,b
 10538  0012B2  0E00               	movlw	0
 10539  0012B4  2393               	addwfc	(___ftadd@f2+1)& (0+255),f,b
 10540  0012B6  2394               	addwfc	(___ftadd@f2+2)& (0+255),f,b
 10541  0012B8                     l976:
 10542                           
 10543                           ; BSR set to: 0
 10544  0012B8  6B98               	clrf	___ftadd@sign& (0+255),b
 10545  0012BA  518F               	movf	___ftadd@f1& (0+255),w,b
 10546  0012BC  2792               	addwf	___ftadd@f2& (0+255),f,b
 10547  0012BE  5190               	movf	(___ftadd@f1+1)& (0+255),w,b
 10548  0012C0  2393               	addwfc	(___ftadd@f2+1)& (0+255),f,b
 10549  0012C2  5191               	movf	(___ftadd@f1+2)& (0+255),w,b
 10550  0012C4  2394               	addwfc	(___ftadd@f2+2)& (0+255),f,b
 10551  0012C6  AF94               	btfss	(___ftadd@f2+2)& (0+255),7,b
 10552  0012C8  D009               	goto	l3296
 10553                           
 10554                           ; BSR set to: 0
 10555  0012CA  1F92               	comf	___ftadd@f2& (0+255),f,b
 10556  0012CC  1F93               	comf	(___ftadd@f2+1)& (0+255),f,b
 10557  0012CE  1F94               	comf	(___ftadd@f2+2)& (0+255),f,b
 10558  0012D0  2B92               	incf	___ftadd@f2& (0+255),f,b
 10559  0012D2  0E00               	movlw	0
 10560  0012D4  2393               	addwfc	(___ftadd@f2+1)& (0+255),f,b
 10561  0012D6  2394               	addwfc	(___ftadd@f2+2)& (0+255),f,b
 10562                           
 10563                           ; BSR set to: 0
 10564  0012D8  0E01               	movlw	1
 10565  0012DA  6F98               	movwf	___ftadd@sign& (0+255),b
 10566  0012DC                     l3296:
 10567                           
 10568                           ; BSR set to: 0
 10569  0012DC  C092  F060         	movff	___ftadd@f2,___ftpack@arg
 10570  0012E0  C093  F061         	movff	___ftadd@f2+1,___ftpack@arg+1
 10571  0012E4  C094  F062         	movff	___ftadd@f2+2,___ftpack@arg+2
 10572  0012E8  C09A  F063         	movff	___ftadd@exp1,___ftpack@exp
 10573  0012EC  C098  F064         	movff	___ftadd@sign,___ftpack@sign
 10574  0012F0  ECC3  F011         	call	___ftpack	;wreg free
 10575  0012F4  C060  F08F         	movff	?___ftpack,?___ftadd
 10576  0012F8  C061  F090         	movff	?___ftpack+1,?___ftadd+1
 10577  0012FC  C062  F091         	movff	?___ftpack+2,?___ftadd+2
 10578                           
 10579                           ; BSR set to: 0
 10580  001300  0012               	return		;funcret
 10581  001302                     __end_of___ftadd:
 10582                           	opt stack 0
 10583                           tblptru	equ	0xFF8
 10584                           tblptrh	equ	0xFF7
 10585                           tblptrl	equ	0xFF6
 10586                           tablat	equ	0xFF5
 10587                           prodh	equ	0xFF4
 10588                           prodl	equ	0xFF3
 10589                           intcon	equ	0xFF2
 10590                           postinc0	equ	0xFEE
 10591                           plusw0	equ	0xFEB
 10592                           wreg	equ	0xFE8
 10593                           indf1	equ	0xFE7
 10594                           postinc1	equ	0xFE6
 10595                           postdec1	equ	0xFE5
 10596                           plusw1	equ	0xFE3
 10597                           fsr1h	equ	0xFE2
 10598                           fsr1l	equ	0xFE1
 10599                           indf2	equ	0xFDF
 10600                           postinc2	equ	0xFDE
 10601                           postdec2	equ	0xFDD
 10602                           plusw2	equ	0xFDB
 10603                           fsr2h	equ	0xFDA
 10604                           fsr2l	equ	0xFD9
 10605                           status	equ	0xFD8
 10606                           
 10607 ;; *************** function ___ftneg *****************
 10608 ;; Defined at:
 10609 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\ftneg.c"
 10610 ;; Parameters:    Size  Location     Type
 10611 ;;  f1              3    0[BANK0 ] float 
 10612 ;; Auto vars:     Size  Location     Type
 10613 ;;		None
 10614 ;; Return value:  Size  Location     Type
 10615 ;;                  3    0[BANK0 ] float 
 10616 ;; Registers used:
 10617 ;;		wreg, status,2, status,0
 10618 ;; Tracked objects:
 10619 ;;		On entry : 3F/0
 10620 ;;		On exit  : 3F/0
 10621 ;;		Unchanged: 0/0
 10622 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 10623 ;;      Params:         0       3       0       0       0       0       0       0       0
 10624 ;;      Locals:         0       0       0       0       0       0       0       0       0
 10625 ;;      Temps:          0       0       0       0       0       0       0       0       0
 10626 ;;      Totals:         0       3       0       0       0       0       0       0       0
 10627 ;;Total ram usage:        3 bytes
 10628 ;; Hardware stack levels used:    1
 10629 ;; Hardware stack levels required when called:    6
 10630 ;; This function calls:
 10631 ;;		Nothing
 10632 ;; This function is called by:
 10633 ;;		_pow
 10634 ;;		_exp
 10635 ;; This function uses a non-reentrant model
 10636 ;;
 10637                           
 10638                           	psect	text62
 10639  003128                     __ptext62:
 10640                           	opt stack 0
 10641  003128                     ___ftneg:
 10642                           	opt stack 20
 10643                           
 10644                           ; BSR set to: 0
 10645                           
 10646                           ; BSR set to: 0
 10647                           ;incstack = 0
 10648  003128  5160               	movf	___ftneg@f1& (0+255),w,b
 10649  00312A  1161               	iorwf	(___ftneg@f1+1)& (0+255),w,b
 10650  00312C  1162               	iorwf	(___ftneg@f1+2)& (0+255),w,b
 10651  00312E  E002               	bz	l1003
 10652                           
 10653                           ; BSR set to: 0
 10654  003130  0E80               	movlw	128
 10655  003132  1B62               	xorwf	(___ftneg@f1+2)& (0+255),f,b
 10656  003134                     l1003:
 10657                           
 10658                           ; BSR set to: 0
 10659  003134  C060  F060         	movff	___ftneg@f1,?___ftneg
 10660  003138  C061  F061         	movff	___ftneg@f1+1,?___ftneg+1
 10661  00313C  C062  F062         	movff	___ftneg@f1+2,?___ftneg+2
 10662                           
 10663                           ; BSR set to: 0
 10664  003140  0012               	return		;funcret
 10665  003142                     __end_of___ftneg:
 10666                           	opt stack 0
 10667                           tblptru	equ	0xFF8
 10668                           tblptrh	equ	0xFF7
 10669                           tblptrl	equ	0xFF6
 10670                           tablat	equ	0xFF5
 10671                           prodh	equ	0xFF4
 10672                           prodl	equ	0xFF3
 10673                           intcon	equ	0xFF2
 10674                           postinc0	equ	0xFEE
 10675                           plusw0	equ	0xFEB
 10676                           wreg	equ	0xFE8
 10677                           indf1	equ	0xFE7
 10678                           postinc1	equ	0xFE6
 10679                           postdec1	equ	0xFE5
 10680                           plusw1	equ	0xFE3
 10681                           fsr1h	equ	0xFE2
 10682                           fsr1l	equ	0xFE1
 10683                           indf2	equ	0xFDF
 10684                           postinc2	equ	0xFDE
 10685                           postdec2	equ	0xFDD
 10686                           plusw2	equ	0xFDB
 10687                           fsr2h	equ	0xFDA
 10688                           fsr2l	equ	0xFD9
 10689                           status	equ	0xFD8
 10690                           
 10691 ;; *************** function ___ftdiv *****************
 10692 ;; Defined at:
 10693 ;;		line 54 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\ftdiv.c"
 10694 ;; Parameters:    Size  Location     Type
 10695 ;;  f1              3   32[BANK0 ] float 
 10696 ;;  f2              3   35[BANK0 ] float 
 10697 ;; Auto vars:     Size  Location     Type
 10698 ;;  f3              3   42[BANK0 ] float 
 10699 ;;  sign            1   46[BANK0 ] unsigned char 
 10700 ;;  exp             1   45[BANK0 ] unsigned char 
 10701 ;;  cntr            1   41[BANK0 ] unsigned char 
 10702 ;; Return value:  Size  Location     Type
 10703 ;;                  3   32[BANK0 ] float 
 10704 ;; Registers used:
 10705 ;;		wreg, status,2, status,0, cstack
 10706 ;; Tracked objects:
 10707 ;;		On entry : 3F/0
 10708 ;;		On exit  : 3F/0
 10709 ;;		Unchanged: 0/0
 10710 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 10711 ;;      Params:         0       6       0       0       0       0       0       0       0
 10712 ;;      Locals:         0       6       0       0       0       0       0       0       0
 10713 ;;      Temps:          0       3       0       0       0       0       0       0       0
 10714 ;;      Totals:         0      15       0       0       0       0       0       0       0
 10715 ;;Total ram usage:       15 bytes
 10716 ;; Hardware stack levels used:    1
 10717 ;; Hardware stack levels required when called:    7
 10718 ;; This function calls:
 10719 ;;		___ftpack
 10720 ;; This function is called by:
 10721 ;;		_Sequencer_StartTimer
 10722 ;;		_InitDigiPot
 10723 ;;		_Zip
 10724 ;;		_UnZip
 10725 ;;		_I2C_Init
 10726 ;;		_exp
 10727 ;; This function uses a non-reentrant model
 10728 ;;
 10729                           
 10730                           	psect	text63
 10731  001E90                     __ptext63:
 10732                           	opt stack 0
 10733  001E90                     ___ftdiv:
 10734                           	opt stack 22
 10735                           
 10736                           ; BSR set to: 0
 10737                           
 10738                           ; BSR set to: 0
 10739                           ;incstack = 0
 10740  001E90  C082  F086         	movff	___ftdiv@f1+2,??___ftdiv
 10741  001E94  6B87               	clrf	(??___ftdiv+1)& (0+255),b
 10742  001E96  6B88               	clrf	(??___ftdiv+2)& (0+255),b
 10743  001E98  3581               	rlcf	(___ftdiv@f1+1)& (0+255),w,b
 10744  001E9A  3786               	rlcf	??___ftdiv& (0+255),f,b
 10745  001E9C  E301               	bnc	u3311
 10746  001E9E  8187               	bsf	(??___ftdiv+1)& (0+255),0,b
 10747  001EA0                     u3311:
 10748  001EA0  5186               	movf	??___ftdiv& (0+255),w,b
 10749  001EA2  6F8D               	movwf	___ftdiv@exp& (0+255),b
 10750  001EA4  518D               	movf	___ftdiv@exp& (0+255),w,b
 10751  001EA6  E104               	bnz	l3452
 10752                           
 10753                           ; BSR set to: 0
 10754  001EA8  6B80               	clrf	?___ftdiv& (0+255),b
 10755  001EAA  6B81               	clrf	(?___ftdiv+1)& (0+255),b
 10756  001EAC  6B82               	clrf	(?___ftdiv+2)& (0+255),b
 10757  001EAE  0012               	return	
 10758  001EB0                     l3452:
 10759                           
 10760                           ; BSR set to: 0
 10761  001EB0  C085  F086         	movff	___ftdiv@f2+2,??___ftdiv
 10762  001EB4  6B87               	clrf	(??___ftdiv+1)& (0+255),b
 10763  001EB6  6B88               	clrf	(??___ftdiv+2)& (0+255),b
 10764  001EB8  3584               	rlcf	(___ftdiv@f2+1)& (0+255),w,b
 10765  001EBA  3786               	rlcf	??___ftdiv& (0+255),f,b
 10766  001EBC  E301               	bnc	u3331
 10767  001EBE  8187               	bsf	(??___ftdiv+1)& (0+255),0,b
 10768  001EC0                     u3331:
 10769  001EC0  5186               	movf	??___ftdiv& (0+255),w,b
 10770  001EC2  6F8E               	movwf	___ftdiv@sign& (0+255),b
 10771  001EC4  518E               	movf	___ftdiv@sign& (0+255),w,b
 10772  001EC6  E104               	bnz	l984
 10773                           
 10774                           ; BSR set to: 0
 10775  001EC8  6B80               	clrf	?___ftdiv& (0+255),b
 10776  001ECA  6B81               	clrf	(?___ftdiv+1)& (0+255),b
 10777  001ECC  6B82               	clrf	(?___ftdiv+2)& (0+255),b
 10778  001ECE  0012               	return	
 10779  001ED0                     l984:
 10780                           
 10781                           ; BSR set to: 0
 10782  001ED0  6B8A               	clrf	___ftdiv@f3& (0+255),b
 10783  001ED2  6B8B               	clrf	(___ftdiv@f3+1)& (0+255),b
 10784  001ED4  6B8C               	clrf	(___ftdiv@f3+2)& (0+255),b
 10785                           
 10786                           ; BSR set to: 0
 10787  001ED6  518E               	movf	___ftdiv@sign& (0+255),w,b
 10788  001ED8  0F89               	addlw	137
 10789  001EDA  5F8D               	subwf	___ftdiv@exp& (0+255),f,b
 10790                           
 10791                           ; BSR set to: 0
 10792  001EDC  C082  F08E         	movff	___ftdiv@f1+2,___ftdiv@sign
 10793  001EE0  5185               	movf	(___ftdiv@f2+2)& (0+255),w,b
 10794  001EE2  1B8E               	xorwf	___ftdiv@sign& (0+255),f,b
 10795  001EE4  0E80               	movlw	128
 10796  001EE6  178E               	andwf	___ftdiv@sign& (0+255),f,b
 10797                           
 10798                           ; BSR set to: 0
 10799  001EE8  8F81               	bsf	(___ftdiv@f1+1)& (0+255),7,b
 10800                           
 10801                           ; BSR set to: 0
 10802  001EEA  6B82               	clrf	(___ftdiv@f1+2)& (0+255),b
 10803                           
 10804                           ; BSR set to: 0
 10805  001EEC  8F84               	bsf	(___ftdiv@f2+1)& (0+255),7,b
 10806                           
 10807                           ; BSR set to: 0
 10808  001EEE  6B85               	clrf	(___ftdiv@f2+2)& (0+255),b
 10809                           
 10810                           ; BSR set to: 0
 10811  001EF0  0E18               	movlw	24
 10812  001EF2  6F89               	movwf	___ftdiv@cntr& (0+255),b
 10813  001EF4                     l3470:
 10814                           
 10815                           ; BSR set to: 0
 10816  001EF4  90D8               	bcf	status,0,c
 10817  001EF6  378A               	rlcf	___ftdiv@f3& (0+255),f,b
 10818  001EF8  378B               	rlcf	(___ftdiv@f3+1)& (0+255),f,b
 10819  001EFA  378C               	rlcf	(___ftdiv@f3+2)& (0+255),f,b
 10820                           
 10821                           ; BSR set to: 0
 10822  001EFC  5183               	movf	___ftdiv@f2& (0+255),w,b
 10823  001EFE  5D80               	subwf	___ftdiv@f1& (0+255),w,b
 10824  001F00  5184               	movf	(___ftdiv@f2+1)& (0+255),w,b
 10825  001F02  5981               	subwfb	(___ftdiv@f1+1)& (0+255),w,b
 10826  001F04  5185               	movf	(___ftdiv@f2+2)& (0+255),w,b
 10827  001F06  5982               	subwfb	(___ftdiv@f1+2)& (0+255),w,b
 10828  001F08  E307               	bnc	l986
 10829                           
 10830                           ; BSR set to: 0
 10831  001F0A  5183               	movf	___ftdiv@f2& (0+255),w,b
 10832  001F0C  5F80               	subwf	___ftdiv@f1& (0+255),f,b
 10833  001F0E  5184               	movf	(___ftdiv@f2+1)& (0+255),w,b
 10834  001F10  5B81               	subwfb	(___ftdiv@f1+1)& (0+255),f,b
 10835  001F12  5185               	movf	(___ftdiv@f2+2)& (0+255),w,b
 10836  001F14  5B82               	subwfb	(___ftdiv@f1+2)& (0+255),f,b
 10837                           
 10838                           ; BSR set to: 0
 10839  001F16  818A               	bsf	___ftdiv@f3& (0+255),0,b
 10840  001F18                     l986:
 10841                           
 10842                           ; BSR set to: 0
 10843  001F18  90D8               	bcf	status,0,c
 10844  001F1A  3780               	rlcf	___ftdiv@f1& (0+255),f,b
 10845  001F1C  3781               	rlcf	(___ftdiv@f1+1)& (0+255),f,b
 10846  001F1E  3782               	rlcf	(___ftdiv@f1+2)& (0+255),f,b
 10847                           
 10848                           ; BSR set to: 0
 10849  001F20  2F89               	decfsz	___ftdiv@cntr& (0+255),f,b
 10850  001F22  D7E8               	goto	l3470
 10851                           
 10852                           ; BSR set to: 0
 10853  001F24  C08A  F060         	movff	___ftdiv@f3,___ftpack@arg
 10854  001F28  C08B  F061         	movff	___ftdiv@f3+1,___ftpack@arg+1
 10855  001F2C  C08C  F062         	movff	___ftdiv@f3+2,___ftpack@arg+2
 10856  001F30  C08D  F063         	movff	___ftdiv@exp,___ftpack@exp
 10857  001F34  C08E  F064         	movff	___ftdiv@sign,___ftpack@sign
 10858  001F38  ECC3  F011         	call	___ftpack	;wreg free
 10859  001F3C  C060  F080         	movff	?___ftpack,?___ftdiv
 10860  001F40  C061  F081         	movff	?___ftpack+1,?___ftdiv+1
 10861  001F44  C062  F082         	movff	?___ftpack+2,?___ftdiv+2
 10862                           
 10863                           ; BSR set to: 0
 10864  001F48  0012               	return		;funcret
 10865  001F4A                     __end_of___ftdiv:
 10866                           	opt stack 0
 10867                           tblptru	equ	0xFF8
 10868                           tblptrh	equ	0xFF7
 10869                           tblptrl	equ	0xFF6
 10870                           tablat	equ	0xFF5
 10871                           prodh	equ	0xFF4
 10872                           prodl	equ	0xFF3
 10873                           intcon	equ	0xFF2
 10874                           postinc0	equ	0xFEE
 10875                           plusw0	equ	0xFEB
 10876                           wreg	equ	0xFE8
 10877                           indf1	equ	0xFE7
 10878                           postinc1	equ	0xFE6
 10879                           postdec1	equ	0xFE5
 10880                           plusw1	equ	0xFE3
 10881                           fsr1h	equ	0xFE2
 10882                           fsr1l	equ	0xFE1
 10883                           indf2	equ	0xFDF
 10884                           postinc2	equ	0xFDE
 10885                           postdec2	equ	0xFDD
 10886                           plusw2	equ	0xFDB
 10887                           fsr2h	equ	0xFDA
 10888                           fsr2l	equ	0xFD9
 10889                           status	equ	0xFD8
 10890                           
 10891 ;; *************** function ___awtoft *****************
 10892 ;; Defined at:
 10893 ;;		line 32 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\awtoft.c"
 10894 ;; Parameters:    Size  Location     Type
 10895 ;;  c               2    8[BANK0 ] int 
 10896 ;; Auto vars:     Size  Location     Type
 10897 ;;  sign            1   11[BANK0 ] unsigned char 
 10898 ;; Return value:  Size  Location     Type
 10899 ;;                  3    8[BANK0 ] float 
 10900 ;; Registers used:
 10901 ;;		wreg, status,2, status,0, cstack
 10902 ;; Tracked objects:
 10903 ;;		On entry : 3F/0
 10904 ;;		On exit  : 3F/0
 10905 ;;		Unchanged: 0/0
 10906 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 10907 ;;      Params:         0       3       0       0       0       0       0       0       0
 10908 ;;      Locals:         0       1       0       0       0       0       0       0       0
 10909 ;;      Temps:          0       0       0       0       0       0       0       0       0
 10910 ;;      Totals:         0       4       0       0       0       0       0       0       0
 10911 ;;Total ram usage:        4 bytes
 10912 ;; Hardware stack levels used:    1
 10913 ;; Hardware stack levels required when called:    7
 10914 ;; This function calls:
 10915 ;;		___ftpack
 10916 ;; This function is called by:
 10917 ;;		_Display_Init
 10918 ;;		_exp
 10919 ;;		_log
 10920 ;; This function uses a non-reentrant model
 10921 ;;
 10922                           
 10923                           	psect	text64
 10924  002F4C                     __ptext64:
 10925                           	opt stack 0
 10926  002F4C                     ___awtoft:
 10927                           	opt stack 19
 10928                           
 10929                           ; BSR set to: 0
 10930                           
 10931                           ; BSR set to: 0
 10932                           ;incstack = 0
 10933  002F4C  6B6B               	clrf	___awtoft@sign& (0+255),b
 10934                           
 10935                           ; BSR set to: 0
 10936  002F4E  AF69               	btfss	(___awtoft@c+1)& (0+255),7,b
 10937  002F50  D006               	goto	l3500
 10938                           
 10939                           ; BSR set to: 0
 10940  002F52  6D68               	negf	___awtoft@c& (0+255),b
 10941  002F54  1F69               	comf	(___awtoft@c+1)& (0+255),f,b
 10942  002F56  B0D8               	btfsc	status,0,c
 10943  002F58  2B69               	incf	(___awtoft@c+1)& (0+255),f,b
 10944                           
 10945                           ; BSR set to: 0
 10946  002F5A  0E01               	movlw	1
 10947  002F5C  6F6B               	movwf	___awtoft@sign& (0+255),b
 10948  002F5E                     l3500:
 10949                           
 10950                           ; BSR set to: 0
 10951  002F5E  C068  F060         	movff	___awtoft@c,___ftpack@arg
 10952  002F62  C069  F061         	movff	___awtoft@c+1,___ftpack@arg+1
 10953  002F66  6B62               	clrf	(___ftpack@arg+2)& (0+255),b
 10954  002F68  0E8E               	movlw	142
 10955  002F6A  6F63               	movwf	___ftpack@exp& (0+255),b
 10956  002F6C  C06B  F064         	movff	___awtoft@sign,___ftpack@sign
 10957  002F70  ECC3  F011         	call	___ftpack	;wreg free
 10958  002F74  C060  F068         	movff	?___ftpack,?___awtoft
 10959  002F78  C061  F069         	movff	?___ftpack+1,?___awtoft+1
 10960  002F7C  C062  F06A         	movff	?___ftpack+2,?___awtoft+2
 10961                           
 10962                           ; BSR set to: 0
 10963  002F80  0012               	return		;funcret
 10964  002F82                     __end_of___awtoft:
 10965                           	opt stack 0
 10966                           tblptru	equ	0xFF8
 10967                           tblptrh	equ	0xFF7
 10968                           tblptrl	equ	0xFF6
 10969                           tablat	equ	0xFF5
 10970                           prodh	equ	0xFF4
 10971                           prodl	equ	0xFF3
 10972                           intcon	equ	0xFF2
 10973                           postinc0	equ	0xFEE
 10974                           plusw0	equ	0xFEB
 10975                           wreg	equ	0xFE8
 10976                           indf1	equ	0xFE7
 10977                           postinc1	equ	0xFE6
 10978                           postdec1	equ	0xFE5
 10979                           plusw1	equ	0xFE3
 10980                           fsr1h	equ	0xFE2
 10981                           fsr1l	equ	0xFE1
 10982                           indf2	equ	0xFDF
 10983                           postinc2	equ	0xFDE
 10984                           postdec2	equ	0xFDD
 10985                           plusw2	equ	0xFDB
 10986                           fsr2h	equ	0xFDA
 10987                           fsr2l	equ	0xFD9
 10988                           status	equ	0xFD8
 10989                           
 10990 ;; *************** function ___lltoft *****************
 10991 ;; Defined at:
 10992 ;;		line 35 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\lltoft.c"
 10993 ;; Parameters:    Size  Location     Type
 10994 ;;  c               4    8[BANK0 ] unsigned long 
 10995 ;; Auto vars:     Size  Location     Type
 10996 ;;  exp             1   16[BANK0 ] unsigned char 
 10997 ;; Return value:  Size  Location     Type
 10998 ;;                  3    8[BANK0 ] float 
 10999 ;; Registers used:
 11000 ;;		wreg, status,2, status,0, cstack
 11001 ;; Tracked objects:
 11002 ;;		On entry : 3F/0
 11003 ;;		On exit  : 3F/0
 11004 ;;		Unchanged: 0/0
 11005 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 11006 ;;      Params:         0       4       0       0       0       0       0       0       0
 11007 ;;      Locals:         0       1       0       0       0       0       0       0       0
 11008 ;;      Temps:          0       4       0       0       0       0       0       0       0
 11009 ;;      Totals:         0       9       0       0       0       0       0       0       0
 11010 ;;Total ram usage:        9 bytes
 11011 ;; Hardware stack levels used:    1
 11012 ;; Hardware stack levels required when called:    7
 11013 ;; This function calls:
 11014 ;;		___ftpack
 11015 ;; This function is called by:
 11016 ;;		_pow
 11017 ;; This function uses a non-reentrant model
 11018 ;;
 11019                           
 11020                           	psect	text65
 11021  002C8A                     __ptext65:
 11022                           	opt stack 0
 11023  002C8A                     ___lltoft:
 11024                           	opt stack 20
 11025                           
 11026                           ; BSR set to: 0
 11027                           
 11028                           ; BSR set to: 0
 11029                           ;incstack = 0
 11030  002C8A  0E8E               	movlw	142
 11031  002C8C  6F70               	movwf	___lltoft@exp& (0+255),b
 11032  002C8E  D006               	goto	l3646
 11033  002C90                     l3644:
 11034                           
 11035                           ; BSR set to: 0
 11036  002C90  90D8               	bcf	status,0,c
 11037  002C92  336B               	rrcf	(___lltoft@c+3)& (0+255),f,b
 11038  002C94  336A               	rrcf	(___lltoft@c+2)& (0+255),f,b
 11039  002C96  3369               	rrcf	(___lltoft@c+1)& (0+255),f,b
 11040  002C98  3368               	rrcf	___lltoft@c& (0+255),f,b
 11041  002C9A  2B70               	incf	___lltoft@exp& (0+255),f,b
 11042  002C9C                     l3646:
 11043                           
 11044                           ; BSR set to: 0
 11045  002C9C  6B6C               	clrf	??___lltoft& (0+255),b
 11046  002C9E  6B6D               	clrf	(??___lltoft+1)& (0+255),b
 11047  002CA0  6B6E               	clrf	(??___lltoft+2)& (0+255),b
 11048  002CA2  516B               	movf	(___lltoft@c+3)& (0+255),w,b
 11049  002CA4  6F6F               	movwf	(??___lltoft+3)& (0+255),b
 11050  002CA6  516C               	movf	??___lltoft& (0+255),w,b
 11051  002CA8  116D               	iorwf	(??___lltoft+1)& (0+255),w,b
 11052  002CAA  116E               	iorwf	(??___lltoft+2)& (0+255),w,b
 11053  002CAC  116F               	iorwf	(??___lltoft+3)& (0+255),w,b
 11054  002CAE  E1F0               	bnz	l3644
 11055                           
 11056                           ; BSR set to: 0
 11057  002CB0  C068  F060         	movff	___lltoft@c,___ftpack@arg
 11058  002CB4  C069  F061         	movff	___lltoft@c+1,___ftpack@arg+1
 11059  002CB8  C06A  F062         	movff	___lltoft@c+2,___ftpack@arg+2
 11060  002CBC  C070  F063         	movff	___lltoft@exp,___ftpack@exp
 11061  002CC0  0E00               	movlw	0
 11062  002CC2  6F64               	movwf	___ftpack@sign& (0+255),b
 11063  002CC4  ECC3  F011         	call	___ftpack	;wreg free
 11064  002CC8  C060  F068         	movff	?___ftpack,?___lltoft
 11065  002CCC  C061  F069         	movff	?___ftpack+1,?___lltoft+1
 11066  002CD0  C062  F06A         	movff	?___ftpack+2,?___lltoft+2
 11067                           
 11068                           ; BSR set to: 0
 11069  002CD4  0012               	return		;funcret
 11070  002CD6                     __end_of___lltoft:
 11071                           	opt stack 0
 11072                           tblptru	equ	0xFF8
 11073                           tblptrh	equ	0xFF7
 11074                           tblptrl	equ	0xFF6
 11075                           tablat	equ	0xFF5
 11076                           prodh	equ	0xFF4
 11077                           prodl	equ	0xFF3
 11078                           intcon	equ	0xFF2
 11079                           postinc0	equ	0xFEE
 11080                           plusw0	equ	0xFEB
 11081                           wreg	equ	0xFE8
 11082                           indf1	equ	0xFE7
 11083                           postinc1	equ	0xFE6
 11084                           postdec1	equ	0xFE5
 11085                           plusw1	equ	0xFE3
 11086                           fsr1h	equ	0xFE2
 11087                           fsr1l	equ	0xFE1
 11088                           indf2	equ	0xFDF
 11089                           postinc2	equ	0xFDE
 11090                           postdec2	equ	0xFDD
 11091                           plusw2	equ	0xFDB
 11092                           fsr2h	equ	0xFDA
 11093                           fsr2l	equ	0xFD9
 11094                           status	equ	0xFD8
 11095                           
 11096 ;; *************** function ___ftpack *****************
 11097 ;; Defined at:
 11098 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\float.c"
 11099 ;; Parameters:    Size  Location     Type
 11100 ;;  arg             3    0[BANK0 ] unsigned um
 11101 ;;  exp             1    3[BANK0 ] unsigned char 
 11102 ;;  sign            1    4[BANK0 ] unsigned char 
 11103 ;; Auto vars:     Size  Location     Type
 11104 ;;		None
 11105 ;; Return value:  Size  Location     Type
 11106 ;;                  3    0[BANK0 ] float 
 11107 ;; Registers used:
 11108 ;;		wreg, status,2, status,0
 11109 ;; Tracked objects:
 11110 ;;		On entry : 3F/0
 11111 ;;		On exit  : 3F/0
 11112 ;;		Unchanged: 0/0
 11113 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 11114 ;;      Params:         0       5       0       0       0       0       0       0       0
 11115 ;;      Locals:         0       0       0       0       0       0       0       0       0
 11116 ;;      Temps:          0       3       0       0       0       0       0       0       0
 11117 ;;      Totals:         0       8       0       0       0       0       0       0       0
 11118 ;;Total ram usage:        8 bytes
 11119 ;; Hardware stack levels used:    1
 11120 ;; Hardware stack levels required when called:    6
 11121 ;; This function calls:
 11122 ;;		Nothing
 11123 ;; This function is called by:
 11124 ;;		___altoft
 11125 ;;		___awtoft
 11126 ;;		___ftadd
 11127 ;;		___ftdiv
 11128 ;;		___ftmul
 11129 ;;		___lbtoft
 11130 ;;		___lltoft
 11131 ;; This function uses a non-reentrant model
 11132 ;;
 11133                           
 11134                           	psect	text66
 11135  002386                     __ptext66:
 11136                           	opt stack 0
 11137  002386                     ___ftpack:
 11138                           	opt stack 22
 11139                           
 11140                           ; BSR set to: 0
 11141                           
 11142                           ; BSR set to: 0
 11143                           ;incstack = 0
 11144  002386  5163               	movf	___ftpack@exp& (0+255),w,b
 11145  002388  E004               	bz	u2730
 11146                           
 11147                           ; BSR set to: 0
 11148  00238A  5160               	movf	___ftpack@arg& (0+255),w,b
 11149  00238C  1161               	iorwf	(___ftpack@arg+1)& (0+255),w,b
 11150  00238E  1162               	iorwf	(___ftpack@arg+2)& (0+255),w,b
 11151  002390  E109               	bnz	l3162
 11152  002392                     u2730:
 11153                           
 11154                           ; BSR set to: 0
 11155  002392  6B60               	clrf	?___ftpack& (0+255),b
 11156  002394  6B61               	clrf	(?___ftpack+1)& (0+255),b
 11157  002396  6B62               	clrf	(?___ftpack+2)& (0+255),b
 11158  002398  0012               	return	
 11159  00239A                     l3160:
 11160                           
 11161                           ; BSR set to: 0
 11162  00239A  2B63               	incf	___ftpack@exp& (0+255),f,b
 11163  00239C  90D8               	bcf	status,0,c
 11164  00239E  3362               	rrcf	(___ftpack@arg+2)& (0+255),f,b
 11165  0023A0  3361               	rrcf	(___ftpack@arg+1)& (0+255),f,b
 11166  0023A2  3360               	rrcf	___ftpack@arg& (0+255),f,b
 11167  0023A4                     l3162:
 11168                           
 11169                           ; BSR set to: 0
 11170  0023A4  6B65               	clrf	??___ftpack& (0+255),b
 11171  0023A6  6B66               	clrf	(??___ftpack+1)& (0+255),b
 11172  0023A8  0EFE               	movlw	254
 11173  0023AA  1562               	andwf	(___ftpack@arg+2)& (0+255),w,b
 11174  0023AC  6F67               	movwf	(??___ftpack+2)& (0+255),b
 11175  0023AE  5165               	movf	??___ftpack& (0+255),w,b
 11176  0023B0  1166               	iorwf	(??___ftpack+1)& (0+255),w,b
 11177  0023B2  1167               	iorwf	(??___ftpack+2)& (0+255),w,b
 11178  0023B4  E00A               	bz	l3168
 11179  0023B6  D7F1               	goto	l3160
 11180  0023B8                     l3164:
 11181                           
 11182                           ; BSR set to: 0
 11183  0023B8  2B63               	incf	___ftpack@exp& (0+255),f,b
 11184                           
 11185                           ; BSR set to: 0
 11186  0023BA  2B60               	incf	___ftpack@arg& (0+255),f,b
 11187  0023BC  0E00               	movlw	0
 11188  0023BE  2361               	addwfc	(___ftpack@arg+1)& (0+255),f,b
 11189  0023C0  2362               	addwfc	(___ftpack@arg+2)& (0+255),f,b
 11190  0023C2  90D8               	bcf	status,0,c
 11191  0023C4  3362               	rrcf	(___ftpack@arg+2)& (0+255),f,b
 11192  0023C6  3361               	rrcf	(___ftpack@arg+1)& (0+255),f,b
 11193  0023C8  3360               	rrcf	___ftpack@arg& (0+255),f,b
 11194  0023CA                     l3168:
 11195                           
 11196                           ; BSR set to: 0
 11197  0023CA  6B65               	clrf	??___ftpack& (0+255),b
 11198  0023CC  6B66               	clrf	(??___ftpack+1)& (0+255),b
 11199  0023CE  5162               	movf	(___ftpack@arg+2)& (0+255),w,b
 11200  0023D0  6F67               	movwf	(??___ftpack+2)& (0+255),b
 11201  0023D2  5165               	movf	??___ftpack& (0+255),w,b
 11202  0023D4  1166               	iorwf	(??___ftpack+1)& (0+255),w,b
 11203  0023D6  1167               	iorwf	(??___ftpack+2)& (0+255),w,b
 11204  0023D8  E006               	bz	l3172
 11205  0023DA  D7EE               	goto	l3164
 11206  0023DC                     l3170:
 11207                           
 11208                           ; BSR set to: 0
 11209  0023DC  0763               	decf	___ftpack@exp& (0+255),f,b
 11210  0023DE  90D8               	bcf	status,0,c
 11211  0023E0  3760               	rlcf	___ftpack@arg& (0+255),f,b
 11212  0023E2  3761               	rlcf	(___ftpack@arg+1)& (0+255),f,b
 11213  0023E4  3762               	rlcf	(___ftpack@arg+2)& (0+255),f,b
 11214  0023E6                     l3172:
 11215                           
 11216                           ; BSR set to: 0
 11217  0023E6  BF61               	btfsc	(___ftpack@arg+1)& (0+255),7,b
 11218  0023E8  D003               	goto	u2770
 11219                           
 11220                           ; BSR set to: 0
 11221  0023EA  0E02               	movlw	2
 11222  0023EC  6163               	cpfslt	___ftpack@exp& (0+255),b
 11223  0023EE  D7F6               	goto	l3170
 11224  0023F0                     u2770:
 11225                           
 11226                           ; BSR set to: 0
 11227  0023F0  A163               	btfss	___ftpack@exp& (0+255),0,b
 11228                           
 11229                           ; BSR set to: 0
 11230  0023F2  9F61               	bcf	(___ftpack@arg+1)& (0+255),7,b
 11231                           
 11232                           ; BSR set to: 0
 11233  0023F4  90D8               	bcf	status,0,c
 11234  0023F6  3363               	rrcf	___ftpack@exp& (0+255),f,b
 11235                           
 11236                           ; BSR set to: 0
 11237  0023F8  5163               	movf	___ftpack@exp& (0+255),w,b
 11238  0023FA  1362               	iorwf	(___ftpack@arg+2)& (0+255),f,b
 11239                           
 11240                           ; BSR set to: 0
 11241  0023FC  5164               	movf	___ftpack@sign& (0+255),w,b
 11242  0023FE  E001               	bz	l3186
 11243                           
 11244                           ; BSR set to: 0
 11245  002400  8F62               	bsf	(___ftpack@arg+2)& (0+255),7,b
 11246  002402                     l3186:
 11247                           
 11248                           ; BSR set to: 0
 11249  002402  C060  F060         	movff	___ftpack@arg,?___ftpack
 11250  002406  C061  F061         	movff	___ftpack@arg+1,?___ftpack+1
 11251  00240A  C062  F062         	movff	___ftpack@arg+2,?___ftpack+2
 11252                           
 11253                           ; BSR set to: 0
 11254  00240E  0012               	return		;funcret
 11255  002410                     __end_of___ftpack:
 11256                           	opt stack 0
 11257                           tblptru	equ	0xFF8
 11258                           tblptrh	equ	0xFF7
 11259                           tblptrl	equ	0xFF6
 11260                           tablat	equ	0xFF5
 11261                           prodh	equ	0xFF4
 11262                           prodl	equ	0xFF3
 11263                           intcon	equ	0xFF2
 11264                           postinc0	equ	0xFEE
 11265                           plusw0	equ	0xFEB
 11266                           wreg	equ	0xFE8
 11267                           indf1	equ	0xFE7
 11268                           postinc1	equ	0xFE6
 11269                           postdec1	equ	0xFE5
 11270                           plusw1	equ	0xFE3
 11271                           fsr1h	equ	0xFE2
 11272                           fsr1l	equ	0xFE1
 11273                           indf2	equ	0xFDF
 11274                           postinc2	equ	0xFDE
 11275                           postdec2	equ	0xFDD
 11276                           plusw2	equ	0xFDB
 11277                           fsr2h	equ	0xFDA
 11278                           fsr2l	equ	0xFD9
 11279                           status	equ	0xFD8
 11280                           
 11281 ;; *************** function _InitConnector *****************
 11282 ;; Defined at:
 11283 ;;		line 11 in file "harware.c"
 11284 ;; Parameters:    Size  Location     Type
 11285 ;;  AConnector      2    4[BANK0 ] PTR struct .
 11286 ;;		 -> _DigiPot(17), _Hub(157), _Display(217), 
 11287 ;; Auto vars:     Size  Location     Type
 11288 ;;		None
 11289 ;; Return value:  Size  Location     Type
 11290 ;;                  1    wreg      void 
 11291 ;; Registers used:
 11292 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
 11293 ;; Tracked objects:
 11294 ;;		On entry : 3F/0
 11295 ;;		On exit  : 3F/0
 11296 ;;		Unchanged: 0/0
 11297 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 11298 ;;      Params:         0       2       0       0       0       0       0       0       0
 11299 ;;      Locals:         0       0       0       0       0       0       0       0       0
 11300 ;;      Temps:          0       0       0       0       0       0       0       0       0
 11301 ;;      Totals:         0       2       0       0       0       0       0       0       0
 11302 ;;Total ram usage:        2 bytes
 11303 ;; Hardware stack levels used:    1
 11304 ;; Hardware stack levels required when called:    7
 11305 ;; This function calls:
 11306 ;;		_InitPin
 11307 ;; This function is called by:
 11308 ;;		_Display_Init
 11309 ;;		_Hub_Init
 11310 ;;		_InitDigiPot
 11311 ;; This function uses a non-reentrant model
 11312 ;;
 11313                           
 11314                           	psect	text67
 11315  00300C                     __ptext67:
 11316                           	opt stack 0
 11317  00300C                     _InitConnector:
 11318                           	opt stack 21
 11319                           
 11320                           ; BSR set to: 0
 11321                           ;harware.c: 13: InitPin(&AConnector->ClockPin);
 11322                           
 11323                           ; BSR set to: 0
 11324                           ;incstack = 0
 11325  00300C  C064  F060         	movff	InitConnector@AConnector,InitPin@APin
 11326  003010  C065  F061         	movff	InitConnector@AConnector+1,InitPin@APin+1
 11327  003014  ECCF  F015         	call	_InitPin	;wreg free
 11328                           
 11329                           ;harware.c: 14: InitPin(&AConnector->DataPin);
 11330  003018  0E05               	movlw	5
 11331  00301A  2564               	addwf	InitConnector@AConnector& (0+255),w,b
 11332  00301C  6F60               	movwf	InitPin@APin& (0+255),b
 11333  00301E  0E00               	movlw	0
 11334  003020  2165               	addwfc	(InitConnector@AConnector+1)& (0+255),w,b
 11335  003022  6F61               	movwf	(InitPin@APin+1)& (0+255),b
 11336  003024  ECCF  F015         	call	_InitPin	;wreg free
 11337                           
 11338                           ;harware.c: 15: InitPin(&AConnector->LatchPin);
 11339  003028  0E0A               	movlw	10
 11340  00302A  2564               	addwf	InitConnector@AConnector& (0+255),w,b
 11341  00302C  6F60               	movwf	InitPin@APin& (0+255),b
 11342  00302E  0E00               	movlw	0
 11343  003030  2165               	addwfc	(InitConnector@AConnector+1)& (0+255),w,b
 11344  003032  6F61               	movwf	(InitPin@APin+1)& (0+255),b
 11345  003034  EFCF  F015         	goto	_InitPin	;wreg free
 11346  003038                     __end_of_InitConnector:
 11347                           	opt stack 0
 11348                           tblptru	equ	0xFF8
 11349                           tblptrh	equ	0xFF7
 11350                           tblptrl	equ	0xFF6
 11351                           tablat	equ	0xFF5
 11352                           prodh	equ	0xFF4
 11353                           prodl	equ	0xFF3
 11354                           intcon	equ	0xFF2
 11355                           postinc0	equ	0xFEE
 11356                           plusw0	equ	0xFEB
 11357                           wreg	equ	0xFE8
 11358                           indf1	equ	0xFE7
 11359                           postinc1	equ	0xFE6
 11360                           postdec1	equ	0xFE5
 11361                           plusw1	equ	0xFE3
 11362                           fsr1h	equ	0xFE2
 11363                           fsr1l	equ	0xFE1
 11364                           indf2	equ	0xFDF
 11365                           postinc2	equ	0xFDE
 11366                           postdec2	equ	0xFDD
 11367                           plusw2	equ	0xFDB
 11368                           fsr2h	equ	0xFDA
 11369                           fsr2l	equ	0xFD9
 11370                           status	equ	0xFD8
 11371                           
 11372 ;; *************** function _InitPin *****************
 11373 ;; Defined at:
 11374 ;;		line 5 in file "harware.c"
 11375 ;; Parameters:    Size  Location     Type
 11376 ;;  APin            2    0[BANK0 ] PTR struct .
 11377 ;;		 -> _DigiPot(17), _Hub(157), _Display(217), 
 11378 ;; Auto vars:     Size  Location     Type
 11379 ;;		None
 11380 ;; Return value:  Size  Location     Type
 11381 ;;                  1    wreg      void 
 11382 ;; Registers used:
 11383 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0
 11384 ;; Tracked objects:
 11385 ;;		On entry : 3F/0
 11386 ;;		On exit  : 3F/0
 11387 ;;		Unchanged: 0/0
 11388 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 11389 ;;      Params:         0       2       0       0       0       0       0       0       0
 11390 ;;      Locals:         0       0       0       0       0       0       0       0       0
 11391 ;;      Temps:          0       2       0       0       0       0       0       0       0
 11392 ;;      Totals:         0       4       0       0       0       0       0       0       0
 11393 ;;Total ram usage:        4 bytes
 11394 ;; Hardware stack levels used:    1
 11395 ;; Hardware stack levels required when called:    6
 11396 ;; This function calls:
 11397 ;;		Nothing
 11398 ;; This function is called by:
 11399 ;;		_InitConnector
 11400 ;; This function uses a non-reentrant model
 11401 ;;
 11402                           
 11403                           	psect	text68
 11404  002B9E                     __ptext68:
 11405                           	opt stack 0
 11406  002B9E                     _InitPin:
 11407                           	opt stack 21
 11408                           
 11409                           ; BSR set to: 0
 11410                           ;harware.c: 7: APin->NegativeMask = 0x01 << APin->PinNumber;
 11411                           
 11412                           ; BSR set to: 0
 11413                           ;incstack = 0
 11414  002B9E  EE20 F004          	lfsr	2,4
 11415  002BA2  5160               	movf	InitPin@APin& (0+255),w,b
 11416  002BA4  26D9               	addwf	fsr2l,f,c
 11417  002BA6  5161               	movf	(InitPin@APin+1)& (0+255),w,b
 11418  002BA8  22DA               	addwfc	fsr2h,f,c
 11419  002BAA  EE10 F002          	lfsr	1,2
 11420  002BAE  5160               	movf	InitPin@APin& (0+255),w,b
 11421  002BB0  26E1               	addwf	fsr1l,f,c
 11422  002BB2  5161               	movf	(InitPin@APin+1)& (0+255),w,b
 11423  002BB4  22E2               	addwfc	fsr1h,f,c
 11424  002BB6  50E7               	movf	indf1,w,c
 11425  002BB8  6F62               	movwf	??_InitPin& (0+255),b
 11426  002BBA  0E01               	movlw	1
 11427  002BBC  6F63               	movwf	(??_InitPin+1)& (0+255),b
 11428  002BBE  2B62               	incf	??_InitPin& (0+255),f,b
 11429  002BC0  D002               	goto	u3594
 11430  002BC2                     u3595:
 11431  002BC2  90D8               	bcf	status,0,c
 11432  002BC4  3763               	rlcf	(??_InitPin+1)& (0+255),f,b
 11433  002BC6                     u3594:
 11434  002BC6  2F62               	decfsz	??_InitPin& (0+255),f,b
 11435  002BC8  D7FC               	goto	u3595
 11436  002BCA  0100               	movlb	0	; () banked
 11437  002BCC  5163               	movf	(??_InitPin+1)& (0+255),w,b
 11438  002BCE  6EDF               	movwf	indf2,c
 11439                           
 11440                           ;harware.c: 8: APin->Mask = ~APin->NegativeMask;
 11441  002BD0  EE20 F003          	lfsr	2,3
 11442  002BD4  5160               	movf	InitPin@APin& (0+255),w,b
 11443  002BD6  26D9               	addwf	fsr2l,f,c
 11444  002BD8  5161               	movf	(InitPin@APin+1)& (0+255),w,b
 11445  002BDA  22DA               	addwfc	fsr2h,f,c
 11446  002BDC  EE10 F004          	lfsr	1,4
 11447  002BE0  5160               	movf	InitPin@APin& (0+255),w,b
 11448  002BE2  26E1               	addwf	fsr1l,f,c
 11449  002BE4  5161               	movf	(InitPin@APin+1)& (0+255),w,b
 11450  002BE6  22E2               	addwfc	fsr1h,f,c
 11451  002BE8  1CE7               	comf	indf1,w,c
 11452  002BEA  6EDF               	movwf	indf2,c
 11453                           
 11454                           ; BSR set to: 0
 11455  002BEC  0012               	return		;funcret
 11456  002BEE                     __end_of_InitPin:
 11457                           	opt stack 0
 11458                           tblptru	equ	0xFF8
 11459                           tblptrh	equ	0xFF7
 11460                           tblptrl	equ	0xFF6
 11461                           tablat	equ	0xFF5
 11462                           prodh	equ	0xFF4
 11463                           prodl	equ	0xFF3
 11464                           intcon	equ	0xFF2
 11465                           postinc0	equ	0xFEE
 11466                           plusw0	equ	0xFEB
 11467                           wreg	equ	0xFE8
 11468                           indf1	equ	0xFE7
 11469                           postinc1	equ	0xFE6
 11470                           postdec1	equ	0xFE5
 11471                           plusw1	equ	0xFE3
 11472                           fsr1h	equ	0xFE2
 11473                           fsr1l	equ	0xFE1
 11474                           indf2	equ	0xFDF
 11475                           postinc2	equ	0xFDE
 11476                           postdec2	equ	0xFDD
 11477                           plusw2	equ	0xFDB
 11478                           fsr2h	equ	0xFDA
 11479                           fsr2l	equ	0xFD9
 11480                           status	equ	0xFD8
 11481                           
 11482 ;; *************** function _ConfigureOscillator *****************
 11483 ;; Defined at:
 11484 ;;		line 24 in file "system.c"
 11485 ;; Parameters:    Size  Location     Type
 11486 ;;		None
 11487 ;; Auto vars:     Size  Location     Type
 11488 ;;		None
 11489 ;; Return value:  Size  Location     Type
 11490 ;;                  1    wreg      void 
 11491 ;; Registers used:
 11492 ;;		None
 11493 ;; Tracked objects:
 11494 ;;		On entry : 0/0
 11495 ;;		On exit  : 0/0
 11496 ;;		Unchanged: 0/0
 11497 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 11498 ;;      Params:         0       0       0       0       0       0       0       0       0
 11499 ;;      Locals:         0       0       0       0       0       0       0       0       0
 11500 ;;      Temps:          0       0       0       0       0       0       0       0       0
 11501 ;;      Totals:         0       0       0       0       0       0       0       0       0
 11502 ;;Total ram usage:        0 bytes
 11503 ;; Hardware stack levels used:    1
 11504 ;; Hardware stack levels required when called:    6
 11505 ;; This function calls:
 11506 ;;		Nothing
 11507 ;; This function is called by:
 11508 ;;		_main
 11509 ;; This function uses a non-reentrant model
 11510 ;;
 11511                           
 11512                           	psect	text69
 11513  003250                     __ptext69:
 11514                           	opt stack 0
 11515  003250                     _ConfigureOscillator:
 11516                           	opt stack 24
 11517                           
 11518                           ; BSR set to: 0
 11519                           ;incstack = 0
 11520  003250  0012               	return		;funcret
 11521  003252                     __end_of_ConfigureOscillator:
 11522                           	opt stack 0
 11523                           tblptru	equ	0xFF8
 11524                           tblptrh	equ	0xFF7
 11525                           tblptrl	equ	0xFF6
 11526                           tablat	equ	0xFF5
 11527                           prodh	equ	0xFF4
 11528                           prodl	equ	0xFF3
 11529                           intcon	equ	0xFF2
 11530                           postinc0	equ	0xFEE
 11531                           plusw0	equ	0xFEB
 11532                           wreg	equ	0xFE8
 11533                           indf1	equ	0xFE7
 11534                           postinc1	equ	0xFE6
 11535                           postdec1	equ	0xFE5
 11536                           plusw1	equ	0xFE3
 11537                           fsr1h	equ	0xFE2
 11538                           fsr1l	equ	0xFE1
 11539                           indf2	equ	0xFDF
 11540                           postinc2	equ	0xFDE
 11541                           postdec2	equ	0xFDD
 11542                           plusw2	equ	0xFDB
 11543                           fsr2h	equ	0xFDA
 11544                           fsr2l	equ	0xFD9
 11545                           status	equ	0xFD8
 11546                           
 11547 ;; *************** function _Interrupt *****************
 11548 ;; Defined at:
 11549 ;;		line 50 in file "main.c"
 11550 ;; Parameters:    Size  Location     Type
 11551 ;;		None
 11552 ;; Auto vars:     Size  Location     Type
 11553 ;;  LData           1   87[COMRAM] unsigned char 
 11554 ;; Return value:  Size  Location     Type
 11555 ;;                  1    wreg      void 
 11556 ;; Registers used:
 11557 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 11558 ;; Tracked objects:
 11559 ;;		On entry : 0/0
 11560 ;;		On exit  : 0/0
 11561 ;;		Unchanged: 0/0
 11562 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 11563 ;;      Params:         0       0       0       0       0       0       0       0       0
 11564 ;;      Locals:         1       0       0       0       0       0       0       0       0
 11565 ;;      Temps:          9       0       0       0       0       0       0       0       0
 11566 ;;      Totals:        10       0       0       0       0       0       0       0       0
 11567 ;;Total ram usage:       10 bytes
 11568 ;; Hardware stack levels used:    1
 11569 ;; Hardware stack levels required when called:    5
 11570 ;; This function calls:
 11571 ;;		_Display_SwapBuffer
 11572 ;;		_Hub_UpdateValues
 11573 ;;		_Midi_Write
 11574 ;;		_Sequencer_TimerEvent
 11575 ;;		i2_Hub_CopyBuffer
 11576 ;;		i2_Midi_ResetBuffer
 11577 ;;		i2_Sequencer_StopTimer
 11578 ;;		i2_WriteData
 11579 ;; This function is called by:
 11580 ;;		Interrupt level 2
 11581 ;; This function uses a non-reentrant model
 11582 ;;
 11583                           
 11584                           	psect	intcode
 11585  000008                     __pintcode:
 11586                           	opt stack 0
 11587  000008                     _Interrupt:
 11588                           	opt stack 18
 11589                           
 11590                           ;incstack = 0
 11591  000008  825F               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
 11592  00000A  EDD5  F00B         	call	int_func,f	;refresh shadow registers
 11593                           tblptru	equ	0xFF8
 11594                           tblptrh	equ	0xFF7
 11595                           tblptrl	equ	0xFF6
 11596                           tablat	equ	0xFF5
 11597                           prodh	equ	0xFF4
 11598                           prodl	equ	0xFF3
 11599                           intcon	equ	0xFF2
 11600                           postinc0	equ	0xFEE
 11601                           plusw0	equ	0xFEB
 11602                           wreg	equ	0xFE8
 11603                           indf1	equ	0xFE7
 11604                           postinc1	equ	0xFE6
 11605                           postdec1	equ	0xFE5
 11606                           plusw1	equ	0xFE3
 11607                           fsr1h	equ	0xFE2
 11608                           fsr1l	equ	0xFE1
 11609                           indf2	equ	0xFDF
 11610                           postinc2	equ	0xFDE
 11611                           postdec2	equ	0xFDD
 11612                           plusw2	equ	0xFDB
 11613                           fsr2h	equ	0xFDA
 11614                           fsr2l	equ	0xFD9
 11615                           status	equ	0xFD8
 11616                           
 11617                           	psect	intcode_body
 11618  0017AA                     __pintcode_body:
 11619                           	opt stack 18
 11620  0017AA                     int_func:
 11621                           	opt stack 18
 11622  0017AA  0006               	pop		; remove dummy address from shadow register refresh
 11623  0017AC  CFE9 F050          	movff	fsr0l,??_Interrupt+1
 11624  0017B0  CFEA F051          	movff	fsr0h,??_Interrupt+2
 11625  0017B4  CFE1 F052          	movff	fsr1l,??_Interrupt+3
 11626  0017B8  CFE2 F053          	movff	fsr1h,??_Interrupt+4
 11627  0017BC  CFD9 F054          	movff	fsr2l,??_Interrupt+5
 11628  0017C0  CFDA F055          	movff	fsr2h,??_Interrupt+6
 11629  0017C4  CFF3 F056          	movff	prodl,??_Interrupt+7
 11630  0017C8  CFF4 F057          	movff	prodh,??_Interrupt+8
 11631                           
 11632                           ;main.c: 52: if (TMR0IF)
 11633  0017CC  A4F2               	btfss	intcon,2,c	;volatile
 11634  0017CE  D031               	goto	i2l80
 11635                           
 11636                           ;main.c: 53: {
 11637                           ;main.c: 54: TMR0IF = 0;
 11638  0017D0  94F2               	bcf	intcon,2,c	;volatile
 11639                           
 11640                           ;main.c: 56: WriteData(_Display.PrimaryBuffer + _Display.iDisplay * (2 + 8), 2 + 8, _Dis
      +                          play.IO);
 11641  0017D2  0102               	movlb	2	; () banked
 11642  0017D4  51C6               	movf	(__Display+198)& (0+255),w,b
 11643  0017D6  0D0A               	mullw	10
 11644  0017D8  50F3               	movf	prodl,w,c
 11645  0017DA  25B6               	addwf	(__Display+182)& (0+255),w,b
 11646  0017DC  6E25               	movwf	i2WriteData@AData,c
 11647  0017DE  50F4               	movf	prodh,w,c
 11648  0017E0  21B7               	addwfc	(__Display+183)& (0+255),w,b
 11649  0017E2  6E26               	movwf	i2WriteData@AData+1,c
 11650  0017E4  0E0A               	movlw	10
 11651  0017E6  6E27               	movwf	i2WriteData@ASize,c
 11652  0017E8  EE22  F0CA         	lfsr	2,__Display+202
 11653  0017EC  EE00  F028         	lfsr	0,i2WriteData@AIO
 11654  0017F0  0E0E               	movlw	14
 11655  0017F2                     i2u501_41:
 11656  0017F2  CFDB FFEB          	movff	plusw2,plusw0
 11657  0017F6  06E8               	decf	wreg,f,c
 11658  0017F8  E2FC               	bc	i2u501_41
 11659  0017FA  EC5F  F014         	call	i2_WriteData	;wreg free
 11660                           
 11661                           ;main.c: 58: _Display.iDisplay++;
 11662  0017FE  0102               	movlb	2	; () banked
 11663  001800  2BC6               	incf	(__Display+198)& (0+255),f,b
 11664                           
 11665                           ; BSR set to: 2
 11666                           ;main.c: 59: if (_Display.iDisplay >= (char)(((0x01 << 6) - 1 * 1.0f) / (7 * 1.0f)))
 11667  001802  0E08               	movlw	8
 11668  001804  65C6               	cpfsgt	(__Display+198)& (0+255),b
 11669  001806  D005               	goto	i2l4692
 11670                           
 11671                           ; BSR set to: 2
 11672                           ;main.c: 60: {
 11673                           ;main.c: 64: if (_Display.ReadyToRead)
 11674  001808  5100               	movf	__Display& (0+255),w,b
 11675  00180A  E002               	bz	i2l4690
 11676                           
 11677                           ; BSR set to: 2
 11678                           ;main.c: 65: Display_SwapBuffer();
 11679  00180C  EC67  F018         	call	_Display_SwapBuffer	;wreg free
 11680  001810                     i2l4690:
 11681                           
 11682                           ; BSR set to: 2
 11683                           ;main.c: 66: _Display.iDisplay = 0;
 11684  001810  6BC6               	clrf	(__Display+198)& (0+255),b
 11685  001812                     i2l4692:
 11686                           
 11687                           ; BSR set to: 2
 11688                           ;main.c: 67: }
 11689                           ;main.c: 69: if (_Hub.ReadyToRead)
 11690  001812  0101               	movlb	1	; () banked
 11691  001814  5187               	movf	(__Hub+135)& (0+255),w,b
 11692  001816  E004               	bz	i2l4698
 11693                           
 11694                           ; BSR set to: 1
 11695                           ;main.c: 70: {
 11696                           ;main.c: 71: Hub_UpdateValues();
 11697  001818  EC86  F00E         	call	_Hub_UpdateValues	;wreg free
 11698                           
 11699                           ; BSR set to: 1
 11700                           ;main.c: 72: _Hub.Paused = 0;
 11701  00181C  6B88               	clrf	(__Hub+136)& (0+255),b
 11702                           
 11703                           ;main.c: 73: }
 11704  00181E  D002               	goto	i2l84
 11705  001820                     i2l4698:
 11706                           
 11707                           ; BSR set to: 1
 11708                           ;main.c: 74: else
 11709                           ;main.c: 75: _Hub.Paused = 1;
 11710  001820  0E01               	movlw	1
 11711  001822  6F88               	movwf	(__Hub+136)& (0+255),b
 11712  001824                     i2l84:
 11713                           
 11714                           ; BSR set to: 1
 11715                           ;main.c: 77: if (_Hub.ReadyToWrite)
 11716  001824  5186               	movf	(__Hub+134)& (0+255),w,b
 11717  001826  E002               	bz	i2l4702
 11718                           
 11719                           ; BSR set to: 1
 11720                           ;main.c: 78: Hub_CopyBuffer();
 11721  001828  EC77  F018         	call	i2_Hub_CopyBuffer	;wreg free
 11722  00182C                     i2l4702:
 11723                           
 11724                           ; BSR set to: 1
 11725                           ;main.c: 80: _DigiPot.Counter++;
 11726  00182C  0100               	movlb	0	; () banked
 11727  00182E  2BE2               	incf	(__DigiPot+1)& (0+255),f,b
 11728                           
 11729                           ;main.c: 81: }
 11730  001830  D037               	goto	i2u512_40
 11731  001832                     i2l80:
 11732                           
 11733                           ;main.c: 82: else if (TMR1IF)
 11734  001832  A09E               	btfss	3998,0,c	;volatile
 11735  001834  D019               	goto	i2l87
 11736                           
 11737                           ;main.c: 83: {
 11738                           ;main.c: 84: TMR1IF = 0;
 11739  001836  909E               	bcf	3998,0,c	;volatile
 11740                           
 11741                           ;main.c: 85: _Timer.Counter++;
 11742  001838  4A5D               	infsnz	__Timer+4,f,c
 11743  00183A  2A5E               	incf	__Timer+5,f,c
 11744                           
 11745                           ;main.c: 86: if (_Timer.Counter >= _Timer.Ticks)
 11746  00183C  505B               	movf	__Timer+2,w,c
 11747  00183E  5C5D               	subwf	__Timer+4,w,c
 11748  001840  505E               	movf	__Timer+5,w,c
 11749  001842  0A80               	xorlw	128
 11750  001844  6E4F               	movwf	??_Interrupt& (0+255),c
 11751  001846  505C               	movf	__Timer+3,w,c
 11752  001848  0A80               	xorlw	128
 11753  00184A  584F               	subwfb	??_Interrupt& (0+255),w,c
 11754  00184C  E329               	bnc	i2u512_40
 11755                           
 11756                           ;main.c: 87: {
 11757                           ;main.c: 88: _Timer.Counter = 0;
 11758  00184E  6A5D               	clrf	__Timer+4,c
 11759  001850  6A5E               	clrf	__Timer+5,c
 11760                           
 11761                           ;main.c: 89: _Timer.Elapsed = 1;
 11762  001852  0E01               	movlw	1
 11763  001854  6E59               	movwf	__Timer,c
 11764                           
 11765                           ;main.c: 90: Sequencer_TimerEvent();
 11766  001856  ECA1  F018         	call	_Sequencer_TimerEvent	;wreg free
 11767                           
 11768                           ;main.c: 91: if (_Timer.Loop)
 11769  00185A  505A               	movf	__Timer+1,w,c
 11770  00185C  E002               	bz	i2l4720
 11771                           
 11772                           ;main.c: 92: _Timer.Elapsed = 0;
 11773  00185E  6A59               	clrf	__Timer,c
 11774  001860  D01F               	goto	i2u512_40
 11775  001862                     i2l4720:
 11776                           
 11777                           ;main.c: 93: else
 11778                           ;main.c: 94: Sequencer_StopTimer();
 11779  001862  EC24  F019         	call	i2_Sequencer_StopTimer	;wreg free
 11780  001866  D01C               	goto	i2u512_40
 11781  001868                     i2l87:
 11782                           
 11783                           ;main.c: 97: else if (PIR1bits.RCIF)
 11784  001868  AA9E               	btfss	3998,5,c	;volatile
 11785  00186A  D01A               	goto	i2u512_40
 11786                           
 11787                           ;main.c: 98: {
 11788                           ;main.c: 100: LATB4 = 0;
 11789  00186C  988A               	bcf	3978,4,c	;volatile
 11790                           
 11791                           ;main.c: 102: while (PIR1bits.RCIF)
 11792  00186E  D016               	goto	i2l4734
 11793  001870                     i2l94:
 11794                           
 11795                           ;main.c: 103: {
 11796                           ;main.c: 104: LData = RCREG;
 11797  001870  CFAE F058          	movff	4014,Interrupt@LData	;volatile
 11798                           
 11799                           ;main.c: 105: if (RCSTAbits.FERR || RCSTAbits.OERR)
 11800  001874  B4AB               	btfsc	4011,2,c	;volatile
 11801  001876  D002               	goto	i2u511_40
 11802  001878  A2AB               	btfss	4011,1,c	;volatile
 11803  00187A  D009               	goto	i2l4732
 11804  00187C                     i2u511_40:
 11805                           
 11806                           ;main.c: 106: {
 11807                           ;main.c: 107: Midi_ResetBuffer(&_MidiInput);
 11808  00187C  0E1D               	movlw	low __MidiInput
 11809  00187E  6E01               	movwf	i2Midi_ResetBuffer@AMidiBuffer,c
 11810  001880  0E04               	movlw	high __MidiInput
 11811  001882  6E02               	movwf	i2Midi_ResetBuffer@AMidiBuffer+1,c
 11812  001884  ECA5  F00F         	call	i2_Midi_ResetBuffer	;wreg free
 11813                           
 11814                           ;main.c: 108: CREN = 0;
 11815  001888  98AB               	bcf	4011,4,c	;volatile
 11816                           
 11817                           ;main.c: 109: CREN = 1;
 11818  00188A  88AB               	bsf	4011,4,c	;volatile
 11819                           
 11820                           ;main.c: 110: }
 11821  00188C  D007               	goto	i2l4734
 11822  00188E                     i2l4732:
 11823                           
 11824                           ;main.c: 111: else
 11825                           ;main.c: 112: Midi_Write(LData, &_MidiInput);
 11826  00188E  0E1D               	movlw	low __MidiInput
 11827  001890  6E01               	movwf	Midi_Write@AMidiBuffer,c
 11828  001892  0E04               	movlw	high __MidiInput
 11829  001894  6E02               	movwf	Midi_Write@AMidiBuffer+1,c
 11830  001896  5058               	movf	Interrupt@LData,w,c
 11831  001898  EC2C  F005         	call	_Midi_Write
 11832  00189C                     i2l4734:
 11833  00189C  BA9E               	btfsc	3998,5,c	;volatile
 11834  00189E  D7E8               	goto	i2l94
 11835  0018A0                     i2u512_40:
 11836  0018A0  C057  FFF4         	movff	??_Interrupt+8,prodh
 11837  0018A4  C056  FFF3         	movff	??_Interrupt+7,prodl
 11838  0018A8  C055  FFDA         	movff	??_Interrupt+6,fsr2h
 11839  0018AC  C054  FFD9         	movff	??_Interrupt+5,fsr2l
 11840  0018B0  C053  FFE2         	movff	??_Interrupt+4,fsr1h
 11841  0018B4  C052  FFE1         	movff	??_Interrupt+3,fsr1l
 11842  0018B8  C051  FFEA         	movff	??_Interrupt+2,fsr0h
 11843  0018BC  C050  FFE9         	movff	??_Interrupt+1,fsr0l
 11844  0018C0  925F               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
 11845  0018C2  0011               	retfie		f
 11846  0018C4                     __end_of_Interrupt:
 11847                           	opt stack 0
 11848                           tblptru	equ	0xFF8
 11849                           tblptrh	equ	0xFF7
 11850                           tblptrl	equ	0xFF6
 11851                           tablat	equ	0xFF5
 11852                           prodh	equ	0xFF4
 11853                           prodl	equ	0xFF3
 11854                           intcon	equ	0xFF2
 11855                           postinc0	equ	0xFEE
 11856                           plusw0	equ	0xFEB
 11857                           fsr0h	equ	0xFEA
 11858                           fsr0l	equ	0xFE9
 11859                           wreg	equ	0xFE8
 11860                           indf1	equ	0xFE7
 11861                           postinc1	equ	0xFE6
 11862                           postdec1	equ	0xFE5
 11863                           plusw1	equ	0xFE3
 11864                           fsr1h	equ	0xFE2
 11865                           fsr1l	equ	0xFE1
 11866                           indf2	equ	0xFDF
 11867                           postinc2	equ	0xFDE
 11868                           postdec2	equ	0xFDD
 11869                           plusw2	equ	0xFDB
 11870                           fsr2h	equ	0xFDA
 11871                           fsr2l	equ	0xFD9
 11872                           status	equ	0xFD8
 11873                           
 11874 ;; *************** function i2_WriteData *****************
 11875 ;; Defined at:
 11876 ;;		line 28 in file "harware.c"
 11877 ;; Parameters:    Size  Location     Type
 11878 ;;  AData           2   36[COMRAM] PTR unsigned char 
 11879 ;;		 -> _Display.Buffer2(90), _Display.Buffer1(90), _Hub.SecondaryBuffer(12), _Hub(157), 
 11880 ;;		 -> _Display(217), 
 11881 ;;  ASize           1   38[COMRAM] unsigned char 
 11882 ;;  AIO            15   39[COMRAM] struct .
 11883 ;; Auto vars:     Size  Location     Type
 11884 ;;  WriteData       2   54[COMRAM] int 
 11885 ;; Return value:  Size  Location     Type
 11886 ;;                  1    wreg      void 
 11887 ;; Registers used:
 11888 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, cstack
 11889 ;; Tracked objects:
 11890 ;;		On entry : 3F/2
 11891 ;;		On exit  : 0/0
 11892 ;;		Unchanged: 0/0
 11893 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 11894 ;;      Params:        18       0       0       0       0       0       0       0       0
 11895 ;;      Locals:         2       0       0       0       0       0       0       0       0
 11896 ;;      Temps:          0       0       0       0       0       0       0       0       0
 11897 ;;      Totals:        20       0       0       0       0       0       0       0       0
 11898 ;;Total ram usage:       20 bytes
 11899 ;; Hardware stack levels used:    1
 11900 ;; Hardware stack levels required when called:    2
 11901 ;; This function calls:
 11902 ;;		i2_LatchOff
 11903 ;;		i2_LatchOn
 11904 ;;		i2_WriteChar
 11905 ;; This function is called by:
 11906 ;;		_Interrupt
 11907 ;; This function uses a non-reentrant model
 11908 ;;
 11909                           
 11910                           	psect	text71
 11911  0028BE                     __ptext71:
 11912                           	opt stack 0
 11913  0028BE                     i2_WriteData:
 11914                           	opt stack 20
 11915                           
 11916                           ; BSR set to: 2
 11917                           ;harware.c: 30: LatchOn(AIO);
 11918                           
 11919                           ;incstack = 0
 11920  0028BE  EE20  F028         	lfsr	2,i2WriteData@AIO
 11921  0028C2  EE00  F001         	lfsr	0,i2LatchOn@AIO
 11922  0028C6  0E0E               	movlw	14
 11923  0028C8                     i2u494_41:
 11924  0028C8  CFDB FFEB          	movff	plusw2,plusw0
 11925  0028CC  06E8               	decf	wreg,f,c
 11926  0028CE  E2FC               	bc	i2u494_41
 11927  0028D0  ECFA  F018         	call	i2_LatchOn	;wreg free
 11928                           
 11929                           ;harware.c: 31: for (int i = ASize - 1; i >= 0; i--)
 11930  0028D4  0EFF               	movlw	255
 11931  0028D6  2427               	addwf	i2WriteData@ASize,w,c
 11932  0028D8  6E37               	movwf	i2WriteData@i,c
 11933  0028DA  6A38               	clrf	i2WriteData@i+1,c
 11934  0028DC  0EFF               	movlw	255
 11935  0028DE  2238               	addwfc	i2WriteData@i+1,f,c
 11936  0028E0                     i2l4638:
 11937  0028E0  BE38               	btfsc	i2WriteData@i+1,7,c
 11938  0028E2  D016               	goto	i2l4648
 11939                           
 11940                           ;harware.c: 32: WriteChar(AData[i], AIO);
 11941  0028E4  EE20  F028         	lfsr	2,i2WriteData@AIO
 11942  0028E8  EE00  F010         	lfsr	0,i2WriteChar@AIO
 11943  0028EC  0E0E               	movlw	14
 11944  0028EE                     i2u496_41:
 11945  0028EE  CFDB FFEB          	movff	plusw2,plusw0
 11946  0028F2  06E8               	decf	wreg,f,c
 11947  0028F4  E2FC               	bc	i2u496_41
 11948  0028F6  5037               	movf	i2WriteData@i,w,c
 11949  0028F8  2425               	addwf	i2WriteData@AData,w,c
 11950  0028FA  6ED9               	movwf	fsr2l,c
 11951  0028FC  5038               	movf	i2WriteData@i+1,w,c
 11952  0028FE  2026               	addwfc	i2WriteData@AData+1,w,c
 11953  002900  6EDA               	movwf	fsr2h,c
 11954  002902  50DF               	movf	indf2,w,c
 11955  002904  EC8E  F012         	call	i2_WriteChar
 11956  002908  0637               	decf	i2WriteData@i,f,c
 11957  00290A  A0D8               	btfss	status,0,c
 11958  00290C  0638               	decf	i2WriteData@i+1,f,c
 11959  00290E  D7E8               	goto	i2l4638
 11960  002910                     i2l4648:
 11961                           
 11962                           ;harware.c: 33: LatchOff(AIO);
 11963  002910  EE20  F028         	lfsr	2,i2WriteData@AIO
 11964  002914  EE00  F001         	lfsr	0,i2LatchOff@AIO
 11965  002918  0E0E               	movlw	14
 11966  00291A                     i2u497_41:
 11967  00291A  CFDB FFEB          	movff	plusw2,plusw0
 11968  00291E  06E8               	decf	wreg,f,c
 11969  002920  E2FC               	bc	i2u497_41
 11970  002922  EF01  F019         	goto	i2_LatchOff	;wreg free
 11971  002926                     __end_ofi2_WriteData:
 11972                           	opt stack 0
 11973                           tblptru	equ	0xFF8
 11974                           tblptrh	equ	0xFF7
 11975                           tblptrl	equ	0xFF6
 11976                           tablat	equ	0xFF5
 11977                           prodh	equ	0xFF4
 11978                           prodl	equ	0xFF3
 11979                           intcon	equ	0xFF2
 11980                           postinc0	equ	0xFEE
 11981                           plusw0	equ	0xFEB
 11982                           fsr0h	equ	0xFEA
 11983                           fsr0l	equ	0xFE9
 11984                           wreg	equ	0xFE8
 11985                           indf1	equ	0xFE7
 11986                           postinc1	equ	0xFE6
 11987                           postdec1	equ	0xFE5
 11988                           plusw1	equ	0xFE3
 11989                           fsr1h	equ	0xFE2
 11990                           fsr1l	equ	0xFE1
 11991                           indf2	equ	0xFDF
 11992                           postinc2	equ	0xFDE
 11993                           postdec2	equ	0xFDD
 11994                           plusw2	equ	0xFDB
 11995                           fsr2h	equ	0xFDA
 11996                           fsr2l	equ	0xFD9
 11997                           status	equ	0xFD8
 11998                           
 11999 ;; *************** function i2_WriteChar *****************
 12000 ;; Defined at:
 12001 ;;		line 18 in file "harware.c"
 12002 ;; Parameters:    Size  Location     Type
 12003 ;;  AChar           1    wreg     unsigned char 
 12004 ;;  AIO            15   15[COMRAM] struct .
 12005 ;; Auto vars:     Size  Location     Type
 12006 ;;  AChar           1   33[COMRAM] unsigned char 
 12007 ;;  WriteChar       2   34[COMRAM] int 
 12008 ;; Return value:  Size  Location     Type
 12009 ;;                  1    wreg      void 
 12010 ;; Registers used:
 12011 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, cstack
 12012 ;; Tracked objects:
 12013 ;;		On entry : 0/2
 12014 ;;		On exit  : 0/0
 12015 ;;		Unchanged: 0/0
 12016 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 12017 ;;      Params:        15       0       0       0       0       0       0       0       0
 12018 ;;      Locals:         3       0       0       0       0       0       0       0       0
 12019 ;;      Temps:          3       0       0       0       0       0       0       0       0
 12020 ;;      Totals:        21       0       0       0       0       0       0       0       0
 12021 ;;Total ram usage:       21 bytes
 12022 ;; Hardware stack levels used:    1
 12023 ;; Hardware stack levels required when called:    1
 12024 ;; This function calls:
 12025 ;;		i2_ClockDown
 12026 ;;		i2_ClockUp
 12027 ;; This function is called by:
 12028 ;;		i2_WriteData
 12029 ;; This function uses a non-reentrant model
 12030 ;;
 12031                           
 12032                           	psect	text72
 12033  00251C                     __ptext72:
 12034                           	opt stack 0
 12035  00251C                     i2_WriteChar:
 12036                           	opt stack 20
 12037                           
 12038                           ;incstack = 0
 12039                           ;i2WriteChar@AChar stored from wreg
 12040  00251C  6E22               	movwf	i2WriteChar@AChar,c
 12041                           
 12042                           ;harware.c: 20: for (int i = 7; i >= 0; i--)
 12043  00251E  6A24               	clrf	i2WriteChar@i+1,c
 12044  002520  0E07               	movlw	7
 12045  002522  6E23               	movwf	i2WriteChar@i,c
 12046  002524                     i2l4366:
 12047                           
 12048                           ;harware.c: 21: {
 12049                           ;harware.c: 22: ClockUp(AIO);
 12050  002524  EE20  F010         	lfsr	2,i2WriteChar@AIO
 12051  002528  EE00  F001         	lfsr	0,i2ClockUp@AIO
 12052  00252C  0E0E               	movlw	14
 12053  00252E                     i2u464_41:
 12054  00252E  CFDB FFEB          	movff	plusw2,plusw0
 12055  002532  06E8               	decf	wreg,f,c
 12056  002534  E2FC               	bc	i2u464_41
 12057  002536  EC08  F019         	call	i2_ClockUp	;wreg free
 12058                           
 12059                           ;harware.c: 23: *AIO.DataPin.Port = *AIO.DataPin.Port & AIO.DataPin.Mask | ((AChar >> i)
      +                           & 0x01) << AIO.DataPin.PinNumber;
 12060  00253A  C017  F01F         	movff	i2WriteChar@AIO+7,??i2_WriteChar
 12061  00253E  C023  F020         	movff	i2WriteChar@i,??i2_WriteChar+1
 12062  002542  C022  F021         	movff	i2WriteChar@AChar,??i2_WriteChar+2
 12063  002546  2A20               	incf	??i2_WriteChar+1,f,c
 12064  002548  D002               	goto	i2u465_44
 12065  00254A                     i2u465_45:
 12066  00254A  90D8               	bcf	status,0,c
 12067  00254C  3221               	rrcf	??i2_WriteChar+2,f,c
 12068  00254E                     i2u465_44:
 12069  00254E  2E20               	decfsz	??i2_WriteChar+1,f,c
 12070  002550  D7FC               	goto	i2u465_45
 12071  002552  0E01               	movlw	1
 12072  002554  1621               	andwf	??i2_WriteChar+2,f,c
 12073  002556  2A1F               	incf	??i2_WriteChar,f,c
 12074  002558  D002               	goto	i2u466_44
 12075  00255A                     i2u466_45:
 12076  00255A  90D8               	bcf	status,0,c
 12077  00255C  3621               	rlcf	??i2_WriteChar+2,f,c
 12078  00255E                     i2u466_44:
 12079  00255E  2E1F               	decfsz	??i2_WriteChar,f,c
 12080  002560  D7FC               	goto	i2u466_45
 12081  002562  C015  FFD9         	movff	i2WriteChar@AIO+5,fsr2l
 12082  002566  C016  FFDA         	movff	i2WriteChar@AIO+6,fsr2h
 12083  00256A  50DF               	movf	indf2,w,c
 12084  00256C  1418               	andwf	i2WriteChar@AIO+8,w,c
 12085  00256E  1021               	iorwf	??i2_WriteChar+2,w,c
 12086  002570  C015  FFD9         	movff	i2WriteChar@AIO+5,fsr2l
 12087  002574  C016  FFDA         	movff	i2WriteChar@AIO+6,fsr2h
 12088  002578  6EDF               	movwf	indf2,c
 12089                           
 12090                           ;harware.c: 24: ClockDown(AIO);
 12091  00257A  EE20  F010         	lfsr	2,i2WriteChar@AIO
 12092  00257E  EE00  F001         	lfsr	0,i2ClockDown@AIO
 12093  002582  0E0E               	movlw	14
 12094  002584                     i2u467_41:
 12095  002584  CFDB FFEB          	movff	plusw2,plusw0
 12096  002588  06E8               	decf	wreg,f,c
 12097  00258A  E2FC               	bc	i2u467_41
 12098  00258C  EC0F  F019         	call	i2_ClockDown	;wreg free
 12099  002590  0623               	decf	i2WriteChar@i,f,c
 12100  002592  A0D8               	btfss	status,0,c
 12101  002594  0624               	decf	i2WriteChar@i+1,f,c
 12102  002596  BE24               	btfsc	i2WriteChar@i+1,7,c
 12103  002598  0012               	return		;funcret
 12104  00259A  D7C4               	goto	i2l4366
 12105  00259C                     __end_ofi2_WriteChar:
 12106                           	opt stack 0
 12107                           tblptru	equ	0xFF8
 12108                           tblptrh	equ	0xFF7
 12109                           tblptrl	equ	0xFF6
 12110                           tablat	equ	0xFF5
 12111                           prodh	equ	0xFF4
 12112                           prodl	equ	0xFF3
 12113                           intcon	equ	0xFF2
 12114                           postinc0	equ	0xFEE
 12115                           plusw0	equ	0xFEB
 12116                           fsr0h	equ	0xFEA
 12117                           fsr0l	equ	0xFE9
 12118                           wreg	equ	0xFE8
 12119                           indf1	equ	0xFE7
 12120                           postinc1	equ	0xFE6
 12121                           postdec1	equ	0xFE5
 12122                           plusw1	equ	0xFE3
 12123                           fsr1h	equ	0xFE2
 12124                           fsr1l	equ	0xFE1
 12125                           indf2	equ	0xFDF
 12126                           postinc2	equ	0xFDE
 12127                           postdec2	equ	0xFDD
 12128                           plusw2	equ	0xFDB
 12129                           fsr2h	equ	0xFDA
 12130                           fsr2l	equ	0xFD9
 12131                           status	equ	0xFD8
 12132                           
 12133 ;; *************** function i2_Sequencer_StopTimer *****************
 12134 ;; Defined at:
 12135 ;;		line 21 in file "sequencer.c"
 12136 ;; Parameters:    Size  Location     Type
 12137 ;;		None
 12138 ;; Auto vars:     Size  Location     Type
 12139 ;;		None
 12140 ;; Return value:  Size  Location     Type
 12141 ;;                  1    wreg      void 
 12142 ;; Registers used:
 12143 ;;		None
 12144 ;; Tracked objects:
 12145 ;;		On entry : 3D/0
 12146 ;;		On exit  : 3D/0
 12147 ;;		Unchanged: 3D/0
 12148 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 12149 ;;      Params:         0       0       0       0       0       0       0       0       0
 12150 ;;      Locals:         0       0       0       0       0       0       0       0       0
 12151 ;;      Temps:          0       0       0       0       0       0       0       0       0
 12152 ;;      Totals:         0       0       0       0       0       0       0       0       0
 12153 ;;Total ram usage:        0 bytes
 12154 ;; Hardware stack levels used:    1
 12155 ;; This function calls:
 12156 ;;		Nothing
 12157 ;; This function is called by:
 12158 ;;		_Interrupt
 12159 ;; This function uses a non-reentrant model
 12160 ;;
 12161                           
 12162                           	psect	text73
 12163  003248                     __ptext73:
 12164                           	opt stack 0
 12165  003248                     i2_Sequencer_StopTimer:
 12166                           	opt stack 22
 12167                           
 12168                           ;sequencer.c: 23: TMR1ON = 0;
 12169                           
 12170                           ;incstack = 0
 12171  003248  90CD               	bcf	4045,0,c	;volatile
 12172                           
 12173                           ;sequencer.c: 24: _Timer.Counter = 0;
 12174  00324A  6A5D               	clrf	__Timer+4,c
 12175  00324C  6A5E               	clrf	__Timer+5,c
 12176  00324E  0012               	return		;funcret
 12177  003250                     __end_ofi2_Sequencer_StopTimer:
 12178                           	opt stack 0
 12179                           tblptru	equ	0xFF8
 12180                           tblptrh	equ	0xFF7
 12181                           tblptrl	equ	0xFF6
 12182                           tablat	equ	0xFF5
 12183                           prodh	equ	0xFF4
 12184                           prodl	equ	0xFF3
 12185                           intcon	equ	0xFF2
 12186                           postinc0	equ	0xFEE
 12187                           plusw0	equ	0xFEB
 12188                           fsr0h	equ	0xFEA
 12189                           fsr0l	equ	0xFE9
 12190                           wreg	equ	0xFE8
 12191                           indf1	equ	0xFE7
 12192                           postinc1	equ	0xFE6
 12193                           postdec1	equ	0xFE5
 12194                           plusw1	equ	0xFE3
 12195                           fsr1h	equ	0xFE2
 12196                           fsr1l	equ	0xFE1
 12197                           indf2	equ	0xFDF
 12198                           postinc2	equ	0xFDE
 12199                           postdec2	equ	0xFDD
 12200                           plusw2	equ	0xFDB
 12201                           fsr2h	equ	0xFDA
 12202                           fsr2l	equ	0xFD9
 12203                           status	equ	0xFD8
 12204                           
 12205 ;; *************** function i2_Midi_ResetBuffer *****************
 12206 ;; Defined at:
 12207 ;;		line 41 in file "midi.c"
 12208 ;; Parameters:    Size  Location     Type
 12209 ;;  AMidiBuffer     2    0[COMRAM] PTR struct .
 12210 ;;		 -> _MidiOutput(324), _MidiInput(324), 
 12211 ;; Auto vars:     Size  Location     Type
 12212 ;;  Midi_ResetBu    1    5[COMRAM] unsigned char 
 12213 ;;  Midi_ResetBu    1    4[COMRAM] unsigned char 
 12214 ;; Return value:  Size  Location     Type
 12215 ;;                  1    wreg      void 
 12216 ;; Registers used:
 12217 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 12218 ;; Tracked objects:
 12219 ;;		On entry : 0/0
 12220 ;;		On exit  : 0/0
 12221 ;;		Unchanged: 0/0
 12222 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 12223 ;;      Params:         2       0       0       0       0       0       0       0       0
 12224 ;;      Locals:         2       0       0       0       0       0       0       0       0
 12225 ;;      Temps:          2       0       0       0       0       0       0       0       0
 12226 ;;      Totals:         6       0       0       0       0       0       0       0       0
 12227 ;;Total ram usage:        6 bytes
 12228 ;; Hardware stack levels used:    1
 12229 ;; This function calls:
 12230 ;;		Nothing
 12231 ;; This function is called by:
 12232 ;;		_Interrupt
 12233 ;; This function uses a non-reentrant model
 12234 ;;
 12235                           
 12236                           	psect	text74
 12237  001F4A                     __ptext74:
 12238                           	opt stack 0
 12239  001F4A                     i2_Midi_ResetBuffer:
 12240                           	opt stack 22
 12241                           
 12242                           ;midi.c: 43: AMidiBuffer->iBufferRead = 0;
 12243                           
 12244                           ;incstack = 0
 12245  001F4A  EE21 F040          	lfsr	2,320
 12246  001F4E  5001               	movf	i2Midi_ResetBuffer@AMidiBuffer,w,c
 12247  001F50  26D9               	addwf	fsr2l,f,c
 12248  001F52  5002               	movf	i2Midi_ResetBuffer@AMidiBuffer+1,w,c
 12249  001F54  22DA               	addwfc	fsr2h,f,c
 12250  001F56  6ADF               	clrf	indf2,c
 12251                           
 12252                           ;midi.c: 44: AMidiBuffer->iBufferWrite = 0;
 12253  001F58  EE21 F041          	lfsr	2,321
 12254  001F5C  5001               	movf	i2Midi_ResetBuffer@AMidiBuffer,w,c
 12255  001F5E  26D9               	addwf	fsr2l,f,c
 12256  001F60  5002               	movf	i2Midi_ResetBuffer@AMidiBuffer+1,w,c
 12257  001F62  22DA               	addwfc	fsr2h,f,c
 12258  001F64  6ADF               	clrf	indf2,c
 12259                           
 12260                           ;midi.c: 45: AMidiBuffer->iData = 0;
 12261  001F66  EE21 F042          	lfsr	2,322
 12262  001F6A  5001               	movf	i2Midi_ResetBuffer@AMidiBuffer,w,c
 12263  001F6C  26D9               	addwf	fsr2l,f,c
 12264  001F6E  5002               	movf	i2Midi_ResetBuffer@AMidiBuffer+1,w,c
 12265  001F70  22DA               	addwfc	fsr2h,f,c
 12266  001F72  6ADF               	clrf	indf2,c
 12267                           
 12268                           ;midi.c: 46: AMidiBuffer->Size = 0;
 12269  001F74  EE21 F043          	lfsr	2,323
 12270  001F78  5001               	movf	i2Midi_ResetBuffer@AMidiBuffer,w,c
 12271  001F7A  26D9               	addwf	fsr2l,f,c
 12272  001F7C  5002               	movf	i2Midi_ResetBuffer@AMidiBuffer+1,w,c
 12273  001F7E  22DA               	addwfc	fsr2h,f,c
 12274  001F80  6ADF               	clrf	indf2,c
 12275                           
 12276                           ;midi.c: 47: for (char i = 0; i < 64; i++)
 12277  001F82  6A06               	clrf	i2Midi_ResetBuffer@i,c
 12278  001F84                     i2l4654:
 12279  001F84  0E3F               	movlw	63
 12280  001F86  6406               	cpfsgt	i2Midi_ResetBuffer@i,c
 12281  001F88  D001               	goto	i2l4658
 12282  001F8A  0C3F               	retlw	63
 12283  001F8C                     i2l4658:
 12284                           
 12285                           ;midi.c: 48: {
 12286                           ;midi.c: 49: AMidiBuffer->Buffer[i].Code = 0x00;
 12287  001F8C  5006               	movf	i2Midi_ResetBuffer@i,w,c
 12288  001F8E  0D05               	mullw	5
 12289  001F90  50F3               	movf	prodl,w,c
 12290  001F92  2401               	addwf	i2Midi_ResetBuffer@AMidiBuffer,w,c
 12291  001F94  6ED9               	movwf	fsr2l,c
 12292  001F96  50F4               	movf	prodh,w,c
 12293  001F98  2002               	addwfc	i2Midi_ResetBuffer@AMidiBuffer+1,w,c
 12294  001F9A  6EDA               	movwf	fsr2h,c
 12295  001F9C  6ADF               	clrf	indf2,c
 12296                           
 12297                           ;midi.c: 50: AMidiBuffer->Buffer[i].Channel = 0x00;
 12298  001F9E  5006               	movf	i2Midi_ResetBuffer@i,w,c
 12299  001FA0  0D05               	mullw	5
 12300  001FA2  C001  F003         	movff	i2Midi_ResetBuffer@AMidiBuffer,??i2_Midi_ResetBuffer
 12301  001FA6  C002  F004         	movff	i2Midi_ResetBuffer@AMidiBuffer+1,??i2_Midi_ResetBuffer+1
 12302  001FAA  50F3               	movf	prodl,w,c
 12303  001FAC  2603               	addwf	??i2_Midi_ResetBuffer,f,c
 12304  001FAE  50F4               	movf	prodh,w,c
 12305  001FB0  2204               	addwfc	??i2_Midi_ResetBuffer+1,f,c
 12306  001FB2  2803               	incf	??i2_Midi_ResetBuffer,w,c
 12307  001FB4  6ED9               	movwf	fsr2l,c
 12308  001FB6  0E00               	movlw	0
 12309  001FB8  2004               	addwfc	??i2_Midi_ResetBuffer+1,w,c
 12310  001FBA  6EDA               	movwf	fsr2h,c
 12311  001FBC  6ADF               	clrf	indf2,c
 12312                           
 12313                           ;midi.c: 51: for (char j = 0; j < sizeof(AMidiBuffer->Buffer[i].Data); j++)
 12314  001FBE  6A05               	clrf	i2Midi_ResetBuffer@j,c
 12315  001FC0                     i2l4662:
 12316  001FC0  0E01               	movlw	1
 12317  001FC2  6405               	cpfsgt	i2Midi_ResetBuffer@j,c
 12318  001FC4  D001               	goto	i2l4666
 12319  001FC6  D017               	goto	i2l4672
 12320  001FC8                     i2l4666:
 12321                           
 12322                           ;midi.c: 52: AMidiBuffer->Buffer[i].Data[j] = 0x00;
 12323  001FC8  5006               	movf	i2Midi_ResetBuffer@i,w,c
 12324  001FCA  0D05               	mullw	5
 12325  001FCC  C001  F003         	movff	i2Midi_ResetBuffer@AMidiBuffer,??i2_Midi_ResetBuffer
 12326  001FD0  C002  F004         	movff	i2Midi_ResetBuffer@AMidiBuffer+1,??i2_Midi_ResetBuffer+1
 12327  001FD4  50F3               	movf	prodl,w,c
 12328  001FD6  2603               	addwf	??i2_Midi_ResetBuffer,f,c
 12329  001FD8  50F4               	movf	prodh,w,c
 12330  001FDA  2204               	addwfc	??i2_Midi_ResetBuffer+1,f,c
 12331  001FDC  5005               	movf	i2Midi_ResetBuffer@j,w,c
 12332  001FDE  2603               	addwf	??i2_Midi_ResetBuffer,f,c
 12333  001FE0  0E00               	movlw	0
 12334  001FE2  2204               	addwfc	??i2_Midi_ResetBuffer+1,f,c
 12335  001FE4  0E02               	movlw	2
 12336  001FE6  2403               	addwf	??i2_Midi_ResetBuffer,w,c
 12337  001FE8  6ED9               	movwf	fsr2l,c
 12338  001FEA  0E00               	movlw	0
 12339  001FEC  2004               	addwfc	??i2_Midi_ResetBuffer+1,w,c
 12340  001FEE  6EDA               	movwf	fsr2h,c
 12341  001FF0  6ADF               	clrf	indf2,c
 12342  001FF2  2A05               	incf	i2Midi_ResetBuffer@j,f,c
 12343  001FF4  D7E5               	goto	i2l4662
 12344  001FF6                     i2l4672:
 12345  001FF6  2A06               	incf	i2Midi_ResetBuffer@i,f,c
 12346  001FF8  D7C5               	goto	i2l4654
 12347  001FFA                     __end_ofi2_Midi_ResetBuffer:
 12348                           	opt stack 0
 12349                           tblptru	equ	0xFF8
 12350                           tblptrh	equ	0xFF7
 12351                           tblptrl	equ	0xFF6
 12352                           tablat	equ	0xFF5
 12353                           prodh	equ	0xFF4
 12354                           prodl	equ	0xFF3
 12355                           intcon	equ	0xFF2
 12356                           postinc0	equ	0xFEE
 12357                           plusw0	equ	0xFEB
 12358                           fsr0h	equ	0xFEA
 12359                           fsr0l	equ	0xFE9
 12360                           wreg	equ	0xFE8
 12361                           indf1	equ	0xFE7
 12362                           postinc1	equ	0xFE6
 12363                           postdec1	equ	0xFE5
 12364                           plusw1	equ	0xFE3
 12365                           fsr1h	equ	0xFE2
 12366                           fsr1l	equ	0xFE1
 12367                           indf2	equ	0xFDF
 12368                           postinc2	equ	0xFDE
 12369                           postdec2	equ	0xFDD
 12370                           plusw2	equ	0xFDB
 12371                           fsr2h	equ	0xFDA
 12372                           fsr2l	equ	0xFD9
 12373                           status	equ	0xFD8
 12374                           
 12375 ;; *************** function i2_Hub_CopyBuffer *****************
 12376 ;; Defined at:
 12377 ;;		line 113 in file "hub.c"
 12378 ;; Parameters:    Size  Location     Type
 12379 ;;		None
 12380 ;; Auto vars:     Size  Location     Type
 12381 ;;		None
 12382 ;; Return value:  Size  Location     Type
 12383 ;;                  1    wreg      void 
 12384 ;; Registers used:
 12385 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 12386 ;; Tracked objects:
 12387 ;;		On entry : 3F/1
 12388 ;;		On exit  : 3F/1
 12389 ;;		Unchanged: 0/0
 12390 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 12391 ;;      Params:         0       0       0       0       0       0       0       0       0
 12392 ;;      Locals:         0       0       0       0       0       0       0       0       0
 12393 ;;      Temps:          0       0       0       0       0       0       0       0       0
 12394 ;;      Totals:         0       0       0       0       0       0       0       0       0
 12395 ;;Total ram usage:        0 bytes
 12396 ;; Hardware stack levels used:    1
 12397 ;; Hardware stack levels required when called:    1
 12398 ;; This function calls:
 12399 ;;		i2_memcpy
 12400 ;; This function is called by:
 12401 ;;		_Interrupt
 12402 ;; This function uses a non-reentrant model
 12403 ;;
 12404                           
 12405                           	psect	text75
 12406  0030EE                     __ptext75:
 12407                           	opt stack 0
 12408  0030EE                     i2_Hub_CopyBuffer:
 12409                           	opt stack 21
 12410                           
 12411                           ; BSR set to: 1
 12412                           ;hub.c: 115: memcpy(&_Hub.SecondaryBuffer, &_Hub.PrimaryBuffer, sizeof(DataBuffer));
 12413                           
 12414                           ;incstack = 0
 12415  0030EE  0E6E               	movlw	low (__Hub+110)
 12416  0030F0  6E01               	movwf	i2memcpy@d1,c
 12417  0030F2  0E01               	movlw	high (__Hub+110)
 12418  0030F4  6E02               	movwf	i2memcpy@d1+1,c
 12419  0030F6  0E62               	movlw	low (__Hub+98)
 12420  0030F8  6E03               	movwf	i2memcpy@s1,c
 12421  0030FA  0E01               	movlw	high (__Hub+98)
 12422  0030FC  6E04               	movwf	i2memcpy@s1+1,c
 12423  0030FE  6A06               	clrf	i2memcpy@n+1,c
 12424  003100  0E0C               	movlw	12
 12425  003102  6E05               	movwf	i2memcpy@n,c
 12426  003104  ECD1  F016         	call	i2_memcpy	;wreg free
 12427                           
 12428                           ; BSR set to: 1
 12429                           ;hub.c: 117: _Hub.ReadyToWrite = 0;
 12430  003108  6B86               	clrf	(__Hub+134)& (0+255),b
 12431                           
 12432                           ; BSR set to: 1
 12433  00310A  0012               	return		;funcret
 12434  00310C                     __end_ofi2_Hub_CopyBuffer:
 12435                           	opt stack 0
 12436                           tblptru	equ	0xFF8
 12437                           tblptrh	equ	0xFF7
 12438                           tblptrl	equ	0xFF6
 12439                           tablat	equ	0xFF5
 12440                           prodh	equ	0xFF4
 12441                           prodl	equ	0xFF3
 12442                           intcon	equ	0xFF2
 12443                           postinc0	equ	0xFEE
 12444                           plusw0	equ	0xFEB
 12445                           fsr0h	equ	0xFEA
 12446                           fsr0l	equ	0xFE9
 12447                           wreg	equ	0xFE8
 12448                           indf1	equ	0xFE7
 12449                           postinc1	equ	0xFE6
 12450                           postdec1	equ	0xFE5
 12451                           plusw1	equ	0xFE3
 12452                           fsr1h	equ	0xFE2
 12453                           fsr1l	equ	0xFE1
 12454                           indf2	equ	0xFDF
 12455                           postinc2	equ	0xFDE
 12456                           postdec2	equ	0xFDD
 12457                           plusw2	equ	0xFDB
 12458                           fsr2h	equ	0xFDA
 12459                           fsr2l	equ	0xFD9
 12460                           status	equ	0xFD8
 12461                           
 12462 ;; *************** function _Sequencer_TimerEvent *****************
 12463 ;; Defined at:
 12464 ;;		line 41 in file "main.c"
 12465 ;; Parameters:    Size  Location     Type
 12466 ;;		None
 12467 ;; Auto vars:     Size  Location     Type
 12468 ;;		None
 12469 ;; Return value:  Size  Location     Type
 12470 ;;                  1    wreg      void 
 12471 ;; Registers used:
 12472 ;;		wreg, status,2, status,0
 12473 ;; Tracked objects:
 12474 ;;		On entry : 0/0
 12475 ;;		On exit  : 3D/0
 12476 ;;		Unchanged: 0/0
 12477 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 12478 ;;      Params:         0       0       0       0       0       0       0       0       0
 12479 ;;      Locals:         0       0       0       0       0       0       0       0       0
 12480 ;;      Temps:          0       0       0       0       0       0       0       0       0
 12481 ;;      Totals:         0       0       0       0       0       0       0       0       0
 12482 ;;Total ram usage:        0 bytes
 12483 ;; Hardware stack levels used:    1
 12484 ;; This function calls:
 12485 ;;		Nothing
 12486 ;; This function is called by:
 12487 ;;		_Interrupt
 12488 ;; This function uses a non-reentrant model
 12489 ;;
 12490                           
 12491                           	psect	text76
 12492  003142                     __ptext76:
 12493                           	opt stack 0
 12494  003142                     _Sequencer_TimerEvent:
 12495                           	opt stack 22
 12496                           
 12497                           ;main.c: 43: if (_Saving)
 12498                           
 12499                           ; BSR set to: 1
 12500                           ;incstack = 0
 12501  003142  0100               	movlb	0	; () banked
 12502  003144  51DF               	movf	__Saving& (0+255),w,b
 12503  003146  E002               	bz	i2l4384
 12504                           
 12505                           ; BSR set to: 0
 12506                           ;main.c: 44: _Display.SavingMask = ~_Display.SavingMask;
 12507  003148  0102               	movlb	2	; () banked
 12508  00314A  1FC7               	comf	(__Display+199)& (0+255),f,b
 12509  00314C                     i2l4384:
 12510                           
 12511                           ;main.c: 45: if (_Modified && (2 > 1))
 12512  00314C  0100               	movlb	0	; () banked
 12513  00314E  51E0               	movf	__Modified& (0+255),w,b
 12514  003150  B4D8               	btfsc	status,2,c
 12515  003152  0012               	return	
 12516                           
 12517                           ; BSR set to: 0
 12518                           ;main.c: 46: _Display.PointMask[1] = ~_Display.PointMask[1];
 12519  003154  0102               	movlb	2	; () banked
 12520  003156  1FC9               	comf	(__Display+201)& (0+255),f,b
 12521  003158  0CFF               	retlw	255	;funcret
 12522  00315A                     __end_of_Sequencer_TimerEvent:
 12523                           	opt stack 0
 12524                           tblptru	equ	0xFF8
 12525                           tblptrh	equ	0xFF7
 12526                           tblptrl	equ	0xFF6
 12527                           tablat	equ	0xFF5
 12528                           prodh	equ	0xFF4
 12529                           prodl	equ	0xFF3
 12530                           intcon	equ	0xFF2
 12531                           postinc0	equ	0xFEE
 12532                           plusw0	equ	0xFEB
 12533                           fsr0h	equ	0xFEA
 12534                           fsr0l	equ	0xFE9
 12535                           wreg	equ	0xFE8
 12536                           indf1	equ	0xFE7
 12537                           postinc1	equ	0xFE6
 12538                           postdec1	equ	0xFE5
 12539                           plusw1	equ	0xFE3
 12540                           fsr1h	equ	0xFE2
 12541                           fsr1l	equ	0xFE1
 12542                           indf2	equ	0xFDF
 12543                           postinc2	equ	0xFDE
 12544                           postdec2	equ	0xFDD
 12545                           plusw2	equ	0xFDB
 12546                           fsr2h	equ	0xFDA
 12547                           fsr2l	equ	0xFD9
 12548                           status	equ	0xFD8
 12549                           
 12550 ;; *************** function _Midi_Write *****************
 12551 ;; Defined at:
 12552 ;;		line 56 in file "midi.c"
 12553 ;; Parameters:    Size  Location     Type
 12554 ;;  AData           1    wreg     unsigned char 
 12555 ;;  AMidiBuffer     2    0[COMRAM] PTR struct .
 12556 ;;		 -> _MidiInput(324), 
 12557 ;; Auto vars:     Size  Location     Type
 12558 ;;  AData           1    6[COMRAM] unsigned char 
 12559 ;; Return value:  Size  Location     Type
 12560 ;;                  1    wreg      void 
 12561 ;; Registers used:
 12562 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 12563 ;; Tracked objects:
 12564 ;;		On entry : 0/0
 12565 ;;		On exit  : 0/0
 12566 ;;		Unchanged: 0/0
 12567 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 12568 ;;      Params:         2       0       0       0       0       0       0       0       0
 12569 ;;      Locals:         1       0       0       0       0       0       0       0       0
 12570 ;;      Temps:          4       0       0       0       0       0       0       0       0
 12571 ;;      Totals:         7       0       0       0       0       0       0       0       0
 12572 ;;Total ram usage:        7 bytes
 12573 ;; Hardware stack levels used:    1
 12574 ;; This function calls:
 12575 ;;		Nothing
 12576 ;; This function is called by:
 12577 ;;		_Interrupt
 12578 ;; This function uses a non-reentrant model
 12579 ;;
 12580                           
 12581                           	psect	text77
 12582  000A58                     __ptext77:
 12583                           	opt stack 0
 12584  000A58                     _Midi_Write:
 12585                           	opt stack 22
 12586                           
 12587                           ;incstack = 0
 12588                           ;Midi_Write@AData stored from wreg
 12589  000A58  6E07               	movwf	Midi_Write@AData,c
 12590                           
 12591                           ;midi.c: 58: if (AData & 0x80 == 0x80)
 12592  000A5A  A007               	btfss	Midi_Write@AData,0,c
 12593  000A5C  D08F               	goto	i2l4462
 12594                           
 12595                           ;midi.c: 59: {
 12596                           ;midi.c: 60: AMidiBuffer->Buffer[AMidiBuffer->iBufferWrite].Code = AData & 0xF0;
 12597  000A5E  EE21 F041          	lfsr	2,321
 12598  000A62  5001               	movf	Midi_Write@AMidiBuffer,w,c
 12599  000A64  26D9               	addwf	fsr2l,f,c
 12600  000A66  5002               	movf	Midi_Write@AMidiBuffer+1,w,c
 12601  000A68  22DA               	addwfc	fsr2h,f,c
 12602  000A6A  50DF               	movf	indf2,w,c
 12603  000A6C  0D05               	mullw	5
 12604  000A6E  50F3               	movf	prodl,w,c
 12605  000A70  2401               	addwf	Midi_Write@AMidiBuffer,w,c
 12606  000A72  6ED9               	movwf	fsr2l,c
 12607  000A74  50F4               	movf	prodh,w,c
 12608  000A76  2002               	addwfc	Midi_Write@AMidiBuffer+1,w,c
 12609  000A78  6EDA               	movwf	fsr2h,c
 12610  000A7A  5007               	movf	Midi_Write@AData,w,c
 12611  000A7C  0BF0               	andlw	240
 12612  000A7E  6EDF               	movwf	indf2,c
 12613                           
 12614                           ;midi.c: 61: AMidiBuffer->Buffer[AMidiBuffer->iBufferWrite].Channel = AData & 0x0F;
 12615  000A80  EE21 F041          	lfsr	2,321
 12616  000A84  5001               	movf	Midi_Write@AMidiBuffer,w,c
 12617  000A86  26D9               	addwf	fsr2l,f,c
 12618  000A88  5002               	movf	Midi_Write@AMidiBuffer+1,w,c
 12619  000A8A  22DA               	addwfc	fsr2h,f,c
 12620  000A8C  50DF               	movf	indf2,w,c
 12621  000A8E  0D05               	mullw	5
 12622  000A90  C001  F003         	movff	Midi_Write@AMidiBuffer,??_Midi_Write
 12623  000A94  C002  F004         	movff	Midi_Write@AMidiBuffer+1,??_Midi_Write+1
 12624  000A98  50F3               	movf	prodl,w,c
 12625  000A9A  2603               	addwf	??_Midi_Write,f,c
 12626  000A9C  50F4               	movf	prodh,w,c
 12627  000A9E  2204               	addwfc	??_Midi_Write+1,f,c
 12628  000AA0  2803               	incf	??_Midi_Write,w,c
 12629  000AA2  6ED9               	movwf	fsr2l,c
 12630  000AA4  0E00               	movlw	0
 12631  000AA6  2004               	addwfc	??_Midi_Write+1,w,c
 12632  000AA8  6EDA               	movwf	fsr2h,c
 12633  000AAA  5007               	movf	Midi_Write@AData,w,c
 12634  000AAC  0B0F               	andlw	15
 12635  000AAE  6EDF               	movwf	indf2,c
 12636                           
 12637                           ;midi.c: 62: switch(AMidiBuffer->Buffer[AMidiBuffer->iBufferWrite].Code)
 12638  000AB0  D049               	goto	i2l4458
 12639  000AB2                     i2l4448:
 12640                           
 12641                           ;midi.c: 65: AMidiBuffer->Buffer[AMidiBuffer->iBufferWrite].DataCount = 2;
 12642  000AB2  EE21 F041          	lfsr	2,321
 12643  000AB6  5001               	movf	Midi_Write@AMidiBuffer,w,c
 12644  000AB8  26D9               	addwf	fsr2l,f,c
 12645  000ABA  5002               	movf	Midi_Write@AMidiBuffer+1,w,c
 12646  000ABC  22DA               	addwfc	fsr2h,f,c
 12647  000ABE  50DF               	movf	indf2,w,c
 12648  000AC0  0D05               	mullw	5
 12649  000AC2  C001  F003         	movff	Midi_Write@AMidiBuffer,??_Midi_Write
 12650  000AC6  C002  F004         	movff	Midi_Write@AMidiBuffer+1,??_Midi_Write+1
 12651  000ACA  50F3               	movf	prodl,w,c
 12652  000ACC  2603               	addwf	??_Midi_Write,f,c
 12653  000ACE  50F4               	movf	prodh,w,c
 12654  000AD0  2204               	addwfc	??_Midi_Write+1,f,c
 12655  000AD2  0E04               	movlw	4
 12656  000AD4  2403               	addwf	??_Midi_Write,w,c
 12657  000AD6  6ED9               	movwf	fsr2l,c
 12658  000AD8  0E00               	movlw	0
 12659  000ADA  2004               	addwfc	??_Midi_Write+1,w,c
 12660  000ADC  6EDA               	movwf	fsr2h,c
 12661  000ADE  0E02               	movlw	2
 12662  000AE0  D017               	goto	L2
 12663  000AE2                     i2l4450:
 12664                           
 12665                           ;midi.c: 69: AMidiBuffer->Buffer[AMidiBuffer->iBufferWrite].DataCount = 1;
 12666  000AE2  EE21 F041          	lfsr	2,321
 12667  000AE6  5001               	movf	Midi_Write@AMidiBuffer,w,c
 12668  000AE8  26D9               	addwf	fsr2l,f,c
 12669  000AEA  5002               	movf	Midi_Write@AMidiBuffer+1,w,c
 12670  000AEC  22DA               	addwfc	fsr2h,f,c
 12671  000AEE  50DF               	movf	indf2,w,c
 12672  000AF0  0D05               	mullw	5
 12673  000AF2  C001  F003         	movff	Midi_Write@AMidiBuffer,??_Midi_Write
 12674  000AF6  C002  F004         	movff	Midi_Write@AMidiBuffer+1,??_Midi_Write+1
 12675  000AFA  50F3               	movf	prodl,w,c
 12676  000AFC  2603               	addwf	??_Midi_Write,f,c
 12677  000AFE  50F4               	movf	prodh,w,c
 12678  000B00  2204               	addwfc	??_Midi_Write+1,f,c
 12679  000B02  0E04               	movlw	4
 12680  000B04  2403               	addwf	??_Midi_Write,w,c
 12681  000B06  6ED9               	movwf	fsr2l,c
 12682  000B08  0E00               	movlw	0
 12683  000B0A  2004               	addwfc	??_Midi_Write+1,w,c
 12684  000B0C  6EDA               	movwf	fsr2h,c
 12685  000B0E  0E01               	movlw	1
 12686  000B10                     L2:
 12687  000B10  6EDF               	movwf	indf2,c
 12688                           
 12689                           ;midi.c: 70: break;
 12690  000B12  D02C               	goto	i2l4460
 12691  000B14                     i2l4452:
 12692                           
 12693                           ;midi.c: 73: AMidiBuffer->Buffer[AMidiBuffer->iBufferWrite].DataCount = -1;
 12694  000B14  EE21 F041          	lfsr	2,321
 12695  000B18  5001               	movf	Midi_Write@AMidiBuffer,w,c
 12696  000B1A  26D9               	addwf	fsr2l,f,c
 12697  000B1C  5002               	movf	Midi_Write@AMidiBuffer+1,w,c
 12698  000B1E  22DA               	addwfc	fsr2h,f,c
 12699  000B20  50DF               	movf	indf2,w,c
 12700  000B22  0D05               	mullw	5
 12701  000B24  C001  F003         	movff	Midi_Write@AMidiBuffer,??_Midi_Write
 12702  000B28  C002  F004         	movff	Midi_Write@AMidiBuffer+1,??_Midi_Write+1
 12703  000B2C  50F3               	movf	prodl,w,c
 12704  000B2E  2603               	addwf	??_Midi_Write,f,c
 12705  000B30  50F4               	movf	prodh,w,c
 12706  000B32  2204               	addwfc	??_Midi_Write+1,f,c
 12707  000B34  0E04               	movlw	4
 12708  000B36  2403               	addwf	??_Midi_Write,w,c
 12709  000B38  6ED9               	movwf	fsr2l,c
 12710  000B3A  0E00               	movlw	0
 12711  000B3C  2004               	addwfc	??_Midi_Write+1,w,c
 12712  000B3E  6EDA               	movwf	fsr2h,c
 12713  000B40  68DF               	setf	indf2,c
 12714  000B42  0CFF               	retlw	255
 12715  000B44                     i2l4458:
 12716  000B44  EE21 F041          	lfsr	2,321
 12717  000B48  5001               	movf	Midi_Write@AMidiBuffer,w,c
 12718  000B4A  26D9               	addwf	fsr2l,f,c
 12719  000B4C  5002               	movf	Midi_Write@AMidiBuffer+1,w,c
 12720  000B4E  22DA               	addwfc	fsr2h,f,c
 12721  000B50  50DF               	movf	indf2,w,c
 12722  000B52  0D05               	mullw	5
 12723  000B54  50F3               	movf	prodl,w,c
 12724  000B56  2401               	addwf	Midi_Write@AMidiBuffer,w,c
 12725  000B58  6ED9               	movwf	fsr2l,c
 12726  000B5A  50F4               	movf	prodh,w,c
 12727  000B5C  2002               	addwfc	Midi_Write@AMidiBuffer+1,w,c
 12728  000B5E  6EDA               	movwf	fsr2h,c
 12729  000B60  50DF               	movf	indf2,w,c
 12730                           
 12731                           ; Switch size 1, requested type "speed"
 12732                           ; Number of cases is 2, Range of values is 176 to 192
 12733                           ; switch strategies available:
 12734                           ; Name         Instructions Cycles
 12735                           ; simple_byte            7     4 (average)
 12736                           ;	Chosen strategy is simple_byte
 12737  000B62  0AB0               	xorlw	176	; case 176
 12738  000B64  E0A6               	bz	i2l4448
 12739  000B66  0A70               	xorlw	112	; case 192
 12740  000B68  E0BC               	bz	i2l4450
 12741  000B6A  D7D4               	goto	i2l4452
 12742  000B6C                     i2l4460:
 12743                           
 12744                           ;midi.c: 76: AMidiBuffer->iData = 0;
 12745  000B6C  EE21 F042          	lfsr	2,322
 12746  000B70  5001               	movf	Midi_Write@AMidiBuffer,w,c
 12747  000B72  26D9               	addwf	fsr2l,f,c
 12748  000B74  5002               	movf	Midi_Write@AMidiBuffer+1,w,c
 12749  000B76  22DA               	addwfc	fsr2h,f,c
 12750  000B78  6ADF               	clrf	indf2,c
 12751                           
 12752                           ;midi.c: 77: }
 12753  000B7A  D029               	goto	i2l4466
 12754  000B7C                     i2l4462:
 12755                           
 12756                           ;midi.c: 78: else
 12757                           ;midi.c: 79: {
 12758                           ;midi.c: 80: AMidiBuffer->Buffer[AMidiBuffer->iBufferWrite].Data[AMidiBuffer->iData] = A
      +                          Data;
 12759  000B7C  EE21 F041          	lfsr	2,321
 12760  000B80  5001               	movf	Midi_Write@AMidiBuffer,w,c
 12761  000B82  26D9               	addwf	fsr2l,f,c
 12762  000B84  5002               	movf	Midi_Write@AMidiBuffer+1,w,c
 12763  000B86  22DA               	addwfc	fsr2h,f,c
 12764  000B88  50DF               	movf	indf2,w,c
 12765  000B8A  0D05               	mullw	5
 12766  000B8C  C001  F003         	movff	Midi_Write@AMidiBuffer,??_Midi_Write
 12767  000B90  C002  F004         	movff	Midi_Write@AMidiBuffer+1,??_Midi_Write+1
 12768  000B94  50F3               	movf	prodl,w,c
 12769  000B96  2603               	addwf	??_Midi_Write,f,c
 12770  000B98  50F4               	movf	prodh,w,c
 12771  000B9A  2204               	addwfc	??_Midi_Write+1,f,c
 12772  000B9C  EE21 F042          	lfsr	2,322
 12773  000BA0  5001               	movf	Midi_Write@AMidiBuffer,w,c
 12774  000BA2  26D9               	addwf	fsr2l,f,c
 12775  000BA4  5002               	movf	Midi_Write@AMidiBuffer+1,w,c
 12776  000BA6  22DA               	addwfc	fsr2h,f,c
 12777  000BA8  50DF               	movf	indf2,w,c
 12778  000BAA  2603               	addwf	??_Midi_Write,f,c
 12779  000BAC  0E00               	movlw	0
 12780  000BAE  2204               	addwfc	??_Midi_Write+1,f,c
 12781  000BB0  0E02               	movlw	2
 12782  000BB2  2403               	addwf	??_Midi_Write,w,c
 12783  000BB4  6ED9               	movwf	fsr2l,c
 12784  000BB6  0E00               	movlw	0
 12785  000BB8  2004               	addwfc	??_Midi_Write+1,w,c
 12786  000BBA  6EDA               	movwf	fsr2h,c
 12787  000BBC  C007  FFDF         	movff	Midi_Write@AData,indf2
 12788                           
 12789                           ;midi.c: 81: AMidiBuffer->iData++;
 12790  000BC0  EE21 F042          	lfsr	2,322
 12791  000BC4  5001               	movf	Midi_Write@AMidiBuffer,w,c
 12792  000BC6  26D9               	addwf	fsr2l,f,c
 12793  000BC8  5002               	movf	Midi_Write@AMidiBuffer+1,w,c
 12794  000BCA  22DA               	addwfc	fsr2h,f,c
 12795  000BCC  2ADF               	incf	indf2,f,c
 12796  000BCE                     i2l4466:
 12797                           
 12798                           ;midi.c: 82: }
 12799                           ;midi.c: 84: if (AMidiBuffer->iData == AMidiBuffer->Buffer[AMidiBuffer->iBufferWrite].Da
      +                          taCount && AMidiBuffer->Size <= 64)
 12800  000BCE  EE21 F041          	lfsr	2,321
 12801  000BD2  5001               	movf	Midi_Write@AMidiBuffer,w,c
 12802  000BD4  26D9               	addwf	fsr2l,f,c
 12803  000BD6  5002               	movf	Midi_Write@AMidiBuffer+1,w,c
 12804  000BD8  22DA               	addwfc	fsr2h,f,c
 12805  000BDA  50DF               	movf	indf2,w,c
 12806  000BDC  0D05               	mullw	5
 12807  000BDE  C001  F003         	movff	Midi_Write@AMidiBuffer,??_Midi_Write
 12808  000BE2  C002  F004         	movff	Midi_Write@AMidiBuffer+1,??_Midi_Write+1
 12809  000BE6  50F3               	movf	prodl,w,c
 12810  000BE8  2603               	addwf	??_Midi_Write,f,c
 12811  000BEA  50F4               	movf	prodh,w,c
 12812  000BEC  2204               	addwfc	??_Midi_Write+1,f,c
 12813  000BEE  0E04               	movlw	4
 12814  000BF0  2403               	addwf	??_Midi_Write,w,c
 12815  000BF2  6ED9               	movwf	fsr2l,c
 12816  000BF4  0E00               	movlw	0
 12817  000BF6  2004               	addwfc	??_Midi_Write+1,w,c
 12818  000BF8  6EDA               	movwf	fsr2h,c
 12819  000BFA  50DF               	movf	indf2,w,c
 12820  000BFC  6E05               	movwf	(??_Midi_Write+2)& (0+255),c
 12821  000BFE  6A06               	clrf	(??_Midi_Write+3)& (0+255),c
 12822  000C00  BE05               	btfsc	(??_Midi_Write+2)& (0+255),7,c
 12823  000C02  0606               	decf	(??_Midi_Write+3)& (0+255),f,c
 12824  000C04  EE21 F042          	lfsr	2,322
 12825  000C08  5001               	movf	Midi_Write@AMidiBuffer,w,c
 12826  000C0A  26D9               	addwf	fsr2l,f,c
 12827  000C0C  5002               	movf	Midi_Write@AMidiBuffer+1,w,c
 12828  000C0E  22DA               	addwfc	fsr2h,f,c
 12829  000C10  50DF               	movf	indf2,w,c
 12830  000C12  1805               	xorwf	??_Midi_Write+2,w,c
 12831  000C14  1006               	iorwf	??_Midi_Write+3,w,c
 12832  000C16  A4D8               	btfss	status,2,c
 12833  000C18  0012               	return	
 12834  000C1A  EE21 F043          	lfsr	2,323
 12835  000C1E  5001               	movf	Midi_Write@AMidiBuffer,w,c
 12836  000C20  26D9               	addwf	fsr2l,f,c
 12837  000C22  5002               	movf	Midi_Write@AMidiBuffer+1,w,c
 12838  000C24  22DA               	addwfc	fsr2h,f,c
 12839  000C26  0E41               	movlw	65
 12840  000C28  60DF               	cpfslt	indf2,c
 12841  000C2A  0C41               	retlw	65
 12842                           
 12843                           ;midi.c: 85: {
 12844                           ;midi.c: 86: LATB4 = 1;
 12845  000C2C  888A               	bsf	3978,4,c	;volatile
 12846                           
 12847                           ;midi.c: 87: AMidiBuffer->Size++;
 12848  000C2E  EE21 F043          	lfsr	2,323
 12849  000C32  5001               	movf	Midi_Write@AMidiBuffer,w,c
 12850  000C34  26D9               	addwf	fsr2l,f,c
 12851  000C36  5002               	movf	Midi_Write@AMidiBuffer+1,w,c
 12852  000C38  22DA               	addwfc	fsr2h,f,c
 12853  000C3A  2ADF               	incf	indf2,f,c
 12854                           
 12855                           ;midi.c: 88: AMidiBuffer->iBufferWrite++;
 12856  000C3C  EE21 F041          	lfsr	2,321
 12857  000C40  5001               	movf	Midi_Write@AMidiBuffer,w,c
 12858  000C42  26D9               	addwf	fsr2l,f,c
 12859  000C44  5002               	movf	Midi_Write@AMidiBuffer+1,w,c
 12860  000C46  22DA               	addwfc	fsr2h,f,c
 12861  000C48  2ADF               	incf	indf2,f,c
 12862                           
 12863                           ;midi.c: 89: if (AMidiBuffer->iBufferWrite >= 64)
 12864  000C4A  EE21 F041          	lfsr	2,321
 12865  000C4E  5001               	movf	Midi_Write@AMidiBuffer,w,c
 12866  000C50  26D9               	addwf	fsr2l,f,c
 12867  000C52  5002               	movf	Midi_Write@AMidiBuffer+1,w,c
 12868  000C54  22DA               	addwfc	fsr2h,f,c
 12869  000C56  0E3F               	movlw	63
 12870  000C58  64DF               	cpfsgt	indf2,c
 12871  000C5A  0C3F               	retlw	63
 12872                           
 12873                           ;midi.c: 90: AMidiBuffer->iBufferWrite = 0;
 12874  000C5C  EE21 F041          	lfsr	2,321
 12875  000C60  5001               	movf	Midi_Write@AMidiBuffer,w,c
 12876  000C62  26D9               	addwf	fsr2l,f,c
 12877  000C64  5002               	movf	Midi_Write@AMidiBuffer+1,w,c
 12878  000C66  22DA               	addwfc	fsr2h,f,c
 12879  000C68  6ADF               	clrf	indf2,c
 12880  000C6A  0C00               	retlw	0	;funcret
 12881  000C6C                     __end_of_Midi_Write:
 12882                           	opt stack 0
 12883                           tblptru	equ	0xFF8
 12884                           tblptrh	equ	0xFF7
 12885                           tblptrl	equ	0xFF6
 12886                           tablat	equ	0xFF5
 12887                           prodh	equ	0xFF4
 12888                           prodl	equ	0xFF3
 12889                           intcon	equ	0xFF2
 12890                           postinc0	equ	0xFEE
 12891                           plusw0	equ	0xFEB
 12892                           fsr0h	equ	0xFEA
 12893                           fsr0l	equ	0xFE9
 12894                           wreg	equ	0xFE8
 12895                           indf1	equ	0xFE7
 12896                           postinc1	equ	0xFE6
 12897                           postdec1	equ	0xFE5
 12898                           plusw1	equ	0xFE3
 12899                           fsr1h	equ	0xFE2
 12900                           fsr1l	equ	0xFE1
 12901                           indf2	equ	0xFDF
 12902                           postinc2	equ	0xFDE
 12903                           postdec2	equ	0xFDD
 12904                           plusw2	equ	0xFDB
 12905                           fsr2h	equ	0xFDA
 12906                           fsr2l	equ	0xFD9
 12907                           status	equ	0xFD8
 12908                           
 12909 ;; *************** function _Hub_UpdateValues *****************
 12910 ;; Defined at:
 12911 ;;		line 82 in file "hub.c"
 12912 ;; Parameters:    Size  Location     Type
 12913 ;;		None
 12914 ;; Auto vars:     Size  Location     Type
 12915 ;;  i               2   76[COMRAM] int 
 12916 ;; Return value:  Size  Location     Type
 12917 ;;                  1    wreg      void 
 12918 ;; Registers used:
 12919 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 12920 ;; Tracked objects:
 12921 ;;		On entry : 3F/1
 12922 ;;		On exit  : 3F/1
 12923 ;;		Unchanged: 0/0
 12924 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 12925 ;;      Params:         0       0       0       0       0       0       0       0       0
 12926 ;;      Locals:         2       0       0       0       0       0       0       0       0
 12927 ;;      Temps:          0       0       0       0       0       0       0       0       0
 12928 ;;      Totals:         2       0       0       0       0       0       0       0       0
 12929 ;;Total ram usage:        2 bytes
 12930 ;; Hardware stack levels used:    1
 12931 ;; Hardware stack levels required when called:    4
 12932 ;; This function calls:
 12933 ;;		_Hub_DecodeSwitch
 12934 ;;		_Hub_SetValue
 12935 ;;		i2_Hub_ReadSwitch
 12936 ;;		i2_LatchOff
 12937 ;;		i2_LatchOn
 12938 ;;		i2_memcpy
 12939 ;; This function is called by:
 12940 ;;		_Interrupt
 12941 ;; This function uses a non-reentrant model
 12942 ;;
 12943                           
 12944                           	psect	text78
 12945  001D0C                     __ptext78:
 12946                           	opt stack 0
 12947  001D0C                     _Hub_UpdateValues:
 12948                           	opt stack 18
 12949                           
 12950                           ; BSR set to: 1
 12951                           ;hub.c: 84: if (_Hub.iRead == 0)
 12952                           
 12953                           ;incstack = 0
 12954  001D0C  5161               	movf	(__Hub+97)& (0+255),w,b
 12955  001D0E  E123               	bnz	i2l4418
 12956                           
 12957                           ; BSR set to: 1
 12958                           ;hub.c: 85: {
 12959                           ;hub.c: 86: memcpy(_Hub.SwitchOld, _Hub.Switch, sizeof(_Hub.Switch));
 12960  001D10  0E30               	movlw	low (__Hub+48)
 12961  001D12  6E01               	movwf	i2memcpy@d1,c
 12962  001D14  0E01               	movlw	high (__Hub+48)
 12963  001D16  6E02               	movwf	i2memcpy@d1+1,c
 12964  001D18  0E00               	movlw	low __Hub
 12965  001D1A  6E03               	movwf	i2memcpy@s1,c
 12966  001D1C  0E01               	movlw	high __Hub
 12967  001D1E  6E04               	movwf	i2memcpy@s1+1,c
 12968  001D20  6A06               	clrf	i2memcpy@n+1,c
 12969  001D22  0E30               	movlw	48
 12970  001D24  6E05               	movwf	i2memcpy@n,c
 12971  001D26  ECD1  F016         	call	i2_memcpy	;wreg free
 12972                           
 12973                           ; BSR set to: 1
 12974                           ;hub.c: 89: LatchOn(_Hub.IO);
 12975  001D2A  EE21  F08E         	lfsr	2,__Hub+142
 12976  001D2E  EE00  F001         	lfsr	0,i2LatchOn@AIO
 12977  001D32  0E0E               	movlw	14
 12978  001D34                     i2u476_41:
 12979  001D34  CFDB FFEB          	movff	plusw2,plusw0
 12980  001D38  06E8               	decf	wreg,f,c
 12981  001D3A  E2FC               	bc	i2u476_41
 12982  001D3C  ECFA  F018         	call	i2_LatchOn	;wreg free
 12983                           
 12984                           ;hub.c: 90: LatchOff(_Hub.IO);
 12985  001D40  EE21  F08E         	lfsr	2,__Hub+142
 12986  001D44  EE00  F001         	lfsr	0,i2LatchOff@AIO
 12987  001D48  0E0E               	movlw	14
 12988  001D4A                     i2u477_41:
 12989  001D4A  CFDB FFEB          	movff	plusw2,plusw0
 12990  001D4E  06E8               	decf	wreg,f,c
 12991  001D50  E2FC               	bc	i2u477_41
 12992  001D52  EC01  F019         	call	i2_LatchOff	;wreg free
 12993  001D56                     i2l4418:
 12994                           
 12995                           ;hub.c: 91: }
 12996                           ;hub.c: 93: if (_Hub.iRead < 6 * 8)
 12997  001D56  0E30               	movlw	48
 12998  001D58  0101               	movlb	1	; () banked
 12999  001D5A  6161               	cpfslt	(__Hub+97)& (0+255),b
 13000  001D5C  D002               	goto	i2l325
 13001  001D5E  EF51  F017         	goto	i2_Hub_ReadSwitch
 13002  001D62                     i2l325:
 13003                           
 13004                           ; BSR set to: 1
 13005                           ;hub.c: 95: else
 13006                           ;hub.c: 96: {
 13007                           ;hub.c: 97: _Hub.ReadComplete = 0;
 13008  001D62  6B60               	clrf	(__Hub+96)& (0+255),b
 13009                           
 13010                           ;hub.c: 99: _Hub.PrimaryBuffer.ActionButton = _Hub.Switch[2];
 13011  001D64  C102  F162         	movff	__Hub+2,__Hub+98
 13012                           
 13013                           ; BSR set to: 1
 13014                           ;hub.c: 103: Hub_SetValue(&_Hub.PrimaryBuffer.Channel, 0, _Hub.MaxChannel, Hub_DecodeSwi
      +                          tch(0, 1));
 13015  001D68  0E64               	movlw	low (__Hub+100)
 13016  001D6A  6E05               	movwf	Hub_SetValue@ASourceValue,c
 13017  001D6C  0E01               	movlw	high (__Hub+100)
 13018  001D6E  6E06               	movwf	Hub_SetValue@ASourceValue+1,c
 13019  001D70  6A07               	clrf	Hub_SetValue@AMinValue,c
 13020  001D72  C189  F008         	movff	__Hub+137,Hub_SetValue@AMaxValue
 13021  001D76  C18A  F009         	movff	__Hub+138,Hub_SetValue@AMaxValue+1
 13022  001D7A  0E01               	movlw	1
 13023  001D7C  6E01               	movwf	Hub_DecodeSwitch@AIndex2,c
 13024  001D7E  0E00               	movlw	0
 13025  001D80  EC01  F008         	call	_Hub_DecodeSwitch
 13026  001D84  6E0A               	movwf	Hub_SetValue@AIncrement,c
 13027  001D86  ECC6  F014         	call	_Hub_SetValue	;wreg free
 13028                           
 13029                           ;hub.c: 104: for (int i = 0; i < sizeof(_Hub.PrimaryBuffer.Values); i++)
 13030  001D8A  6A4D               	clrf	Hub_UpdateValues@i,c
 13031  001D8C  6A4E               	clrf	Hub_UpdateValues@i+1,c
 13032  001D8E                     i2l4434:
 13033                           
 13034                           ;hub.c: 105: {
 13035                           ;hub.c: 106: Hub_SetValue(&_Hub.PrimaryBuffer.Values[i], 0, (0x01 << 6) - 1, Hub_DecodeS
      +                          witch(i * 3 + 3, i * 3 + 4));
 13036  001D8E  0E66               	movlw	low (__Hub+102)
 13037  001D90  244D               	addwf	Hub_UpdateValues@i,w,c
 13038  001D92  6E05               	movwf	Hub_SetValue@ASourceValue,c
 13039  001D94  0E01               	movlw	high (__Hub+102)
 13040  001D96  204E               	addwfc	Hub_UpdateValues@i+1,w,c
 13041  001D98  6E06               	movwf	Hub_SetValue@ASourceValue+1,c
 13042  001D9A  6A07               	clrf	Hub_SetValue@AMinValue,c
 13043  001D9C  6A09               	clrf	Hub_SetValue@AMaxValue+1,c
 13044  001D9E  0E3F               	movlw	63
 13045  001DA0  6E08               	movwf	Hub_SetValue@AMaxValue,c
 13046  001DA2  504D               	movf	Hub_UpdateValues@i,w,c
 13047  001DA4  0D03               	mullw	3
 13048  001DA6  50F3               	movf	prodl,w,c
 13049  001DA8  0F04               	addlw	4
 13050  001DAA  6E01               	movwf	Hub_DecodeSwitch@AIndex2,c
 13051  001DAC  504D               	movf	Hub_UpdateValues@i,w,c
 13052  001DAE  0D03               	mullw	3
 13053  001DB0  50F3               	movf	prodl,w,c
 13054  001DB2  0F03               	addlw	3
 13055  001DB4  EC01  F008         	call	_Hub_DecodeSwitch
 13056  001DB8  6E0A               	movwf	Hub_SetValue@AIncrement,c
 13057  001DBA  ECC6  F014         	call	_Hub_SetValue	;wreg free
 13058  001DBE  4A4D               	infsnz	Hub_UpdateValues@i,f,c
 13059  001DC0  2A4E               	incf	Hub_UpdateValues@i+1,f,c
 13060  001DC2  504E               	movf	Hub_UpdateValues@i+1,w,c
 13061  001DC4  E103               	bnz	i2u479_40
 13062  001DC6  0E08               	movlw	8
 13063  001DC8  5C4D               	subwf	Hub_UpdateValues@i,w,c
 13064  001DCA  E3E1               	bnc	i2l4434
 13065  001DCC                     i2u479_40:
 13066                           
 13067                           ;hub.c: 107: }
 13068                           ;hub.c: 108: _Hub.iRead = 0;
 13069  001DCC  0101               	movlb	1	; () banked
 13070  001DCE  6B61               	clrf	(__Hub+97)& (0+255),b
 13071                           
 13072                           ; BSR set to: 1
 13073                           ;hub.c: 109: _Hub.ReadComplete = 1;
 13074  001DD0  0E01               	movlw	1
 13075  001DD2  6F60               	movwf	(__Hub+96)& (0+255),b
 13076                           
 13077                           ; BSR set to: 1
 13078  001DD4  0C01               	retlw	1	;funcret
 13079  001DD6                     __end_of_Hub_UpdateValues:
 13080                           	opt stack 0
 13081                           tblptru	equ	0xFF8
 13082                           tblptrh	equ	0xFF7
 13083                           tblptrl	equ	0xFF6
 13084                           tablat	equ	0xFF5
 13085                           prodh	equ	0xFF4
 13086                           prodl	equ	0xFF3
 13087                           intcon	equ	0xFF2
 13088                           postinc0	equ	0xFEE
 13089                           plusw0	equ	0xFEB
 13090                           fsr0h	equ	0xFEA
 13091                           fsr0l	equ	0xFE9
 13092                           wreg	equ	0xFE8
 13093                           indf1	equ	0xFE7
 13094                           postinc1	equ	0xFE6
 13095                           postdec1	equ	0xFE5
 13096                           plusw1	equ	0xFE3
 13097                           fsr1h	equ	0xFE2
 13098                           fsr1l	equ	0xFE1
 13099                           indf2	equ	0xFDF
 13100                           postinc2	equ	0xFDE
 13101                           postdec2	equ	0xFDD
 13102                           plusw2	equ	0xFDB
 13103                           fsr2h	equ	0xFDA
 13104                           fsr2l	equ	0xFD9
 13105                           status	equ	0xFD8
 13106                           
 13107 ;; *************** function i2_LatchOn *****************
 13108 ;; Defined at:
 13109 ;;		line 70 in file "harware.c"
 13110 ;; Parameters:    Size  Location     Type
 13111 ;;  AIO            15    0[COMRAM] struct .
 13112 ;; Auto vars:     Size  Location     Type
 13113 ;;		None
 13114 ;; Return value:  Size  Location     Type
 13115 ;;                  1    wreg      void 
 13116 ;; Registers used:
 13117 ;;		wreg, fsr2l, fsr2h
 13118 ;; Tracked objects:
 13119 ;;		On entry : 3C/2
 13120 ;;		On exit  : 3C/0
 13121 ;;		Unchanged: 3C/0
 13122 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 13123 ;;      Params:        15       0       0       0       0       0       0       0       0
 13124 ;;      Locals:         0       0       0       0       0       0       0       0       0
 13125 ;;      Temps:          0       0       0       0       0       0       0       0       0
 13126 ;;      Totals:        15       0       0       0       0       0       0       0       0
 13127 ;;Total ram usage:       15 bytes
 13128 ;; Hardware stack levels used:    1
 13129 ;; This function calls:
 13130 ;;		Nothing
 13131 ;; This function is called by:
 13132 ;;		_Hub_UpdateValues
 13133 ;;		i2_WriteData
 13134 ;; This function uses a non-reentrant model
 13135 ;;
 13136                           
 13137                           	psect	text79
 13138  0031F4                     __ptext79:
 13139                           	opt stack 0
 13140  0031F4                     i2_LatchOn:
 13141                           	opt stack 21
 13142                           
 13143                           ;harware.c: 72: *AIO.LatchPin.Port &= AIO.LatchPin.Mask;
 13144                           
 13145                           ; BSR set to: 1
 13146                           ;incstack = 0
 13147  0031F4  C00B  FFD9         	movff	i2LatchOn@AIO+10,fsr2l
 13148  0031F8  C00C  FFDA         	movff	i2LatchOn@AIO+11,fsr2h
 13149  0031FC  500E               	movf	i2LatchOn@AIO+13,w,c
 13150  0031FE  16DF               	andwf	indf2,f,c
 13151  003200  0012               	return		;funcret
 13152  003202                     __end_ofi2_LatchOn:
 13153                           	opt stack 0
 13154                           tblptru	equ	0xFF8
 13155                           tblptrh	equ	0xFF7
 13156                           tblptrl	equ	0xFF6
 13157                           tablat	equ	0xFF5
 13158                           prodh	equ	0xFF4
 13159                           prodl	equ	0xFF3
 13160                           intcon	equ	0xFF2
 13161                           postinc0	equ	0xFEE
 13162                           plusw0	equ	0xFEB
 13163                           fsr0h	equ	0xFEA
 13164                           fsr0l	equ	0xFE9
 13165                           wreg	equ	0xFE8
 13166                           indf1	equ	0xFE7
 13167                           postinc1	equ	0xFE6
 13168                           postdec1	equ	0xFE5
 13169                           plusw1	equ	0xFE3
 13170                           fsr1h	equ	0xFE2
 13171                           fsr1l	equ	0xFE1
 13172                           indf2	equ	0xFDF
 13173                           postinc2	equ	0xFDE
 13174                           postdec2	equ	0xFDD
 13175                           plusw2	equ	0xFDB
 13176                           fsr2h	equ	0xFDA
 13177                           fsr2l	equ	0xFD9
 13178                           status	equ	0xFD8
 13179                           
 13180 ;; *************** function i2_LatchOff *****************
 13181 ;; Defined at:
 13182 ;;		line 75 in file "harware.c"
 13183 ;; Parameters:    Size  Location     Type
 13184 ;;  AIO            15    0[COMRAM] struct .
 13185 ;; Auto vars:     Size  Location     Type
 13186 ;;		None
 13187 ;; Return value:  Size  Location     Type
 13188 ;;                  1    wreg      void 
 13189 ;; Registers used:
 13190 ;;		wreg, fsr2l, fsr2h
 13191 ;; Tracked objects:
 13192 ;;		On entry : 0/2
 13193 ;;		On exit  : 0/0
 13194 ;;		Unchanged: 0/0
 13195 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 13196 ;;      Params:        15       0       0       0       0       0       0       0       0
 13197 ;;      Locals:         0       0       0       0       0       0       0       0       0
 13198 ;;      Temps:          0       0       0       0       0       0       0       0       0
 13199 ;;      Totals:        15       0       0       0       0       0       0       0       0
 13200 ;;Total ram usage:       15 bytes
 13201 ;; Hardware stack levels used:    1
 13202 ;; This function calls:
 13203 ;;		Nothing
 13204 ;; This function is called by:
 13205 ;;		_Hub_UpdateValues
 13206 ;;		i2_WriteData
 13207 ;; This function uses a non-reentrant model
 13208 ;;
 13209                           
 13210                           	psect	text80
 13211  003202                     __ptext80:
 13212                           	opt stack 0
 13213  003202                     i2_LatchOff:
 13214                           	opt stack 21
 13215                           
 13216                           ;harware.c: 77: *AIO.LatchPin.Port |= AIO.LatchPin.NegativeMask;
 13217                           
 13218                           ;incstack = 0
 13219  003202  C00B  FFD9         	movff	i2LatchOff@AIO+10,fsr2l
 13220  003206  C00C  FFDA         	movff	i2LatchOff@AIO+11,fsr2h
 13221  00320A  500F               	movf	i2LatchOff@AIO+14,w,c
 13222  00320C  12DF               	iorwf	indf2,f,c
 13223  00320E  0012               	return		;funcret
 13224  003210                     __end_ofi2_LatchOff:
 13225                           	opt stack 0
 13226                           tblptru	equ	0xFF8
 13227                           tblptrh	equ	0xFF7
 13228                           tblptrl	equ	0xFF6
 13229                           tablat	equ	0xFF5
 13230                           prodh	equ	0xFF4
 13231                           prodl	equ	0xFF3
 13232                           intcon	equ	0xFF2
 13233                           postinc0	equ	0xFEE
 13234                           plusw0	equ	0xFEB
 13235                           fsr0h	equ	0xFEA
 13236                           fsr0l	equ	0xFE9
 13237                           wreg	equ	0xFE8
 13238                           indf1	equ	0xFE7
 13239                           postinc1	equ	0xFE6
 13240                           postdec1	equ	0xFE5
 13241                           plusw1	equ	0xFE3
 13242                           fsr1h	equ	0xFE2
 13243                           fsr1l	equ	0xFE1
 13244                           indf2	equ	0xFDF
 13245                           postinc2	equ	0xFDE
 13246                           postdec2	equ	0xFDD
 13247                           plusw2	equ	0xFDB
 13248                           fsr2h	equ	0xFDA
 13249                           fsr2l	equ	0xFD9
 13250                           status	equ	0xFD8
 13251                           
 13252 ;; *************** function i2_Hub_ReadSwitch *****************
 13253 ;; Defined at:
 13254 ;;		line 44 in file "hub.c"
 13255 ;; Parameters:    Size  Location     Type
 13256 ;;		None
 13257 ;; Auto vars:     Size  Location     Type
 13258 ;;  Hub_ReadSwit   24   52[COMRAM] unsigned char [24]
 13259 ;; Return value:  Size  Location     Type
 13260 ;;                  1    wreg      void 
 13261 ;; Registers used:
 13262 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, cstack
 13263 ;; Tracked objects:
 13264 ;;		On entry : 3F/1
 13265 ;;		On exit  : 3F/1
 13266 ;;		Unchanged: 0/0
 13267 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 13268 ;;      Params:         0       0       0       0       0       0       0       0       0
 13269 ;;      Locals:        24       0       0       0       0       0       0       0       0
 13270 ;;      Temps:          0       0       0       0       0       0       0       0       0
 13271 ;;      Totals:        24       0       0       0       0       0       0       0       0
 13272 ;;Total ram usage:       24 bytes
 13273 ;; Hardware stack levels used:    1
 13274 ;; Hardware stack levels required when called:    3
 13275 ;; This function calls:
 13276 ;;		i2_ReadBitArray
 13277 ;;		i2_memcpy
 13278 ;; This function is called by:
 13279 ;;		_Hub_UpdateValues
 13280 ;; This function uses a non-reentrant model
 13281 ;;
 13282                           
 13283                           	psect	text81
 13284  002EA2                     __ptext81:
 13285                           	opt stack 0
 13286  002EA2                     i2_Hub_ReadSwitch:
 13287                           	opt stack 18
 13288                           
 13289                           ; BSR set to: 1
 13290                           ;hub.c: 46: bool LBitArray[24];
 13291                           ;hub.c: 47: ReadBitArray(LBitArray, _Hub.IO);
 13292                           
 13293                           ;incstack = 0
 13294  002EA2  0E35               	movlw	low i2Hub_ReadSwitch@LBitArray
 13295  002EA4  6E22               	movwf	i2ReadBitArray@AData,c
 13296  002EA6  EE21  F08E         	lfsr	2,__Hub+142
 13297  002EAA  EE00  F023         	lfsr	0,i2ReadBitArray@AIO
 13298  002EAE  0E0E               	movlw	14
 13299  002EB0                     i2u463_41:
 13300  002EB0  CFDB FFEB          	movff	plusw2,plusw0
 13301  002EB4  06E8               	decf	wreg,f,c
 13302  002EB6  E2FC               	bc	i2u463_41
 13303  002EB8  EC12  F017         	call	i2_ReadBitArray	;wreg free
 13304                           
 13305                           ;hub.c: 48: memcpy(_Hub.Switch + _Hub.iRead, LBitArray, sizeof(LBitArray));
 13306  002EBC  0E00               	movlw	low __Hub
 13307  002EBE  0101               	movlb	1	; () banked
 13308  002EC0  2561               	addwf	(__Hub+97)& (0+255),w,b
 13309  002EC2  6E01               	movwf	i2memcpy@d1,c
 13310  002EC4  6A02               	clrf	i2memcpy@d1+1,c
 13311  002EC6  0E01               	movlw	high __Hub
 13312  002EC8  2202               	addwfc	i2memcpy@d1+1,f,c
 13313  002ECA  0E35               	movlw	low i2Hub_ReadSwitch@LBitArray
 13314  002ECC  6E03               	movwf	i2memcpy@s1,c
 13315  002ECE  6A04               	clrf	i2memcpy@s1+1,c
 13316  002ED0  6A06               	clrf	i2memcpy@n+1,c
 13317  002ED2  0E18               	movlw	24
 13318  002ED4  6E05               	movwf	i2memcpy@n,c
 13319  002ED6  ECD1  F016         	call	i2_memcpy	;wreg free
 13320                           
 13321                           ; BSR set to: 1
 13322                           ;hub.c: 49: _Hub.iRead += 24;
 13323  002EDA  0E18               	movlw	24
 13324  002EDC  2761               	addwf	(__Hub+97)& (0+255),f,b
 13325                           
 13326                           ; BSR set to: 1
 13327  002EDE  0C18               	retlw	24	;funcret
 13328  002EE0                     __end_ofi2_Hub_ReadSwitch:
 13329                           	opt stack 0
 13330                           tblptru	equ	0xFF8
 13331                           tblptrh	equ	0xFF7
 13332                           tblptrl	equ	0xFF6
 13333                           tablat	equ	0xFF5
 13334                           prodh	equ	0xFF4
 13335                           prodl	equ	0xFF3
 13336                           intcon	equ	0xFF2
 13337                           postinc0	equ	0xFEE
 13338                           plusw0	equ	0xFEB
 13339                           fsr0h	equ	0xFEA
 13340                           fsr0l	equ	0xFE9
 13341                           wreg	equ	0xFE8
 13342                           indf1	equ	0xFE7
 13343                           postinc1	equ	0xFE6
 13344                           postdec1	equ	0xFE5
 13345                           plusw1	equ	0xFE3
 13346                           fsr1h	equ	0xFE2
 13347                           fsr1l	equ	0xFE1
 13348                           indf2	equ	0xFDF
 13349                           postinc2	equ	0xFDE
 13350                           postdec2	equ	0xFDD
 13351                           plusw2	equ	0xFDB
 13352                           fsr2h	equ	0xFDA
 13353                           fsr2l	equ	0xFD9
 13354                           status	equ	0xFD8
 13355                           
 13356 ;; *************** function i2_memcpy *****************
 13357 ;; Defined at:
 13358 ;;		line 27 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\memcpy.c"
 13359 ;; Parameters:    Size  Location     Type
 13360 ;;  d1              2    0[COMRAM] PTR void 
 13361 ;;		 -> _Hub.Switch(48), Load@LBuffer(12), _Hub(157), 
 13362 ;;  s1              2    2[COMRAM] PTR const void 
 13363 ;;		 -> Persistant_SaveBuffer@ABuffer(12), _Hub.Switch(48), Hub_ReadSwitch@LBitArray(24), _Config(12), 
 13364 ;;		 -> _Hub.PrimaryBuffer(12), _Hub(157), 
 13365 ;;  n               2    4[COMRAM] unsigned int 
 13366 ;; Auto vars:     Size  Location     Type
 13367 ;;  memcpy          2    8[COMRAM] PTR const unsigned char 
 13368 ;;		 -> Persistant_SaveBuffer@ABuffer(12), _Hub.Switch(48), Hub_ReadSwitch@LBitArray(24), _Config(12), 
 13369 ;;		 -> _Hub.PrimaryBuffer(12), _Hub(157), 
 13370 ;;  memcpy          2    6[COMRAM] PTR unsigned char 
 13371 ;;		 -> _Hub.Switch(48), Load@LBuffer(12), _Hub(157), 
 13372 ;;  memcpy          1   10[COMRAM] unsigned char 
 13373 ;; Return value:  Size  Location     Type
 13374 ;;                  2    0[COMRAM] PTR void 
 13375 ;; Registers used:
 13376 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 13377 ;; Tracked objects:
 13378 ;;		On entry : 3F/1
 13379 ;;		On exit  : 3F/1
 13380 ;;		Unchanged: 3F/0
 13381 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 13382 ;;      Params:         6       0       0       0       0       0       0       0       0
 13383 ;;      Locals:         5       0       0       0       0       0       0       0       0
 13384 ;;      Temps:          0       0       0       0       0       0       0       0       0
 13385 ;;      Totals:        11       0       0       0       0       0       0       0       0
 13386 ;;Total ram usage:       11 bytes
 13387 ;; Hardware stack levels used:    1
 13388 ;; This function calls:
 13389 ;;		Nothing
 13390 ;; This function is called by:
 13391 ;;		_Hub_UpdateValues
 13392 ;;		i2_Hub_ReadSwitch
 13393 ;;		i2_Hub_CopyBuffer
 13394 ;; This function uses a non-reentrant model
 13395 ;;
 13396                           
 13397                           	psect	text82
 13398  002DA2                     __ptext82:
 13399                           	opt stack 0
 13400  002DA2                     i2_memcpy:
 13401                           	opt stack 21
 13402                           
 13403                           ; BSR set to: 1
 13404                           
 13405                           ; BSR set to: 1
 13406                           ;incstack = 0
 13407  002DA2  C003  F009         	movff	i2memcpy@s1,i2memcpy@s
 13408  002DA6  C004  F00A         	movff	i2memcpy@s1+1,i2memcpy@s+1
 13409  002DAA  C001  F007         	movff	i2memcpy@d1,i2memcpy@d
 13410  002DAE  C002  F008         	movff	i2memcpy@d1+1,i2memcpy@d+1
 13411  002DB2  D010               	goto	i2l3936
 13412  002DB4                     i2l3928:
 13413                           
 13414                           ; BSR set to: 1
 13415  002DB4  C009  FFD9         	movff	i2memcpy@s,fsr2l
 13416  002DB8  C00A  FFDA         	movff	i2memcpy@s+1,fsr2h
 13417  002DBC  50DF               	movf	indf2,w,c
 13418  002DBE  6E0B               	movwf	i2memcpy@tmp,c
 13419                           
 13420                           ; BSR set to: 1
 13421  002DC0  4A09               	infsnz	i2memcpy@s,f,c
 13422  002DC2  2A0A               	incf	i2memcpy@s+1,f,c
 13423                           
 13424                           ; BSR set to: 1
 13425  002DC4  C007  FFD9         	movff	i2memcpy@d,fsr2l
 13426  002DC8  C008  FFDA         	movff	i2memcpy@d+1,fsr2h
 13427  002DCC  C00B  FFDF         	movff	i2memcpy@tmp,indf2
 13428                           
 13429                           ; BSR set to: 1
 13430  002DD0  4A07               	infsnz	i2memcpy@d,f,c
 13431  002DD2  2A08               	incf	i2memcpy@d+1,f,c
 13432  002DD4                     i2l3936:
 13433                           
 13434                           ; BSR set to: 1
 13435  002DD4  0605               	decf	i2memcpy@n,f,c
 13436  002DD6  A0D8               	btfss	status,0,c
 13437  002DD8  0606               	decf	i2memcpy@n+1,f,c
 13438  002DDA  2805               	incf	i2memcpy@n,w,c
 13439  002DDC  E1EB               	bnz	i2l3928
 13440  002DDE  2806               	incf	i2memcpy@n+1,w,c
 13441  002DE0  E1E9               	bnz	i2l3928
 13442                           
 13443                           ; BSR set to: 1
 13444  002DE2  0012               	return		;funcret
 13445  002DE4                     __end_ofi2_memcpy:
 13446                           	opt stack 0
 13447                           tblptru	equ	0xFF8
 13448                           tblptrh	equ	0xFF7
 13449                           tblptrl	equ	0xFF6
 13450                           tablat	equ	0xFF5
 13451                           prodh	equ	0xFF4
 13452                           prodl	equ	0xFF3
 13453                           intcon	equ	0xFF2
 13454                           postinc0	equ	0xFEE
 13455                           plusw0	equ	0xFEB
 13456                           fsr0h	equ	0xFEA
 13457                           fsr0l	equ	0xFE9
 13458                           wreg	equ	0xFE8
 13459                           indf1	equ	0xFE7
 13460                           postinc1	equ	0xFE6
 13461                           postdec1	equ	0xFE5
 13462                           plusw1	equ	0xFE3
 13463                           fsr1h	equ	0xFE2
 13464                           fsr1l	equ	0xFE1
 13465                           indf2	equ	0xFDF
 13466                           postinc2	equ	0xFDE
 13467                           postdec2	equ	0xFDD
 13468                           plusw2	equ	0xFDB
 13469                           fsr2h	equ	0xFDA
 13470                           fsr2l	equ	0xFD9
 13471                           status	equ	0xFD8
 13472                           
 13473 ;; *************** function i2_ReadBitArray *****************
 13474 ;; Defined at:
 13475 ;;		line 62 in file "harware.c"
 13476 ;; Parameters:    Size  Location     Type
 13477 ;;  AData           1   33[COMRAM] PTR unsigned char 
 13478 ;;		 -> Hub_ReadSwitch@LBitArray(24), 
 13479 ;;  AIO            15   34[COMRAM] struct .
 13480 ;; Auto vars:     Size  Location     Type
 13481 ;;  ReadBitArray    2   50[COMRAM] int 
 13482 ;; Return value:  Size  Location     Type
 13483 ;;                  1    wreg      void 
 13484 ;; Registers used:
 13485 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, cstack
 13486 ;; Tracked objects:
 13487 ;;		On entry : 3F/1
 13488 ;;		On exit  : 0/0
 13489 ;;		Unchanged: 0/0
 13490 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 13491 ;;      Params:        16       0       0       0       0       0       0       0       0
 13492 ;;      Locals:         2       0       0       0       0       0       0       0       0
 13493 ;;      Temps:          1       0       0       0       0       0       0       0       0
 13494 ;;      Totals:        19       0       0       0       0       0       0       0       0
 13495 ;;Total ram usage:       19 bytes
 13496 ;; Hardware stack levels used:    1
 13497 ;; Hardware stack levels required when called:    2
 13498 ;; This function calls:
 13499 ;;		i2_ReadBit
 13500 ;; This function is called by:
 13501 ;;		i2_Hub_ReadSwitch
 13502 ;; This function uses a non-reentrant model
 13503 ;;
 13504                           
 13505                           	psect	text83
 13506  002E24                     __ptext83:
 13507                           	opt stack 0
 13508  002E24                     i2_ReadBitArray:
 13509                           	opt stack 18
 13510                           
 13511                           ; BSR set to: 1
 13512                           ;harware.c: 66: for (int i = 0; i < 24; i++)
 13513                           
 13514                           ; BSR set to: 1
 13515                           ;incstack = 0
 13516  002E24  6A33               	clrf	i2ReadBitArray@i,c
 13517  002E26  6A34               	clrf	i2ReadBitArray@i+1,c
 13518  002E28                     i2l3920:
 13519                           
 13520                           ;harware.c: 67: AData[i] = ReadBit(AIO);
 13521  002E28  EE20  F023         	lfsr	2,i2ReadBitArray@AIO
 13522  002E2C  EE00  F010         	lfsr	0,i2ReadBit@AIO
 13523  002E30  0E0E               	movlw	14
 13524  002E32                     i2u398_41:
 13525  002E32  CFDB FFEB          	movff	plusw2,plusw0
 13526  002E36  06E8               	decf	wreg,f,c
 13527  002E38  E2FC               	bc	i2u398_41
 13528  002E3A  ECA6  F015         	call	i2_ReadBit	;wreg free
 13529  002E3E  6E32               	movwf	??i2_ReadBitArray& (0+255),c
 13530  002E40  5022               	movf	i2ReadBitArray@AData,w,c
 13531  002E42  2433               	addwf	i2ReadBitArray@i,w,c
 13532  002E44  6ED9               	movwf	fsr2l,c
 13533  002E46  6ADA               	clrf	fsr2h,c
 13534  002E48  C032  FFDF         	movff	??i2_ReadBitArray,indf2
 13535  002E4C  4A33               	infsnz	i2ReadBitArray@i,f,c
 13536  002E4E  2A34               	incf	i2ReadBitArray@i+1,f,c
 13537  002E50  BE34               	btfsc	i2ReadBitArray@i+1,7,c
 13538  002E52  D7EA               	goto	i2l3920
 13539  002E54  5034               	movf	i2ReadBitArray@i+1,w,c
 13540  002E56  E105               	bnz	i2u399_40
 13541  002E58  0E18               	movlw	24
 13542  002E5A  5C33               	subwf	i2ReadBitArray@i,w,c
 13543  002E5C  B0D8               	btfsc	status,0,c
 13544  002E5E  0012               	return	
 13545  002E60  D7E3               	goto	i2l3920
 13546  002E62                     i2u399_40:
 13547  002E62  0012               	return		;funcret
 13548  002E64                     __end_ofi2_ReadBitArray:
 13549                           	opt stack 0
 13550                           tblptru	equ	0xFF8
 13551                           tblptrh	equ	0xFF7
 13552                           tblptrl	equ	0xFF6
 13553                           tablat	equ	0xFF5
 13554                           prodh	equ	0xFF4
 13555                           prodl	equ	0xFF3
 13556                           intcon	equ	0xFF2
 13557                           postinc0	equ	0xFEE
 13558                           plusw0	equ	0xFEB
 13559                           fsr0h	equ	0xFEA
 13560                           fsr0l	equ	0xFE9
 13561                           wreg	equ	0xFE8
 13562                           indf1	equ	0xFE7
 13563                           postinc1	equ	0xFE6
 13564                           postdec1	equ	0xFE5
 13565                           plusw1	equ	0xFE3
 13566                           fsr1h	equ	0xFE2
 13567                           fsr1l	equ	0xFE1
 13568                           indf2	equ	0xFDF
 13569                           postinc2	equ	0xFDE
 13570                           postdec2	equ	0xFDD
 13571                           plusw2	equ	0xFDB
 13572                           fsr2h	equ	0xFDA
 13573                           fsr2l	equ	0xFD9
 13574                           status	equ	0xFD8
 13575                           
 13576 ;; *************** function i2_ReadBit *****************
 13577 ;; Defined at:
 13578 ;;		line 36 in file "harware.c"
 13579 ;; Parameters:    Size  Location     Type
 13580 ;;  AIO            15   15[COMRAM] struct .
 13581 ;; Auto vars:     Size  Location     Type
 13582 ;;  ReadBit         1   32[COMRAM] unsigned char 
 13583 ;; Return value:  Size  Location     Type
 13584 ;;                  1    wreg      unsigned char 
 13585 ;; Registers used:
 13586 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, cstack
 13587 ;; Tracked objects:
 13588 ;;		On entry : 0/1
 13589 ;;		On exit  : 0/0
 13590 ;;		Unchanged: 0/0
 13591 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 13592 ;;      Params:        15       0       0       0       0       0       0       0       0
 13593 ;;      Locals:         1       0       0       0       0       0       0       0       0
 13594 ;;      Temps:          2       0       0       0       0       0       0       0       0
 13595 ;;      Totals:        18       0       0       0       0       0       0       0       0
 13596 ;;Total ram usage:       18 bytes
 13597 ;; Hardware stack levels used:    1
 13598 ;; Hardware stack levels required when called:    1
 13599 ;; This function calls:
 13600 ;;		i2_ClockDown
 13601 ;;		i2_ClockUp
 13602 ;; This function is called by:
 13603 ;;		i2_ReadBitArray
 13604 ;; This function uses a non-reentrant model
 13605 ;;
 13606                           
 13607                           	psect	text84
 13608  002B4C                     __ptext84:
 13609                           	opt stack 0
 13610  002B4C                     i2_ReadBit:
 13611                           	opt stack 18
 13612                           
 13613                           ;harware.c: 38: bool LBit = (*AIO.DataPin.Port >> AIO.DataPin.PinNumber) & 0x01;
 13614                           
 13615                           ;incstack = 0
 13616  002B4C  C017  F01F         	movff	i2ReadBit@AIO+7,??i2_ReadBit
 13617  002B50  C015  FFD9         	movff	i2ReadBit@AIO+5,fsr2l
 13618  002B54  C016  FFDA         	movff	i2ReadBit@AIO+6,fsr2h
 13619  002B58  50DF               	movf	indf2,w,c
 13620  002B5A  6E20               	movwf	(??i2_ReadBit+1)& (0+255),c
 13621  002B5C  2A1F               	incf	??i2_ReadBit,f,c
 13622  002B5E  D002               	goto	i2u371_44
 13623  002B60                     i2u371_45:
 13624  002B60  90D8               	bcf	status,0,c
 13625  002B62  3220               	rrcf	??i2_ReadBit+1,f,c
 13626  002B64                     i2u371_44:
 13627  002B64  2E1F               	decfsz	??i2_ReadBit,f,c
 13628  002B66  D7FC               	goto	i2u371_45
 13629  002B68  5020               	movf	??i2_ReadBit+1,w,c
 13630  002B6A  0B01               	andlw	1
 13631  002B6C  6E21               	movwf	i2ReadBit@LBit,c
 13632                           
 13633                           ;harware.c: 39: ClockUp(AIO);
 13634  002B6E  EE20  F010         	lfsr	2,i2ReadBit@AIO
 13635  002B72  EE00  F001         	lfsr	0,i2ClockUp@AIO
 13636  002B76  0E0E               	movlw	14
 13637  002B78                     i2u372_41:
 13638  002B78  CFDB FFEB          	movff	plusw2,plusw0
 13639  002B7C  06E8               	decf	wreg,f,c
 13640  002B7E  E2FC               	bc	i2u372_41
 13641  002B80  EC08  F019         	call	i2_ClockUp	;wreg free
 13642                           
 13643                           ;harware.c: 40: ClockDown(AIO);
 13644  002B84  EE20  F010         	lfsr	2,i2ReadBit@AIO
 13645  002B88  EE00  F001         	lfsr	0,i2ClockDown@AIO
 13646  002B8C  0E0E               	movlw	14
 13647  002B8E                     i2u373_41:
 13648  002B8E  CFDB FFEB          	movff	plusw2,plusw0
 13649  002B92  06E8               	decf	wreg,f,c
 13650  002B94  E2FC               	bc	i2u373_41
 13651  002B96  EC0F  F019         	call	i2_ClockDown	;wreg free
 13652                           
 13653                           ;harware.c: 41: return LBit;
 13654  002B9A  5021               	movf	i2ReadBit@LBit,w,c
 13655  002B9C  0012               	return		;funcret
 13656  002B9E                     __end_ofi2_ReadBit:
 13657                           	opt stack 0
 13658                           tblptru	equ	0xFF8
 13659                           tblptrh	equ	0xFF7
 13660                           tblptrl	equ	0xFF6
 13661                           tablat	equ	0xFF5
 13662                           prodh	equ	0xFF4
 13663                           prodl	equ	0xFF3
 13664                           intcon	equ	0xFF2
 13665                           postinc0	equ	0xFEE
 13666                           plusw0	equ	0xFEB
 13667                           fsr0h	equ	0xFEA
 13668                           fsr0l	equ	0xFE9
 13669                           wreg	equ	0xFE8
 13670                           indf1	equ	0xFE7
 13671                           postinc1	equ	0xFE6
 13672                           postdec1	equ	0xFE5
 13673                           plusw1	equ	0xFE3
 13674                           fsr1h	equ	0xFE2
 13675                           fsr1l	equ	0xFE1
 13676                           indf2	equ	0xFDF
 13677                           postinc2	equ	0xFDE
 13678                           postdec2	equ	0xFDD
 13679                           plusw2	equ	0xFDB
 13680                           fsr2h	equ	0xFDA
 13681                           fsr2l	equ	0xFD9
 13682                           status	equ	0xFD8
 13683                           
 13684 ;; *************** function i2_ClockUp *****************
 13685 ;; Defined at:
 13686 ;;		line 80 in file "harware.c"
 13687 ;; Parameters:    Size  Location     Type
 13688 ;;  AIO            15    0[COMRAM] struct .
 13689 ;; Auto vars:     Size  Location     Type
 13690 ;;		None
 13691 ;; Return value:  Size  Location     Type
 13692 ;;                  1    wreg      void 
 13693 ;; Registers used:
 13694 ;;		wreg, fsr2l, fsr2h
 13695 ;; Tracked objects:
 13696 ;;		On entry : 0/2
 13697 ;;		On exit  : 0/0
 13698 ;;		Unchanged: 0/0
 13699 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 13700 ;;      Params:        15       0       0       0       0       0       0       0       0
 13701 ;;      Locals:         0       0       0       0       0       0       0       0       0
 13702 ;;      Temps:          0       0       0       0       0       0       0       0       0
 13703 ;;      Totals:        15       0       0       0       0       0       0       0       0
 13704 ;;Total ram usage:       15 bytes
 13705 ;; Hardware stack levels used:    1
 13706 ;; This function calls:
 13707 ;;		Nothing
 13708 ;; This function is called by:
 13709 ;;		i2_WriteChar
 13710 ;;		i2_ReadBit
 13711 ;; This function uses a non-reentrant model
 13712 ;;
 13713                           
 13714                           	psect	text85
 13715  003210                     __ptext85:
 13716                           	opt stack 0
 13717  003210                     i2_ClockUp:
 13718                           	opt stack 20
 13719                           
 13720                           ;harware.c: 82: *AIO.ClockPin.Port &= AIO.ClockPin.Mask;
 13721                           
 13722                           ;incstack = 0
 13723  003210  C001  FFD9         	movff	i2ClockUp@AIO,fsr2l
 13724  003214  C002  FFDA         	movff	i2ClockUp@AIO+1,fsr2h
 13725  003218  5004               	movf	i2ClockUp@AIO+3,w,c
 13726  00321A  16DF               	andwf	indf2,f,c
 13727  00321C  0012               	return		;funcret
 13728  00321E                     __end_ofi2_ClockUp:
 13729                           	opt stack 0
 13730                           tblptru	equ	0xFF8
 13731                           tblptrh	equ	0xFF7
 13732                           tblptrl	equ	0xFF6
 13733                           tablat	equ	0xFF5
 13734                           prodh	equ	0xFF4
 13735                           prodl	equ	0xFF3
 13736                           intcon	equ	0xFF2
 13737                           postinc0	equ	0xFEE
 13738                           plusw0	equ	0xFEB
 13739                           fsr0h	equ	0xFEA
 13740                           fsr0l	equ	0xFE9
 13741                           wreg	equ	0xFE8
 13742                           indf1	equ	0xFE7
 13743                           postinc1	equ	0xFE6
 13744                           postdec1	equ	0xFE5
 13745                           plusw1	equ	0xFE3
 13746                           fsr1h	equ	0xFE2
 13747                           fsr1l	equ	0xFE1
 13748                           indf2	equ	0xFDF
 13749                           postinc2	equ	0xFDE
 13750                           postdec2	equ	0xFDD
 13751                           plusw2	equ	0xFDB
 13752                           fsr2h	equ	0xFDA
 13753                           fsr2l	equ	0xFD9
 13754                           status	equ	0xFD8
 13755                           
 13756 ;; *************** function i2_ClockDown *****************
 13757 ;; Defined at:
 13758 ;;		line 85 in file "harware.c"
 13759 ;; Parameters:    Size  Location     Type
 13760 ;;  AIO            15    0[COMRAM] struct .
 13761 ;; Auto vars:     Size  Location     Type
 13762 ;;		None
 13763 ;; Return value:  Size  Location     Type
 13764 ;;                  1    wreg      void 
 13765 ;; Registers used:
 13766 ;;		wreg, fsr2l, fsr2h
 13767 ;; Tracked objects:
 13768 ;;		On entry : 0/2
 13769 ;;		On exit  : 0/0
 13770 ;;		Unchanged: 0/0
 13771 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 13772 ;;      Params:        15       0       0       0       0       0       0       0       0
 13773 ;;      Locals:         0       0       0       0       0       0       0       0       0
 13774 ;;      Temps:          0       0       0       0       0       0       0       0       0
 13775 ;;      Totals:        15       0       0       0       0       0       0       0       0
 13776 ;;Total ram usage:       15 bytes
 13777 ;; Hardware stack levels used:    1
 13778 ;; This function calls:
 13779 ;;		Nothing
 13780 ;; This function is called by:
 13781 ;;		i2_WriteChar
 13782 ;;		i2_ReadBit
 13783 ;; This function uses a non-reentrant model
 13784 ;;
 13785                           
 13786                           	psect	text86
 13787  00321E                     __ptext86:
 13788                           	opt stack 0
 13789  00321E                     i2_ClockDown:
 13790                           	opt stack 20
 13791                           
 13792                           ;harware.c: 87: *AIO.ClockPin.Port |= AIO.ClockPin.NegativeMask;
 13793                           
 13794                           ;incstack = 0
 13795  00321E  C001  FFD9         	movff	i2ClockDown@AIO,fsr2l
 13796  003222  C002  FFDA         	movff	i2ClockDown@AIO+1,fsr2h
 13797  003226  5005               	movf	i2ClockDown@AIO+4,w,c
 13798  003228  12DF               	iorwf	indf2,f,c
 13799  00322A  0012               	return		;funcret
 13800  00322C                     __end_ofi2_ClockDown:
 13801                           	opt stack 0
 13802                           tblptru	equ	0xFF8
 13803                           tblptrh	equ	0xFF7
 13804                           tblptrl	equ	0xFF6
 13805                           tablat	equ	0xFF5
 13806                           prodh	equ	0xFF4
 13807                           prodl	equ	0xFF3
 13808                           intcon	equ	0xFF2
 13809                           postinc0	equ	0xFEE
 13810                           plusw0	equ	0xFEB
 13811                           fsr0h	equ	0xFEA
 13812                           fsr0l	equ	0xFE9
 13813                           wreg	equ	0xFE8
 13814                           indf1	equ	0xFE7
 13815                           postinc1	equ	0xFE6
 13816                           postdec1	equ	0xFE5
 13817                           plusw1	equ	0xFE3
 13818                           fsr1h	equ	0xFE2
 13819                           fsr1l	equ	0xFE1
 13820                           indf2	equ	0xFDF
 13821                           postinc2	equ	0xFDE
 13822                           postdec2	equ	0xFDD
 13823                           plusw2	equ	0xFDB
 13824                           fsr2h	equ	0xFDA
 13825                           fsr2l	equ	0xFD9
 13826                           status	equ	0xFD8
 13827                           
 13828 ;; *************** function _Hub_SetValue *****************
 13829 ;; Defined at:
 13830 ;;		line 73 in file "hub.c"
 13831 ;; Parameters:    Size  Location     Type
 13832 ;;  ASourceValue    2    4[COMRAM] PTR unsigned char 
 13833 ;;		 -> _Hub.PrimaryBuffer.Values(8), _Hub.PrimaryBuffer(12), _Hub(157), 
 13834 ;;  AMinValue       1    6[COMRAM] char 
 13835 ;;  AMaxValue       2    7[COMRAM] int 
 13836 ;;  AIncrement      1    9[COMRAM] char 
 13837 ;; Auto vars:     Size  Location     Type
 13838 ;;  LValue          2   11[COMRAM] int 
 13839 ;; Return value:  Size  Location     Type
 13840 ;;                  1    wreg      void 
 13841 ;; Registers used:
 13842 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 13843 ;; Tracked objects:
 13844 ;;		On entry : 0/1
 13845 ;;		On exit  : 0/0
 13846 ;;		Unchanged: 0/0
 13847 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 13848 ;;      Params:         6       0       0       0       0       0       0       0       0
 13849 ;;      Locals:         2       0       0       0       0       0       0       0       0
 13850 ;;      Temps:          1       0       0       0       0       0       0       0       0
 13851 ;;      Totals:         9       0       0       0       0       0       0       0       0
 13852 ;;Total ram usage:        9 bytes
 13853 ;; Hardware stack levels used:    1
 13854 ;; This function calls:
 13855 ;;		Nothing
 13856 ;; This function is called by:
 13857 ;;		_Hub_UpdateValues
 13858 ;; This function uses a non-reentrant model
 13859 ;;
 13860                           
 13861                           	psect	text87
 13862  00298C                     __ptext87:
 13863                           	opt stack 0
 13864  00298C                     _Hub_SetValue:
 13865                           	opt stack 21
 13866                           
 13867                           ;hub.c: 75: signed int LValue = *ASourceValue;
 13868                           
 13869                           ;incstack = 0
 13870  00298C  C005  FFD9         	movff	Hub_SetValue@ASourceValue,fsr2l
 13871  002990  C006  FFDA         	movff	Hub_SetValue@ASourceValue+1,fsr2h
 13872  002994  50DF               	movf	indf2,w,c
 13873  002996  6E0C               	movwf	Hub_SetValue@LValue,c
 13874  002998  6A0D               	clrf	Hub_SetValue@LValue+1,c
 13875                           
 13876                           ;hub.c: 76: LValue += AIncrement;
 13877  00299A  500A               	movf	Hub_SetValue@AIncrement,w,c
 13878  00299C  260C               	addwf	Hub_SetValue@LValue,f,c
 13879  00299E  0E00               	movlw	0
 13880  0029A0  BE0A               	btfsc	Hub_SetValue@AIncrement,7,c
 13881  0029A2  0EFF               	movlw	255
 13882  0029A4  220D               	addwfc	Hub_SetValue@LValue+1,f,c
 13883                           
 13884                           ;hub.c: 77: if (LValue < AMinValue) LValue = AMinValue;
 13885  0029A6  500D               	movf	Hub_SetValue@LValue+1,w,c
 13886  0029A8  0A80               	xorlw	128
 13887  0029AA  6E0B               	movwf	??_Hub_SetValue& (0+255),c
 13888  0029AC  5007               	movf	Hub_SetValue@AMinValue,w,c
 13889  0029AE  5C0C               	subwf	Hub_SetValue@LValue,w,c
 13890  0029B0  0E80               	movlw	128
 13891  0029B2  BE07               	btfsc	Hub_SetValue@AMinValue,7,c
 13892  0029B4  0E7F               	movlw	127
 13893  0029B6  580B               	subwfb	??_Hub_SetValue& (0+255),w,c
 13894  0029B8  E205               	bc	i2l4296
 13895  0029BA  5007               	movf	Hub_SetValue@AMinValue,w,c
 13896  0029BC  6E0C               	movwf	Hub_SetValue@LValue,c
 13897  0029BE  6A0D               	clrf	Hub_SetValue@LValue+1,c
 13898  0029C0  BE0C               	btfsc	Hub_SetValue@LValue,7,c
 13899  0029C2  060D               	decf	Hub_SetValue@LValue+1,f,c
 13900  0029C4                     i2l4296:
 13901                           
 13902                           ;hub.c: 78: if (LValue > AMaxValue) LValue = AMaxValue;
 13903  0029C4  500C               	movf	Hub_SetValue@LValue,w,c
 13904  0029C6  5C08               	subwf	Hub_SetValue@AMaxValue,w,c
 13905  0029C8  5009               	movf	Hub_SetValue@AMaxValue+1,w,c
 13906  0029CA  0A80               	xorlw	128
 13907  0029CC  6E0B               	movwf	??_Hub_SetValue& (0+255),c
 13908  0029CE  500D               	movf	Hub_SetValue@LValue+1,w,c
 13909  0029D0  0A80               	xorlw	128
 13910  0029D2  580B               	subwfb	??_Hub_SetValue& (0+255),w,c
 13911  0029D4  E204               	bc	i2l4300
 13912  0029D6  C008  F00C         	movff	Hub_SetValue@AMaxValue,Hub_SetValue@LValue
 13913  0029DA  C009  F00D         	movff	Hub_SetValue@AMaxValue+1,Hub_SetValue@LValue+1
 13914  0029DE                     i2l4300:
 13915                           
 13916                           ;hub.c: 79: *ASourceValue = LValue;
 13917  0029DE  C005  FFD9         	movff	Hub_SetValue@ASourceValue,fsr2l
 13918  0029E2  C006  FFDA         	movff	Hub_SetValue@ASourceValue+1,fsr2h
 13919  0029E6  C00C  FFDF         	movff	Hub_SetValue@LValue,indf2
 13920  0029EA  0012               	return		;funcret
 13921  0029EC                     __end_of_Hub_SetValue:
 13922                           	opt stack 0
 13923                           tblptru	equ	0xFF8
 13924                           tblptrh	equ	0xFF7
 13925                           tblptrl	equ	0xFF6
 13926                           tablat	equ	0xFF5
 13927                           prodh	equ	0xFF4
 13928                           prodl	equ	0xFF3
 13929                           intcon	equ	0xFF2
 13930                           postinc0	equ	0xFEE
 13931                           plusw0	equ	0xFEB
 13932                           fsr0h	equ	0xFEA
 13933                           fsr0l	equ	0xFE9
 13934                           wreg	equ	0xFE8
 13935                           indf1	equ	0xFE7
 13936                           postinc1	equ	0xFE6
 13937                           postdec1	equ	0xFE5
 13938                           plusw1	equ	0xFE3
 13939                           fsr1h	equ	0xFE2
 13940                           fsr1l	equ	0xFE1
 13941                           indf2	equ	0xFDF
 13942                           postinc2	equ	0xFDE
 13943                           postdec2	equ	0xFDD
 13944                           plusw2	equ	0xFDB
 13945                           fsr2h	equ	0xFDA
 13946                           fsr2l	equ	0xFD9
 13947                           status	equ	0xFD8
 13948                           
 13949 ;; *************** function _Hub_DecodeSwitch *****************
 13950 ;; Defined at:
 13951 ;;		line 52 in file "hub.c"
 13952 ;; Parameters:    Size  Location     Type
 13953 ;;  AIndex1         1    wreg     unsigned char 
 13954 ;;  AIndex2         1    0[COMRAM] unsigned char 
 13955 ;; Auto vars:     Size  Location     Type
 13956 ;;  AIndex1         1    3[COMRAM] unsigned char 
 13957 ;; Return value:  Size  Location     Type
 13958 ;;                  1    wreg      char 
 13959 ;; Registers used:
 13960 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0
 13961 ;; Tracked objects:
 13962 ;;		On entry : 0/1
 13963 ;;		On exit  : 0/0
 13964 ;;		Unchanged: 0/0
 13965 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 13966 ;;      Params:         1       0       0       0       0       0       0       0       0
 13967 ;;      Locals:         1       0       0       0       0       0       0       0       0
 13968 ;;      Temps:          2       0       0       0       0       0       0       0       0
 13969 ;;      Totals:         4       0       0       0       0       0       0       0       0
 13970 ;;Total ram usage:        4 bytes
 13971 ;; Hardware stack levels used:    1
 13972 ;; This function calls:
 13973 ;;		Nothing
 13974 ;; This function is called by:
 13975 ;;		_Hub_UpdateValues
 13976 ;; This function uses a non-reentrant model
 13977 ;;
 13978                           
 13979                           	psect	text88
 13980  001002                     __ptext88:
 13981                           	opt stack 0
 13982  001002                     _Hub_DecodeSwitch:
 13983                           	opt stack 21
 13984                           
 13985                           ;incstack = 0
 13986                           ;Hub_DecodeSwitch@AIndex1 stored from wreg
 13987  001002  6E04               	movwf	Hub_DecodeSwitch@AIndex1,c
 13988                           
 13989                           ;hub.c: 56: if (_Hub.Switch[AIndex1] == _Hub.SwitchOld[AIndex1] && _Hub.Switch[AIndex1] 
      +                          == _Hub.SwitchOld[AIndex2] && _Hub.SwitchOld[AIndex2] == !_Hub.Switch[AIndex2] ||
 13990                           ;hub.c: 57: _Hub.Switch[AIndex2] == _Hub.SwitchOld[AIndex2] && _Hub.Switch[AIndex2] == _
      +                          Hub.Switch[AIndex1] && _Hub.Switch[AIndex2] == !_Hub.SwitchOld[AIndex1])
 13991  001004  0E30               	movlw	low (__Hub+48)
 13992  001006  2404               	addwf	Hub_DecodeSwitch@AIndex1,w,c
 13993  001008  6ED9               	movwf	fsr2l,c
 13994  00100A  6ADA               	clrf	fsr2h,c
 13995  00100C  0E01               	movlw	high (__Hub+48)
 13996  00100E  22DA               	addwfc	fsr2h,f,c
 13997  001010  0E00               	movlw	low __Hub
 13998  001012  2404               	addwf	Hub_DecodeSwitch@AIndex1,w,c
 13999  001014  6EE1               	movwf	fsr1l,c
 14000  001016  6AE2               	clrf	fsr1h,c
 14001  001018  0E01               	movlw	high __Hub
 14002  00101A  22E2               	addwfc	fsr1h,f,c
 14003  00101C  50DE               	movf	postinc2,w,c
 14004  00101E  18E6               	xorwf	postinc1,w,c
 14005  001020  E125               	bnz	i2u435_40
 14006  001022  0E30               	movlw	low (__Hub+48)
 14007  001024  2401               	addwf	Hub_DecodeSwitch@AIndex2,w,c
 14008  001026  6ED9               	movwf	fsr2l,c
 14009  001028  6ADA               	clrf	fsr2h,c
 14010  00102A  0E01               	movlw	high (__Hub+48)
 14011  00102C  22DA               	addwfc	fsr2h,f,c
 14012  00102E  0E00               	movlw	low __Hub
 14013  001030  2404               	addwf	Hub_DecodeSwitch@AIndex1,w,c
 14014  001032  6EE1               	movwf	fsr1l,c
 14015  001034  6AE2               	clrf	fsr1h,c
 14016  001036  0E01               	movlw	high __Hub
 14017  001038  22E2               	addwfc	fsr1h,f,c
 14018  00103A  50DE               	movf	postinc2,w,c
 14019  00103C  18E6               	xorwf	postinc1,w,c
 14020  00103E  E116               	bnz	i2u435_40
 14021  001040  0E30               	movlw	low (__Hub+48)
 14022  001042  2401               	addwf	Hub_DecodeSwitch@AIndex2,w,c
 14023  001044  6ED9               	movwf	fsr2l,c
 14024  001046  6ADA               	clrf	fsr2h,c
 14025  001048  0E01               	movlw	high (__Hub+48)
 14026  00104A  22DA               	addwfc	fsr2h,f,c
 14027  00104C  0E00               	movlw	low __Hub
 14028  00104E  2401               	addwf	Hub_DecodeSwitch@AIndex2,w,c
 14029  001050  6EE1               	movwf	fsr1l,c
 14030  001052  6AE2               	clrf	fsr1h,c
 14031  001054  0E01               	movlw	high __Hub
 14032  001056  22E2               	addwfc	fsr1h,f,c
 14033  001058  50E7               	movf	indf1,w,c
 14034  00105A  E103               	bnz	i2u433_40
 14035  00105C  6A03               	clrf	(??_Hub_DecodeSwitch+1)& (0+255),c
 14036  00105E  2A03               	incf	(??_Hub_DecodeSwitch+1)& (0+255),f,c
 14037  001060  D001               	goto	i2u434_48
 14038  001062                     i2u433_40:
 14039  001062  6A03               	clrf	(??_Hub_DecodeSwitch+1)& (0+255),c
 14040  001064                     i2u434_48:
 14041  001064  50DE               	movf	postinc2,w,c
 14042  001066  1803               	xorwf	??_Hub_DecodeSwitch+1,w,c
 14043  001068  B4D8               	btfsc	status,2,c
 14044  00106A  0C01               	retlw	1
 14045  00106C                     i2u435_40:
 14046  00106C  0E30               	movlw	low (__Hub+48)
 14047  00106E  2401               	addwf	Hub_DecodeSwitch@AIndex2,w,c
 14048  001070  6ED9               	movwf	fsr2l,c
 14049  001072  6ADA               	clrf	fsr2h,c
 14050  001074  0E01               	movlw	high (__Hub+48)
 14051  001076  22DA               	addwfc	fsr2h,f,c
 14052  001078  0E00               	movlw	low __Hub
 14053  00107A  2401               	addwf	Hub_DecodeSwitch@AIndex2,w,c
 14054  00107C  6EE1               	movwf	fsr1l,c
 14055  00107E  6AE2               	clrf	fsr1h,c
 14056  001080  0E01               	movlw	high __Hub
 14057  001082  22E2               	addwfc	fsr1h,f,c
 14058  001084  50DE               	movf	postinc2,w,c
 14059  001086  18E6               	xorwf	postinc1,w,c
 14060  001088  E125               	bnz	i2l4268
 14061  00108A  0E00               	movlw	low __Hub
 14062  00108C  2404               	addwf	Hub_DecodeSwitch@AIndex1,w,c
 14063  00108E  6ED9               	movwf	fsr2l,c
 14064  001090  6ADA               	clrf	fsr2h,c
 14065  001092  0E01               	movlw	high __Hub
 14066  001094  22DA               	addwfc	fsr2h,f,c
 14067  001096  0E00               	movlw	low __Hub
 14068  001098  2401               	addwf	Hub_DecodeSwitch@AIndex2,w,c
 14069  00109A  6EE1               	movwf	fsr1l,c
 14070  00109C  6AE2               	clrf	fsr1h,c
 14071  00109E  0E01               	movlw	high __Hub
 14072  0010A0  22E2               	addwfc	fsr1h,f,c
 14073  0010A2  50DE               	movf	postinc2,w,c
 14074  0010A4  18E6               	xorwf	postinc1,w,c
 14075  0010A6  E116               	bnz	i2l4268
 14076  0010A8  0E00               	movlw	low __Hub
 14077  0010AA  2401               	addwf	Hub_DecodeSwitch@AIndex2,w,c
 14078  0010AC  6ED9               	movwf	fsr2l,c
 14079  0010AE  6ADA               	clrf	fsr2h,c
 14080  0010B0  0E01               	movlw	high __Hub
 14081  0010B2  22DA               	addwfc	fsr2h,f,c
 14082  0010B4  0E30               	movlw	low (__Hub+48)
 14083  0010B6  2404               	addwf	Hub_DecodeSwitch@AIndex1,w,c
 14084  0010B8  6EE1               	movwf	fsr1l,c
 14085  0010BA  6AE2               	clrf	fsr1h,c
 14086  0010BC  0E01               	movlw	high (__Hub+48)
 14087  0010BE  22E2               	addwfc	fsr1h,f,c
 14088  0010C0  50E7               	movf	indf1,w,c
 14089  0010C2  E103               	bnz	i2u438_40
 14090  0010C4  6A03               	clrf	(??_Hub_DecodeSwitch+1)& (0+255),c
 14091  0010C6  2A03               	incf	(??_Hub_DecodeSwitch+1)& (0+255),f,c
 14092  0010C8  D001               	goto	i2u439_48
 14093  0010CA                     i2u438_40:
 14094  0010CA  6A03               	clrf	(??_Hub_DecodeSwitch+1)& (0+255),c
 14095  0010CC                     i2u439_48:
 14096  0010CC  50DE               	movf	postinc2,w,c
 14097  0010CE  1803               	xorwf	??_Hub_DecodeSwitch+1,w,c
 14098  0010D0  E101               	bnz	i2l4268
 14099                           
 14100                           ;hub.c: 58: {
 14101                           ;hub.c: 59: return 1;
 14102  0010D2  0C01               	retlw	1
 14103  0010D4                     i2l4268:
 14104                           
 14105                           ;hub.c: 60: }
 14106                           ;hub.c: 64: if (_Hub.Switch[AIndex2] == _Hub.SwitchOld[AIndex2] && _Hub.Switch[AIndex2] 
      +                          == _Hub.SwitchOld[AIndex1] && _Hub.SwitchOld[AIndex1] == !_Hub.Switch[AIndex1] ||
 14107                           ;hub.c: 65: _Hub.Switch[AIndex1] == _Hub.SwitchOld[AIndex1] && _Hub.Switch[AIndex1] == _
      +                          Hub.Switch[AIndex2] && _Hub.Switch[AIndex1] == !_Hub.SwitchOld[AIndex2])
 14108  0010D4  0E30               	movlw	low (__Hub+48)
 14109  0010D6  2401               	addwf	Hub_DecodeSwitch@AIndex2,w,c
 14110  0010D8  6ED9               	movwf	fsr2l,c
 14111  0010DA  6ADA               	clrf	fsr2h,c
 14112  0010DC  0E01               	movlw	high (__Hub+48)
 14113  0010DE  22DA               	addwfc	fsr2h,f,c
 14114  0010E0  0E00               	movlw	low __Hub
 14115  0010E2  2401               	addwf	Hub_DecodeSwitch@AIndex2,w,c
 14116  0010E4  6EE1               	movwf	fsr1l,c
 14117  0010E6  6AE2               	clrf	fsr1h,c
 14118  0010E8  0E01               	movlw	high __Hub
 14119  0010EA  22E2               	addwfc	fsr1h,f,c
 14120  0010EC  50DE               	movf	postinc2,w,c
 14121  0010EE  18E6               	xorwf	postinc1,w,c
 14122  0010F0  E125               	bnz	i2u445_40
 14123  0010F2  0E30               	movlw	low (__Hub+48)
 14124  0010F4  2404               	addwf	Hub_DecodeSwitch@AIndex1,w,c
 14125  0010F6  6ED9               	movwf	fsr2l,c
 14126  0010F8  6ADA               	clrf	fsr2h,c
 14127  0010FA  0E01               	movlw	high (__Hub+48)
 14128  0010FC  22DA               	addwfc	fsr2h,f,c
 14129  0010FE  0E00               	movlw	low __Hub
 14130  001100  2401               	addwf	Hub_DecodeSwitch@AIndex2,w,c
 14131  001102  6EE1               	movwf	fsr1l,c
 14132  001104  6AE2               	clrf	fsr1h,c
 14133  001106  0E01               	movlw	high __Hub
 14134  001108  22E2               	addwfc	fsr1h,f,c
 14135  00110A  50DE               	movf	postinc2,w,c
 14136  00110C  18E6               	xorwf	postinc1,w,c
 14137  00110E  E116               	bnz	i2u445_40
 14138  001110  0E30               	movlw	low (__Hub+48)
 14139  001112  2404               	addwf	Hub_DecodeSwitch@AIndex1,w,c
 14140  001114  6ED9               	movwf	fsr2l,c
 14141  001116  6ADA               	clrf	fsr2h,c
 14142  001118  0E01               	movlw	high (__Hub+48)
 14143  00111A  22DA               	addwfc	fsr2h,f,c
 14144  00111C  0E00               	movlw	low __Hub
 14145  00111E  2404               	addwf	Hub_DecodeSwitch@AIndex1,w,c
 14146  001120  6EE1               	movwf	fsr1l,c
 14147  001122  6AE2               	clrf	fsr1h,c
 14148  001124  0E01               	movlw	high __Hub
 14149  001126  22E2               	addwfc	fsr1h,f,c
 14150  001128  50E7               	movf	indf1,w,c
 14151  00112A  E103               	bnz	i2u443_40
 14152  00112C  6A03               	clrf	(??_Hub_DecodeSwitch+1)& (0+255),c
 14153  00112E  2A03               	incf	(??_Hub_DecodeSwitch+1)& (0+255),f,c
 14154  001130  D001               	goto	i2u444_48
 14155  001132                     i2u443_40:
 14156  001132  6A03               	clrf	(??_Hub_DecodeSwitch+1)& (0+255),c
 14157  001134                     i2u444_48:
 14158  001134  50DE               	movf	postinc2,w,c
 14159  001136  1803               	xorwf	??_Hub_DecodeSwitch+1,w,c
 14160  001138  B4D8               	btfsc	status,2,c
 14161  00113A  0CFF               	retlw	255
 14162  00113C                     i2u445_40:
 14163  00113C  0E30               	movlw	low (__Hub+48)
 14164  00113E  2404               	addwf	Hub_DecodeSwitch@AIndex1,w,c
 14165  001140  6ED9               	movwf	fsr2l,c
 14166  001142  6ADA               	clrf	fsr2h,c
 14167  001144  0E01               	movlw	high (__Hub+48)
 14168  001146  22DA               	addwfc	fsr2h,f,c
 14169  001148  0E00               	movlw	low __Hub
 14170  00114A  2404               	addwf	Hub_DecodeSwitch@AIndex1,w,c
 14171  00114C  6EE1               	movwf	fsr1l,c
 14172  00114E  6AE2               	clrf	fsr1h,c
 14173  001150  0E01               	movlw	high __Hub
 14174  001152  22E2               	addwfc	fsr1h,f,c
 14175  001154  50DE               	movf	postinc2,w,c
 14176  001156  18E6               	xorwf	postinc1,w,c
 14177  001158  E125               	bnz	i2l4284
 14178  00115A  0E00               	movlw	low __Hub
 14179  00115C  2401               	addwf	Hub_DecodeSwitch@AIndex2,w,c
 14180  00115E  6ED9               	movwf	fsr2l,c
 14181  001160  6ADA               	clrf	fsr2h,c
 14182  001162  0E01               	movlw	high __Hub
 14183  001164  22DA               	addwfc	fsr2h,f,c
 14184  001166  0E00               	movlw	low __Hub
 14185  001168  2404               	addwf	Hub_DecodeSwitch@AIndex1,w,c
 14186  00116A  6EE1               	movwf	fsr1l,c
 14187  00116C  6AE2               	clrf	fsr1h,c
 14188  00116E  0E01               	movlw	high __Hub
 14189  001170  22E2               	addwfc	fsr1h,f,c
 14190  001172  50DE               	movf	postinc2,w,c
 14191  001174  18E6               	xorwf	postinc1,w,c
 14192  001176  E116               	bnz	i2l4284
 14193  001178  0E00               	movlw	low __Hub
 14194  00117A  2404               	addwf	Hub_DecodeSwitch@AIndex1,w,c
 14195  00117C  6ED9               	movwf	fsr2l,c
 14196  00117E  6ADA               	clrf	fsr2h,c
 14197  001180  0E01               	movlw	high __Hub
 14198  001182  22DA               	addwfc	fsr2h,f,c
 14199  001184  0E30               	movlw	low (__Hub+48)
 14200  001186  2401               	addwf	Hub_DecodeSwitch@AIndex2,w,c
 14201  001188  6EE1               	movwf	fsr1l,c
 14202  00118A  6AE2               	clrf	fsr1h,c
 14203  00118C  0E01               	movlw	high (__Hub+48)
 14204  00118E  22E2               	addwfc	fsr1h,f,c
 14205  001190  50E7               	movf	indf1,w,c
 14206  001192  E103               	bnz	i2u448_40
 14207  001194  6A03               	clrf	(??_Hub_DecodeSwitch+1)& (0+255),c
 14208  001196  2A03               	incf	(??_Hub_DecodeSwitch+1)& (0+255),f,c
 14209  001198  D001               	goto	i2u449_48
 14210  00119A                     i2u448_40:
 14211  00119A  6A03               	clrf	(??_Hub_DecodeSwitch+1)& (0+255),c
 14212  00119C                     i2u449_48:
 14213  00119C  50DE               	movf	postinc2,w,c
 14214  00119E  1803               	xorwf	??_Hub_DecodeSwitch+1,w,c
 14215  0011A0  E101               	bnz	i2l4284
 14216                           
 14217                           ;hub.c: 66: {
 14218                           ;hub.c: 67: return -1;
 14219  0011A2  0CFF               	retlw	255
 14220  0011A4                     i2l4284:
 14221                           
 14222                           ;hub.c: 68: }
 14223                           ;hub.c: 70: return 0;
 14224  0011A4  0C00               	retlw	0	;funcret
 14225  0011A6                     __end_of_Hub_DecodeSwitch:
 14226                           	opt stack 0
 14227                           tblptru	equ	0xFF8
 14228                           tblptrh	equ	0xFF7
 14229                           tblptrl	equ	0xFF6
 14230                           tablat	equ	0xFF5
 14231                           prodh	equ	0xFF4
 14232                           prodl	equ	0xFF3
 14233                           intcon	equ	0xFF2
 14234                           postinc0	equ	0xFEE
 14235                           plusw0	equ	0xFEB
 14236                           fsr0h	equ	0xFEA
 14237                           fsr0l	equ	0xFE9
 14238                           wreg	equ	0xFE8
 14239                           indf1	equ	0xFE7
 14240                           postinc1	equ	0xFE6
 14241                           postdec1	equ	0xFE5
 14242                           plusw1	equ	0xFE3
 14243                           fsr1h	equ	0xFE2
 14244                           fsr1l	equ	0xFE1
 14245                           indf2	equ	0xFDF
 14246                           postinc2	equ	0xFDE
 14247                           postdec2	equ	0xFDD
 14248                           plusw2	equ	0xFDB
 14249                           fsr2h	equ	0xFDA
 14250                           fsr2l	equ	0xFD9
 14251                           status	equ	0xFD8
 14252                           
 14253 ;; *************** function _Display_SwapBuffer *****************
 14254 ;; Defined at:
 14255 ;;		line 94 in file "display.c"
 14256 ;; Parameters:    Size  Location     Type
 14257 ;;		None
 14258 ;; Auto vars:     Size  Location     Type
 14259 ;;  LSwap           2    0[COMRAM] PTR unsigned char 
 14260 ;;		 -> _Display.Buffer2(90), _Display.Buffer1(90), _Display(217), 
 14261 ;; Return value:  Size  Location     Type
 14262 ;;                  1    wreg      void 
 14263 ;; Registers used:
 14264 ;;		wreg, status,2, status,0
 14265 ;; Tracked objects:
 14266 ;;		On entry : 3F/2
 14267 ;;		On exit  : 3F/2
 14268 ;;		Unchanged: 0/0
 14269 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 14270 ;;      Params:         0       0       0       0       0       0       0       0       0
 14271 ;;      Locals:         2       0       0       0       0       0       0       0       0
 14272 ;;      Temps:          0       0       0       0       0       0       0       0       0
 14273 ;;      Totals:         2       0       0       0       0       0       0       0       0
 14274 ;;Total ram usage:        2 bytes
 14275 ;; Hardware stack levels used:    1
 14276 ;; This function calls:
 14277 ;;		Nothing
 14278 ;; This function is called by:
 14279 ;;		_Interrupt
 14280 ;; This function uses a non-reentrant model
 14281 ;;
 14282                           
 14283                           	psect	text89
 14284  0030CE                     __ptext89:
 14285                           	opt stack 0
 14286  0030CE                     _Display_SwapBuffer:
 14287                           	opt stack 22
 14288                           
 14289                           ; BSR set to: 2
 14290                           ;display.c: 96: unsigned char *LSwap = _Display.PrimaryBuffer;
 14291                           
 14292                           ;incstack = 0
 14293  0030CE  C2B6  F001         	movff	__Display+182,Display_SwapBuffer@LSwap
 14294  0030D2  C2B7  F002         	movff	__Display+183,Display_SwapBuffer@LSwap+1
 14295                           
 14296                           ;display.c: 97: _Display.PrimaryBuffer = _Display.SecondaryBuffer;
 14297  0030D6  C2B8  F2B6         	movff	__Display+184,__Display+182
 14298  0030DA  C2B9  F2B7         	movff	__Display+185,__Display+183
 14299                           
 14300                           ;display.c: 98: _Display.SecondaryBuffer = LSwap;
 14301  0030DE  C001  F2B8         	movff	Display_SwapBuffer@LSwap,__Display+184
 14302  0030E2  C002  F2B9         	movff	Display_SwapBuffer@LSwap+1,__Display+185
 14303                           
 14304                           ; BSR set to: 2
 14305                           ;display.c: 100: _Display.ReadyToWrite = 1;
 14306  0030E6  0E01               	movlw	1
 14307  0030E8  6F01               	movwf	(__Display+1)& (0+255),b
 14308                           
 14309                           ; BSR set to: 2
 14310                           ;display.c: 101: _Display.ReadyToRead = 0;
 14311  0030EA  6B00               	clrf	__Display& (0+255),b
 14312                           
 14313                           ; BSR set to: 2
 14314  0030EC  0012               	return		;funcret
 14315  0030EE                     __end_of_Display_SwapBuffer:
 14316                           	opt stack 0
 14317                           tblptru	equ	0xFF8
 14318                           tblptrh	equ	0xFF7
 14319                           tblptrl	equ	0xFF6
 14320                           tablat	equ	0xFF5
 14321                           prodh	equ	0xFF4
 14322                           prodl	equ	0xFF3
 14323                           intcon	equ	0xFF2
 14324                           postinc0	equ	0xFEE
 14325                           plusw0	equ	0xFEB
 14326                           fsr0h	equ	0xFEA
 14327                           fsr0l	equ	0xFE9
 14328                           wreg	equ	0xFE8
 14329                           indf1	equ	0xFE7
 14330                           postinc1	equ	0xFE6
 14331                           postdec1	equ	0xFE5
 14332                           plusw1	equ	0xFE3
 14333                           fsr1h	equ	0xFE2
 14334                           fsr1l	equ	0xFE1
 14335                           indf2	equ	0xFDF
 14336                           postinc2	equ	0xFDE
 14337                           postdec2	equ	0xFDD
 14338                           plusw2	equ	0xFDB
 14339                           fsr2h	equ	0xFDA
 14340                           fsr2l	equ	0xFD9
 14341                           status	equ	0xFD8
 14342                           tblptru	equ	0xFF8
 14343                           tblptrh	equ	0xFF7
 14344                           tblptrl	equ	0xFF6
 14345                           tablat	equ	0xFF5
 14346                           prodh	equ	0xFF4
 14347                           prodl	equ	0xFF3
 14348                           intcon	equ	0xFF2
 14349                           postinc0	equ	0xFEE
 14350                           plusw0	equ	0xFEB
 14351                           fsr0h	equ	0xFEA
 14352                           fsr0l	equ	0xFE9
 14353                           wreg	equ	0xFE8
 14354                           indf1	equ	0xFE7
 14355                           postinc1	equ	0xFE6
 14356                           postdec1	equ	0xFE5
 14357                           plusw1	equ	0xFE3
 14358                           fsr1h	equ	0xFE2
 14359                           fsr1l	equ	0xFE1
 14360                           indf2	equ	0xFDF
 14361                           postinc2	equ	0xFDE
 14362                           postdec2	equ	0xFDD
 14363                           plusw2	equ	0xFDB
 14364                           fsr2h	equ	0xFDA
 14365                           fsr2l	equ	0xFD9
 14366                           status	equ	0xFD8
 14367                           
 14368                           	psect	rparam
 14369  0000                     tblptru	equ	0xFF8
 14370                           tblptrh	equ	0xFF7
 14371                           tblptrl	equ	0xFF6
 14372                           tablat	equ	0xFF5
 14373                           prodh	equ	0xFF4
 14374                           prodl	equ	0xFF3
 14375                           intcon	equ	0xFF2
 14376                           postinc0	equ	0xFEE
 14377                           plusw0	equ	0xFEB
 14378                           fsr0h	equ	0xFEA
 14379                           fsr0l	equ	0xFE9
 14380                           wreg	equ	0xFE8
 14381                           indf1	equ	0xFE7
 14382                           postinc1	equ	0xFE6
 14383                           postdec1	equ	0xFE5
 14384                           plusw1	equ	0xFE3
 14385                           fsr1h	equ	0xFE2
 14386                           fsr1l	equ	0xFE1
 14387                           indf2	equ	0xFDF
 14388                           postinc2	equ	0xFDE
 14389                           postdec2	equ	0xFDD
 14390                           plusw2	equ	0xFDB
 14391                           fsr2h	equ	0xFDA
 14392                           fsr2l	equ	0xFD9
 14393                           status	equ	0xFD8
 14394                           
 14395                           	psect	temp
 14396  00005F                     btemp:
 14397                           	opt stack 0
 14398  00005F                     	ds	1
 14399  0000                     int$flags	set	btemp
 14400  0000                     wtemp6	set	btemp+1
 14401                           tblptru	equ	0xFF8
 14402                           tblptrh	equ	0xFF7
 14403                           tblptrl	equ	0xFF6
 14404                           tablat	equ	0xFF5
 14405                           prodh	equ	0xFF4
 14406                           prodl	equ	0xFF3
 14407                           intcon	equ	0xFF2
 14408                           postinc0	equ	0xFEE
 14409                           plusw0	equ	0xFEB
 14410                           fsr0h	equ	0xFEA
 14411                           fsr0l	equ	0xFE9
 14412                           wreg	equ	0xFE8
 14413                           indf1	equ	0xFE7
 14414                           postinc1	equ	0xFE6
 14415                           postdec1	equ	0xFE5
 14416                           plusw1	equ	0xFE3
 14417                           fsr1h	equ	0xFE2
 14418                           fsr1l	equ	0xFE1
 14419                           indf2	equ	0xFDF
 14420                           postinc2	equ	0xFDE
 14421                           postdec2	equ	0xFDD
 14422                           plusw2	equ	0xFDB
 14423                           fsr2h	equ	0xFDA
 14424                           fsr2l	equ	0xFD9
 14425                           status	equ	0xFD8


Data Sizes:
    Strings     0
    Constant    57
    Data        10
    BSS         1059
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     88      94
    BANK0           160    127     156
    BANK1           256      0     169
    BANK2           256      0     217
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0

Pointer List with Targets:

    _Display.LatchPin.Port	PTR volatile unsigned char  size(2) Largest target is 0
		 -> PORTB(SFR[1]), LATC(SFR[1]), LATA(SFR[1]), LATB(SFR[1]), 

    _Display.DataPin.Port	PTR volatile unsigned char  size(2) Largest target is 0
		 -> PORTB(SFR[1]), LATC(SFR[1]), LATA(SFR[1]), LATB(SFR[1]), 

    _Display.ClockPin.Port	PTR volatile unsigned char  size(2) Largest target is 0
		 -> PORTB(SFR[1]), LATC(SFR[1]), LATA(SFR[1]), LATB(SFR[1]), 

    _Hub.LatchPin.Port	PTR volatile unsigned char  size(2) Largest target is 0
		 -> PORTB(SFR[1]), LATC(SFR[1]), LATA(SFR[1]), LATB(SFR[1]), 

    _Hub.DataPin.Port	PTR volatile unsigned char  size(2) Largest target is 0
		 -> PORTB(SFR[1]), LATC(SFR[1]), LATA(SFR[1]), LATB(SFR[1]), 

    _Hub.ClockPin.Port	PTR volatile unsigned char  size(2) Largest target is 0
		 -> PORTB(SFR[1]), LATC(SFR[1]), LATA(SFR[1]), LATB(SFR[1]), 

    _DigiPot.LatchPin.Port	PTR volatile unsigned char  size(2) Largest target is 0
		 -> PORTB(SFR[1]), LATC(SFR[1]), LATA(SFR[1]), LATB(SFR[1]), 

    _DigiPot.DataPin.Port	PTR volatile unsigned char  size(2) Largest target is 0
		 -> PORTB(SFR[1]), LATC(SFR[1]), LATA(SFR[1]), LATB(SFR[1]), 

    _DigiPot.ClockPin.Port	PTR volatile unsigned char  size(2) Largest target is 0
		 -> PORTB(SFR[1]), LATC(SFR[1]), LATA(SFR[1]), LATB(SFR[1]), 

    _Display.Port	PTR volatile unsigned char  size(2) Largest target is 0
		 -> PORTB(SFR[1]), LATC(SFR[1]), LATA(SFR[1]), LATB(SFR[1]), 

    _Hub.Port	PTR volatile unsigned char  size(2) Largest target is 0
		 -> PORTB(SFR[1]), LATC(SFR[1]), LATA(SFR[1]), LATB(SFR[1]), 

    _DigiPot.Port	PTR volatile unsigned char  size(2) Largest target is 0
		 -> PORTB(SFR[1]), LATC(SFR[1]), LATA(SFR[1]), LATB(SFR[1]), 

    eval_poly@d	PTR const  size(1) Largest target is 30
		 -> log@coeff(CODE[27]), exp@coeff(CODE[30]), 

    frexp@eptr	PTR int  size(1) Largest target is 2
		 -> log@exponent(BANK0[2]), floor@expon(BANK0[2]), 

    memcpy@d1	PTR void  size(2) Largest target is 160
		 -> _Hub.Switch(BANK1[48]), Load@LBuffer(BANK0[12]), _Hub(BANK1[157]), 

    memcpy@d	PTR unsigned char  size(2) Largest target is 160
		 -> _Hub.Switch(BANK1[48]), Load@LBuffer(BANK0[12]), _Hub(BANK1[157]), 

    memcpy@s1	PTR const void  size(2) Largest target is 160
		 -> Persistant_SaveBuffer@ABuffer(BANK0[12]), _Hub.Switch(BANK1[48]), Hub_ReadSwitch@LBitArray(BANK0[24]), _Config(BANK1[12]), 
		 -> _Hub.PrimaryBuffer(BANK1[12]), _Hub(BANK1[157]), 

    memcpy@s	PTR const unsigned char  size(2) Largest target is 160
		 -> Persistant_SaveBuffer@ABuffer(BANK0[12]), _Hub.Switch(BANK1[48]), Hub_ReadSwitch@LBitArray(BANK0[24]), _Config(BANK1[12]), 
		 -> _Hub.PrimaryBuffer(BANK1[12]), _Hub(BANK1[157]), 

    memcmp@s2	PTR const void  size(2) Largest target is 12
		 -> _Hub.BackupBuffer.Values(BANK1[8]), _Hub.BackupBuffer(BANK1[12]), 

    memcmp@s1	PTR const void  size(2) Largest target is 12
		 -> _Hub.SecondaryBuffer.Values(BANK1[8]), _Hub.SecondaryBuffer(BANK1[12]), 

    UnZip@AZip.Buffer	PTR struct . size(2) Largest target is 160
		 -> Persistant_SaveBuffer@ABuffer(BANK0[12]), _Hub(BANK1[157]), 

    UnZip@AZip	PTR struct . size(1) Largest target is 11
		 -> Persistant_LoadBuffer@LZip(BANK0[10]), 

    Zip@AZip.Buffer	PTR struct . size(2) Largest target is 160
		 -> Persistant_SaveBuffer@ABuffer(BANK0[12]), _Hub(BANK1[157]), 

    Zip@AZip	PTR struct . size(1) Largest target is 11
		 -> Persistant_SaveBuffer@LZip(BANK0[10]), 

    Zip@LBytes	PTR unsigned char  size(1) Largest target is 11
		 -> LZip.Bytes(COMRAM[8]), Persistant_SaveBuffer@LZip(BANK0[10]), 

    Midi_Read@AData	PTR struct . size(1) Largest target is 5
		 -> main@LMidiData(BANK0[5]), 

    Midi_Read@AMidiBuffer	PTR struct . size(2) Largest target is 324
		 -> _MidiInput(BIGRAM[324]), 

    Midi_Write@AMidiBuffer	PTR struct . size(2) Largest target is 324
		 -> _MidiInput(BIGRAM[324]), 

    Midi_ResetBuffer@AMidiBuffer	PTR struct . size(2) Largest target is 324
		 -> _MidiOutput(BIGRAM[324]), _MidiInput(BIGRAM[324]), 

    AIO.LatchPin.Port	PTR volatile unsigned char  size(2) Largest target is 1
		 -> PORTB(SFR[1]), LATC(SFR[1]), LATA(SFR[1]), LATB(SFR[1]), 

    AIO.DataPin.Port	PTR volatile unsigned char  size(2) Largest target is 1
		 -> PORTB(SFR[1]), LATC(SFR[1]), LATA(SFR[1]), LATB(SFR[1]), 

    AIO.ClockPin.Port	PTR volatile unsigned char  size(2) Largest target is 1
		 -> PORTB(SFR[1]), LATC(SFR[1]), LATA(SFR[1]), LATB(SFR[1]), 

    AIO.LatchPin.Port	PTR volatile unsigned char  size(2) Largest target is 1
		 -> PORTB(SFR[1]), LATC(SFR[1]), LATA(SFR[1]), LATB(SFR[1]), 

    AIO.DataPin.Port	PTR volatile unsigned char  size(2) Largest target is 1
		 -> PORTB(SFR[1]), LATC(SFR[1]), LATA(SFR[1]), LATB(SFR[1]), 

    AIO.ClockPin.Port	PTR volatile unsigned char  size(2) Largest target is 1
		 -> PORTB(SFR[1]), LATC(SFR[1]), LATA(SFR[1]), LATB(SFR[1]), 

    AIO.LatchPin.Port	PTR volatile unsigned char  size(2) Largest target is 1
		 -> PORTB(SFR[1]), LATC(SFR[1]), LATA(SFR[1]), LATB(SFR[1]), 

    AIO.DataPin.Port	PTR volatile unsigned char  size(2) Largest target is 1
		 -> PORTB(SFR[1]), LATC(SFR[1]), LATA(SFR[1]), LATB(SFR[1]), 

    AIO.ClockPin.Port	PTR volatile unsigned char  size(2) Largest target is 1
		 -> PORTB(SFR[1]), LATC(SFR[1]), LATA(SFR[1]), LATB(SFR[1]), 

    AIO.LatchPin.Port	PTR volatile unsigned char  size(2) Largest target is 1
		 -> PORTB(SFR[1]), LATC(SFR[1]), LATA(SFR[1]), LATB(SFR[1]), 

    AIO.DataPin.Port	PTR volatile unsigned char  size(2) Largest target is 1
		 -> PORTB(SFR[1]), LATC(SFR[1]), LATA(SFR[1]), LATB(SFR[1]), 

    AIO.ClockPin.Port	PTR volatile unsigned char  size(2) Largest target is 1
		 -> PORTB(SFR[1]), LATC(SFR[1]), LATA(SFR[1]), LATB(SFR[1]), 

    ReadBitArray@AData	PTR unsigned char  size(1) Largest target is 24
		 -> Hub_ReadSwitch@LBitArray(BANK0[24]), 

    AIO.LatchPin.Port	PTR volatile unsigned char  size(2) Largest target is 1
		 -> PORTB(SFR[1]), LATC(SFR[1]), LATA(SFR[1]), LATB(SFR[1]), 

    AIO.DataPin.Port	PTR volatile unsigned char  size(2) Largest target is 1
		 -> PORTB(SFR[1]), LATC(SFR[1]), LATA(SFR[1]), LATB(SFR[1]), 

    AIO.ClockPin.Port	PTR volatile unsigned char  size(2) Largest target is 1
		 -> PORTB(SFR[1]), LATC(SFR[1]), LATA(SFR[1]), LATB(SFR[1]), 

    sp__ReadData	PTR unsigned char  size(2) Largest target is 0

    AIO.LatchPin.Port	PTR volatile unsigned char  size(2) Largest target is 1
		 -> PORTB(SFR[1]), LATC(SFR[1]), LATA(SFR[1]), LATB(SFR[1]), 

    AIO.DataPin.Port	PTR volatile unsigned char  size(2) Largest target is 1
		 -> PORTB(SFR[1]), LATC(SFR[1]), LATA(SFR[1]), LATB(SFR[1]), 

    AIO.ClockPin.Port	PTR volatile unsigned char  size(2) Largest target is 1
		 -> PORTB(SFR[1]), LATC(SFR[1]), LATA(SFR[1]), LATB(SFR[1]), 

    AIO.LatchPin.Port	PTR volatile unsigned char  size(2) Largest target is 1
		 -> PORTB(SFR[1]), LATC(SFR[1]), LATA(SFR[1]), LATB(SFR[1]), 

    AIO.DataPin.Port	PTR volatile unsigned char  size(2) Largest target is 1
		 -> PORTB(SFR[1]), LATC(SFR[1]), LATA(SFR[1]), LATB(SFR[1]), 

    AIO.ClockPin.Port	PTR volatile unsigned char  size(2) Largest target is 1
		 -> PORTB(SFR[1]), LATC(SFR[1]), LATA(SFR[1]), LATB(SFR[1]), 

    AIO.LatchPin.Port	PTR volatile unsigned char  size(2) Largest target is 1
		 -> PORTB(SFR[1]), LATC(SFR[1]), LATA(SFR[1]), LATB(SFR[1]), 

    AIO.DataPin.Port	PTR volatile unsigned char  size(2) Largest target is 1
		 -> PORTB(SFR[1]), LATC(SFR[1]), LATA(SFR[1]), LATB(SFR[1]), 

    AIO.ClockPin.Port	PTR volatile unsigned char  size(2) Largest target is 1
		 -> PORTB(SFR[1]), LATC(SFR[1]), LATA(SFR[1]), LATB(SFR[1]), 

    WriteData@AData	PTR unsigned char  size(2) Largest target is 222
		 -> _Display.Buffer2(BANK2[90]), _Display.Buffer1(BANK2[90]), _Hub.SecondaryBuffer(BANK1[12]), _Hub(BANK1[157]), 
		 -> _Display(BANK2[217]), 

    AIO.LatchPin.Port	PTR volatile unsigned char  size(2) Largest target is 1
		 -> PORTB(SFR[1]), LATC(SFR[1]), LATA(SFR[1]), LATB(SFR[1]), 

    AIO.DataPin.Port	PTR volatile unsigned char  size(2) Largest target is 1
		 -> PORTB(SFR[1]), LATC(SFR[1]), LATA(SFR[1]), LATB(SFR[1]), 

    AIO.ClockPin.Port	PTR volatile unsigned char  size(2) Largest target is 1
		 -> PORTB(SFR[1]), LATC(SFR[1]), LATA(SFR[1]), LATB(SFR[1]), 

    AIO.LatchPin.Port	PTR volatile unsigned char  size(2) Largest target is 1
		 -> PORTB(SFR[1]), LATC(SFR[1]), LATA(SFR[1]), LATB(SFR[1]), 

    AIO.DataPin.Port	PTR volatile unsigned char  size(2) Largest target is 1
		 -> PORTB(SFR[1]), LATC(SFR[1]), LATA(SFR[1]), LATB(SFR[1]), 

    AIO.ClockPin.Port	PTR volatile unsigned char  size(2) Largest target is 1
		 -> PORTB(SFR[1]), LATC(SFR[1]), LATA(SFR[1]), LATB(SFR[1]), 

    InitConnector@AConnector.LatchPin.Port	PTR volatile unsigned char  size(2) Largest target is 1
		 -> PORTB(SFR[1]), LATC(SFR[1]), LATA(SFR[1]), LATB(SFR[1]), 

    InitConnector@AConnector.DataPin.Port	PTR volatile unsigned char  size(2) Largest target is 1
		 -> PORTB(SFR[1]), LATC(SFR[1]), LATA(SFR[1]), LATB(SFR[1]), 

    InitConnector@AConnector.ClockPin.Port	PTR volatile unsigned char  size(2) Largest target is 1
		 -> PORTB(SFR[1]), LATC(SFR[1]), LATA(SFR[1]), LATB(SFR[1]), 

    InitConnector@AConnector	PTR struct . size(2) Largest target is 222
		 -> _DigiPot(BANK0[17]), _Hub(BANK1[157]), _Display(BANK2[217]), 

    InitPin@APin.Port	PTR volatile unsigned char  size(2) Largest target is 1
		 -> PORTB(SFR[1]), LATC(SFR[1]), LATA(SFR[1]), LATB(SFR[1]), 

    InitPin@APin	PTR struct . size(2) Largest target is 222
		 -> _DigiPot(BANK0[17]), _Hub(BANK1[157]), _Display(BANK2[217]), 

    LZip.Buffer	PTR struct . size(2) Largest target is 160
		 -> Persistant_SaveBuffer@ABuffer(BANK0[12]), _Hub(BANK1[157]), 

    Persistant_LoadBuffer@ABuffer	PTR struct . size(2) Largest target is 160
		 -> _Hub(BANK1[157]), 

    S897$Buffer	PTR struct . size(2) Largest target is 160
		 -> Persistant_SaveBuffer@ABuffer(BANK0[12]), _Hub(BANK1[157]), 

    LZip.Buffer	PTR struct . size(2) Largest target is 160
		 -> Persistant_SaveBuffer@ABuffer(BANK0[12]), _Hub(BANK1[157]), 

    Hub_SetValue@ASourceValue	PTR unsigned char  size(2) Largest target is 160
		 -> _Hub.PrimaryBuffer.Values(BANK1[8]), _Hub.PrimaryBuffer(BANK1[12]), _Hub(BANK1[157]), 

    Display_SwapBuffer@LSwap	PTR unsigned char  size(2) Largest target is 222
		 -> _Display.Buffer2(BANK2[90]), _Display.Buffer1(BANK2[90]), _Display(BANK2[217]), 

    Display_ProcessData@AValues	PTR unsigned char  size(2) Largest target is 160
		 -> _Hub.SecondaryBuffer(BANK1[12]), _Hub.PrimaryBuffer(BANK1[12]), _Hub(BANK1[157]), 

    sp__memcpy	PTR void  size(2) Largest target is 160
		 -> _Hub.Switch(BANK1[48]), Load@LBuffer(BANK0[12]), _Hub(BANK1[157]), 

    _DigiPot.IO.LatchPin.Port	PTR volatile unsigned char  size(2) Largest target is 1
		 -> PORTB(SFR[1]), LATC(SFR[1]), LATA(SFR[1]), LATB(SFR[1]), 

    _DigiPot.IO.DataPin.Port	PTR volatile unsigned char  size(2) Largest target is 1
		 -> PORTB(SFR[1]), LATC(SFR[1]), LATA(SFR[1]), LATB(SFR[1]), 

    _DigiPot.IO.ClockPin.Port	PTR volatile unsigned char  size(2) Largest target is 1
		 -> PORTB(SFR[1]), LATC(SFR[1]), LATA(SFR[1]), LATB(SFR[1]), 

    _Display.IO.LatchPin.Port	PTR volatile unsigned char  size(2) Largest target is 1
		 -> PORTB(SFR[1]), LATC(SFR[1]), LATA(SFR[1]), LATB(SFR[1]), 

    _Display.IO.DataPin.Port	PTR volatile unsigned char  size(2) Largest target is 1
		 -> PORTB(SFR[1]), LATC(SFR[1]), LATA(SFR[1]), LATB(SFR[1]), 

    _Display.IO.ClockPin.Port	PTR volatile unsigned char  size(2) Largest target is 1
		 -> PORTB(SFR[1]), LATC(SFR[1]), LATA(SFR[1]), LATB(SFR[1]), 

    S54$SecondaryBuffer	PTR unsigned char  size(2) Largest target is 222
		 -> _Display(BANK2[217]), 

    _Display.SecondaryBuffer	PTR unsigned char  size(2) Largest target is 222
		 -> _Display.Buffer2(BANK2[90]), _Display.Buffer1(BANK2[90]), _Display(BANK2[217]), 

    S54$PrimaryBuffer	PTR unsigned char  size(2) Largest target is 222
		 -> _Display(BANK2[217]), 

    _Display.PrimaryBuffer	PTR unsigned char  size(2) Largest target is 222
		 -> _Display.Buffer2(BANK2[90]), _Display.Buffer1(BANK2[90]), _Display(BANK2[217]), 

    _Hub.IO.LatchPin.Port	PTR volatile unsigned char  size(2) Largest target is 1
		 -> PORTB(SFR[1]), LATC(SFR[1]), LATA(SFR[1]), LATB(SFR[1]), 

    _Hub.IO.DataPin.Port	PTR volatile unsigned char  size(2) Largest target is 1
		 -> PORTB(SFR[1]), LATC(SFR[1]), LATA(SFR[1]), LATB(SFR[1]), 

    S27$Port	PTR volatile unsigned char  size(2) Largest target is 1
		 -> PORTB(SFR[1]), LATC(SFR[1]), LATA(SFR[1]), LATB(SFR[1]), 

    _Hub.IO.ClockPin.Port	PTR volatile unsigned char  size(2) Largest target is 1
		 -> PORTB(SFR[1]), LATC(SFR[1]), LATA(SFR[1]), LATB(SFR[1]), 


Critical Paths under _main in COMRAM

    None.

Critical Paths under _Interrupt in COMRAM

    _Interrupt->_Hub_UpdateValues
    i2_WriteData->i2_WriteChar
    i2_WriteChar->i2_ClockDown
    i2_WriteChar->i2_ClockUp
    i2_Hub_CopyBuffer->i2_memcpy
    _Hub_UpdateValues->i2_Hub_ReadSwitch
    i2_Hub_ReadSwitch->i2_ReadBitArray
    i2_ReadBitArray->i2_ReadBit
    i2_ReadBit->i2_ClockDown
    i2_ReadBit->i2_ClockUp
    _Hub_SetValue->_Hub_DecodeSwitch

Critical Paths under _main in BANK0

    _main->_InitApp
    _WriteData->_WriteChar
    _WriteChar->_ClockDown
    _WriteChar->_ClockUp
    _Sequencer_StartTimer->___fttol
    _Persistant_SaveBuffer->_Zip
    _Zip->___fttol
    _Load->_Persistant_LoadBuffer
    _Persistant_WriteInternalMemory->_Persistant_ReadInternalMemory
    _InitApp->_InitDigiPot
    _Persistant_WriteExternalMemory->_Persistant_ReadExternalMemory
    _Persistant_LoadBuffer->_UnZip
    _UnZip->___fttol
    _Persistant_ReadExternalMemory->_Persistant_Address
    _Persistant_Address->_Persistant_ControlByte
    _Persistant_ControlByte->_I2C_Write
    _I2C_Write->_I2C_Wait
    _I2C_Start->_I2C_Wait
    _I2C_Stop->_I2C_Wait
    _I2C_Read->_I2C_Ack
    _I2C_Ack->_I2C_Wait
    _Persistant_Init->_I2C_Init
    _I2C_Init->___fttol
    _Midi_Init->___lldiv
    _InitDigiPot->_pow
    ___lbtoft->___ftpack
    _Hub_Init->_Hub_ReadSwitch
    _Hub_ReadSwitch->_ReadBitArray
    _ReadBitArray->_ReadBit
    _ReadBit->_ClockDown
    _ReadBit->_ClockUp
    _Hub_CopyBuffer->_memcpy
    _Display_ProcessData->___lbmod
    ___lbmod->___lbdiv
    _Display_Init->_pow
    _pow->_exp
    _log->_eval_poly
    _exp->_ldexp
    _ldexp->_eval_poly
    _floor->___fttol
    ___fttol->___ftdiv
    ___altoft->___ftpack
    _eval_poly->___ftadd
    ___ftmul->___altoft
    ___ftsub->___ftadd
    ___ftadd->___ftdiv
    ___ftdiv->___ftmul
    ___awtoft->___ftpack
    ___lltoft->___ftpack
    _InitConnector->_InitPin

Critical Paths under _Interrupt in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _Interrupt in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _Interrupt in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _Interrupt in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _Interrupt in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _Interrupt in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _Interrupt in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _Interrupt in BANK7

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                13    13      0  248862
                                            114 BANK0     13    13      0
                _ConfigureOscillator
                _Display_ProcessData
                            _InitApp
                               _Load
                          _Midi_Read
                           _PauseHub
              _Persistant_SaveBuffer
                             _RunHub
               _Sequencer_StartTimer
                _Sequencer_StopTimer
                          _WriteData
                             _memcmp
 ---------------------------------------------------------------------------------
 (1) _memcmp                                               8     2      6     340
                                              0 BANK0      8     2      6
 ---------------------------------------------------------------------------------
 (1) _WriteData                                           20     2     18    1732
                                             36 BANK0     20     2     18
                           _LatchOff
                            _LatchOn
                          _WriteChar
 ---------------------------------------------------------------------------------
 (2) _WriteChar                                           21     6     15     702
                                             15 BANK0     21     6     15
                          _ClockDown
                            _ClockUp
 ---------------------------------------------------------------------------------
 (2) _LatchOn                                             15     0     15     237
                                              0 BANK0     15     0     15
 ---------------------------------------------------------------------------------
 (2) _LatchOff                                            15     0     15     237
                                              0 BANK0     15     0     15
 ---------------------------------------------------------------------------------
 (1) _Sequencer_StopTimer                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Sequencer_StartTimer                                 4     0      4    5567
                                             62 BANK0      4     0      4
                            ___ftdiv
                            ___fttol
 ---------------------------------------------------------------------------------
 (1) _RunHub                                               0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Persistant_SaveBuffer                               27    15     12   14923
                                             76 BANK0     27    15     12
     _Persistant_WriteExternalMemory
                                _Zip
                             _memcpy
 ---------------------------------------------------------------------------------
 (2) _Zip                                                 14    13      1    8131
                                             62 BANK0     14    13      1
                            ___ftdiv
                            ___fttol
                           ___lbtoft
 ---------------------------------------------------------------------------------
 (1) _PauseHub                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Midi_Read                                            4     1      3     328
                                              0 BANK0      4     1      3
 ---------------------------------------------------------------------------------
 (1) _Load                                                17    17      0   16282
                                             90 BANK0     17    17      0
                     _Hub_CopyBuffer
              _Persistant_LoadBuffer
     _Persistant_WriteInternalMemory
                             _memcpy
 ---------------------------------------------------------------------------------
 (2) _Persistant_WriteInternalMemory                       4     1      3     345
                                              2 BANK0      4     1      3
      _Persistant_ReadInternalMemory
 ---------------------------------------------------------------------------------
 (3) _Persistant_ReadInternalMemory                        2     0      2      98
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (1) _InitApp                                              2     2      0  207526
                                            113 BANK0      1     1      0
                       _Display_Init
                _Display_ProcessData
                     _Hub_CopyBuffer
                           _Hub_Init
                        _InitDigiPot
                          _Midi_Init
                    _Persistant_Init
              _Persistant_LoadBuffer
      _Persistant_ReadExternalMemory
     _Persistant_WriteExternalMemory
                    _Sequencer_Start
 ---------------------------------------------------------------------------------
 (2) _Sequencer_Start                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _Persistant_WriteExternalMemory                       3     0      3    5062
                                             20 BANK0      3     0      3
                            _I2C_Ack
                           _I2C_Stop
                          _I2C_Write
                 _Persistant_Address
      _Persistant_ReadExternalMemory
 ---------------------------------------------------------------------------------
 (2) _Persistant_LoadBuffer                               18    16      2   12843
                                             72 BANK0     18    16      2
      _Persistant_ReadExternalMemory
                              _UnZip
                             _memcpy
 ---------------------------------------------------------------------------------
 (3) _UnZip                                               10     9      1    8041
                                             62 BANK0     10     9      1
                            ___ftdiv
                            ___fttol
                           ___lbtoft
 ---------------------------------------------------------------------------------
 (3) _Persistant_ReadExternalMemory                        3     1      2    2916
                                             17 BANK0      3     1      2
                            _I2C_Ack
                           _I2C_Read
                          _I2C_Start
                           _I2C_Stop
                 _Persistant_Address
             _Persistant_ControlByte
 ---------------------------------------------------------------------------------
 (4) _Persistant_Address                                   3     0      3    1371
                                             14 BANK0      3     0      3
                            _I2C_Ack
                          _I2C_Start
                          _I2C_Write
             _Persistant_ControlByte
 ---------------------------------------------------------------------------------
 (4) _Persistant_ControlByte                               6     3      3     618
                                              8 BANK0      6     3      3
                            _I2C_Ack
                          _I2C_Write
 ---------------------------------------------------------------------------------
 (5) _I2C_Write                                            3     3      0     135
                                              5 BANK0      3     3      0
                           _I2C_Wait
 ---------------------------------------------------------------------------------
 (5) _I2C_Start                                            0     0      0     113
                           _I2C_Wait
 ---------------------------------------------------------------------------------
 (4) _I2C_Stop                                             0     0      0     113
                           _I2C_Wait
 ---------------------------------------------------------------------------------
 (4) _I2C_Read                                             1     1      0     271
                                              6 BANK0      1     1      0
                            _I2C_Ack
                           _I2C_Wait
 ---------------------------------------------------------------------------------
 (5) _I2C_Ack                                              1     1      0     135
                                              5 BANK0      1     1      0
                           _I2C_Wait
 ---------------------------------------------------------------------------------
 (6) _I2C_Wait                                             5     5      0     113
                                              0 BANK0      5     5      0
 ---------------------------------------------------------------------------------
 (2) _Persistant_Init                                      0     0      0   17070
                           _I2C_Init
 ---------------------------------------------------------------------------------
 (3) _I2C_Init                                             7     3      4   17070
                                             62 BANK0      7     3      4
                           ___altoft
                            ___ftadd
                            ___ftdiv
                            ___ftmul
                            ___fttol
 ---------------------------------------------------------------------------------
 (2) _Midi_Init                                           12    12      0    1115
                                             13 BANK0     12    12      0
                   _Midi_ResetBuffer
                            ___lldiv
 ---------------------------------------------------------------------------------
 (3) ___lldiv                                             13     5      8     466
                                              0 BANK0     13     5      8
 ---------------------------------------------------------------------------------
 (3) _Midi_ResetBuffer                                     6     4      2     536
                                              0 BANK0      6     4      2
 ---------------------------------------------------------------------------------
 (2) _InitDigiPot                                         11    11      0   86630
                                            102 BANK0     11    11      0
                      _InitConnector
                           ___altoft
                            ___ftdiv
                            ___ftmul
                            ___fttol
                           ___lbtoft
                                _pow
 ---------------------------------------------------------------------------------
 (3) ___lbtoft                                             4     1      3    2605
                                              8 BANK0      4     1      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (2) _Hub_Init                                             2     2      0    3075
                                             76 BANK0      2     2      0
                     _Hub_ReadSwitch
                      _InitConnector
 ---------------------------------------------------------------------------------
 (3) _Hub_ReadSwitch                                      24    24      0    2397
                                             52 BANK0     24    24      0
                       _ReadBitArray
                             _memcpy
 ---------------------------------------------------------------------------------
 (4) _ReadBitArray                                        19     3     16     914
                                             33 BANK0     19     3     16
                            _ReadBit
 ---------------------------------------------------------------------------------
 (5) _ReadBit                                             18     3     15     650
                                             15 BANK0     18     3     15
                          _ClockDown
                            _ClockUp
 ---------------------------------------------------------------------------------
 (3) _ClockUp                                             15     0     15     198
                                              0 BANK0     15     0     15
 ---------------------------------------------------------------------------------
 (3) _ClockDown                                           15     0     15     198
                                              0 BANK0     15     0     15
 ---------------------------------------------------------------------------------
 (2) _Hub_CopyBuffer                                       0     0      0    1433
                             _memcpy
 ---------------------------------------------------------------------------------
 (2) _memcpy                                              11     5      6    1433
                                              0 BANK0     11     5      6
 ---------------------------------------------------------------------------------
 (2) _Display_ProcessData                                 27    23      4    1774
                                              8 BANK0     27    23      4
                            ___lbdiv
                            ___lbmod
 ---------------------------------------------------------------------------------
 (3) ___lbmod                                              4     3      1     311
                                              4 BANK0      4     3      1
                            ___lbdiv (ARG)
 ---------------------------------------------------------------------------------
 (3) ___lbdiv                                              4     3      1     238
                                              0 BANK0      4     3      1
 ---------------------------------------------------------------------------------
 (2) _Display_Init                                        10    10      0   75585
                                            102 BANK0     10    10      0
                      _InitConnector
                           ___awtoft
                            ___fttol
                                _pow
 ---------------------------------------------------------------------------------
 (3) _pow                                                 17    11      6   70835
                                             85 BANK0     17    11      6
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___fttol
                           ___lbtoft (ARG)
                           ___lltoft
                                _exp
                                _log
 ---------------------------------------------------------------------------------
 (4) _log                                                  5     2      3   22234
                                             69 BANK0      5     2      3
                           ___awtoft
                            ___ftadd
                            ___ftmul
                          _eval_poly
                              _frexp
 ---------------------------------------------------------------------------------
 (4) _exp                                                  9     6      3   38709
                                             76 BANK0      9     6      3
                           ___awtoft
                            ___ftdiv
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___ftsub
                            ___fttol
                          _eval_poly
                              _floor
                              _ldexp
                                _log (ARG)
 ---------------------------------------------------------------------------------
 (5) _ldexp                                                7     2      5     400
                                             69 BANK0      7     2      5
                          _eval_poly (ARG)
 ---------------------------------------------------------------------------------
 (5) _floor                                                8     5      3   10021
                                             62 BANK0      8     5      3
                           ___altoft
                            ___ftadd
                             ___ftge
                            ___fttol
                              _frexp
 ---------------------------------------------------------------------------------
 (5) _frexp                                                6     2      4     528
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (2) ___fttol                                             15    11      4    1012
                                             47 BANK0     15    11      4
                           ___altoft (ARG)
                           ___awtoft (ARG)
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
                           ___lbtoft (ARG)
 ---------------------------------------------------------------------------------
 (6) ___ftge                                               9     3      6     744
                                              0 BANK0      9     3      6
 ---------------------------------------------------------------------------------
 (4) ___altoft                                            10     6      4    2949
                                              8 BANK0     10     6      4
                           ___ftpack
 ---------------------------------------------------------------------------------
 (5) _eval_poly                                           10     4      6    9567
                                             59 BANK0     10     4      6
                            ___ftadd
                            ___ftmul
 ---------------------------------------------------------------------------------
 (4) ___ftmul                                             15     9      6    4472
                                             18 BANK0     14     8      6
                           ___altoft (ARG)
                           ___awtoft (ARG)
                           ___ftpack
                           ___lbtoft (ARG)
                              _frexp (ARG)
 ---------------------------------------------------------------------------------
 (5) ___ftsub                                              6     0      6    4806
                                             59 BANK0      6     0      6
                           ___awtoft (ARG)
                            ___ftadd
 ---------------------------------------------------------------------------------
 (4) ___ftadd                                             12     6      6    4461
                                             47 BANK0     12     6      6
                           ___altoft (ARG)
                           ___awtoft (ARG)
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
                           ___ftpack
                              _frexp (ARG)
 ---------------------------------------------------------------------------------
 (5) ___ftneg                                              3     0      3     273
                                              0 BANK0      3     0      3
 ---------------------------------------------------------------------------------
 (2) ___ftdiv                                             15     9      6    4055
                                             32 BANK0     15     9      6
                           ___altoft (ARG)
                            ___ftmul (ARG)
                           ___ftpack
                           ___lbtoft (ARG)
 ---------------------------------------------------------------------------------
 (5) ___awtoft                                             4     1      3    2902
                                              8 BANK0      4     1      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (4) ___lltoft                                             9     5      4    2728
                                              8 BANK0      9     5      4
                           ___ftpack
 ---------------------------------------------------------------------------------
 (3) ___ftpack                                             8     3      5    2583
                                              0 BANK0      8     3      5
 ---------------------------------------------------------------------------------
 (3) _InitConnector                                        2     0      2     610
                                              4 BANK0      2     0      2
                            _InitPin
 ---------------------------------------------------------------------------------
 (4) _InitPin                                              4     2      2     316
                                              0 BANK0      4     2      2
 ---------------------------------------------------------------------------------
 (1) _ConfigureOscillator                                  0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (8) _Interrupt                                           10    10      0    5493
                                             78 COMRAM    10    10      0
                 _Display_SwapBuffer
                   _Hub_UpdateValues
                         _Midi_Write
               _Sequencer_TimerEvent
                   i2_Hub_CopyBuffer
                 i2_Midi_ResetBuffer
              i2_Sequencer_StopTimer
                        i2_WriteData
 ---------------------------------------------------------------------------------
 (9) i2_WriteData                                         20     2     18     888
                                             36 COMRAM    20     2     18
                         i2_LatchOff
                          i2_LatchOn
                        i2_WriteChar
 ---------------------------------------------------------------------------------
 (10) i2_WriteChar                                        21     6     15     440
                                             15 COMRAM    21     6     15
                        i2_ClockDown
                          i2_ClockUp
 ---------------------------------------------------------------------------------
 (9) i2_Sequencer_StopTimer                                0     0      0       0
 ---------------------------------------------------------------------------------
 (9) i2_Midi_ResetBuffer                                   6     4      2     360
                                              0 COMRAM     6     4      2
 ---------------------------------------------------------------------------------
 (9) i2_Hub_CopyBuffer                                     0     0      0     377
                           i2_memcpy
 ---------------------------------------------------------------------------------
 (9) _Sequencer_TimerEvent                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (9) _Midi_Write                                           7     5      2     714
                                              0 COMRAM     7     5      2
 ---------------------------------------------------------------------------------
 (9) _Hub_UpdateValues                                     2     2      0    3107
                                             76 COMRAM     2     2      0
                   _Hub_DecodeSwitch
                       _Hub_SetValue
                   i2_Hub_ReadSwitch
                         i2_LatchOff
                          i2_LatchOn
                           i2_memcpy
 ---------------------------------------------------------------------------------
 (10) i2_LatchOn                                          15     0     15      96
                                              0 COMRAM    15     0     15
 ---------------------------------------------------------------------------------
 (10) i2_LatchOff                                         15     0     15      96
                                              0 COMRAM    15     0     15
 ---------------------------------------------------------------------------------
 (10) i2_Hub_ReadSwitch                                   24    24      0     914
                                             52 COMRAM    24    24      0
                     i2_ReadBitArray
                           i2_memcpy
 ---------------------------------------------------------------------------------
 (10) i2_memcpy                                           11     5      6     377
                                              0 COMRAM    11     5      6
 ---------------------------------------------------------------------------------
 (11) i2_ReadBitArray                                     19     3     16     493
                                             33 COMRAM    19     3     16
                          i2_ReadBit
 ---------------------------------------------------------------------------------
 (12) i2_ReadBit                                          18     3     15     329
                                             15 COMRAM    18     3     15
                        i2_ClockDown
                          i2_ClockUp
 ---------------------------------------------------------------------------------
 (11) i2_ClockUp                                          15     0     15      96
                                              0 COMRAM    15     0     15
 ---------------------------------------------------------------------------------
 (11) i2_ClockDown                                        15     0     15      96
                                              0 COMRAM    15     0     15
 ---------------------------------------------------------------------------------
 (10) _Hub_SetValue                                        9     3      6     832
                                              4 COMRAM     9     3      6
                   _Hub_DecodeSwitch (ARG)
 ---------------------------------------------------------------------------------
 (10) _Hub_DecodeSwitch                                    4     3      1     680
                                              0 COMRAM     4     3      1
 ---------------------------------------------------------------------------------
 (9) _Display_SwapBuffer                                   2     2      0      23
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 12
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ConfigureOscillator
   _Display_ProcessData
     ___lbdiv
     ___lbmod
       ___lbdiv (ARG)
   _InitApp
     _Display_Init
       _InitConnector
         _InitPin
       ___awtoft
         ___ftpack
       ___fttol
         ___altoft (ARG)
           ___ftpack
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___altoft (ARG)
               ___ftpack
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             _frexp (ARG)
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
         ___ftmul (ARG)
           ___altoft (ARG)
             ___ftpack
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           _frexp (ARG)
         ___lbtoft (ARG)
           ___ftpack
       _pow
         ___ftge
         ___ftmul
           ___altoft (ARG)
             ___ftpack
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           _frexp (ARG)
         ___ftneg
         ___fttol
           ___altoft (ARG)
             ___ftpack
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               _frexp (ARG)
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
           ___ftmul (ARG)
             ___altoft (ARG)
               ___ftpack
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             _frexp (ARG)
           ___lbtoft (ARG)
             ___ftpack
         ___lbtoft (ARG)
           ___ftpack
         ___lltoft (ARG)
           ___ftpack
         _exp (ARG)
           ___awtoft
             ___ftpack
           ___ftdiv
             ___altoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               _frexp (ARG)
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
           ___ftge
           ___ftmul
             ___altoft (ARG)
               ___ftpack
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             _frexp (ARG)
           ___ftneg
           ___ftsub
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___altoft (ARG)
                     ___ftpack
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___lbtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
               ___ftmul (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 _frexp (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
           ___fttol
             ___altoft (ARG)
               ___ftpack
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 _frexp (ARG)
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
             ___ftmul (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               _frexp (ARG)
             ___lbtoft (ARG)
               ___ftpack
           _eval_poly
             ___ftadd
               ___altoft (ARG)
                 ___ftpack
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___altoft (ARG)
                     ___ftpack
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___lbtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
               ___ftmul (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 _frexp (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftmul
               ___altoft (ARG)
                 ___ftpack
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               _frexp (ARG)
           _floor
             ___altoft
               ___ftpack
             ___ftadd
               ___altoft (ARG)
                 ___ftpack
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___altoft (ARG)
                     ___ftpack
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___lbtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
               ___ftmul (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 _frexp (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftge
             ___fttol
               ___altoft (ARG)
                 ___ftpack
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___altoft (ARG)
                     ___ftpack
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___lbtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
               ___ftmul (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 _frexp (ARG)
               ___lbtoft (ARG)
                 ___ftpack
             _frexp
           _ldexp
             _eval_poly (ARG)
               ___ftadd
                 ___altoft (ARG)
                   ___ftpack
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___altoft (ARG)
                       ___ftpack
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___lbtoft (ARG)
                       ___ftpack
                     _frexp (ARG)
                   ___ftpack (ARG)
                   ___lbtoft (ARG)
                     ___ftpack
                 ___ftmul (ARG)
                   ___altoft (ARG)
                     ___ftpack
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___lbtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftmul
                 ___altoft (ARG)
                   ___ftpack
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 _frexp (ARG)
           _log (ARG)
             ___awtoft
               ___ftpack
             ___ftadd
               ___altoft (ARG)
                 ___ftpack
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___altoft (ARG)
                     ___ftpack
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___lbtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
               ___ftmul (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 _frexp (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftmul
               ___altoft (ARG)
                 ___ftpack
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               _frexp (ARG)
             _eval_poly
               ___ftadd
                 ___altoft (ARG)
                   ___ftpack
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___altoft (ARG)
                       ___ftpack
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___lbtoft (ARG)
                       ___ftpack
                     _frexp (ARG)
                   ___ftpack (ARG)
                   ___lbtoft (ARG)
                     ___ftpack
                 ___ftmul (ARG)
                   ___altoft (ARG)
                     ___ftpack
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___lbtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftmul
                 ___altoft (ARG)
                   ___ftpack
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 _frexp (ARG)
             _frexp
         _log (ARG)
           ___awtoft
             ___ftpack
           ___ftadd
             ___altoft (ARG)
               ___ftpack
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 _frexp (ARG)
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
             ___ftmul (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               _frexp (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftmul
             ___altoft (ARG)
               ___ftpack
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             _frexp (ARG)
           _eval_poly
             ___ftadd
               ___altoft (ARG)
                 ___ftpack
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___altoft (ARG)
                     ___ftpack
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___lbtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
               ___ftmul (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 _frexp (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftmul
               ___altoft (ARG)
                 ___ftpack
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               _frexp (ARG)
           _frexp
     _Display_ProcessData
       ___lbdiv
       ___lbmod
         ___lbdiv (ARG)
     _Hub_CopyBuffer
       _memcpy
     _Hub_Init
       _Hub_ReadSwitch
         _ReadBitArray
           _ReadBit
             _ClockDown
             _ClockUp
         _memcpy
       _InitConnector
         _InitPin
     _InitDigiPot
       _InitConnector
         _InitPin
       ___altoft
         ___ftpack
       ___ftdiv
         ___altoft (ARG)
           ___ftpack
         ___ftmul (ARG)
           ___altoft (ARG)
             ___ftpack
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           _frexp (ARG)
         ___ftpack (ARG)
         ___lbtoft (ARG)
           ___ftpack
       ___ftmul
         ___altoft (ARG)
           ___ftpack
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___lbtoft (ARG)
           ___ftpack
         _frexp (ARG)
       ___fttol
         ___altoft (ARG)
           ___ftpack
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___altoft (ARG)
               ___ftpack
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             _frexp (ARG)
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
         ___ftmul (ARG)
           ___altoft (ARG)
             ___ftpack
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           _frexp (ARG)
         ___lbtoft (ARG)
           ___ftpack
       ___lbtoft
         ___ftpack
       _pow
         ___ftge
         ___ftmul
           ___altoft (ARG)
             ___ftpack
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           _frexp (ARG)
         ___ftneg
         ___fttol
           ___altoft (ARG)
             ___ftpack
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               _frexp (ARG)
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
           ___ftmul (ARG)
             ___altoft (ARG)
               ___ftpack
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             _frexp (ARG)
           ___lbtoft (ARG)
             ___ftpack
         ___lbtoft (ARG)
           ___ftpack
         ___lltoft (ARG)
           ___ftpack
         _exp (ARG)
           ___awtoft
             ___ftpack
           ___ftdiv
             ___altoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               _frexp (ARG)
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
           ___ftge
           ___ftmul
             ___altoft (ARG)
               ___ftpack
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             _frexp (ARG)
           ___ftneg
           ___ftsub
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___altoft (ARG)
                     ___ftpack
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___lbtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
               ___ftmul (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 _frexp (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
           ___fttol
             ___altoft (ARG)
               ___ftpack
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 _frexp (ARG)
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
             ___ftmul (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               _frexp (ARG)
             ___lbtoft (ARG)
               ___ftpack
           _eval_poly
             ___ftadd
               ___altoft (ARG)
                 ___ftpack
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___altoft (ARG)
                     ___ftpack
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___lbtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
               ___ftmul (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 _frexp (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftmul
               ___altoft (ARG)
                 ___ftpack
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               _frexp (ARG)
           _floor
             ___altoft
               ___ftpack
             ___ftadd
               ___altoft (ARG)
                 ___ftpack
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___altoft (ARG)
                     ___ftpack
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___lbtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
               ___ftmul (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 _frexp (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftge
             ___fttol
               ___altoft (ARG)
                 ___ftpack
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___altoft (ARG)
                     ___ftpack
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___lbtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
               ___ftmul (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 _frexp (ARG)
               ___lbtoft (ARG)
                 ___ftpack
             _frexp
           _ldexp
             _eval_poly (ARG)
               ___ftadd
                 ___altoft (ARG)
                   ___ftpack
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___altoft (ARG)
                       ___ftpack
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___lbtoft (ARG)
                       ___ftpack
                     _frexp (ARG)
                   ___ftpack (ARG)
                   ___lbtoft (ARG)
                     ___ftpack
                 ___ftmul (ARG)
                   ___altoft (ARG)
                     ___ftpack
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___lbtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftmul
                 ___altoft (ARG)
                   ___ftpack
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 _frexp (ARG)
           _log (ARG)
             ___awtoft
               ___ftpack
             ___ftadd
               ___altoft (ARG)
                 ___ftpack
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___altoft (ARG)
                     ___ftpack
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___lbtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
               ___ftmul (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 _frexp (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftmul
               ___altoft (ARG)
                 ___ftpack
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               _frexp (ARG)
             _eval_poly
               ___ftadd
                 ___altoft (ARG)
                   ___ftpack
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___altoft (ARG)
                       ___ftpack
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___lbtoft (ARG)
                       ___ftpack
                     _frexp (ARG)
                   ___ftpack (ARG)
                   ___lbtoft (ARG)
                     ___ftpack
                 ___ftmul (ARG)
                   ___altoft (ARG)
                     ___ftpack
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___lbtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftmul
                 ___altoft (ARG)
                   ___ftpack
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 _frexp (ARG)
             _frexp
         _log (ARG)
           ___awtoft
             ___ftpack
           ___ftadd
             ___altoft (ARG)
               ___ftpack
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 _frexp (ARG)
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
             ___ftmul (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               _frexp (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftmul
             ___altoft (ARG)
               ___ftpack
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             _frexp (ARG)
           _eval_poly
             ___ftadd
               ___altoft (ARG)
                 ___ftpack
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___altoft (ARG)
                     ___ftpack
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___lbtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
               ___ftmul (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 _frexp (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftmul
               ___altoft (ARG)
                 ___ftpack
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               _frexp (ARG)
           _frexp
     _Midi_Init
       _Midi_ResetBuffer
       ___lldiv
     _Persistant_Init
       _I2C_Init
         ___altoft
           ___ftpack
         ___ftadd
           ___altoft (ARG)
             ___ftpack
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               _frexp (ARG)
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
           ___ftmul (ARG)
             ___altoft (ARG)
               ___ftpack
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             _frexp (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftdiv
           ___altoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___altoft (ARG)
               ___ftpack
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             _frexp (ARG)
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
         ___ftmul
           ___altoft (ARG)
             ___ftpack
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           _frexp (ARG)
         ___fttol
           ___altoft (ARG)
             ___ftpack
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               _frexp (ARG)
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
           ___ftmul (ARG)
             ___altoft (ARG)
               ___ftpack
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             _frexp (ARG)
           ___lbtoft (ARG)
             ___ftpack
     _Persistant_LoadBuffer
       _Persistant_ReadExternalMemory
         _I2C_Ack
           _I2C_Wait
         _I2C_Read
           _I2C_Ack
             _I2C_Wait
           _I2C_Wait
         _I2C_Start
           _I2C_Wait
         _I2C_Stop
           _I2C_Wait
         _Persistant_Address
           _I2C_Ack
             _I2C_Wait
           _I2C_Start
             _I2C_Wait
           _I2C_Write
             _I2C_Wait
           _Persistant_ControlByte
             _I2C_Ack
               _I2C_Wait
             _I2C_Write
               _I2C_Wait
         _Persistant_ControlByte
           _I2C_Ack
             _I2C_Wait
           _I2C_Write
             _I2C_Wait
       _UnZip
         ___ftdiv
           ___altoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___altoft (ARG)
               ___ftpack
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             _frexp (ARG)
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
         ___fttol
           ___altoft (ARG)
             ___ftpack
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               _frexp (ARG)
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
           ___ftmul (ARG)
             ___altoft (ARG)
               ___ftpack
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             _frexp (ARG)
           ___lbtoft (ARG)
             ___ftpack
         ___lbtoft
           ___ftpack
       _memcpy
     _Persistant_ReadExternalMemory
       _I2C_Ack
         _I2C_Wait
       _I2C_Read
         _I2C_Ack
           _I2C_Wait
         _I2C_Wait
       _I2C_Start
         _I2C_Wait
       _I2C_Stop
         _I2C_Wait
       _Persistant_Address
         _I2C_Ack
           _I2C_Wait
         _I2C_Start
           _I2C_Wait
         _I2C_Write
           _I2C_Wait
         _Persistant_ControlByte
           _I2C_Ack
             _I2C_Wait
           _I2C_Write
             _I2C_Wait
       _Persistant_ControlByte
         _I2C_Ack
           _I2C_Wait
         _I2C_Write
           _I2C_Wait
     _Persistant_WriteExternalMemory
       _I2C_Ack
         _I2C_Wait
       _I2C_Stop
         _I2C_Wait
       _I2C_Write
         _I2C_Wait
       _Persistant_Address
         _I2C_Ack
           _I2C_Wait
         _I2C_Start
           _I2C_Wait
         _I2C_Write
           _I2C_Wait
         _Persistant_ControlByte
           _I2C_Ack
             _I2C_Wait
           _I2C_Write
             _I2C_Wait
       _Persistant_ReadExternalMemory
         _I2C_Ack
           _I2C_Wait
         _I2C_Read
           _I2C_Ack
             _I2C_Wait
           _I2C_Wait
         _I2C_Start
           _I2C_Wait
         _I2C_Stop
           _I2C_Wait
         _Persistant_Address
           _I2C_Ack
             _I2C_Wait
           _I2C_Start
             _I2C_Wait
           _I2C_Write
             _I2C_Wait
           _Persistant_ControlByte
             _I2C_Ack
               _I2C_Wait
             _I2C_Write
               _I2C_Wait
         _Persistant_ControlByte
           _I2C_Ack
             _I2C_Wait
           _I2C_Write
             _I2C_Wait
     _Sequencer_Start
   _Load
     _Hub_CopyBuffer
       _memcpy
     _Persistant_LoadBuffer
       _Persistant_ReadExternalMemory
         _I2C_Ack
           _I2C_Wait
         _I2C_Read
           _I2C_Ack
             _I2C_Wait
           _I2C_Wait
         _I2C_Start
           _I2C_Wait
         _I2C_Stop
           _I2C_Wait
         _Persistant_Address
           _I2C_Ack
             _I2C_Wait
           _I2C_Start
             _I2C_Wait
           _I2C_Write
             _I2C_Wait
           _Persistant_ControlByte
             _I2C_Ack
               _I2C_Wait
             _I2C_Write
               _I2C_Wait
         _Persistant_ControlByte
           _I2C_Ack
             _I2C_Wait
           _I2C_Write
             _I2C_Wait
       _UnZip
         ___ftdiv
           ___altoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___altoft (ARG)
               ___ftpack
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             _frexp (ARG)
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
         ___fttol
           ___altoft (ARG)
             ___ftpack
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               _frexp (ARG)
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
           ___ftmul (ARG)
             ___altoft (ARG)
               ___ftpack
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             _frexp (ARG)
           ___lbtoft (ARG)
             ___ftpack
         ___lbtoft
           ___ftpack
       _memcpy
     _Persistant_WriteInternalMemory
       _Persistant_ReadInternalMemory
     _memcpy
   _Midi_Read
   _PauseHub
   _Persistant_SaveBuffer
     _Persistant_WriteExternalMemory
       _I2C_Ack
         _I2C_Wait
       _I2C_Stop
         _I2C_Wait
       _I2C_Write
         _I2C_Wait
       _Persistant_Address
         _I2C_Ack
           _I2C_Wait
         _I2C_Start
           _I2C_Wait
         _I2C_Write
           _I2C_Wait
         _Persistant_ControlByte
           _I2C_Ack
             _I2C_Wait
           _I2C_Write
             _I2C_Wait
       _Persistant_ReadExternalMemory
         _I2C_Ack
           _I2C_Wait
         _I2C_Read
           _I2C_Ack
             _I2C_Wait
           _I2C_Wait
         _I2C_Start
           _I2C_Wait
         _I2C_Stop
           _I2C_Wait
         _Persistant_Address
           _I2C_Ack
             _I2C_Wait
           _I2C_Start
             _I2C_Wait
           _I2C_Write
             _I2C_Wait
           _Persistant_ControlByte
             _I2C_Ack
               _I2C_Wait
             _I2C_Write
               _I2C_Wait
         _Persistant_ControlByte
           _I2C_Ack
             _I2C_Wait
           _I2C_Write
             _I2C_Wait
     _Zip
       ___ftdiv
         ___altoft (ARG)
           ___ftpack
         ___ftmul (ARG)
           ___altoft (ARG)
             ___ftpack
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           _frexp (ARG)
         ___ftpack (ARG)
         ___lbtoft (ARG)
           ___ftpack
       ___fttol
         ___altoft (ARG)
           ___ftpack
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___altoft (ARG)
               ___ftpack
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             _frexp (ARG)
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
         ___ftmul (ARG)
           ___altoft (ARG)
             ___ftpack
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           _frexp (ARG)
         ___lbtoft (ARG)
           ___ftpack
       ___lbtoft
         ___ftpack
     _memcpy
   _RunHub
   _Sequencer_StartTimer
     ___ftdiv
       ___altoft (ARG)
         ___ftpack
       ___ftmul (ARG)
         ___altoft (ARG)
           ___ftpack
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___lbtoft (ARG)
           ___ftpack
         _frexp (ARG)
       ___ftpack (ARG)
       ___lbtoft (ARG)
         ___ftpack
     ___fttol
       ___altoft (ARG)
         ___ftpack
       ___awtoft (ARG)
         ___ftpack
       ___ftdiv (ARG)
         ___altoft (ARG)
           ___ftpack
         ___ftmul (ARG)
           ___altoft (ARG)
             ___ftpack
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           _frexp (ARG)
         ___ftpack (ARG)
         ___lbtoft (ARG)
           ___ftpack
       ___ftmul (ARG)
         ___altoft (ARG)
           ___ftpack
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___lbtoft (ARG)
           ___ftpack
         _frexp (ARG)
       ___lbtoft (ARG)
         ___ftpack
   _Sequencer_StopTimer
   _WriteData
     _LatchOff
     _LatchOn
     _WriteChar
       _ClockDown
       _ClockUp
   _memcmp

 _Interrupt (ROOT)
   _Display_SwapBuffer
   _Hub_UpdateValues
     _Hub_DecodeSwitch
     _Hub_SetValue
       _Hub_DecodeSwitch (ARG)
     i2_Hub_ReadSwitch
       i2_ReadBitArray
         i2_ReadBit
           i2_ClockDown
           i2_ClockUp
       i2_memcpy
     i2_LatchOff
     i2_LatchOn
     i2_memcpy
   _Midi_Write
   _Sequencer_TimerEvent
   i2_Hub_CopyBuffer
     i2_memcpy
   i2_Midi_ResetBuffer
   i2_Sequencer_StopTimer
   i2_WriteData
     i2_LatchOff
     i2_LatchOn
     i2_WriteChar
       i2_ClockDown
       i2_ClockUp

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             7FF      0     288      21       31.7%
EEDATA             100      0       0       0        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0      D9       9       84.8%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0      A9       7       66.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     7F      9C       5       97.5%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     58      5E       1      100.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     27C      20        0.0%
DATA                 0      0     504       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.44 build -154322312 
Symbol Table                                                                                   Sun Oct 22 22:14:12 2017

                            main@LResult 00D2                              Load@LBuffer 00BA  
                           ___altoft@exp 0070                               LatchOn@AIO 0060  
                          ?_Hub_SetValue 0005                       __size_of_I2C_Start 000E  
                          ___altoft@sign 0071                       __size_of_I2C_Write 002C  
                     main@LChannelSwitch 00D8                                       _RW 007E3A  
                            __CFG_BOR$ON 000000                              __CFG_BORV$3 000000  
            __end_of_Sequencer_StopTimer 3248                  Persistant_Address@ARead 0070  
                           __CFG_CP0$OFF 000000             __end_of_Sequencer_StartTimer 2C3C  
                           __CFG_CP1$OFF 000000                             __CFG_CP2$OFF 000000  
                            LatchOff@AIO 0060                             __CFG_CP3$OFF 000000  
                           ___ftadd@exp1 009A                             ___ftadd@exp2 0099  
                           ___ftadd@sign 0098                                      l134 0CD0  
                                    l144 0D4E                                      l154 0DFC  
                                    l146 0D54                                      l147 0D5A  
                                    l148 0D60                                      l253 08F8  
                                    l149 0D66                                      l257 093A  
                                    l259 0940                                      l624 1B72  
                                    l617 19D8                                      l388 2C88  
                                    l396 2D1C                                      l583 17A8  
                                    l668 2A10                                      l975 12A6  
                                    l984 1ED0                                      l976 12B8  
                                    l986 1F18                                      _GIE 007F97  
                           __CFG_CPB$OFF 000000                                      _PEN 007E2A  
                           __CFG_CPD$OFF 000000                                      _SEN 007E28  
                                    _PSA 007EAB                                      _RX9 007D5E  
                                    _TX9 007D66                                      _Zip 19B0  
                        __end_of_I2C_Ack 3128                                      _exp 0E58  
                                    _log 18C4                                      _pow 1302  
               __end_of_Hub_UpdateValues 1DD6                                      wreg 000FE8  
                            i2_WriteChar 251C                              i2_WriteData 28BE  
                          _InitConnector 300C                             __CFG_LVP$OFF 000000  
                             ReadBit@AIO 006F                             ___ftdiv@cntr 0089  
                           ___ftdiv@sign 008E                                     ?_Zip 009E  
                           __CFG_WDT$OFF 000000                                     l1000 1B40  
                                   l1003 3134                                     l1310 0FF4  
                                   l1151 1434                                     l1320 1CFE  
                                   l1048 26F2                                     l1317 1C68  
                                   l4010 08B8                                     l3210 3126  
                                   l3230 2952                                     l4014 08BE  
                                   l4006 08AA                                     l3160 239A  
                                   l3304 1AB8                                     l3170 23DC  
                                   l3162 23A4                                     l3250 1216  
                                   l3138 29F8                                     l3172 23E6  
                                   l3164 23B8                                     l3500 2F5E  
                                   l3244 11F2                                     l3308 1AD8  
                                   l3228 2946                                     l3404 2802  
                                   l4052 09E6                                     l4028 08FC  
                                   l3342 2A68                                     l4118 24F6  
                                   l3422 2FDE                                     l3168 23CA  
                                   l3272 124E                                     l3352 2A9E  
                                   l3360 1DF8                                     l4048 0986  
                                   l4312 19BA                                     l3186 2402  
                                   l3274 1258                                     l3530 20CA  
                                   l3346 2A86                                     l3522 1C88  
                                   l3434 31D6                                     l3602 2FB0  
                                   l4402 28A8                                     l3452 1EB0  
                                   l3284 1284                                     l3276 1260  
                                   l3532 212C                                     l3380 1E52  
                                   l3620 305E                                     l3470 1EF4  
                                   l3286 128E                                     l3518 1C70  
                                   l4158 15CC                                     l3198 300A  
                                   l4502 2360                                     l4510 323A  
                                   l4326 19DC                                     l3296 12DC  
                                   l3392 1E7E                                     l3384 1E5A  
                                   l3376 1E42                                     l3544 2214  
                                   l4168 1610                                     l4248 1780  
                                   l3632 31E4                                     l4344 241A  
                                   l3386 1E66                                     l3554 222A  
                                   l3538 21E6                                     l3570 2D72  
                                   l3730 2034                                     l4514 3186  
                                   l3644 2C90                                     l3708 0FCC  
                                   l3660 18E0                                     l3900 26B2  
                                   l4612 2616                                     l3646 2C9C  
                                   l3558 2234                                     l3910 26E4  
                                   l3488 2F22                                     l3656 18D0  
                                   l4560 262C                                     l4392 2878  
                                   l4624 2ADC                                     l4800 0D3E  
                                   l3682 0E94                                     l3578 2D92  
                                   l3586 2DE8                                     l3738 2068  
                                   l3834 1B78                                     l4618 2AA4  
                                   l4626 2AE4                                     l4802 0D46  
                                   l4810 0D84                                     l3692 0EE2  
                                   l3676 0E6C                                     l3780 133E  
                                   l4492 233C                                     l4812 0D90  
                                   l3686 0EBA                                     l3790 13B2  
                                   l3774 132A                                     l3854 2EF0  
                                   l3870 2F12                                     l4830 0DF0  
                                   l4806 0D6C                                     l4814 0D94  
                                   l4752 0C92                                     l4744 0C7A  
                                   l3786 1390                                     l3866 2F0A  
                                   l3858 2EF6                                     l3954 215A  
                                   l4842 0E52                                     l4746 0C80  
                                   l4764 0CBC                                     ?_exp 00AC  
                                   ?_log 00A5                                     l3886 3080  
                                   l3878 306A                                     l4782 0CEE  
                                   l4784 0CF8                                     l3898 26A6  
                                   l3996 0854                                     l4796 0D22  
                                   ?_pow 00B5                                     _BRGH 007D62  
                                   _CREN 007D5C                                     _T0CS 007EAD  
                                   u3000 1266                                     _LATA 000F89  
                                   u3030 1294                                     _LATB 000F8A  
                                   _LATC 000F8B                                     u3210 1E6A  
                                   u3301 2B3C                                     u3311 1EA0  
                                   u3071 1AA8                                     u3151 1DE6  
                                   u3160 1DEE                                     u4200 168E  
                                   u4120 09E4                                     u4025 2E8E  
                                   u3170 1E16                                     u3410 1C7A  
                                   u4050 089E                                     u4026 2E90  
                                   u3331 1EC0                                     u3091 1AC8  
                                   u4300 1792                                     u2700 2A42  
                                   u3501 2DF2                                     u2701 2A3E  
                                   u4150 0A12                                     u3510 2E22  
                                   u2710 2A44                                     u3175 1E0E  
                                   u3255 2FBE                                     u4160 0A3A  
                                   u4144 09F6                                     u4080 08F4  
                                   u4145 09F2                                     u2730 2392  
                                   u4170 0A4E                                     u4090 0936  
                                   u3291 2B26                                     u2900 11E4  
                                   u3284 2B10                                     u2820 3120  
                                   u3285 2B0C                                     u5301 0E44  
                                   u4190 160C                                     u4280 1724  
                                   u5161 0CA6                                     u2770 23F0  
                                   u2930 1208                                     u2690 2A32  
                                   u4530 19D4                                     u5250 0DCA  
                                   u4275 16DC                                     u2835 3122  
                                   u4611 247E                                     _PEIE 007F96  
                                   u3900 1C3E                                     u4604 2456  
                                   u2861 11B6                                     u5317 2FFA  
                                   u4605 2452                                     u2871 11CA  
                                   u4295 1744                                     u5327 2A00  
                                   u4711 2860                                     u2960 1230  
                                   u3840 1388                                     u3920 2EFA  
                                   u4560 1A84                                     u4544 1A20  
                                   u4545 1A1C                                     u3594 2BC6  
                                   u4570 1A96                                     u4554 1A32  
                                   u3595 2BC2                                     u4555 1A2E  
                                   u4731 2886                                     _RCIE 007CED  
                                   _RCIF 007CF5                                     _RCEN 007E2B  
                                   u3861 2D2C                                     u4901 25D0  
                                   u4581 2424                                     u4741 28B2  
                                   u3960 26B6                                     u4840 235C  
                                   u3890 1C02                                     u3874 1BD4  
                                   u4850 2382                                     u4594 2444  
                                   u3875 1BD0                                     u4595 2440  
                                   u3884 1BE6                                     u3885 1BE2  
                                   _RCIP 007CFD                                     i2l80 1832  
                                   i2l84 1824                                     i2l94 1870  
                                   i2l87 1868                                     _SPEN 007D5F  
                                   _TXEN 007D65                                     _SYNC 007D64  
                                   _Load 22FC                                     __Hub 0100  
                                   Zip@i 00A6                                     Zip@j 00AA  
                          ??_InitDigiPot 00C6                            ?_ReadBitArray 0081  
                                   _main 0C6C                             ___ftpack@arg 0060  
                           ___ftpack@exp 0063                         __end_of_I2C_Init 22FC  
                       __end_of_I2C_Read 3060                         _Hub_DecodeSwitch 1002  
                                   fsr0h 000FEA                                     fsr1h 000FE2  
                                   fsr2h 000FDA                                     fsr0l 000FE9  
                                   indf1 000FE7                                     indf2 000FDF  
                                   fsr1l 000FE1                                     fsr2l 000FD9  
                                   btemp 005F                         __end_of_I2C_Wait 2A4A  
                                   exp@x 00AC                                     log@x 00A5  
                       __end_of_I2C_Stop 31E6           __size_ofi2_Sequencer_StopTimer 0008  
                                   pow@x 00B5                                     pow@y 00B8  
                       Midi_Init@LPeriod 0075                                     prodh 000FF4  
                                   prodl 000FF3            __end_ofi2_Sequencer_StopTimer 3250  
                                   start 000E                            __CFG_IESO$OFF 000000  
                        __end_of_ClockUp 31A0                            __CFG_MCLRE$ON 000000  
                           ___param_bank 000000                             ___ftmul@sign 007C  
                        __end_of_LatchOn 31AE                           ??_Hub_SetValue 000B  
                        __end_of_InitApp 27E6                          __end_of_ReadBit 2B4C  
                        __end_of_InitPin 2BEE                              InitApp@test 00D1  
                           ___fttol@exp1 009D                                    ??_Zip 009F  
                                  ??_exp 00AF                                    ??_log 00A8  
                           ___fttol@lval 0099                                    ??_pow 00BB  
                            ReadBit@LBit 0080                            __CFG_PLLDIV$5 000000  
                                  ?_Load 0001                           __CFG_CCP2MX$ON 000000  
                                  ?_main 0001                                    _ACKEN 007E2C  
                                  _ACKDT 007E2D                        i2ReadBitArray@AIO 0023  
                        __end_of___lbdiv 2F16                                    _EEADR 000FA9  
                        __end_of___ftadd 1302                          __end_of___lbmod 3088  
                        __end_of___ftdiv 1F4A                          __end_of___ftneg 3142  
                        __end_of___lldiv 2704                          __end_of___ftmul 1B6E  
                        __end_of___ftsub 2F4C                          __end_of___fttol 1E90  
                                  _LATB4 007C54                                    _T0PS0 007EA8  
                                  _T0PS1 007EA9                                    _T0PS2 007EAA  
                            InitPin@APin 0060                                    i2l325 1D62  
                        _Persistant_Init 315A                                    _RCREG 000FAE  
                                  _TMR1H 000FCF                                    _TMR1L 000FCE  
                                  _SPBRG 000FAF                                    _PORTB 000F81  
                  main@LChannelSwitchOld 00D6                            __CFG_USBDIV$2 000000  
            __size_of_Persistant_Address 0030                         _Midi_ResetBuffer 1FFA  
                                  Load@i 00C7                      _ConfigureOscillator 3250  
                          __CFG_PWRT$OFF 000000                         _InitDigiPot$2165 00CD  
                          __CFG_WRT0$OFF 000000                            __CFG_WRT1$OFF 000000  
                          __CFG_WRT2$OFF 000000                            __CFG_WRT3$OFF 000000  
                           ___lltoft@exp 0070     Persistant_WriteInternalMemory@LState 0065  
                             i2memcpy@d1 0001                           __CFG_EBTR0$OFF 000000  
                         __CFG_FCMEN$OFF 000000                           __CFG_EBTR1$OFF 000000  
                             i2memcpy@s1 0003                           __CFG_EBTR2$OFF 000000  
                         __CFG_EBTR3$OFF 000000                                    _UnZip 1B6E  
                          __CFG_WRTB$OFF 000000                           ?_InitConnector 0064  
                          __CFG_WRTC$OFF 000000                            __CFG_WRTD$OFF 000000  
                         __CFG_EBTRB$OFF 000000                            ___awtoft@sign 006B  
                     __size_ofi2_ClockUp 000E                                    _floor 1C40  
                                  _ldexp 21D6                                    _frexp 27E6  
                     __size_ofi2_LatchOn 000E                         ??i2_ReadBitArray 0032  
                          ___ftpack@sign 0064                       __size_ofi2_ReadBit 0052  
                      __end_of_I2C_Start 31D8                              ?i2_LatchOff 0001  
                      __end_of_I2C_Write 300C                                    tablat 000FF5  
                         ??_ReadBitArray 0091                                    pow@yi 00C2  
                                  plusw0 000FEB                                    plusw1 000FE3  
                                  plusw2 000FDB                                    status 000FD8  
                                  wtemp6 0060                          ___lbdiv@divisor 0060  
                       __end_ofi2_memcpy 2DE4                          ___lbdiv@counter 0062  
                           i2WriteChar@i 0023                             i2WriteData@i 0037  
                         __CFG_PBADEN$ON 000000                        Display_Init@i_638 00CE  
                            exp@exponent 00B2                     ?_ConfigureOscillator 0001  
                             _Midi_Write 0A58                              ldexp@newexp 00A8  
                        __initialization 2704                             __end_of_Load 2386  
                            log@exponent 00A8                      __end_of_InitDigiPot 1570  
                           __end_of_main 0E58                         __end_of_LatchOff 31BC  
                       __end_of_Hub_Init 251C                                ??_I2C_Ack 0065  
                                 ??_Load 00BA                  Hub_ReadSwitch@LBitArray 0094  
             __end_ofi2_Midi_ResetBuffer 1FFA                         __end_of_PauseHub 3240  
                                 ??_main 00D2                            ___fttol@sign1 0098  
                         WriteChar@AChar 0081                           WriteData@AData 0084  
                          __activetblptr 000002                       __size_of_ClockDown 000E  
                         WriteData@ASize 0086                     _Sequencer_TimerEvent 3142  
                      ?i2_Hub_CopyBuffer 0001                                   ?_UnZip 009E  
                ??_Persistant_LoadBuffer 00AA                     __end_of_Display_Init 1690  
                             __MidiInput 041D                                   _ADCON1 000FC1  
                     ??i2_Hub_CopyBuffer 000C                                   ?_floor 009E  
                                 ?_ldexp 00A5                                   ?_frexp 0060  
                       __end_of___altoft 298C                                   _EEDATA 000FA8  
                                 _EECON2 000FA7                                   _T08BIT 007EAE  
                       __end_of___awtoft 2F82                         __end_of___ftpack 2410  
                       __end_of___lbtoft 30AE                         __end_of___lltoft 2CD6  
                                 _T1SYNC 007E6A                                   i2l4300 29DE  
                                 i2l4434 1D8E                                   i2l4418 1D56  
                                 i2l4450 0AE2                                   i2l4284 11A4  
                                 i2l4268 10D4                                   i2l4452 0B14  
                                 i2l4460 0B6C                                   i2l4462 0B7C  
                                 i2l4366 2524                                   i2l4702 182C  
                                 i2l4296 29C4                                   i2l3920 2E28  
                                 i2l4448 0AB2                                   i2l4384 314C  
                                 i2l4720 1862                                   i2l4466 0BCE  
                                 i2l4458 0B44                                   i2l4732 188E  
                                 i2l4662 1FC0                                   i2l4654 1F84  
                                 i2l4638 28E0                                   i2l4734 189C  
                                 i2l3928 2DB4                                   i2l3936 2DD4  
                                 i2l4672 1FF6                                   i2l4648 2910  
                                 i2l4666 1FC8                                   i2l4658 1F8C  
                                 i2l4690 1810                                   i2l4692 1812  
                                 i2l4698 1820                       __size_of_Midi_Init 011A  
                     __size_of_Midi_Read 007C                                   _TMR0IE 007F95  
                                 _TMR0IF 007F92                                   _TMR1IE 007CE8  
                                 _TMR1IF 007CF0                                   _TMR1CS 007E69  
                              ??_ClockUp 006F                                   _TMR0ON 007EAF  
                                 _TMR1ON 007E68                                   _SSPADD 000FC8  
                                 _TRISA2 007C92                                   _TRISB0 007C98  
                                 _TRISA3 007C93                                   _TRISB1 007C99  
                                 _TRISB2 007C9A                                   _TRISA4 007C94  
                                 _TRISA5 007C95                                   _TRISB3 007C9B  
                                 _TRISC2 007CA2                                   _TRISB4 007C9C  
                                 _TRISC6 007CA6                                   _TRISC7 007CA7  
                                 _SSPBUF 000FC9                     _Sequencer_StartTimer 2BEE  
                              ??_LatchOn 006F            Display_ProcessData@iDataIndex 0076  
                              ??_InitApp 00D1                    ??_ConfigureOscillator 0060  
                              ??_ReadBit 007E                                ??_InitPin 0062  
                     Midi_Init@LBaudRate 0071                           __CFG_XINST$OFF 000000  
                                 UnZip@i 00A4                                   UnZip@j 00A6  
                                 __Timer 0059                       __size_of_Interrupt 18BC  
                            i2memcpy@tmp 000B                         ??_Hub_CopyBuffer 006B  
                                 _RunHub 3180                                   ___ftge 2A4A  
                           ?i2_ClockDown 0001                        __end_ofi2_ClockUp 321E  
                      ?i2_Hub_ReadSwitch 0001                                ??___lbdiv 0061  
                              ??___ftadd 0095                           __CFG_STVREN$ON 000000  
                              ??___lbmod 0065                                ??___ftdiv 0086  
                __end_of_Persistant_Init 316E                                ??___ftneg 0063  
                              ??___lldiv 0068                                ??___ftmul 0078  
                              ??___ftsub 00A1                                ??___fttol 0093  
          Persistant_LoadBuffer@LChannel 00B8                        __end_ofi2_LatchOn 3202  
                      __end_ofi2_ReadBit 2B9E                                   _memcmp 2AA2  
  Persistant_ReadInternalMemory@AAddress 0060                                   _memcpy 2D60  
                ??_Persistant_SaveBuffer 00B8                       ??i2_Hub_ReadSwitch 0035  
                                 clear_0 272C                                   clear_1 273E  
                                 clear_2 274A                                   clear_3 2756  
                    __size_ofi2_LatchOff 000E                 Hub_SetValue@ASourceValue 0005  
                                 floor@i 00A1                                   floor@x 009E  
                  ___ftmul@f3_as_product 007D                    ?_Sequencer_TimerEvent 0001  
            __end_of_Display_ProcessData 0A58                                ?_I2C_Init 009E  
                              ?_I2C_Read 0001                          ??_InitConnector 0066  
                              ?_I2C_Wait 0001                                ?_I2C_Stop 0001  
                           __mediumconst 0000                                   tblptrh 000FF7  
                                 tblptrl 000FF6                                   tblptru 000FF8  
                   __end_of_Hub_SetValue 29EC                         ??_Hub_ReadSwitch 0094  
                       ___lbdiv@dividend 0061                         __end_ofexp@coeff 081F  
                       __end_oflog@coeff 083A                          ___lbmod@divisor 0064  
                             __accesstop 0060                  __end_of__initialization 2768  
                             ___altoft@c 0068                          ___lbmod@counter 0066  
                  ?_Sequencer_StartTimer 009E                               ___ftadd@f1 008F  
                             ___ftadd@f2 0092                              _InitDigiPot 1442  
                     __size_of_WriteChar 0086                       __size_of_WriteData 0068  
                             ___ftge@ff1 0060                               ___ftge@ff2 0063  
                           eval_poly@res 00A2                            ___rparam_used 000001  
                      __end_of_ClockDown 31F4              Persistant_ControlByte@ARead 006A  
                             ___ftdiv@f1 0080                               ___ftdiv@f2 0083  
                             ___ftdiv@f3 008A                               ___ftneg@f1 0060  
                            ?_Midi_Write 0001                               ___awtoft@c 0068  
                             ___lbtoft@c 006B                               ___ftmul@f1 0072  
                             ___ftmul@f2 0075                               ___ftsub@f1 009B  
                             ___ftsub@f2 009E                               ___fttol@f1 008F  
                         __pcstackCOMRAM 0001                            __end_of_UnZip 1C40  
                           __pidataBANK0 322C                               ___lltoft@c 0068  
                          __end_of_floor 1D0C                            __end_of_ldexp 226A  
                          __end_of_frexp 2856                         ___lbdiv@quotient 0063  
                      __end_of_Midi_Init 17AA                        __end_of_Midi_Read 2618  
                  InitDigiPot@LTickCount 00C6                     __end_of_ReadBitArray 2E24  
                           WriteChar@AIO 006F                             WriteData@AIO 0087  
               __end_of_Hub_DecodeSwitch 11A6                               ??_I2C_Init 00A2  
                             ??_I2C_Read 0066                               ??_I2C_Wait 0060  
                Display_SwapBuffer@LSwap 0001                               ??_I2C_Stop 0065  
                              ?i2_memcpy 0001     Persistant_ReadExternalMemory@LResult 0073  
                  InitDigiPot@LPrescaler 00D0                        ?_Hub_UpdateValues 0001  
                                ??_UnZip 009F             Persistant_LoadBuffer@ABuffer 00A8  
            __size_of_Display_SwapBuffer 0020                             ?i2_WriteChar 0010  
                           ?i2_WriteData 0025                        __end_of_Interrupt 18C4  
             Persistant_Address@AAddress 006E                                  ??_floor 00A1  
                                ??_ldexp 00AA                                  ??_frexp 0064  
                     ??_Hub_UpdateValues 004D                           I2C_Init@LRatio 00A2  
                              ?_LatchOff 0060                               __pbssBANK0 00DF  
                             __pbssBANK1 0100                               __pbssBANK2 0200  
                              ?_Hub_Init 0001                       __size_of_eval_poly 009C  
               ??_Persistant_ControlByte 006B                               WriteChar@i 0082  
                             WriteData@i 0096                          Midi_Write@AData 0007  
                              ?_PauseHub 0001                 __end_of_Midi_ResetBuffer 20A4  
               __size_of_Sequencer_Start 0012                                  ?_RunHub 0001  
                                ?___ftge 0060                              UnZip@LIndex 00A3  
                            UnZip@LValue 00A2                         ?_Persistant_Init 0001  
 Persistant_WriteInternalMemory@AAddress 0062                                  _I2C_Ack 310C  
                            __MidiOutput 02D9                                  ?_memcmp 0060  
                              ?___altoft 0068                                  ?_memcpy 0060  
                    i2ReadBitArray@AData 0022                                ?___awtoft 0068  
                              ?___ftpack 0060                                ?___lbtoft 0068  
                 ??_Sequencer_TimerEvent 0001                               I2C_Write@b 0067  
                              ?___lltoft 0068                            ReadBitArray@i 0092  
                                _T1CKPS0 007E6C                    __size_of_Display_Init 0120  
                      __end_of_WriteChar 2496                        __end_of_WriteData 28BE  
                                _T1OSCEN 007E6B                               ??i2_memcpy 0007  
                    __size_of_Midi_Write 0214             __size_of_Sequencer_StopTimer 0008  
       ??_Persistant_WriteInternalMemory 0065          ?_Persistant_WriteInternalMemory 0062  
                                _SSPCON1 000FC6                                  _SSPCON2 000FC5  
                                _SSPSTAT 000FC7                             ??i2_LatchOff 0010  
                             ??_LatchOff 006F                               ??_Hub_Init 00AC  
                 ??_Sequencer_StartTimer 00A2                  Hub_DecodeSwitch@AIndex1 0004  
                Hub_DecodeSwitch@AIndex2 0001                          __CFG_VREGEN$OFF 000000  
                                _ClockUp 3190                                  _LatchOn 31A0  
                              _I2C_Start 31CA                                  _InitApp 2776  
                             ??_PauseHub 0060                                  _ReadBit 2AF8  
                                _InitPin 2B9E                                _I2C_Write 2FE0  
                                __Digits 00F2                                  __Config 019D  
                                __Hparam 0000                      i2Midi_ResetBuffer@i 0006  
                    i2Midi_ResetBuffer@j 0005                                  __Lparam 0000  
                                Zip@AZip 009E                Persistant_SaveBuffer@LZip 00BC  
                                __Saving 00DF                    i2_Sequencer_StopTimer 3248  
                           _Display_Init 1570                          __size_of_RunHub 0010  
                        __size_of___ftge 0058                                  ___lbdiv 2EE0  
                                ___ftadd 11A6                                  ___lbmod 3060  
                                ___ftdiv 1E90                                  ___ftneg 3128  
                                ___lldiv 268E                                  ___ftmul 1A98  
                                ___ftsub 2F16                                  ___fttol 1DD6  
                           __psmallconst 0800                          ReadBitArray@AIO 0082  
                             ??___altoft 006C                     __size_ofi2_ClockDown 000E  
                                __pcinit 2704      Persistant_WriteExternalMemory@AData 0076  
                        __size_of_memcmp 0056                          __size_of_memcpy 0042  
                             ??___awtoft 006B                               ??___ftpack 0065  
                             ??___lbtoft 006B                        __end_of_eval_poly 2140  
                                __ramtop 0800               __end_of_Persistant_Address 2FB2  
                             ??___lltoft 006C                                  __ptext0 0C6C  
                                __ptext1 2AA2                                  __ptext2 2856  
                                __ptext3 2410                                  __ptext4 31A0  
                                __ptext5 31AE                                  __ptext6 3240  
                                __ptext7 2BEE                                  __ptext8 3180  
                                __ptext9 2618                   Persistant_LoadBuffer@i 00B9  
                     __end_ofi2_LatchOff 3210                             __size_of_Zip 00E8  
                  __size_of_Hub_SetValue 0060                             __size_of_exp 01AA  
                           __size_of_log 00EC                             __size_of_pow 0140  
         __size_of_Persistant_LoadBuffer 0096                           __pintcode_body 17AA  
          __end_of_Persistant_LoadBuffer 21D6                     end_of_initialization 2768  
                     i2_Midi_ResetBuffer 1F4A                                  exp@sign 00B4  
                                memcmp@n 0064                                  memcpy@d 0066  
                                memcpy@n 0064                                  memcpy@s 0068  
                          __Lmediumconst 0000                  Display_ProcessData@LBit 0075  
                                int_func 17AA          __size_of_Persistant_ControlByte 002E  
                             ?_I2C_Start 0001                               ?_I2C_Write 0001  
                    ?i2_Midi_ResetBuffer 0001                __size_ofi2_Hub_CopyBuffer 001E  
                        ___lldiv@divisor 0064                                  pow@sign 00C1  
                        ___lldiv@counter 006C                                _RCSTAbits 000FAB  
                                postdec1 000FE5                                  postdec2 000FDD  
                  __size_of_ReadBitArray 0040                                  postinc0 000FEE  
                                postinc1 000FE6                                  postinc2 000FDE  
                           _Hub_SetValue 298C                        ??_Sequencer_Start 0060  
                              i2_ClockUp 3210           __size_of_Persistant_SaveBuffer 0076  
          __end_of_Persistant_SaveBuffer 268E                                i2_LatchOn 31F4  
                              i2_ReadBit 2B4C                       Hub_SetValue@LValue 000C  
                   ??i2_Midi_ResetBuffer 0003                         ___lbmod@dividend 0065  
                         i2WriteChar@AIO 0010                           i2WriteData@AIO 0028  
                             main@LValue 00D9                __size_ofi2_Hub_ReadSwitch 003E  
                      Hub_UpdateValues@i 004D                        __size_of_I2C_Init 0092  
                      __size_of_I2C_Read 0028                        __size_of_I2C_Wait 005E  
                      __size_of_I2C_Stop 000E                                Load@i_420 00C9  
       ??_Persistant_WriteExternalMemory 0077          ?_Persistant_WriteExternalMemory 0074  
                              Hub_Init@i 00AC              __end_of_ConfigureOscillator 3252  
                   __size_ofi2_WriteChar 0080                     __size_ofi2_WriteData 0068  
                         Midi_Read@AData 0060                              ___lbmod@rem 0067  
              i2Hub_ReadSwitch@LBitArray 0035                             ?_InitDigiPot 0001  
                            ___ftdiv@exp 008D                             _ReadBitArray 2DE4  
                           ??_Midi_Write 0003                   ?i2_Sequencer_StopTimer 0001  
                __size_ofi2_ReadBitArray 0040                              ___ftmul@exp 007B  
                     InitDigiPot@LPeriod 00CA          ??_Persistant_ReadInternalMemory 0062  
                              _ClockDown 31E6                           __end_of_RunHub 3190  
                         __end_of___ftge 2AA2    Persistant_ReadExternalMemory@AAddress 0071  
                              i2memcpy@d 0007                                i2memcpy@n 0005  
                              i2memcpy@s 0009                               ?i2_ClockUp 0001  
                 _Persistant_ControlByte 2FB2                           __end_of_memcmp 2AF8  
                         __end_of_memcpy 2DA2                               ?i2_LatchOn 0001  
                             floor@expon 00A4                               ?i2_ReadBit 0010  
                      ?_Hub_DecodeSwitch 0001                                _Midi_Init 1690  
                              _Midi_Read 259C                      start_initialization 2704  
                             eval_poly@d 009E                               eval_poly@n 009F  
                             eval_poly@x 009B                       ??_Hub_DecodeSwitch 0002  
                             ldexp@value 00A5                    __end_of_InitConnector 3038  
                            __end_of_Zip 1A98                              __end_of_exp 1002  
                            __end_of_log 19B0                              __end_of_pow 1442  
                     __end_of_Midi_Write 0C6C                        __size_ofi2_memcpy 0042  
           __size_of_Display_ProcessData 021C            i2Midi_ResetBuffer@AMidiBuffer 0001  
                              _Interrupt 0008                               frexp@value 0060  
                              UnZip@AZip 009E                        __size_of_LatchOff 000E  
                      __size_of_Hub_Init 0086                              ??_I2C_Start 0065  
                            ??_I2C_Write 0065                                __Modified 00E0  
              __size_of_Hub_UpdateValues 00CA           Persistant_ControlByte@AAddress 0068  
                      ?_Midi_ResetBuffer 0060                                Zip@LIndex 00A5  
                              Zip@LBytes 00A4                        __size_of_PauseHub 000A  
                               ??_RunHub 0060                   Persistant_SaveBuffer@i 00C6  
                    _Sequencer_StopTimer 3240                                 ??___ftge 0066  
                             ?_ClockDown 0060                                Zip@i_1425 00A8  
                     ??_Midi_ResetBuffer 0062                              __pdataBANK0 00F2  
                       __CFG_LPT1OSC$OFF 000000                                 ?_I2C_Ack 0001  
                               ??_memcmp 0066                                 ??_memcpy 0066  
                            I2C_Ack@AAck 0065                        __size_of___altoft 0066  
                          i2LatchOff@AIO 0001               __end_of_Display_SwapBuffer 30EE  
                      __size_of___awtoft 0036                        __size_of___ftpack 008A  
                __size_of_Hub_CopyBuffer 0020                        __size_of___lbtoft 0026  
                            __pbssBIGRAM 02D9                        __size_of___lltoft 004C  
                             ?_Midi_Init 0001                               ?_Midi_Read 0060  
                            __pbssCOMRAM 0059                            __pcstackBANK0 0060  
                   ?_Sequencer_StopTimer 0001                                _WriteChar 2410  
                              _WriteData 2856                        ReadBitArray@AData 0081  
                             ?_Interrupt 0001                                 ?_ClockUp 0060  
                               ?_LatchOn 0060                            I2C_Read@LData 0066  
                               ?_InitApp 0001                                 ?_ReadBit 006F  
                               ?_InitPin 0060                         i2_Hub_CopyBuffer 30EE  
 __end_of_Persistant_WriteInternalMemory 2EA2  __size_of_Persistant_WriteInternalMemory 003E  
         _Persistant_WriteInternalMemory 2E64                  __size_of_Hub_ReadSwitch 0042  
                              __pintcode 0008          ??_Persistant_ReadExternalMemory 0073  
                               ?___lbdiv 0060                                 ?___ftadd 008F  
                               ?___lbmod 0064                                 ?___ftdiv 0080  
                               ?___ftneg 0060                                 ?___lldiv 0060  
                               ?___ftmul 0072                                 ?___ftsub 009B  
                               ?___fttol 008F   Persistant_WriteExternalMemory@AAddress 0074  
                            ??i2_ClockUp 0010    __end_of_Persistant_ReadInternalMemory 31CA  
 __size_of_Persistant_ReadInternalMemory 000E            _Persistant_ReadInternalMemory 31BC  
                          i2ReadBit@LBit 0021                              ??i2_LatchOn 0010  
                            ??i2_ReadBit 001F                              __smallconst 0800  
          __size_of_Sequencer_TimerEvent 0018                                 _I2C_Init 226A  
                               _I2C_Read 3038                                 _I2C_Wait 29EC  
                              _eval_poly 20A4                                 _I2C_Stop 31D8  
               __size_of_Persistant_Init 0014                        Midi_ResetBuffer@i 0065  
                      Midi_ResetBuffer@j 0064                    ??_Sequencer_StopTimer 0060  
                         __size_of_UnZip 00D2                               ?_WriteChar 006F  
                             ?_WriteData 0084                         i2_Hub_ReadSwitch 2EA2  
                         __size_of_floor 00CC                           __size_of_ldexp 0094  
                         __size_of_frexp 0070                       _Persistant_Address 2F82  
          __size_of_Sequencer_StartTimer 004E              Midi_ResetBuffer@AMidiBuffer 0060  
                        _Sequencer_Start 316E                                 _PIE1bits 000F9D  
                    ?_Persistant_Address 006E                     __size_of_InitDigiPot 012E  
                         i2_ReadBitArray 2E24                                 i2u501_41 17F2  
                               i2u511_40 187C                                 i2u512_40 18A0  
                               i2u433_40 1062                                 _PIR1bits 000F9E  
                               i2u443_40 1132                                 i2u435_40 106C  
                               i2u434_48 1064                                 i2u371_44 2B64  
                               i2u371_45 2B60                                 i2u372_41 2B78  
                               i2u445_40 113C                                 i2u444_48 1134  
                               i2u373_41 2B8E                                 i2u438_40 10CA  
                               i2u463_41 2EB0                                 i2u448_40 119A  
                               i2u439_48 10CC                                 i2u464_41 252E  
                               i2u465_44 254E                                 i2u465_45 254A  
                               i2u449_48 119C                                 i2u466_44 255E  
                               i2u466_45 255A                                 i2u467_41 2584  
                               i2u476_41 1D34                                 i2u477_41 1D4A  
                               i2u398_41 2E32                                 i2u494_41 28C8  
                               i2u399_40 2E62                                 i2u479_40 1DCC  
                               i2u496_41 28EE                             ClockDown@AIO 0060  
                               i2u497_41 291A                             i2ClockUp@AIO 0001  
                          ??i2_ClockDown 0010                         __CFG_WDTPS$32768 000000  
                            ??_ClockDown 006F                   Hub_SetValue@AIncrement 000A  
                       I2C_Wait@LTimeOut 0062      Persistant_WriteInternalMemory@AData 0064  
                       __size_of_I2C_Ack 001C                     ??_Persistant_Address 0071  
                            ??_Midi_Init 006D                               ?_eval_poly 009B  
                            ??_Midi_Read 0063                                 i2_memcpy 2DA2  
                         Interrupt@LData 0058                          i2ReadBitArray@i 0033  
                              copy_data0 2718                    Midi_Write@AMidiBuffer 0001  
                               _LatchOff 31AE                                 _Hub_Init 2496  
                            ??_Interrupt 004F                                 __DigiPot 00E1  
                ??i2_Sequencer_StopTimer 0001                    _Persistant_LoadBuffer 2140  
                 __end_ofi2_ReadBitArray 2E64                         __size_of_ClockUp 0010  
                               __Display 0200                                frexp@eptr 0063  
                             _EECON1bits 000FA6                                 _PauseHub 3236  
                       __size_of_LatchOn 000E               Display_ProcessData@ALoaded 006A  
                       __size_of_InitApp 0070                         _Hub_UpdateValues 1D0C  
                               __Hrparam 0000                         __size_of_ReadBit 0054  
                       __size_of_InitPin 0050               Display_ProcessData@AValues 0068  
                              memcpy@tmp 006A                                 __Lrparam 0000  
             Display_ProcessData@APushed 006B   __end_of_Persistant_WriteExternalMemory 2D1E  
__size_of_Persistant_WriteExternalMemory 0048           _Persistant_WriteExternalMemory 2CD6  
                   Display_ProcessData@i 007B                     Display_ProcessData@j 007F  
                   Display_ProcessData@k 0077                  ?_Persistant_ControlByte 0068  
                           i2LatchOn@AIO 0001                      _Display_ProcessData 083C  
                       __size_of___lbdiv 0036                         __size_of___ftadd 015C  
                       __size_of___lbmod 0028                         __size_of___ftdiv 00BA  
                       __size_of___ftneg 001A                         __size_of___lldiv 0076  
                               ___altoft 2926                         __size_of___ftmul 00D6  
                       __size_of___ftsub 0036                         __size_of___fttol 00BA  
                               ___awtoft 2F4C                                 ___ftpack 2386  
                               ___lbtoft 3088                                 ___lltoft 2C8A  
  __end_of_Persistant_ReadExternalMemory 2C8A   __size_of_Persistant_ReadExternalMemory 004E  
          _Persistant_ReadExternalMemory 2C3C                      __end_ofi2_ClockDown 322C  
                         _Hub_CopyBuffer 30AE                       I2C_Init@AFrequency 009E  
                               _exp$2168 00AF              __size_ofi2_Midi_ResetBuffer 00B0  
                  _Persistant_SaveBuffer 2618                                 _main$441 00D4  
         ?_Persistant_ReadInternalMemory 0060                            ??i2_WriteChar 001F  
                          ??i2_WriteData 0037                              ??_WriteChar 007E  
                            ??_WriteData 0096                                 __ptext10 19B0  
                               __ptext11 3236                                 __ptext20 1B6E  
                               __ptext12 259C                                 __ptext21 2C3C  
                               __ptext13 22FC                                 __ptext30 315A  
                               __ptext22 2F82                                 __ptext14 2E64  
                               __ptext31 226A                                 __ptext23 2FB2  
                               __ptext15 31BC                                 __ptext40 2AF8  
                               __ptext32 1690                                 __ptext24 2FE0  
                               __ptext16 2776                                 __ptext41 3190  
                               __ptext33 268E                                 __ptext25 31CA  
                               __ptext17 316E                                 __ptext50 18C4  
                               __ptext42 31E6                                 __ptext34 1FFA  
                               __ptext26 31D8                                 __ptext18 2CD6  
                               __ptext51 0E58                                 __ptext43 30AE  
                               __ptext35 1442                                 __ptext27 3038  
                               __ptext19 2140                                 __ptext60 2F16  
                               __ptext52 21D6                                 __ptext44 2D60  
                               __ptext36 3088                                 __ptext28 310C  
                               __ptext61 11A6                                 __ptext53 1C40  
                               __ptext45 083C                                 __ptext37 2496  
                               __ptext29 29EC                                 __ptext62 3128  
                               __ptext54 27E6                                 __ptext46 3060  
                               __ptext38 2D1E                                 __ptext71 28BE  
                               __ptext63 1E90                                 __ptext55 1DD6  
                               __ptext47 2EE0                                 __ptext39 2DE4  
                               __ptext80 3202                                 __ptext72 251C  
                               __ptext64 2F4C                                 __ptext56 2A4A  
                               __ptext48 1570                                 __ptext81 2EA2  
                               __ptext73 3248                                 __ptext65 2C8A  
                               __ptext57 2926                                 __ptext49 1302  
                               __ptext82 2DA2                                 __ptext74 1F4A  
                               __ptext66 2386                                 __ptext58 20A4  
                               __ptext83 2E24                                 __ptext75 30EE  
                               __ptext67 300C                                 __ptext59 1A98  
                               __ptext84 2B4C                                 __ptext76 3142  
                               __ptext68 2B9E                                 __ptext85 3210  
                               __ptext77 0A58                                 __ptext69 3250  
                               __ptext86 321E                                 __ptext78 1D0C  
                               __ptext87 298C                                 __ptext79 31F4  
                               __ptext88 1002                                 __ptext89 30CE  
                   ?_Display_ProcessData 0068                             i2ReadBit@AIO 0010  
                __end_of_Sequencer_Start 3180                                 _pow$2166 00BB  
                               _pow$2167 00BE                        ??_Persistant_Init 00A5  
                          __size_of_Load 008A                     main@LEncSwitchPushed 00D7  
                          __size_of_main 01EC                __size_of_Hub_DecodeSwitch 01A4  
                        ?i2_ReadBitArray 0022             __size_of_ConfigureOscillator 0002  
                         _Hub_ReadSwitch 2D1E           __end_of_Persistant_ControlByte 2FE0  
                  Hub_SetValue@AMaxValue 0008                    Hub_SetValue@AMinValue 0007  
                               int$flags 005F                          I2C_Wait@LResult 0064  
                InitConnector@AConnector 0064                   __end_of_Hub_CopyBuffer 30CE  
                          Display_Init@i 00CC                        _Display_Init$2163 00C6  
                      _Display_Init$2164 00C9                    __CFG_CPUDIV$OSC1_PLL2 000000  
                               exp@coeff 0801                                 log@coeff 081F  
                             _INTCONbits 000FF2                 __end_ofi2_Hub_CopyBuffer 310C  
                            ??_eval_poly 00A1                __size_of_Midi_ResetBuffer 00AA  
                               memcmp@s1 0060                                 memcmp@s2 0062  
                               memcpy@d1 0060                                 memcpy@s1 0062  
               Display_ProcessData@LData 0074                    ??_Display_ProcessData 006C  
               Display_ProcessData@i_652 0081                 Display_ProcessData@i_646 007D  
               Display_ProcessData@i_648 0079                                 intlevel2 0000  
                 ?_Persistant_LoadBuffer 00A8                Sequencer_StartTimer@ALoop 00A1  
              Sequencer_StartTimer@ATime 009E                       _Display_SwapBuffer 30CE  
                    __end_ofi2_WriteChar 259C                      __end_ofi2_WriteData 2926  
                       ___lldiv@dividend 0060                   __end_of_Hub_ReadSwitch 2D60  
                             ClockUp@AIO 0060                      ?_Display_SwapBuffer 0001  
                          ?_Display_Init 0001                 __end_ofi2_Hub_ReadSwitch 2EE0  
                            i2_ClockDown 321E                   __size_of_InitConnector 002C  
                         i2ClockDown@AIO 0001                Persistant_LoadBuffer@LZip 00AE  
           Persistant_SaveBuffer@ABuffer 00AC                          ?_Hub_CopyBuffer 0001  
       Display_ProcessData@ADigitalValue 0073                   ?_Persistant_SaveBuffer 00AC  
                       ___lldiv@quotient 0068                     Midi_Read@AMidiBuffer 0061  
                   ??_Display_SwapBuffer 0001             Persistant_SaveBuffer@LResult 00BB  
         ?_Persistant_ReadExternalMemory 0071                         ?_Sequencer_Start 0001  
                     __CFG_FOSC$HSPLL_HS 000000                               i2_LatchOff 3202  
                           Load@AChannel 00C6                            main@LMidiData 00DA  
           __end_of_Sequencer_TimerEvent 315A                          ?_Hub_ReadSwitch 0001  
                       i2WriteChar@AChar 0022                         i2WriteData@AData 0025  
                       i2WriteData@ASize 0027                           ??_Display_Init 00C6  
